[{"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}, {"name": "<programs/qcal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qcal.nix"}, {"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "{ }", "description": "List of calendars.", "example": "", "loc": ["accounts", "calendar", "accounts"], "readOnly": false, "title": "accounts.calendar.accounts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>List of calendars.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "[ ]", "description": "Email addresses to be associated with this account. Used to check the\nparticipation status (\"PARTSTAT\"), refer to khal documentation.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "addresses"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.addresses", "type": "list of string", "descriptionHTML": "<p>Email addresses to be associated with this account. Used to check the\nparticipation status (\"PARTSTAT\"), refer to khal documentation.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Color in which events in this calendar are displayed.\nFor instance 'light green' or an RGB color '#ff0000'", "example": "\"light green\"", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "color"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.color", "type": "null or string", "descriptionHTML": "<p>Color in which events in this calendar are displayed.\nFor instance 'light green' or an RGB color '#ff0000'</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "false", "description": "Whether to enable khal access.", "example": "true", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "enable"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable khal access.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "\"*\"", "description": "The glob expansion to be searched for events or birthdays when\ntype is set to discover.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "glob"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.glob", "type": "string", "descriptionHTML": "<p>The glob expansion to be searched for events or birthdays when\ntype is set to discover.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "10", "description": "Priority of a calendar used for coloring (calendar with highest priority is preferred).", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "priority"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.priority", "type": "signed integer", "descriptionHTML": "<p>Priority of a calendar used for coloring (calendar with highest priority is preferred).</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "false", "description": "Keep khal from making any changes to this account.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "readOnly"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.readOnly", "type": "boolean", "descriptionHTML": "<p>Keep khal from making any changes to this account.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "\"calendar\"", "description": "Either a single calendar (calendar which is the default) or a directory with multiple calendars (discover).", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "khal", "type"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.khal.type", "type": "one of \"calendar\", \"discover\"", "descriptionHTML": "<p>Either a single calendar (calendar which is the default) or a directory with multiple calendars (discover).</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "{ }", "description": "Local configuration for the calendar.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "local"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.local", "type": "submodule", "descriptionHTML": "<p>Local configuration for the calendar.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "File encoding for items, both content and file name.\nDefaults to UTF-8.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "local", "encoding"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.local.encoding", "type": "null or string", "descriptionHTML": "<p>File encoding for items, both content and file name.\nDefaults to UTF-8.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "\".ics\"", "description": "The file extension to use.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "local", "fileExt"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.local.fileExt", "type": "null or string", "descriptionHTML": "<p>The file extension to use.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "\u2039accounts.calendar.basePath\u203a/\u2039name\u203a", "description": "The path of the storage.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "local", "path"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.local.path", "type": "string", "descriptionHTML": "<p>The path of the storage.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "\"filesystem\"", "description": "The type of the storage.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "local", "type"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.local.type", "type": "one of \"filesystem\", \"singlefile\"", "descriptionHTML": "<p>The type of the storage.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "", "description": "Unique identifier of the calendar. This is set to the\nattribute name of the calendar configuration.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "name"], "readOnly": true, "title": "accounts.calendar.accounts.<name>.name", "type": "string", "descriptionHTML": "<p>Unique identifier of the calendar. This is set to the\nattribute name of the calendar configuration.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "false", "description": "Whether this is the primary account. Only one account may be\nset as primary.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "primary"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.primary", "type": "boolean", "descriptionHTML": "<p>Whether this is the primary account. Only one account may be\nset as primary.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "The primary collection of the account. Required when an\naccount has multiple collections.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "primaryCollection"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.primaryCollection", "type": "null or string", "descriptionHTML": "<p>The primary collection of the account. Required when an\naccount has multiple collections.</p>"}, {"declarations": [{"name": "<programs/qcal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qcal.nix"}], "default": "false", "description": "Whether to enable qcal access.", "example": "true", "loc": ["accounts", "calendar", "accounts", "<name>", "qcal", "enable"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.qcal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable qcal access.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Remote configuration for the calendar.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "remote"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.remote", "type": "null or (submodule)", "descriptionHTML": "<p>Remote configuration for the calendar.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A command that prints the password to standard output.", "example": "[\n  \"pass\"\n  \"caldav\"\n]", "loc": ["accounts", "calendar", "accounts", "<name>", "remote", "passwordCommand"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.remote.passwordCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the password to standard output.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "", "description": "The type of the storage.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "remote", "type"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.remote.type", "type": "one of \"caldav\", \"http\", \"google_calendar\"", "descriptionHTML": "<p>The type of the storage.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "The URL of the storage.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "remote", "url"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.remote.url", "type": "null or string", "descriptionHTML": "<p>The URL of the storage.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "User name for authentication.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "remote", "userName"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.remote.userName", "type": "null or string", "descriptionHTML": "<p>User name for authentication.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "\"\"", "description": "Display color of the calendar in hex", "example": "\"#dc8add\"", "loc": ["accounts", "calendar", "accounts", "<name>", "thunderbird", "color"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.thunderbird.color", "type": "string", "descriptionHTML": "<p>Display color of the calendar in hex</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Whether to enable the Thunderbird mail client for this account.", "example": "true", "loc": ["accounts", "calendar", "accounts", "<name>", "thunderbird", "enable"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.thunderbird.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Thunderbird mail client for this account.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "List of Thunderbird profiles for which this account should be\nenabled. If this list is empty (the default), this account will\nbe enabled for all declared profiles.", "example": "[ \"profile1\" \"profile2\" ]\n", "loc": ["accounts", "calendar", "accounts", "<name>", "thunderbird", "profiles"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.thunderbird.profiles", "type": "list of string", "descriptionHTML": "<p>List of Thunderbird profiles for which this account should be\nenabled. If this list is empty (the default), this account will\nbe enabled for all declared profiles.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Mark calendar as read only", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "thunderbird", "readOnly"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.thunderbird.readOnly", "type": "boolean", "descriptionHTML": "<p>Mark calendar as read only</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Authentication settings. The default is basic.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "auth"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.auth", "type": "null or one of \"basic\", \"digest\", \"guess\"", "descriptionHTML": "<p>Authentication settings. The default is <code>basic</code>.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Either a path to a certificate with a client certificate and\nthe key or a list of paths to the files with them.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "authCert"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.authCert", "type": "null or string or list of string", "descriptionHTML": "<p>Either a path to a certificate with a client certificate and\nthe key or a list of paths to the files with them.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A command that prints the OAuth credentials to standard\noutput.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#google\nfor more information.", "example": "[\n  \"pass\"\n  \"client_id\"\n]", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "clientIdCommand"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.clientIdCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the OAuth credentials to standard\noutput.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#google\">https://vdirsyncer.pimutils.org/en/stable/config.html#google</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A command that prints the OAuth credentials to standard\noutput.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#google\nfor more information.", "example": "[\n  \"pass\"\n  \"client_secret\"\n]", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "clientSecretCommand"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.clientSecretCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the OAuth credentials to standard\noutput.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#google\">https://vdirsyncer.pimutils.org/en/stable/config.html#google</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "The collections to synchronize between the storages.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "collections"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.collections", "type": "null or (list of (string or list of string))", "descriptionHTML": "<p>The collections to synchronize between the storages.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "What to do in case of a conflict between the storages. Either\nremote wins or\nlocal wins or\na list that contains a command to run. By default, an error\nmessage is printed.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "conflictResolution"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.conflictResolution", "type": "null or one of \"remote wins\", \"local wins\" or list of string", "descriptionHTML": "<p>What to do in case of a conflict between the storages. Either\n<code>remote wins</code> or\n<code>local wins</code> or\na list that contains a command to run. By default, an error\nmessage is printed.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "false", "description": "Whether to enable synchronization using vdirsyncer.", "example": "true", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "enable"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable synchronization using vdirsyncer.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Kinds of items to show. The default is to show everything.\nThis depends on particular features of the server, the results\nare not validated.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "itemTypes"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.itemTypes", "type": "null or (list of string)", "descriptionHTML": "<p>Kinds of items to show. The default is to show everything.\nThis depends on particular features of the server, the results\nare not validated.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "[ ]", "description": "Metadata keys that should be synchronized when vdirsyncer\nmetasync is executed.", "example": "[\n  \"color\"\n  \"displayname\"\n]", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "metadata"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.metadata", "type": "list of string", "descriptionHTML": "<p>Metadata keys that should be synchronized when vdirsyncer\nmetasync is executed.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "What should happen if synchronization in one direction\nis impossible due to one storage being read-only.\nDefaults to revert.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#pair-section\nfor more information.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "partialSync"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.partialSync", "type": "null or one of \"revert\", \"error\", \"ignore\"", "descriptionHTML": "<p>What should happen if synchronization in one direction\nis impossible due to one storage being read-only.\nDefaults to <code>revert</code>.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#pair-section\">https://vdirsyncer.pimutils.org/en/stable/config.html#pair-section</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Command to call for each item creation and modification.\nThe command will be called with the path of the new/updated\nfile.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "postHook"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.postHook", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Command to call for each item creation and modification.\nThe command will be called with the path of the new/updated\nfile.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A time range to synchronize. start and end can be any Python\nexpression that returns a datetime.datetime\nobject.", "example": "{\n  end = \"datetime.now() + timedelta(days=365)\";\n  start = \"datetime.now() - timedelta(days=365)\";\n}", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "timeRange"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.timeRange", "type": "null or (submodule)", "descriptionHTML": "<p>A time range to synchronize. start and end can be any Python\nexpression that returns a <code>datetime.datetime</code>\nobject.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "", "description": "End of time range to show.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "timeRange", "end"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.timeRange.end", "type": "string", "descriptionHTML": "<p>End of time range to show.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "", "description": "Start of time range to show.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "timeRange", "start"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.timeRange.start", "type": "string", "descriptionHTML": "<p>Start of time range to show.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A file path where access tokens are stored.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "tokenFile"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.tokenFile", "type": "null or string", "descriptionHTML": "<p>A file path where access tokens are stored.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A command that prints the URL of the storage.", "example": "[\n  \"~/get-url.sh\"\n]", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "urlCommand"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.urlCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the URL of the storage.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "The user agent to report to the server. Defaults to\nvdirsyncer.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "userAgent"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.userAgent", "type": "null or string", "descriptionHTML": "<p>The user agent to report to the server. Defaults to\n<code>vdirsyncer</code>.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "A command that prints the user name to standard output.", "example": "[\n  \"~/get-username.sh\"\n]", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "userNameCommand"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.userNameCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the user name to standard output.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Null or path to certificate to verify SSL against", "example": "\"/path/to/cert.pem\"", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "verify"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.verify", "type": "null or absolute path", "descriptionHTML": "<p>Null or path to certificate to verify SSL against</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "null", "description": "Optional. SHA1 or MD5 fingerprint of the expected server certificate.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial\nfor more information.", "example": "", "loc": ["accounts", "calendar", "accounts", "<name>", "vdirsyncer", "verifyFingerprint"], "readOnly": false, "title": "accounts.calendar.accounts.<name>.vdirsyncer.verifyFingerprint", "type": "null or string", "descriptionHTML": "<p>Optional. SHA1 or MD5 fingerprint of the expected server certificate.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial\">https://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/calendar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/calendar.nix"}], "default": "", "description": "The base directory in which to save calendars. May be a\nrelative path, in which case it is relative the home\ndirectory.", "example": "\".calendar\"", "loc": ["accounts", "calendar", "basePath"], "readOnly": false, "title": "accounts.calendar.basePath", "type": "string", "descriptionHTML": "<p>The base directory in which to save calendars. May be a\nrelative path, in which case it is relative the home\ndirectory.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}, {"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "{ }", "description": "List of contacts.", "example": "", "loc": ["accounts", "contact", "accounts"], "readOnly": false, "title": "accounts.contact.accounts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>List of contacts.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "[ ]", "description": "Email addresses to be associated with this account. Used to check the\nparticipation status (\"PARTSTAT\"), refer to khal documentation.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "khal", "addresses"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khal.addresses", "type": "list of string", "descriptionHTML": "<p>Email addresses to be associated with this account. Used to check the\nparticipation status (\"PARTSTAT\"), refer to khal documentation.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "VCARD collections to be searched for contact birthdays.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "khal", "collections"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khal.collections", "type": "null or (list of string)", "descriptionHTML": "<p>VCARD collections to be searched for contact birthdays.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Color in which events in this calendar are displayed.\nFor instance 'light green' or an RGB color '#ff0000'", "example": "\"light green\"", "loc": ["accounts", "contact", "accounts", "<name>", "khal", "color"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khal.color", "type": "null or string", "descriptionHTML": "<p>Color in which events in this calendar are displayed.\nFor instance 'light green' or an RGB color '#ff0000'</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "false", "description": "Whether to enable khal access.", "example": "true", "loc": ["accounts", "contact", "accounts", "<name>", "khal", "enable"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable khal access.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "10", "description": "Priority of a calendar used for coloring (calendar with highest priority is preferred).", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "khal", "priority"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khal.priority", "type": "signed integer", "descriptionHTML": "<p>Priority of a calendar used for coloring (calendar with highest priority is preferred).</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "false", "description": "Keep khal from making any changes to this account.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "khal", "readOnly"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khal.readOnly", "type": "boolean", "descriptionHTML": "<p>Keep khal from making any changes to this account.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}], "default": "[\n  \"\"\n]", "description": "If provided, each item on this list will generate an\nentry on khard configuration file as a separate addressbook\n(vdir).\nThis is used for hardcoding sub-directories under the local\nstorage path\n(accounts.contact.accounts.<name>.local.path) for khard. The\ndefault value will set the aforementioned path as a single vdir.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "khard", "addressbooks"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khard.addressbooks", "type": "(list of string) or string convertible to it", "descriptionHTML": "<p>If provided, each item on this list will generate an\nentry on khard configuration file as a separate addressbook\n(vdir).</p>\n<p>This is used for hardcoding sub-directories under the local\nstorage path\n(accounts.contact.accounts.<name>.local.path) for khard. The\ndefault value will set the aforementioned path as a single vdir.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}], "default": "false", "description": "Whether to enable khard access.", "example": "true", "loc": ["accounts", "contact", "accounts", "<name>", "khard", "enable"], "readOnly": false, "title": "accounts.contact.accounts.<name>.khard.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable khard access.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Local configuration for the contacts.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "local"], "readOnly": false, "title": "accounts.contact.accounts.<name>.local", "type": "null or (submodule)", "descriptionHTML": "<p>Local configuration for the contacts.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "File encoding for items, both content and file name.\nDefaults to UTF-8.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "local", "encoding"], "readOnly": false, "title": "accounts.contact.accounts.<name>.local.encoding", "type": "null or string", "descriptionHTML": "<p>File encoding for items, both content and file name.\nDefaults to UTF-8.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "\".vcf\"", "description": "The file extension to use.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "local", "fileExt"], "readOnly": false, "title": "accounts.contact.accounts.<name>.local.fileExt", "type": "null or string", "descriptionHTML": "<p>The file extension to use.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "\u2039accounts.contact.basePath\u203a/\u2039name\u203a", "description": "The path of the storage.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "local", "path"], "readOnly": false, "title": "accounts.contact.accounts.<name>.local.path", "type": "string", "descriptionHTML": "<p>The path of the storage.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "\"filesystem\"", "description": "The type of the storage.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "local", "type"], "readOnly": false, "title": "accounts.contact.accounts.<name>.local.type", "type": "one of \"filesystem\", \"singlefile\"", "descriptionHTML": "<p>The type of the storage.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "", "description": "Unique identifier of the contact account. This is set to the\nattribute name of the contact configuration.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "name"], "readOnly": true, "title": "accounts.contact.accounts.<name>.name", "type": "string", "descriptionHTML": "<p>Unique identifier of the contact account. This is set to the\nattribute name of the contact configuration.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Remote configuration for the contacts.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "remote"], "readOnly": false, "title": "accounts.contact.accounts.<name>.remote", "type": "null or (submodule)", "descriptionHTML": "<p>Remote configuration for the contacts.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A command that prints the password to standard output.", "example": "[\n  \"pass\"\n  \"caldav\"\n]", "loc": ["accounts", "contact", "accounts", "<name>", "remote", "passwordCommand"], "readOnly": false, "title": "accounts.contact.accounts.<name>.remote.passwordCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the password to standard output.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "", "description": "The type of the storage.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "remote", "type"], "readOnly": false, "title": "accounts.contact.accounts.<name>.remote.type", "type": "one of \"carddav\", \"http\", \"google_contacts\"", "descriptionHTML": "<p>The type of the storage.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "The URL of the storage.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "remote", "url"], "readOnly": false, "title": "accounts.contact.accounts.<name>.remote.url", "type": "null or string", "descriptionHTML": "<p>The URL of the storage.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "User name for authentication.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "remote", "userName"], "readOnly": false, "title": "accounts.contact.accounts.<name>.remote.userName", "type": "null or string", "descriptionHTML": "<p>User name for authentication.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Authentication settings. The default is basic.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "auth"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.auth", "type": "null or one of \"basic\", \"digest\", \"guess\"", "descriptionHTML": "<p>Authentication settings. The default is <code>basic</code>.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Either a path to a certificate with a client certificate and\nthe key or a list of paths to the files with them.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "authCert"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.authCert", "type": "null or string or list of string", "descriptionHTML": "<p>Either a path to a certificate with a client certificate and\nthe key or a list of paths to the files with them.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A command that prints the OAuth credentials to standard\noutput.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#google\nfor more information.", "example": "[\n  \"pass\"\n  \"client_id\"\n]", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "clientIdCommand"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.clientIdCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the OAuth credentials to standard\noutput.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#google\">https://vdirsyncer.pimutils.org/en/stable/config.html#google</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A command that prints the OAuth credentials to standard\noutput.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#google\nfor more information.", "example": "[\n  \"pass\"\n  \"client_secret\"\n]", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "clientSecretCommand"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.clientSecretCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the OAuth credentials to standard\noutput.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#google\">https://vdirsyncer.pimutils.org/en/stable/config.html#google</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "The collections to synchronize between the storages.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "collections"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.collections", "type": "null or (list of (string or list of string))", "descriptionHTML": "<p>The collections to synchronize between the storages.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "What to do in case of a conflict between the storages. Either\nremote wins or\nlocal wins or\na list that contains a command to run. By default, an error\nmessage is printed.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "conflictResolution"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.conflictResolution", "type": "null or one of \"remote wins\", \"local wins\" or list of string", "descriptionHTML": "<p>What to do in case of a conflict between the storages. Either\n<code>remote wins</code> or\n<code>local wins</code> or\na list that contains a command to run. By default, an error\nmessage is printed.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "false", "description": "Whether to enable synchronization using vdirsyncer.", "example": "true", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "enable"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable synchronization using vdirsyncer.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Kinds of items to show. The default is to show everything.\nThis depends on particular features of the server, the results\nare not validated.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "itemTypes"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.itemTypes", "type": "null or (list of string)", "descriptionHTML": "<p>Kinds of items to show. The default is to show everything.\nThis depends on particular features of the server, the results\nare not validated.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "[ ]", "description": "Metadata keys that should be synchronized when vdirsyncer\nmetasync is executed.", "example": "[\n  \"color\"\n  \"displayname\"\n]", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "metadata"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.metadata", "type": "list of string", "descriptionHTML": "<p>Metadata keys that should be synchronized when vdirsyncer\nmetasync is executed.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "What should happen if synchronization in one direction\nis impossible due to one storage being read-only.\nDefaults to revert.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#pair-section\nfor more information.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "partialSync"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.partialSync", "type": "null or one of \"revert\", \"error\", \"ignore\"", "descriptionHTML": "<p>What should happen if synchronization in one direction\nis impossible due to one storage being read-only.\nDefaults to <code>revert</code>.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#pair-section\">https://vdirsyncer.pimutils.org/en/stable/config.html#pair-section</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Command to call for each item creation and modification.\nThe command will be called with the path of the new/updated\nfile.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "postHook"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.postHook", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Command to call for each item creation and modification.\nThe command will be called with the path of the new/updated\nfile.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A time range to synchronize. start and end can be any Python\nexpression that returns a datetime.datetime\nobject.", "example": "{\n  end = \"datetime.now() + timedelta(days=365)\";\n  start = \"datetime.now() - timedelta(days=365)\";\n}", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "timeRange"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.timeRange", "type": "null or (submodule)", "descriptionHTML": "<p>A time range to synchronize. start and end can be any Python\nexpression that returns a <code>datetime.datetime</code>\nobject.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "", "description": "End of time range to show.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "timeRange", "end"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.timeRange.end", "type": "string", "descriptionHTML": "<p>End of time range to show.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "", "description": "Start of time range to show.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "timeRange", "start"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.timeRange.start", "type": "string", "descriptionHTML": "<p>Start of time range to show.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A file path where access tokens are stored.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "tokenFile"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.tokenFile", "type": "null or string", "descriptionHTML": "<p>A file path where access tokens are stored.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A command that prints the URL of the storage.", "example": "[\n  \"~/get-url.sh\"\n]", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "urlCommand"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.urlCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the URL of the storage.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "The user agent to report to the server. Defaults to\nvdirsyncer.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "userAgent"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.userAgent", "type": "null or string", "descriptionHTML": "<p>The user agent to report to the server. Defaults to\n<code>vdirsyncer</code>.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "A command that prints the user name to standard output.", "example": "[\n  \"~/get-username.sh\"\n]", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "userNameCommand"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.userNameCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the user name to standard output.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Null or path to certificate to verify SSL against", "example": "\"/path/to/cert.pem\"", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "verify"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.verify", "type": "null or absolute path", "descriptionHTML": "<p>Null or path to certificate to verify SSL against</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "null", "description": "Optional. SHA1 or MD5 fingerprint of the expected server certificate.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial\nfor more information.", "example": "", "loc": ["accounts", "contact", "accounts", "<name>", "vdirsyncer", "verifyFingerprint"], "readOnly": false, "title": "accounts.contact.accounts.<name>.vdirsyncer.verifyFingerprint", "type": "null or string", "descriptionHTML": "<p>Optional. SHA1 or MD5 fingerprint of the expected server certificate.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial\">https://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial</a>\nfor more information.</p>"}, {"declarations": [{"name": "<accounts/contacts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/contacts.nix"}], "default": "", "description": "The base directory in which to save contacts. May be a\nrelative path, in which case it is relative the home\ndirectory.", "example": "", "loc": ["accounts", "contact", "basePath"], "readOnly": false, "title": "accounts.contact.basePath", "type": "string", "descriptionHTML": "<p>The base directory in which to save contacts. May be a\nrelative path, in which case it is relative the home\ndirectory.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}, {"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}, {"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}, {"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}, {"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}, {"name": "<programs/mu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mu.nix"}, {"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}, {"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}, {"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}, {"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}, {"name": "<programs/himalaya.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/himalaya.nix"}, {"name": "<programs/getmail/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/getmail/default.nix"}, {"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}, {"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}, {"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}, {"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}, {"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "{ }", "description": "List of email accounts.", "example": "", "loc": ["accounts", "email", "accounts"], "readOnly": false, "title": "accounts.email.accounts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>List of email accounts.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "The email address of this account.", "example": "\"jane.doe@example.org\"", "loc": ["accounts", "email", "accounts", "<name>", "address"], "readOnly": false, "title": "accounts.email.accounts.<name>.address", "type": "string matching the pattern .*@.*", "descriptionHTML": "<p>The email address of this account.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "false", "description": "Whether to enable aerc.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable aerc.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Extra config added to the configuration section for this account in\n{file}$HOME/.config/aerc/accounts.conf.\nSee {manpage}aerc-accounts(5).", "example": "{ source = \"maildir://~/Maildir/example\"; }", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "extraAccounts"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.extraAccounts", "type": "attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma)", "descriptionHTML": "<p>Extra config added to the configuration section for this account in\n{file}<code>$HOME/.config/aerc/accounts.conf</code>.\nSee {manpage}<code>aerc-accounts(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Extra bindings specific to this account, added to\n{file}$HOME/.config/aerc/binds.conf.\nSee {manpage}aerc-binds(5).", "example": "{ messages = { d = \":move ${folder.trash}<Enter>\"; }; }", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "extraBinds"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.extraBinds", "type": "attribute set of (strings concatenated with \"\\n\" or attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma))", "descriptionHTML": "<p>Extra bindings specific to this account, added to\n{file}<code>$HOME/.config/aerc/binds.conf</code>.\nSee {manpage}<code>aerc-binds(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Config specific to this account, added to {file}$HOME/.config/aerc/aerc.conf.\nAerc only supports per-account UI configuration.\nFor other sections of {file}$HOME/.config/aerc/aerc.conf,\nuse programs.aerc.extraConfig.\nSee {manpage}aerc-config(5).", "example": "{ ui = { sidebar-width = 25; }; }", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.extraConfig", "type": "attribute set of (strings concatenated with \"\\n\" or attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma))", "descriptionHTML": "<p>Config specific to this account, added to {file}<code>$HOME/.config/aerc/aerc.conf</code>.\nAerc only supports per-account UI configuration.\nFor other sections of {file}<code>$HOME/.config/aerc/aerc.conf</code>,\nuse <code>programs.aerc.extraConfig</code>.\nSee {manpage}<code>aerc-config(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "Sets the authentication mechanism if imap is used as the incoming\nmethod.\nSee {manpage}aerc-imap(5).", "example": "\"auth\"", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "imapAuth"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.imapAuth", "type": "null or one of \"oauthbearer\", \"xoauth2\"", "descriptionHTML": "<p>Sets the authentication mechanism if imap is used as the incoming\nmethod.\nSee {manpage}<code>aerc-imap(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "Sets the oauth2 params if authentication mechanism oauthbearer or\nxoauth2 is used.\nSee {manpage}aerc-imap(5).", "example": "{\n  token_endpoint = \"<token_endpoint>\";\n}", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "imapOauth2Params"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.imapOauth2Params", "type": "null or (submodule)", "descriptionHTML": "<p>Sets the oauth2 params if authentication mechanism oauthbearer or\nxoauth2 is used.\nSee {manpage}<code>aerc-imap(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 client identifier.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "imapOauth2Params", "client_id"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.imapOauth2Params.client_id", "type": "null or string", "descriptionHTML": "<p>The OAuth2 client identifier.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 client secret.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "imapOauth2Params", "client_secret"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.imapOauth2Params.client_secret", "type": "null or string", "descriptionHTML": "<p>The OAuth2 client secret.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 requested scope.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "imapOauth2Params", "scope"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.imapOauth2Params.scope", "type": "null or string", "descriptionHTML": "<p>The OAuth2 requested scope.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 token endpoint.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "imapOauth2Params", "token_endpoint"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.imapOauth2Params.token_endpoint", "type": "null or string", "descriptionHTML": "<p>The OAuth2 token endpoint.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "\"plain\"", "description": "Sets the authentication mechanism if smtp is used as the outgoing\nmethod.\nSee {manpage}aerc-smtp(5).", "example": "\"auth\"", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "smtpAuth"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.smtpAuth", "type": "null or one of \"none\", \"plain\", \"login\", \"oauthbearer\", \"xoauth2\"", "descriptionHTML": "<p>Sets the authentication mechanism if smtp is used as the outgoing\nmethod.\nSee {manpage}<code>aerc-smtp(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "Sets the oauth2 params if authentication mechanism oauthbearer or\nxoauth2 is used.\nSee {manpage}aerc-imap(5).", "example": "{\n  token_endpoint = \"<token_endpoint>\";\n}", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "smtpOauth2Params"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.smtpOauth2Params", "type": "null or (submodule)", "descriptionHTML": "<p>Sets the oauth2 params if authentication mechanism oauthbearer or\nxoauth2 is used.\nSee {manpage}<code>aerc-imap(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 client identifier.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "smtpOauth2Params", "client_id"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.smtpOauth2Params.client_id", "type": "null or string", "descriptionHTML": "<p>The OAuth2 client identifier.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 client secret.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "smtpOauth2Params", "client_secret"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.smtpOauth2Params.client_secret", "type": "null or string", "descriptionHTML": "<p>The OAuth2 client secret.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 requested scope.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "smtpOauth2Params", "scope"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.smtpOauth2Params.scope", "type": "null or string", "descriptionHTML": "<p>The OAuth2 requested scope.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "null", "description": "The OAuth2 token endpoint.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "aerc", "smtpOauth2Params", "token_endpoint"], "readOnly": false, "title": "accounts.email.accounts.<name>.aerc.smtpOauth2Params.token_endpoint", "type": "null or string", "descriptionHTML": "<p>The OAuth2 token endpoint.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "[ ]", "description": "Alternative identities of this account.", "example": "[\n  \"webmaster@example.org\"\n  \"admin@example.org\"\n]", "loc": ["accounts", "email", "accounts", "<name>", "aliases"], "readOnly": false, "title": "accounts.email.accounts.<name>.aliases", "type": "list of (string matching the pattern .*@.* or (submodule))", "descriptionHTML": "<p>Alternative identities of this account.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{\n  type = \"shellcommand\";\n  command = \"'${pkgs.notmuch}/bin/notmuch address --format=json --output=recipients  date:6M..'\";\n  regexp =\n  \"'\\\\[?{\" + ''\"name\": \"(?P<name>.*)\", \"address\": \"(?P<email>.+)\", \"name-addr\": \".*\"'' + \"}[,\\\\]]?'\";\n  shellcommand_external_filtering = \"False\";\n}\n", "description": "Contact completion configuration as expected per alot.\nSee alot's wiki for\nexplanation about possible values.", "example": "{\n  type = \"shellcommand\";\n  command = \"abook --mutt-query\";\n  regexp = \"'^(?P<email>[^@]+@[^\\t]+)\\t+(?P<name>[^\\t]+)'\";\n  ignorecase = \"True\";\n}\n", "loc": ["accounts", "email", "accounts", "<name>", "alot", "contactCompletion"], "readOnly": false, "title": "accounts.email.accounts.<name>.alot.contactCompletion", "type": "attribute set of string", "descriptionHTML": "<p>Contact completion configuration as expected per alot.\nSee <a href=\"http://alot.readthedocs.io/en/latest/configuration/contacts_completion.html\">alot's wiki</a> for\nexplanation about possible values.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "\"\"", "description": "Extra settings to add to this Alot account configuration.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "alot", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.alot.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra settings to add to this Alot account configuration.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "", "description": "Command to send a mail. If msmtp is enabled for the account,\nthen this is set to\n{command}msmtpq --read-envelope-from --read-recipients.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "alot", "sendMailCommand"], "readOnly": false, "title": "accounts.email.accounts.<name>.alot.sendMailCommand", "type": "null or string", "descriptionHTML": "<p>Command to send a mail. If msmtp is enabled for the account,\nthen this is set to\n{command}<code>msmtpq --read-envelope-from --read-recipients</code>.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "false", "description": "Whether to enable Astroid.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "astroid", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.astroid.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Astroid.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "{ }", "description": "Extra settings to add to this astroid account configuration.", "example": "{\n  select_query = \"\";\n}", "loc": ["accounts", "email", "accounts", "<name>", "astroid", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.astroid.extraConfig", "type": "attribute set of anything", "descriptionHTML": "<p>Extra settings to add to this astroid account configuration.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "", "description": "Command to send a mail. If msmtp is enabled for the account,\nthen this is set to\n{command}msmtpq --read-envelope-from --read-recipients.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "astroid", "sendMailCommand"], "readOnly": false, "title": "accounts.email.accounts.<name>.astroid.sendMailCommand", "type": "string", "descriptionHTML": "<p>Command to send a mail. If msmtp is enabled for the account,\nthen this is set to\n{command}<code>msmtpq --read-envelope-from --read-recipients</code>.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"plain\"", "description": "Some email providers have peculiar behavior that require\nspecial treatment. This option is therefore intended to\nindicate the nature of the provider.\nWhen this indicates a specific provider then, for example,\nthe IMAP, SMTP, and JMAP server configuration may be set\nautomatically.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "flavor"], "readOnly": false, "title": "accounts.email.accounts.<name>.flavor", "type": "one of \"plain\", \"gmail.com\", \"runbox.com\", \"fastmail.com\", \"yandex.com\", \"outlook.office365.com\", \"migadu.com\"", "descriptionHTML": "<p>Some email providers have peculiar behavior that require\nspecial treatment. This option is therefore intended to\nindicate the nature of the provider.</p>\n<p>When this indicates a specific provider then, for example,\nthe IMAP, SMTP, and JMAP server configuration may be set\nautomatically.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "{ }", "description": "Standard email folders.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "folders"], "readOnly": false, "title": "accounts.email.accounts.<name>.folders", "type": "submodule", "descriptionHTML": "<p>Standard email folders.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"Drafts\"", "description": "Relative path of the drafts mail folder.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "folders", "drafts"], "readOnly": false, "title": "accounts.email.accounts.<name>.folders.drafts", "type": "null or string", "descriptionHTML": "<p>Relative path of the drafts mail folder.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"Inbox\"", "description": "Relative path of the inbox mail.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "folders", "inbox"], "readOnly": false, "title": "accounts.email.accounts.<name>.folders.inbox", "type": "string", "descriptionHTML": "<p>Relative path of the inbox mail.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"Sent\"", "description": "Relative path of the sent mail folder.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "folders", "sent"], "readOnly": false, "title": "accounts.email.accounts.<name>.folders.sent", "type": "null or string", "descriptionHTML": "<p>Relative path of the sent mail folder.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"Trash\"", "description": "Relative path of the deleted mail folder.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "folders", "trash"], "readOnly": false, "title": "accounts.email.accounts.<name>.folders.trash", "type": "string", "descriptionHTML": "<p>Relative path of the deleted mail folder.</p>"}, {"declarations": [{"name": "<programs/getmail/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/getmail/default.nix"}], "default": "false", "description": "Enable if you want to delete read messages from the server. Most\nusers should either enable delete or disable\nreadAll.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "getmail", "delete"], "readOnly": false, "title": "accounts.email.accounts.<name>.getmail.delete", "type": "boolean", "descriptionHTML": "<p>Enable if you want to delete read messages from the server. Most\nusers should either enable <code>delete</code> or disable\n<code>readAll</code>.</p>"}, {"declarations": [{"name": "<programs/getmail/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/getmail/default.nix"}], "default": "null", "description": "Specify a command delivering the incoming mail to your maildir.", "example": "\"\\${pkgs.maildrop}/bin/maildrop\"", "loc": ["accounts", "email", "accounts", "<name>", "getmail", "destinationCommand"], "readOnly": false, "title": "accounts.email.accounts.<name>.getmail.destinationCommand", "type": "null or string", "descriptionHTML": "<p>Specify a command delivering the incoming mail to your maildir.</p>"}, {"declarations": [{"name": "<programs/getmail/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/getmail/default.nix"}], "default": "false", "description": "Whether to enable the getmail mail retriever for this account.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "getmail", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.getmail.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the getmail mail retriever for this account.</p>"}, {"declarations": [{"name": "<programs/getmail/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/getmail/default.nix"}], "default": "[ ]", "description": "A non-empty list of mailboxes. To download all mail you can\nuse the ALL mailbox.", "example": "[\n  \"INBOX\"\n  \"INBOX.spam\"\n]", "loc": ["accounts", "email", "accounts", "<name>", "getmail", "mailboxes"], "readOnly": false, "title": "accounts.email.accounts.<name>.getmail.mailboxes", "type": "non-empty (list of string)", "descriptionHTML": "<p>A non-empty list of mailboxes. To download all mail you can\nuse the <code>ALL</code> mailbox.</p>"}, {"declarations": [{"name": "<programs/getmail/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/getmail/default.nix"}], "default": "true", "description": "Enable if you want to fetch all, even the read messages from the\nserver. Most users should either enable delete or\ndisable readAll.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "getmail", "readAll"], "readOnly": false, "title": "accounts.email.accounts.<name>.getmail.readAll", "type": "boolean", "descriptionHTML": "<p>Enable if you want to fetch all, even the read messages from the\nserver. Most users should either enable <code>delete</code> or\ndisable <code>readAll</code>.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "GPG configuration.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "gpg"], "readOnly": false, "title": "accounts.email.accounts.<name>.gpg", "type": "null or (submodule)", "descriptionHTML": "<p>GPG configuration.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "false", "description": "Encrypt outgoing messages by default.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "gpg", "encryptByDefault"], "readOnly": false, "title": "accounts.email.accounts.<name>.gpg.encryptByDefault", "type": "boolean", "descriptionHTML": "<p>Encrypt outgoing messages by default.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "The key to use as listed in {command}gpg --list-keys.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "gpg", "key"], "readOnly": false, "title": "accounts.email.accounts.<name>.gpg.key", "type": "string", "descriptionHTML": "<p>The key to use as listed in {command}<code>gpg --list-keys</code>.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "false", "description": "Sign messages by default.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "gpg", "signByDefault"], "readOnly": false, "title": "accounts.email.accounts.<name>.gpg.signByDefault", "type": "boolean", "descriptionHTML": "<p>Sign messages by default.</p>"}, {"declarations": [{"name": "<programs/himalaya.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/himalaya.nix"}], "default": "false", "description": "Whether to enable the email client Himalaya CLI for this email account.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "himalaya", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.himalaya.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the email client Himalaya CLI for this email account.</p>"}, {"declarations": [{"name": "<programs/himalaya.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/himalaya.nix"}], "default": "{ }", "description": "Himalaya CLI configuration for this email account.\nSee https://github.com/pimalaya/himalaya/blob/master/config.sample.toml for supported values.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "himalaya", "settings"], "readOnly": false, "title": "accounts.email.accounts.<name>.himalaya.settings", "type": "TOML value", "descriptionHTML": "<p>Himalaya CLI configuration for this email account.\nSee <a href=\"https://github.com/pimalaya/himalaya/blob/master/config.sample.toml\">https://github.com/pimalaya/himalaya/blob/master/config.sample.toml</a> for supported values.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "The IMAP configuration to use for this account.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "imap"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap", "type": "null or (submodule)", "descriptionHTML": "<p>The IMAP configuration to use for this account.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "Hostname of IMAP server.", "example": "\"imap.example.org\"", "loc": ["accounts", "email", "accounts", "<name>", "imap", "host"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap.host", "type": "string", "descriptionHTML": "<p>Hostname of IMAP server.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "The port on which the IMAP server listens. If\nnull then the default port is used.", "example": "993", "loc": ["accounts", "email", "accounts", "<name>", "imap", "port"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port on which the IMAP server listens. If\n<code>null</code> then the default port is used.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "{ }", "description": "Configuration for secure connections.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "imap", "tls"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap.tls", "type": "submodule", "descriptionHTML": "<p>Configuration for secure connections.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"config.accounts.email.certificatesFile\"", "description": "Path to file containing certificate authorities that should\nbe used to validate the connection authenticity. If\nnull then the system default is used.\nNote, if set then the system default may still be accepted.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "imap", "tls", "certificatesFile"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap.tls.certificatesFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to file containing certificate authorities that should\nbe used to validate the connection authenticity. If\n<code>null</code> then the system default is used.\nNote, if set then the system default may still be accepted.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "true", "description": "Whether to enable TLS/SSL.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "imap", "tls", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap.tls.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable TLS/SSL.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "false", "description": "Whether to use STARTTLS.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "imap", "tls", "useStartTls"], "readOnly": false, "title": "accounts.email.accounts.<name>.imap.tls.useStartTls", "type": "boolean", "descriptionHTML": "<p>Whether to use STARTTLS.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "[ ]", "description": "IMAP folders to watch.", "example": "[\n  \"Inbox\"\n  \"[Gmail]/MyLabel\"\n]", "loc": ["accounts", "email", "accounts", "<name>", "imapnotify", "boxes"], "readOnly": false, "title": "accounts.email.accounts.<name>.imapnotify.boxes", "type": "list of string", "descriptionHTML": "<p>IMAP folders to watch.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "false", "description": "Whether to enable imapnotify.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "imapnotify", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.imapnotify.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable imapnotify.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "[ ]", "description": "Extra arguments to pass to goimapnotify.", "example": "[\n  \"-wait 1\"\n]", "loc": ["accounts", "email", "accounts", "<name>", "imapnotify", "extraArgs"], "readOnly": false, "title": "accounts.email.accounts.<name>.imapnotify.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to goimapnotify.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "{ }", "description": "Additional configuration to add for this account.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "imapnotify", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.imapnotify.extraConfig", "type": "JSON value", "descriptionHTML": "<p>Additional configuration to add for this account.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "\"\"", "description": "Shell commands to run on any event.", "example": "\"\\${pkgs.isync}/bin/mbsync test-%s\"", "loc": ["accounts", "email", "accounts", "<name>", "imapnotify", "onNotify"], "readOnly": false, "title": "accounts.email.accounts.<name>.imapnotify.onNotify", "type": "string or attribute set of string", "descriptionHTML": "<p>Shell commands to run on any event.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "\"\"", "description": "Shell commands to run after onNotify event.", "example": "{\n  mail = \"\\${pkgs.notmuch}/bin/notmuch new && \\${pkgs.libnotify}/bin/notify-send 'New mail arrived'\";\n}", "loc": ["accounts", "email", "accounts", "<name>", "imapnotify", "onNotifyPost"], "readOnly": false, "title": "accounts.email.accounts.<name>.imapnotify.onNotifyPost", "type": "string or attribute set of string", "descriptionHTML": "<p>Shell commands to run after onNotify event.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "The JMAP configuration to use for this account.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "jmap"], "readOnly": false, "title": "accounts.email.accounts.<name>.jmap", "type": "null or (submodule)", "descriptionHTML": "<p>The JMAP configuration to use for this account.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "Hostname of JMAP server.\nIf both this option and  are specified,\nhost is preferred by applications when establishing a\nsession.", "example": "\"jmap.example.org\"", "loc": ["accounts", "email", "accounts", "<name>", "jmap", "host"], "readOnly": false, "title": "accounts.email.accounts.<name>.jmap.host", "type": "null or string", "descriptionHTML": "<p>Hostname of JMAP server.</p>\n<p>If both this option and <a href=\"#opt-accounts.email.accounts._name_.jmap.sessionUrl\"></a> are specified,\n<code>host</code> is preferred by applications when establishing a\nsession.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "URL for the JMAP Session resource.\nIf both this option and  are specified,\nhost is preferred by applications when establishing a\nsession.", "example": "\"https://jmap.example.org:443/.well-known/jmap\"", "loc": ["accounts", "email", "accounts", "<name>", "jmap", "sessionUrl"], "readOnly": false, "title": "accounts.email.accounts.<name>.jmap.sessionUrl", "type": "null or string", "descriptionHTML": "<p>URL for the JMAP Session resource.</p>\n<p>If both this option and <a href=\"#opt-accounts.email.accounts._name_.jmap.host\"></a> are specified,\n<code>host</code> is preferred by applications when establishing a\nsession.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "false", "description": "Whether to enable lieer Gmail synchronization for notmuch.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lieer Gmail synchronization for notmuch.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "true", "description": "Warn if Notmuch is not also enabled for this account.\nThis can safely be disabled if {command}notmuch init\nhas been used to configure this account outside of Home\nManager.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "notmuchSetupWarning"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.notmuchSetupWarning", "type": "boolean", "descriptionHTML": "<p>Warn if Notmuch is not also enabled for this account.</p>\n<p>This can safely be disabled if {command}<code>notmuch init</code>\nhas been used to configure this account outside of Home\nManager.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "{ }", "description": "Settings which are applied to {file}.gmailieer.json\nfor the account.\nSee the lieer manual\nfor documentation of settings not explicitly covered by this module.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings", "type": "JSON value", "descriptionHTML": "<p>Settings which are applied to {file}<code>.gmailieer.json</code>\nfor the account.</p>\n<p>See the <a href=\"https://github.com/gauteh/lieer/\">lieer manual</a>\nfor documentation of settings not explicitly covered by this module.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "false", "description": "Allow missing labels on the Gmail side to be dropped.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "drop_non_existing_label"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.drop_non_existing_label", "type": "boolean", "descriptionHTML": "<p>Allow missing labels on the Gmail side to be dropped.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "\"\"", "description": "Extension to include in local file names, which can be useful\nfor indexing with third-party programs.", "example": "\"mbox\"", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "file_extension"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.file_extension", "type": "string", "descriptionHTML": "<p>Extension to include in local file names, which can be useful\nfor indexing with third-party programs.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "false", "description": "Work around a Gmail API quirk where an empty change history\nis sometimes returned.\nSee this\nGitHub issue\nfor more details.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "ignore_empty_history"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.ignore_empty_history", "type": "boolean", "descriptionHTML": "<p>Work around a Gmail API quirk where an empty change history\nis sometimes returned.</p>\n<p>See this\n<a href=\"https://github.com/gauteh/lieer/issues/120\">GitHub issue</a>\nfor more details.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "[\n  \"CATEGORY_FORUMS\"\n  \"CATEGORY_PROMOTIONS\"\n  \"CATEGORY_UPDATES\"\n  \"CATEGORY_SOCIAL\"\n  \"CATEGORY_PERSONAL\"\n]", "description": "Set Gmail labels to ignore when syncing from remote labels to\nlocal tags (before translations).", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "ignore_remote_labels"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.ignore_remote_labels", "type": "list of string", "descriptionHTML": "<p>Set Gmail labels to ignore when syncing from remote labels to\nlocal tags (before translations).</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "[ ]", "description": "Set labels to ignore when syncing from local tags to\nremote labels (after translations).", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "ignore_tags"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.ignore_tags", "type": "list of string", "descriptionHTML": "<p>Set labels to ignore when syncing from local tags to\nremote labels (after translations).</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "\"trash\"", "description": "Local tag to which the remote Gmail 'TRASH' label is translated.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "local_trash_tag"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.local_trash_tag", "type": "string", "descriptionHTML": "<p>Local tag to which the remote Gmail 'TRASH' label is translated.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "true", "description": "Remove local messages that have been deleted on the remote.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "remove_local_messages"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.remove_local_messages", "type": "boolean", "descriptionHTML": "<p>Remove local messages that have been deleted on the remote.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "false", "description": "Replace '/' with '.' in Gmail labels.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "replace_slash_with_dot"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.replace_slash_with_dot", "type": "boolean", "descriptionHTML": "<p>Replace '/' with '.' in Gmail labels.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "600", "description": "HTTP timeout in seconds. 0 means forever or system timeout.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "settings", "timeout"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.settings.timeout", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>HTTP timeout in seconds. 0 means forever or system timeout.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "false", "description": "Whether to enable lieer synchronization service.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "sync", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.sync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lieer synchronization service.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "\"*:0/5\"", "description": "How often to synchronize the account.\nThis value is passed to the systemd timer configuration as the\nonCalendar option. See\n{manpage}systemd.time(7)\nfor more information about the format.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "lieer", "sync", "frequency"], "readOnly": false, "title": "accounts.email.accounts.<name>.lieer.sync.frequency", "type": "string", "descriptionHTML": "<p>How often to synchronize the account.</p>\n<p>This value is passed to the systemd timer configuration as the\nonCalendar option. See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "{\n  path = \"\\${name}\";\n}", "description": "Maildir configuration for this account.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "maildir"], "readOnly": false, "title": "accounts.email.accounts.<name>.maildir", "type": "null or (submodule)", "descriptionHTML": "<p>Maildir configuration for this account.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "Path to maildir directory where mail for this account is\nstored. This is relative to the base maildir path.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "maildir", "path"], "readOnly": false, "title": "accounts.email.accounts.<name>.maildir.path", "type": "string", "descriptionHTML": "<p>Path to maildir directory where mail for this account is\nstored. This is relative to the base maildir path.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"none\"", "description": "Automatically create missing mailboxes within the\ngiven mail store.", "example": "\"maildir\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "create"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.create", "type": "one of \"none\", \"maildir\", \"imap\", \"both\"", "descriptionHTML": "<p>Automatically create missing mailboxes within the\ngiven mail store.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "false", "description": "Whether to enable synchronization using mbsync.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable synchronization using mbsync.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"none\"", "description": "Permanently remove messages marked for deletion from\nthe given mail store.", "example": "\"both\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "expunge"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.expunge", "type": "one of \"none\", \"maildir\", \"imap\", \"both\"", "descriptionHTML": "<p>Permanently remove messages marked for deletion from\nthe given mail store.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Account section extra configuration.", "example": "{\n  TLSType = \"IMAP\";\n  TLSVersions = [ \"+1.3\" \"+1.2\" \"-1.1\" ];\n  PipelineDepth = 10;\n  Timeout = 60;\n};\n", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "extraConfig", "account"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.extraConfig.account", "type": "attribute set of (string or signed integer or boolean or list of string)", "descriptionHTML": "<p>Account section extra configuration.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Per channel extra configuration.", "example": "{\n  MaxMessages = 10000;\n  MaxSize = \"1m\";\n};\n", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "extraConfig", "channel"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.extraConfig.channel", "type": "attribute set of (string or signed integer or boolean or list of string)", "descriptionHTML": "<p>Per channel extra configuration.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Local store extra configuration.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "extraConfig", "local"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.extraConfig.local", "type": "attribute set of (string or signed integer or boolean or list of string)", "descriptionHTML": "<p>Local store extra configuration.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Remote store extra configuration.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "extraConfig", "remote"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.extraConfig.remote", "type": "attribute set of (string or signed integer or boolean or list of string)", "descriptionHTML": "<p>Remote store extra configuration.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "null", "description": "If set, flattens the hierarchy within the maildir by\nsubstituting the canonical hierarchy delimiter\n/ with this value.", "example": "\".\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "flatten"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.flatten", "type": "null or string", "descriptionHTML": "<p>If set, flattens the hierarchy within the maildir by\nsubstituting the canonical hierarchy delimiter\n<code>/</code> with this value.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Some email providers (Gmail) have a different directory hierarchy for\nsynchronized email messages. Namely, when using mbsync without specifying\na set of channels into a group, all synchronized directories end up beneath\nthe [Gmail]/ directory.\nThis option allows you to specify a group, and subsequently channels that\nwill allow you to sync your mail into an arbitrary hierarchy.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.groups", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Some email providers (Gmail) have a different directory hierarchy for\nsynchronized email messages. Namely, when using mbsync without specifying\na set of channels into a group, all synchronized directories end up beneath\nthe <code>[Gmail]/</code> directory.</p>\n<p>This option allows you to specify a group, and subsequently channels that\nwill allow you to sync your mail into an arbitrary hierarchy.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "List of channels that should be grouped together into this group. When\nperforming a synchronization, the groups are synchronized, rather than\nthe individual channels.\nUsing these channels and then grouping them together allows for you to\ndefine the maildir hierarchy as you see fit.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "channels"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.channels", "type": "attribute set of (submodule)", "descriptionHTML": "<p>List of channels that should be grouped together into this group. When\nperforming a synchronization, the groups are synchronized, rather than\nthe individual channels.</p>\n<p>Using these channels and then grouping them together allows for you to\ndefine the maildir hierarchy as you see fit.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Extra configuration lines to add to THIS channel's\nconfiguration.", "example": "{\n  Create = \"both\";\n  CopyArrivalDate = \"yes\";\n  MaxMessages = 10000;\n  MaxSize = \"1m\";\n}\n", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "channels", "<name>", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.channels.<name>.extraConfig", "type": "attribute set of (string or signed integer or boolean or list of string)", "descriptionHTML": "<p>Extra configuration lines to add to <em>THIS</em> channel's\nconfiguration.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"\"", "description": "IMAP4 patterns for which mailboxes on the remote mail server to sync.\nIf Patterns are specified, farPattern\nis interpreted as a prefix which is not matched against the patterns,\nand is not affected by mailbox list overrides.\nIf this is left as the default, then mbsync will default to the pattern\nINBOX.", "example": "\"[Gmail]/Sent Mail\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "channels", "<name>", "farPattern"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.channels.<name>.farPattern", "type": "string", "descriptionHTML": "<p>IMAP4 patterns for which mailboxes on the remote mail server to sync.\nIf <code>Patterns</code> are specified, <code>farPattern</code>\nis interpreted as a prefix which is not matched against the patterns,\nand is not affected by mailbox list overrides.</p>\n<p>If this is left as the default, then mbsync will default to the pattern\n<code>INBOX</code>.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"\u2039name\u203a\"", "description": "The unique name for THIS channel in THIS group. The group will refer to\nthis channel by this name.\nIn addition, you can manually sync just this channel by specifying this\nname to mbsync on the command line.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "channels", "<name>", "name"], "readOnly": true, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.channels.<name>.name", "type": "string", "descriptionHTML": "<p>The unique name for THIS channel in THIS group. The group will refer to\nthis channel by this name.</p>\n<p>In addition, you can manually sync just this channel by specifying this\nname to mbsync on the command line.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"\"", "description": "Name for where mail coming from the remote (far) mail server will end up\nlocally. The mailbox specified by the far pattern will be placed in\nthis directory.\nIf this is left as the default, then mbsync will default to the pattern\nINBOX.", "example": "\"Sent\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "channels", "<name>", "nearPattern"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.channels.<name>.nearPattern", "type": "string", "descriptionHTML": "<p>Name for where mail coming from the remote (far) mail server will end up\nlocally. The mailbox specified by the far pattern will be placed in\nthis directory.</p>\n<p>If this is left as the default, then mbsync will default to the pattern\n<code>INBOX</code>.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "[ ]", "description": "Instead of synchronizing just the mailboxes that\nmatch the farPattern, use it as a prefix which is\nnot matched against the patterns, and is not affected by mailbox list\noverrides.", "example": "[\n  \"INBOX\"\n]", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "channels", "<name>", "patterns"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.channels.<name>.patterns", "type": "list of string", "descriptionHTML": "<p>Instead of synchronizing <em>just</em> the mailboxes that\nmatch the <code>farPattern</code>, use it as a prefix which is\nnot matched against the patterns, and is not affected by mailbox list\noverrides.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"\u2039name\u203a\"", "description": "The name of this group for this account. These names are different than\nsome others, because they will hide channel names that are the same.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "groups", "<name>", "name"], "readOnly": true, "title": "accounts.email.accounts.<name>.mbsync.groups.<name>.name", "type": "string", "descriptionHTML": "<p>The name of this group for this account. These names are different than\nsome others, because they will hide channel names that are the same.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "[\n  \"*\"\n]", "description": "Pattern of mailboxes to synchronize.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "patterns"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.patterns", "type": "list of string", "descriptionHTML": "<p>Pattern of mailboxes to synchronize.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"none\"", "description": "Propagate mailbox deletions to the given mail store.", "example": "\"imap\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "remove"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.remove", "type": "one of \"none\", \"maildir\", \"imap\", \"both\"", "descriptionHTML": "<p>Propagate mailbox deletions to the given mail store.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"Verbatim\"", "description": "The on-disk folder naming style. This option has no\neffect when {option}flatten is used.", "example": "\"Maildir++\"", "loc": ["accounts", "email", "accounts", "<name>", "mbsync", "subFolders"], "readOnly": false, "title": "accounts.email.accounts.<name>.mbsync.subFolders", "type": "one of \"Verbatim\", \"Maildir++\", \"Legacy\"", "descriptionHTML": "<p>The on-disk folder naming style. This option has no\neffect when {option}<code>flatten</code> is used.</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "false", "description": "Whether to enable the meli mail client for this account.\nRequires SMTP settings..", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "meli", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.meli.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the meli mail client for this account.\nRequires SMTP settings..</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "{ }", "description": "Folder display name", "example": "{\n  INBOX = {\n    alias = \"\ud83d\udce5 Inbox\";\n  };\n  Sent = {\n    alias = \"\ud83d\udce4 Sent\";\n  };\n}", "loc": ["accounts", "email", "accounts", "<name>", "meli", "mailboxAliases"], "readOnly": false, "title": "accounts.email.accounts.<name>.meli.mailboxAliases", "type": "attribute set of (attribute set)", "descriptionHTML": "<p>Folder display name</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "[\n  \"Inbox\"\n  \"Sent\"\n  \"Trash\"\n  \"Drafts\"\n]", "description": "Mailboxes to show in meli", "example": "[\n  \"INBOX\"\n  \"Sent\"\n  \"Trash\"\n  \"Drafts\"\n]", "loc": ["accounts", "email", "accounts", "<name>", "meli", "mailboxes"], "readOnly": false, "title": "accounts.email.accounts.<name>.meli.mailboxes", "type": "list of string", "descriptionHTML": "<p>Mailboxes to show in meli</p>"}, {"declarations": [{"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}], "default": "false", "description": "Whether to enable msmtp.\nIf enabled then it is possible to use the\n--account command line\noption to send a message for a given account using the\n{command}msmtp or {command}msmtpq tool.\nFor example, {command}msmtp --account=private would\nsend using the account defined in\n{option}accounts.email.accounts.private. If the\n--account option is not\ngiven then the primary account will be used.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "msmtp", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.msmtp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable msmtp.</p>\n<p>If enabled then it is possible to use the\n<code>--account</code> command line\noption to send a message for a given account using the\n{command}<code>msmtp</code> or {command}<code>msmtpq</code> tool.\nFor example, {command}<code>msmtp --account=private</code> would\nsend using the account defined in\n{option}<code>accounts.email.accounts.private</code>. If the\n<code>--account</code> option is not\ngiven then the primary account will be used.</p>"}, {"declarations": [{"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}], "default": "{ }", "description": "Extra configuration options to add to {file}~/.msmtprc.\nSee https://marlam.de/msmtp/msmtprc.txt for\nexamples.", "example": "{\n  auth = \"login\";\n}", "loc": ["accounts", "email", "accounts", "<name>", "msmtp", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.msmtp.extraConfig", "type": "attribute set of string", "descriptionHTML": "<p>Extra configuration options to add to {file}<code>~/.msmtprc</code>.\nSee <a href=\"https://marlam.de/msmtp/msmtprc.txt\">https://marlam.de/msmtp/msmtprc.txt</a> for\nexamples.</p>"}, {"declarations": [{"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}], "default": "null", "description": "Fingerprint of a trusted TLS certificate.\nThe fingerprint can be obtained by executing\n{command}msmtp --serverinfo --tls --tls-certcheck=off.", "example": "\"my:SH:a2:56:ha:sh\"", "loc": ["accounts", "email", "accounts", "<name>", "msmtp", "tls", "fingerprint"], "readOnly": false, "title": "accounts.email.accounts.<name>.msmtp.tls.fingerprint", "type": "null or string matching the pattern ([[:alnum:]]{2}:)+[[:alnum:]]{2}", "descriptionHTML": "<p>Fingerprint of a trusted TLS certificate.\nThe fingerprint can be obtained by executing\n{command}<code>msmtp --serverinfo --tls --tls-certcheck=off</code>.</p>"}, {"declarations": [{"name": "<programs/mu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mu.nix"}], "default": "false", "description": "Whether to enable mu indexing.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "mu", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.mu.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mu indexing.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "false", "description": "Whether to enable mujmap JMAP synchronization for notmuch.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mujmap JMAP synchronization for notmuch.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "true", "description": "Warn if Notmuch is not also enabled for this account.\nThis can safely be disabled if {file}mujmap.toml is managed\noutside of Home Manager.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "notmuchSetupWarning"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.notmuchSetupWarning", "type": "boolean", "descriptionHTML": "<p>Warn if Notmuch is not also enabled for this account.</p>\n<p>This can safely be disabled if {file}<code>mujmap.toml</code> is managed\noutside of Home Manager.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "{ }", "description": "Settings which are applied to {file}mujmap.toml\nfor the account.\nSee the mujmap project\nfor documentation of settings not explicitly covered by this module.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings", "type": "TOML value", "descriptionHTML": "<p>Settings which are applied to {file}<code>mujmap.toml</code>\nfor the account.</p>\n<p>See the <a href=\"https://github.com/elizagamedev/mujmap\">mujmap project</a>\nfor documentation of settings not explicitly covered by this module.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "true", "description": "Whether to create new mailboxes automatically on the server from notmuch\ntags.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "auto_create_new_mailboxes"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.auto_create_new_mailboxes", "type": "boolean", "descriptionHTML": "<p>Whether to create new mailboxes automatically on the server from notmuch\ntags.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "null", "description": "The cache directory in which to store mail files while they are being\ndownloaded. The default is operating-system specific.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "cache_dir"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.cache_dir", "type": "null or string", "descriptionHTML": "<p>The cache directory in which to store mail files while they are being\ndownloaded. The default is operating-system specific.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "null", "description": "Fully qualified domain name of the JMAP service.\nmujmap looks up the JMAP SRV record for this host to determine the JMAP session\nURL. Mutually exclusive with\n.\nIf null, defaults to\n.", "example": "\"example.com\"", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "fqdn"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.fqdn", "type": "null or string", "descriptionHTML": "<p>Fully qualified domain name of the JMAP service.</p>\n<p>mujmap looks up the JMAP SRV record for this host to determine the JMAP session\nURL. Mutually exclusive with\n<a href=\"#opt-accounts.email.accounts._name_.mujmap.settings.session_url\"></a>.</p>\n<p>If <code>null</code>, defaults to\n<a href=\"#opt-accounts.email.accounts._name_.jmap.host\"></a>.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "null", "description": "Shell command which will print a password to stdout for basic HTTP\nauthentication.\nIf null, defaults to\n.", "example": "\"pass alice@example.com\"", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "password_command"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.password_command", "type": "null or string or list of string", "descriptionHTML": "<p>Shell command which will print a password to stdout for basic HTTP\nauthentication.</p>\n<p>If <code>null</code>, defaults to\n<a href=\"#opt-accounts.email.accounts._name_.passwordCommand\"></a>.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "null", "description": "Session URL to connect to.\nMutually exclusive with\n.\nIf null, defaults to\n.", "example": "\"https://jmap.example.com/.well-known/jmap\"", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "session_url"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.session_url", "type": "null or string", "descriptionHTML": "<p>Session URL to connect to.</p>\n<p>Mutually exclusive with\n<a href=\"#opt-accounts.email.accounts._name_.mujmap.settings.fqdn\"></a>.</p>\n<p>If <code>null</code>, defaults to\n<a href=\"#opt-accounts.email.accounts._name_.jmap.sessionUrl\"></a>.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "{ }", "description": "Tag configuration.\nBeware that there are quirks that require manual consideration if changing the\nvalues of these files; please see\nhttps://github.com/elizagamedev/mujmap/blob/main/mujmap.toml.example\nfor more details.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags", "type": "TOML value", "descriptionHTML": "<p>Tag configuration.</p>\n<p>Beware that there are quirks that require manual consideration if changing the\nvalues of these files; please see\n<a href=\"https://github.com/elizagamedev/mujmap/blob/main/mujmap.toml.example\">https://github.com/elizagamedev/mujmap/blob/main/mujmap.toml.example</a>\nfor more details.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"deleted\"", "description": "Tag for notmuch to use for messages stored in the mailbox labeled with the\nTrash name attribute.\nIf set to an empty string, this mailbox and its child\nmailboxes are not synchronized with a tag.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "deleted"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.deleted", "type": "string", "descriptionHTML": "<p>Tag for notmuch to use for messages stored in the mailbox labeled with the\n<code>Trash</code> name attribute.</p>\n<p>If set to an empty string, this mailbox <em>and its child\nmailboxes</em> are not synchronized with a tag.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"/\"", "description": "Directory separator for mapping notmuch tags to maildirs.", "example": "\".\"", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "directory_separator"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.directory_separator", "type": "string", "descriptionHTML": "<p>Directory separator for mapping notmuch tags to maildirs.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"important\"", "description": "Tag for notmuch to use for messages stored in the mailbox labeled with the\nImportant name attribute and/or with the $Important\nkeyword.\nIf set to an empty string, this mailbox, its child\nmailboxes, and these keywords are not synchronized with a tag.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "important"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.important", "type": "string", "descriptionHTML": "<p>Tag for notmuch to use for messages stored in the mailbox labeled with the\n<code>Important</code> name attribute and/or with the <code>$Important</code>\nkeyword.</p>\n<p>If set to an empty string, this mailbox, <em>its child\nmailboxes</em>, and these keywords are not synchronized with a tag.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"inbox\"", "description": "Tag for notmuch to use for messages stored in the mailbox labeled with the\nInbox name attribute.\nIf set to an empty string, this mailbox and its child\nmailboxes are not synchronized with a tag.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "inbox"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.inbox", "type": "string", "descriptionHTML": "<p>Tag for notmuch to use for messages stored in the mailbox labeled with the\n<code>Inbox</code> name attribute.</p>\n<p>If set to an empty string, this mailbox <em>and its child\nmailboxes</em> are not synchronized with a tag.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "false", "description": "If true, translate all mailboxes to lowercase names when mapping to notmuch\ntags.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "lowercase"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.lowercase", "type": "boolean", "descriptionHTML": "<p>If true, translate all mailboxes to lowercase names when mapping to notmuch\ntags.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"phishing\"", "description": "Tag for notmuch to use for the IANA $Phishing keyword.\nIf set to an empty string, this keyword is not synchronized with a tag.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "phishing"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.phishing", "type": "string", "descriptionHTML": "<p>Tag for notmuch to use for the IANA <code>$Phishing</code> keyword.</p>\n<p>If set to an empty string, this keyword is not synchronized with a tag.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"sent\"", "description": "Tag for notmuch to use for messages stored in the mailbox labeled with the\nSent name attribute.\nIf set to an empty string, this mailbox and its child\nmailboxes are not synchronized with a tag.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "sent"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.sent", "type": "string", "descriptionHTML": "<p>Tag for notmuch to use for messages stored in the mailbox labeled with the\n<code>Sent</code> name attribute.</p>\n<p>If set to an empty string, this mailbox <em>and its child\nmailboxes</em> are not synchronized with a tag.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "\"spam\"", "description": "Tag for notmuch to use for messages stored in the mailbox labeled with the\nJunk name attribute and/or with the $Junk keyword,\nexcept for messages with the $NotJunk keyword.\nIf set to an empty string, this mailbox, its child\nmailboxes, and these keywords are not synchronized with a tag.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "tags", "spam"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.tags.spam", "type": "string", "descriptionHTML": "<p>Tag for notmuch to use for messages stored in the mailbox labeled with the\n<code>Junk</code> name attribute and/or with the <code>$Junk</code> keyword,\n<em>except</em> for messages with the <code>$NotJunk</code> keyword.</p>\n<p>If set to an empty string, this mailbox, <em>its child\nmailboxes</em>, and these keywords are not synchronized with a tag.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "null", "description": "Username for basic HTTP authentication.\nIf null, defaults to\n.", "example": "\"alice@example.com\"", "loc": ["accounts", "email", "accounts", "<name>", "mujmap", "settings", "username"], "readOnly": false, "title": "accounts.email.accounts.<name>.mujmap.settings.username", "type": "null or string", "descriptionHTML": "<p>Username for basic HTTP authentication.</p>\n<p>If <code>null</code>, defaults to\n<a href=\"#opt-accounts.email.accounts._name_.userName\"></a>.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "Unique identifier of the account. This is set to the\nattribute name of the account configuration.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "name"], "readOnly": true, "title": "accounts.email.accounts.<name>.name", "type": "string", "descriptionHTML": "<p>Unique identifier of the account. This is set to the\nattribute name of the account configuration.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "false", "description": "Whether to enable NeoMutt.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable NeoMutt.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "\"\"", "description": "Extra lines to add to the folder hook for this account.", "example": "\"color status cyan default\"", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines to add to the folder hook for this account.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "[ ]", "description": "List of extra mailboxes", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "extraMailboxes"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.extraMailboxes", "type": "list of (string or (submodule))", "descriptionHTML": "<p>List of extra mailboxes</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "null", "description": "Use a different name as mailbox name", "example": "\"==== <mailbox-name> ===\"", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "mailboxName"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.mailboxName", "type": "null or string", "descriptionHTML": "<p>Use a different name as mailbox name</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "\"maildir\"", "description": "Whether this account uses maildir folders or IMAP mailboxes", "example": "\"imap\"", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "mailboxType"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.mailboxType", "type": "one of \"maildir\", \"imap\"", "descriptionHTML": "<p>Whether this account uses maildir folders or IMAP mailboxes</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "if config.msmtp.enable then\n  \"msmtpq --read-envelope-from --read-recipients\"\nelse\n  null\n", "description": "Command to send a mail. If not set, neomutt will be in charge of sending mails.", "example": "\"msmtpq --read-envelope-from --read-recipients\"", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "sendMailCommand"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.sendMailCommand", "type": "null or string", "descriptionHTML": "<p>Command to send a mail. If not set, neomutt will be in charge of sending mails.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "true", "description": "Show the default mailbox (INBOX)", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "neomutt", "showDefaultMailbox"], "readOnly": false, "title": "accounts.email.accounts.<name>.neomutt.showDefaultMailbox", "type": "boolean", "descriptionHTML": "<p>Show the default mailbox (INBOX)</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "false", "description": "Whether to enable notmuch indexing.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable notmuch indexing.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "true", "description": "Whether to enable Notmuch support in NeoMutt.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "neomutt", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.neomutt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Notmuch support in NeoMutt.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "[\n  {\n    name = \"My INBOX\";\n    query = \"tag:inbox\";\n  }\n]", "description": "List of virtual mailboxes using Notmuch queries", "example": "[\n  {\n    name = \"My INBOX\";\n    query = \"tag:inbox\";\n  }\n]", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "neomutt", "virtualMailboxes"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.neomutt.virtualMailboxes", "type": "list of (submodule)", "descriptionHTML": "<p>List of virtual mailboxes using Notmuch queries</p>"}, {"declarations": [{"name": "<programs/notmuch/virtual-mailbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/virtual-mailbox.nix"}], "default": "null", "description": "Restricts number of messages/threads in the result.", "example": "10", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "neomutt", "virtualMailboxes", "*", "limit"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.neomutt.virtualMailboxes.*.limit", "type": "null or signed integer", "descriptionHTML": "<p>Restricts number of messages/threads in the result.</p>"}, {"declarations": [{"name": "<programs/notmuch/virtual-mailbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/virtual-mailbox.nix"}], "default": "\"My INBOX\"", "description": "Name to display", "example": "\"My INBOX\"", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "neomutt", "virtualMailboxes", "*", "name"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.neomutt.virtualMailboxes.*.name", "type": "string", "descriptionHTML": "<p>Name to display</p>"}, {"declarations": [{"name": "<programs/notmuch/virtual-mailbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/virtual-mailbox.nix"}], "default": "\"tag:inbox\"", "description": "Notmuch query", "example": "\"tag:inbox\"", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "neomutt", "virtualMailboxes", "*", "query"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.neomutt.virtualMailboxes.*.query", "type": "string", "descriptionHTML": "<p>Notmuch query</p>"}, {"declarations": [{"name": "<programs/notmuch/virtual-mailbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/virtual-mailbox.nix"}], "default": "null", "description": "Reads all matching messages or whole-threads. The default is 'messages' or nm_query_type.", "example": "\"threads\"", "loc": ["accounts", "email", "accounts", "<name>", "notmuch", "neomutt", "virtualMailboxes", "*", "type"], "readOnly": false, "title": "accounts.email.accounts.<name>.notmuch.neomutt.virtualMailboxes.*.type", "type": "null or one of \"threads\", \"messages\"", "descriptionHTML": "<p>Reads all matching messages or whole-threads. The default is 'messages' or nm_query_type.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "false", "description": "Whether to enable OfflineIMAP.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "offlineimap", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.offlineimap.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable OfflineIMAP.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "{ }", "description": "Extra configuration options to add to the account section.", "example": "{\n  autorefresh = 20;\n}", "loc": ["accounts", "email", "accounts", "<name>", "offlineimap", "extraConfig", "account"], "readOnly": false, "title": "accounts.email.accounts.<name>.offlineimap.extraConfig.account", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Extra configuration options to add to the account section.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "{ }", "description": "Extra configuration options to add to the local account\nsection.", "example": "{\n  sync_deletes = true;\n}", "loc": ["accounts", "email", "accounts", "<name>", "offlineimap", "extraConfig", "local"], "readOnly": false, "title": "accounts.email.accounts.<name>.offlineimap.extraConfig.local", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Extra configuration options to add to the local account\nsection.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "{ }", "description": "Extra configuration options to add to the remote account\nsection.", "example": "{\n  expunge = false;\n  maxconnections = 2;\n}", "loc": ["accounts", "email", "accounts", "<name>", "offlineimap", "extraConfig", "remote"], "readOnly": false, "title": "accounts.email.accounts.<name>.offlineimap.extraConfig.remote", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Extra configuration options to add to the remote account\nsection.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "\"\"", "description": "Command to run after fetching new mails.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "offlineimap", "postSyncHookCommand"], "readOnly": false, "title": "accounts.email.accounts.<name>.offlineimap.postSyncHookCommand", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Command to run after fetching new mails.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "A command, which when run writes the account password on\nstandard output.", "example": "\"secret-tool lookup email me@example.org\"", "loc": ["accounts", "email", "accounts", "<name>", "passwordCommand"], "readOnly": false, "title": "accounts.email.accounts.<name>.passwordCommand", "type": "null or string or list of string", "descriptionHTML": "<p>A command, which when run writes the account password on\nstandard output.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "false", "description": "Whether this is the primary account. Only one account may be\nset as primary.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "primary"], "readOnly": false, "title": "accounts.email.accounts.<name>.primary", "type": "boolean", "descriptionHTML": "<p>Whether this is the primary account. Only one account may be\nset as primary.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "Name displayed when sending mails.", "example": "\"Jane Doe\"", "loc": ["accounts", "email", "accounts", "<name>", "realName"], "readOnly": false, "title": "accounts.email.accounts.<name>.realName", "type": "string", "descriptionHTML": "<p>Name displayed when sending mails.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "{ }", "description": "Signature configuration.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "signature"], "readOnly": false, "title": "accounts.email.accounts.<name>.signature", "type": "submodule", "descriptionHTML": "<p>Signature configuration.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "A command that generates a signature.", "example": "pkgs.writeScript \"signature\" \"echo This is my signature\"\n", "loc": ["accounts", "email", "accounts", "<name>", "signature", "command"], "readOnly": false, "title": "accounts.email.accounts.<name>.signature.command", "type": "null or absolute path", "descriptionHTML": "<p>A command that generates a signature.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "''\n  --\n''", "description": "The delimiter used between the document and the signature.", "example": "~*~*~*~*~*~*~*~*~*~*~*~\n", "loc": ["accounts", "email", "accounts", "<name>", "signature", "delimiter"], "readOnly": false, "title": "accounts.email.accounts.<name>.signature.delimiter", "type": "string", "descriptionHTML": "<p>The delimiter used between the document and the signature.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"none\"", "description": "Method to communicate the signature.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "signature", "showSignature"], "readOnly": false, "title": "accounts.email.accounts.<name>.signature.showSignature", "type": "one of \"append\", \"attach\", \"none\"", "descriptionHTML": "<p>Method to communicate the signature.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"\"", "description": "Signature content.", "example": "''\n  --\n  Luke Skywalker\n  May the force be with you.\n''", "loc": ["accounts", "email", "accounts", "<name>", "signature", "text"], "readOnly": false, "title": "accounts.email.accounts.<name>.signature.text", "type": "string", "descriptionHTML": "<p>Signature content.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "The SMTP configuration to use for this account.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "smtp"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp", "type": "null or (submodule)", "descriptionHTML": "<p>The SMTP configuration to use for this account.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "", "description": "Hostname of SMTP server.", "example": "\"smtp.example.org\"", "loc": ["accounts", "email", "accounts", "<name>", "smtp", "host"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp.host", "type": "string", "descriptionHTML": "<p>Hostname of SMTP server.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "The port on which the SMTP server listens. If\nnull then the default port is used.", "example": "465", "loc": ["accounts", "email", "accounts", "<name>", "smtp", "port"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port on which the SMTP server listens. If\n<code>null</code> then the default port is used.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "{ }", "description": "Configuration for secure connections.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "smtp", "tls"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp.tls", "type": "submodule", "descriptionHTML": "<p>Configuration for secure connections.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"config.accounts.email.certificatesFile\"", "description": "Path to file containing certificate authorities that should\nbe used to validate the connection authenticity. If\nnull then the system default is used.\nNote, if set then the system default may still be accepted.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "smtp", "tls", "certificatesFile"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp.tls.certificatesFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to file containing certificate authorities that should\nbe used to validate the connection authenticity. If\n<code>null</code> then the system default is used.\nNote, if set then the system default may still be accepted.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "true", "description": "Whether to enable TLS/SSL.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "smtp", "tls", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp.tls.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable TLS/SSL.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "false", "description": "Whether to use STARTTLS.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "smtp", "tls", "useStartTls"], "readOnly": false, "title": "accounts.email.accounts.<name>.smtp.tls.useStartTls", "type": "boolean", "descriptionHTML": "<p>Whether to use STARTTLS.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Whether to enable the Thunderbird mail client for this account.", "example": "true", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "enable"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Thunderbird mail client for this account.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "List of message filters to add to this Thunderbird account\nconfiguration.", "example": "[\n  {\n    name = \"Mark as Read on Archive\";\n    enabled = true;\n    type = \"128\";\n    action = \"Mark read\";\n    condition = \"ALL\";\n  }\n]\n", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters", "type": "list of (submodule)", "descriptionHTML": "<p>List of message filters to add to this Thunderbird account\nconfiguration.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "", "description": "Action to perform on matched messages.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "action"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.action", "type": "string", "descriptionHTML": "<p>Action to perform on matched messages.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "null", "description": "Argument passed to the filter action, e.g. a folder path.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "actionValue"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.actionValue", "type": "null or string", "descriptionHTML": "<p>Argument passed to the filter action, e.g. a folder path.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "", "description": "Condition to match messages against.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "condition"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.condition", "type": "string", "descriptionHTML": "<p>Condition to match messages against.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "true", "description": "Whether this filter is currently active.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "enabled"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.enabled", "type": "boolean", "descriptionHTML": "<p>Whether this filter is currently active.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "null", "description": "Extra settings to apply to the filter", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "extraConfig"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.extraConfig", "type": "null or string", "descriptionHTML": "<p>Extra settings to apply to the filter</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "", "description": "Name for the filter.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "name"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.name", "type": "string", "descriptionHTML": "<p>Name for the filter.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "null", "description": "The raw text of the filter.\nNote that this will override all other options.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "text"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.text", "type": "null or string", "descriptionHTML": "<p>The raw text of the filter.\nNote that this will override all other options.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "", "description": "Type for this filter.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "messageFilters", "*", "type"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.messageFilters.*.type", "type": "string", "descriptionHTML": "<p>Type for this filter.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "_: { }", "description": "Extra settings to add to each identity of this Thunderbird\naccount configuration. The {var}id given as\nargument is an automatically generated identifier.", "example": "id: {\n  \"mail.identity.id_${id}.protectSubject\" = false;\n  \"mail.identity.id_${id}.autoEncryptDrafts\" = false;\n};\n", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "perIdentitySettings"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.perIdentitySettings", "type": "function that evaluates to a(n) attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Extra settings to add to each identity of this Thunderbird\naccount configuration. The {var}<code>id</code> given as\nargument is an automatically generated identifier.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "List of Thunderbird profiles for which this account should be\nenabled. If this list is empty (the default), this account will\nbe enabled for all declared profiles.", "example": "[ \"profile1\" \"profile2\" ]\n", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "profiles"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.profiles", "type": "list of string", "descriptionHTML": "<p>List of Thunderbird profiles for which this account should be\nenabled. If this list is empty (the default), this account will\nbe enabled for all declared profiles.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "_: { }", "description": "Extra settings to add to this Thunderbird account configuration.\nThe {var}id given as argument is an automatically\ngenerated account identifier.", "example": "id: {\n  \"mail.server.server_${id}.check_new_mail\" = false;\n};\n", "loc": ["accounts", "email", "accounts", "<name>", "thunderbird", "settings"], "readOnly": false, "title": "accounts.email.accounts.<name>.thunderbird.settings", "type": "function that evaluates to a(n) attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Extra settings to add to this Thunderbird account configuration.\nThe {var}<code>id</code> given as argument is an automatically\ngenerated account identifier.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "null", "description": "The server username of this account. This will be used as\nthe SMTP, IMAP, and JMAP user name.", "example": "", "loc": ["accounts", "email", "accounts", "<name>", "userName"], "readOnly": false, "title": "accounts.email.accounts.<name>.userName", "type": "null or string", "descriptionHTML": "<p>The server username of this account. This will be used as\nthe SMTP, IMAP, and JMAP user name.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"/etc/ssl/certs/ca-certificates.crt\"", "description": "Path to default file containing certificate authorities that\nshould be used to validate the connection authenticity. This\npath may be overridden on a per-account basis.", "example": "", "loc": ["accounts", "email", "certificatesFile"], "readOnly": false, "title": "accounts.email.certificatesFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to default file containing certificate authorities that\nshould be used to validate the connection authenticity. This\npath may be overridden on a per-account basis.</p>"}, {"declarations": [{"name": "<accounts/email.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/accounts/email.nix"}], "default": "\"Maildir\"", "description": "The base directory for account maildir directories. May be a\nrelative path (e.g. the user setting this value as \"MyMaildir\"),\nin which case it is relative the home directory (e.g. resulting\nin \"~/MyMaildir\").", "example": "", "loc": ["accounts", "email", "maildirBasePath"], "readOnly": false, "title": "accounts.email.maildirBasePath", "type": "string", "descriptionHTML": "<p>The base directory for account maildir directories. May be a\nrelative path (e.g. the user setting this value as \"MyMaildir\"),\nin which case it is relative the home directory (e.g. resulting\nin \"~/MyMaildir\").</p>"}, {"declarations": [{"name": "<dbus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/dbus.nix"}], "default": "[ ]", "description": "Packages whose D-Bus configuration files should be included in\nthe configuration of the D-Bus session-wide message bus. Specifically,\nfiles in \u00abpkg\u00bb/share/dbus-1/services will be included in the user's\n$XDG_DATA_HOME/dbus-1/services directory.", "example": "", "loc": ["dbus", "packages"], "readOnly": false, "title": "dbus.packages", "type": "list of package", "descriptionHTML": "<p>Packages whose D-Bus configuration files should be included in\nthe configuration of the D-Bus session-wide message bus. Specifically,\nfiles in \u00abpkg\u00bb/share/dbus-1/services will be included in the user's\n$XDG_DATA_HOME/dbus-1/services directory.</p>"}, {"declarations": [{"name": "<misc/dconf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/dconf.nix"}], "default": "{ }", "description": "Settings to write to the dconf configuration system.\nNote that the database is strongly-typed so you need to use the same types\nas described in the GSettings schema. For example, if an option is of type\nuint32 (u), you need to wrap the number\nusing the lib.hm.gvariant.mkUint32 constructor.\nOtherwise, since Nix integers are implicitly coerced to int32\n(i), it would get stored in the database as such, and GSettings\nmight be confused when loading the setting.\nYou might want to use dconf2nix\nto convert dconf database dumps into compatible Nix expression.", "example": "{\n  \"org/gnome/calculator\" = {\n    button-mode = \"programming\";\n    show-thousands = true;\n    base = 10;\n    word-size = 64;\n    window-position = lib.hm.gvariant.mkTuple [100 100];\n  };\n}\n", "loc": ["dconf", "settings"], "readOnly": false, "title": "dconf.settings", "type": "attribute set of attribute set of (GVariant value)", "descriptionHTML": "<p>Settings to write to the dconf configuration system.</p>\n<p>Note that the database is strongly-typed so you need to use the same types\nas described in the GSettings schema. For example, if an option is of type\n<code>uint32</code> (<code>u</code>), you need to wrap the number\nusing the <code>lib.hm.gvariant.mkUint32</code> constructor.\nOtherwise, since Nix integers are implicitly coerced to <code>int32</code>\n(<code>i</code>), it would get stored in the database as such, and GSettings\nmight be confused when loading the setting.</p>\n<p>You might want to use <a href=\"https://github.com/gvolpe/dconf2nix\">dconf2nix</a>\nto convert dconf database dumps into compatible Nix expression.</p>"}, {"declarations": [{"name": "<misc/editorconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/editorconfig.nix"}], "default": "false", "description": "Whether to enable EditorConfig home configuration file.", "example": "true", "loc": ["editorconfig", "enable"], "readOnly": false, "title": "editorconfig.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable EditorConfig home configuration file.</p>"}, {"declarations": [{"name": "<misc/editorconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/editorconfig.nix"}], "default": "{ }", "description": "Configuration written to {file}$HOME/.editorconfig.\nroot = true is automatically added to the file,\nit must not be added here.\nSee https://editorconfig.org for documentation.", "example": "{\n  \"*\" = {\n    charset = \"utf-8\";\n    end_of_line = \"lf\";\n    trim_trailing_whitespace = true;\n    insert_final_newline = true;\n    max_line_width = 78;\n    indent_style = \"space\";\n    indent_size = 4;\n  };\n};\n", "loc": ["editorconfig", "settings"], "readOnly": false, "title": "editorconfig.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to {file}<code>$HOME/.editorconfig</code>.\n<code>root = true</code> is automatically added to the file,\nit must not be added here.\nSee <a href=\"https://editorconfig.org\">https://editorconfig.org</a> for documentation.</p>"}, {"declarations": [{"name": "<misc/fontconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/fontconfig.nix"}], "default": "[ ]", "description": "Per-user default emoji font(s). Multiple fonts may be listed in\ncase a font does not support all emoji.\nNote that fontconfig matches color emoji fonts preferentially,\nso if you want to use a black and white font while having\na color font installed (eg. Noto Color Emoji installed alongside\nNoto Emoji), fontconfig will still choose the color font even\nwhen it is later in the list.", "example": "", "loc": ["fonts", "fontconfig", "defaultFonts", "emoji"], "readOnly": false, "title": "fonts.fontconfig.defaultFonts.emoji", "type": "list of string", "descriptionHTML": "<p>Per-user default emoji font(s). Multiple fonts may be listed in\ncase a font does not support all emoji.</p>\n<p>Note that fontconfig matches color emoji fonts preferentially,\nso if you want to use a black and white font while having\na color font installed (eg. Noto Color Emoji installed alongside\nNoto Emoji), fontconfig will still choose the color font even\nwhen it is later in the list.</p>"}, {"declarations": [{"name": "<misc/fontconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/fontconfig.nix"}], "default": "[ ]", "description": "Per-user default monospace font(s). Multiple fonts may be listed in\ncase multiple languages must be supported.", "example": "", "loc": ["fonts", "fontconfig", "defaultFonts", "monospace"], "readOnly": false, "title": "fonts.fontconfig.defaultFonts.monospace", "type": "list of string", "descriptionHTML": "<p>Per-user default monospace font(s). Multiple fonts may be listed in\ncase multiple languages must be supported.</p>"}, {"declarations": [{"name": "<misc/fontconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/fontconfig.nix"}], "default": "[ ]", "description": "Per-user default sans serif font(s). Multiple fonts may be listed\nin case multiple languages must be supported.", "example": "", "loc": ["fonts", "fontconfig", "defaultFonts", "sansSerif"], "readOnly": false, "title": "fonts.fontconfig.defaultFonts.sansSerif", "type": "list of string", "descriptionHTML": "<p>Per-user default sans serif font(s). Multiple fonts may be listed\nin case multiple languages must be supported.</p>"}, {"declarations": [{"name": "<misc/fontconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/fontconfig.nix"}], "default": "[ ]", "description": "Per-user default serif font(s). Multiple fonts may be listed in\ncase multiple languages must be supported.", "example": "", "loc": ["fonts", "fontconfig", "defaultFonts", "serif"], "readOnly": false, "title": "fonts.fontconfig.defaultFonts.serif", "type": "list of string", "descriptionHTML": "<p>Per-user default serif font(s). Multiple fonts may be listed in\ncase multiple languages must be supported.</p>"}, {"declarations": [{"name": "<misc/fontconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/fontconfig.nix"}], "default": "false", "description": "Whether to enable fontconfig configuration. This will, for\nexample, allow fontconfig to discover fonts and\nconfigurations installed through\n{var}home.packages and\n{command}nix-env.", "example": "", "loc": ["fonts", "fontconfig", "enable"], "readOnly": false, "title": "fonts.fontconfig.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fontconfig configuration. This will, for\nexample, allow fontconfig to discover fonts and\nconfigurations installed through\n{var}<code>home.packages</code> and\n{command}<code>nix-env</code>.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Default cursor theme for all GTK versions.", "example": "", "loc": ["gtk", "cursorTheme"], "readOnly": false, "title": "gtk.cursorTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Default cursor theme for all GTK versions.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "", "description": "The name of the cursor theme within the package.", "example": "\"Vanilla-DMZ\"", "loc": ["gtk", "cursorTheme", "name"], "readOnly": false, "title": "gtk.cursorTheme.name", "type": "string", "descriptionHTML": "<p>The name of the cursor theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Package providing the cursor theme. This package will be installed\nto your profile. If null then the cursor theme\nis assumed to already be available in your profile.", "example": "pkgs.vanilla-dmz", "loc": ["gtk", "cursorTheme", "package"], "readOnly": false, "title": "gtk.cursorTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the cursor theme. This package will be installed\nto your profile. If <code>null</code> then the cursor theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "The size of the cursor.", "example": "16", "loc": ["gtk", "cursorTheme", "size"], "readOnly": false, "title": "gtk.cursorTheme.size", "type": "null or signed integer", "descriptionHTML": "<p>The size of the cursor.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "false", "description": "Whether to enable GTK theming and configuration.", "example": "true", "loc": ["gtk", "enable"], "readOnly": false, "title": "gtk.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GTK theming and configuration.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Default font for all GTK versions.", "example": "", "loc": ["gtk", "font"], "readOnly": false, "title": "gtk.font", "type": "null or (submodule)", "descriptionHTML": "<p>Default font for all GTK versions.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "", "description": "The family name of the font within the package.", "example": "\"DejaVu Sans\"", "loc": ["gtk", "font", "name"], "readOnly": false, "title": "gtk.font.name", "type": "string", "descriptionHTML": "<p>The family name of the font within the package.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Package providing the font. This package will be installed\nto your profile. If null then the font\nis assumed to already be available in your profile.", "example": "pkgs.dejavu_fonts", "loc": ["gtk", "font", "package"], "readOnly": false, "title": "gtk.font.package", "type": "null or package", "descriptionHTML": "<p>Package providing the font. This package will be installed\nto your profile. If <code>null</code> then the font\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "The size of the font.", "example": "\"8\"", "loc": ["gtk", "font", "size"], "readOnly": false, "title": "gtk.font.size", "type": "null or signed integer or floating point number", "descriptionHTML": "<p>The size of the font.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "\"${config.home.homeDirectory}/.gtkrc-2.0\"", "description": "The location of the GTK 2 configuration file.", "example": "\"${config.xdg.configHome}/gtk-2.0/gtkrc\"", "loc": ["gtk", "gtk2", "configLocation"], "readOnly": false, "title": "gtk.gtk2.configLocation", "type": "absolute path", "descriptionHTML": "<p>The location of the GTK 2 configuration file.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "config.gtk.cursorTheme", "description": "Cursor theme for GTK 2 applications.", "example": "", "loc": ["gtk", "gtk2", "cursorTheme"], "readOnly": false, "title": "gtk.gtk2.cursorTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Cursor theme for GTK 2 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "", "description": "The name of the cursor theme within the package.", "example": "\"Vanilla-DMZ\"", "loc": ["gtk", "gtk2", "cursorTheme", "name"], "readOnly": false, "title": "gtk.gtk2.cursorTheme.name", "type": "string", "descriptionHTML": "<p>The name of the cursor theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "null", "description": "Package providing the cursor theme. This package will be installed\nto your profile. If null then the cursor theme\nis assumed to already be available in your profile.", "example": "pkgs.vanilla-dmz", "loc": ["gtk", "gtk2", "cursorTheme", "package"], "readOnly": false, "title": "gtk.gtk2.cursorTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the cursor theme. This package will be installed\nto your profile. If <code>null</code> then the cursor theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "null", "description": "The size of the cursor.", "example": "16", "loc": ["gtk", "gtk2", "cursorTheme", "size"], "readOnly": false, "title": "gtk.gtk2.cursorTheme.size", "type": "null or signed integer", "descriptionHTML": "<p>The size of the cursor.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "true", "description": "Whether to enable GTK 2 configuration.", "example": "true", "loc": ["gtk", "gtk2", "enable"], "readOnly": false, "title": "gtk.gtk2.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GTK 2 configuration.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "\"\"", "description": "Extra lines to add to {file}~/.gtkrc-2.0.", "example": "\"gtk-can-change-accels = 1\"", "loc": ["gtk", "gtk2", "extraConfig"], "readOnly": false, "title": "gtk.gtk2.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines to add to {file}<code>~/.gtkrc-2.0</code>.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "config.gtk.font", "description": "Font for GTK 2 applications.", "example": "", "loc": ["gtk", "gtk2", "font"], "readOnly": false, "title": "gtk.gtk2.font", "type": "null or (submodule)", "descriptionHTML": "<p>Font for GTK 2 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "", "description": "The family name of the font within the package.", "example": "\"DejaVu Sans\"", "loc": ["gtk", "gtk2", "font", "name"], "readOnly": false, "title": "gtk.gtk2.font.name", "type": "string", "descriptionHTML": "<p>The family name of the font within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "null", "description": "Package providing the font. This package will be installed\nto your profile. If null then the font\nis assumed to already be available in your profile.", "example": "pkgs.dejavu_fonts", "loc": ["gtk", "gtk2", "font", "package"], "readOnly": false, "title": "gtk.gtk2.font.package", "type": "null or package", "descriptionHTML": "<p>Package providing the font. This package will be installed\nto your profile. If <code>null</code> then the font\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "null", "description": "The size of the font.", "example": "\"8\"", "loc": ["gtk", "gtk2", "font", "size"], "readOnly": false, "title": "gtk.gtk2.font.size", "type": "null or signed integer or floating point number", "descriptionHTML": "<p>The size of the font.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "false", "description": "Whether to enable GTK 2 config force overwrite without creating a backup.", "example": "true", "loc": ["gtk", "gtk2", "force"], "readOnly": false, "title": "gtk.gtk2.force", "type": "boolean", "descriptionHTML": "<p>Whether to enable GTK 2 config force overwrite without creating a backup.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "config.gtk.iconTheme", "description": "Icon theme for GTK 2 applications.", "example": "", "loc": ["gtk", "gtk2", "iconTheme"], "readOnly": false, "title": "gtk.gtk2.iconTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Icon theme for GTK 2 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "", "description": "The name of the icon theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "gtk2", "iconTheme", "name"], "readOnly": false, "title": "gtk.gtk2.iconTheme.name", "type": "string", "descriptionHTML": "<p>The name of the icon theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "null", "description": "Package providing the icon theme. This package will be installed\nto your profile. If null then the icon theme\nis assumed to already be available in your profile.", "example": "pkgs.adwaita-icon-theme", "loc": ["gtk", "gtk2", "iconTheme", "package"], "readOnly": false, "title": "gtk.gtk2.iconTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the icon theme. This package will be installed\nto your profile. If <code>null</code> then the icon theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "config.gtk.theme", "description": "Theme for GTK 2 applications.", "example": "", "loc": ["gtk", "gtk2", "theme"], "readOnly": false, "title": "gtk.gtk2.theme", "type": "null or (submodule)", "descriptionHTML": "<p>Theme for GTK 2 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "", "description": "The name of the theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "gtk2", "theme", "name"], "readOnly": false, "title": "gtk.gtk2.theme.name", "type": "string", "descriptionHTML": "<p>The name of the theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk2.nix"}], "default": "null", "description": "Package providing the theme. This package will be installed\nto your profile. If null then the theme\nis assumed to already be available in your profile.\nFor the theme to apply to GTK 4, this option is mandatory.", "example": "pkgs.gnome.gnome-themes-extra", "loc": ["gtk", "gtk2", "theme", "package"], "readOnly": false, "title": "gtk.gtk2.theme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the theme. This package will be installed\nto your profile. If <code>null</code> then the theme\nis assumed to already be available in your profile.</p>\n<p>For the theme to apply to GTK 4, this option is mandatory.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "[ ]", "description": "File browser bookmarks.", "example": "[\n  \"file:///home/jane/Documents\"\n]", "loc": ["gtk", "gtk3", "bookmarks"], "readOnly": false, "title": "gtk.gtk3.bookmarks", "type": "list of string", "descriptionHTML": "<p>File browser bookmarks.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "config.gtk.cursorTheme", "description": "Cursor theme for GTK 3 applications.", "example": "", "loc": ["gtk", "gtk3", "cursorTheme"], "readOnly": false, "title": "gtk.gtk3.cursorTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Cursor theme for GTK 3 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "", "description": "The name of the cursor theme within the package.", "example": "\"Vanilla-DMZ\"", "loc": ["gtk", "gtk3", "cursorTheme", "name"], "readOnly": false, "title": "gtk.gtk3.cursorTheme.name", "type": "string", "descriptionHTML": "<p>The name of the cursor theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "null", "description": "Package providing the cursor theme. This package will be installed\nto your profile. If null then the cursor theme\nis assumed to already be available in your profile.", "example": "pkgs.vanilla-dmz", "loc": ["gtk", "gtk3", "cursorTheme", "package"], "readOnly": false, "title": "gtk.gtk3.cursorTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the cursor theme. This package will be installed\nto your profile. If <code>null</code> then the cursor theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "null", "description": "The size of the cursor.", "example": "16", "loc": ["gtk", "gtk3", "cursorTheme", "size"], "readOnly": false, "title": "gtk.gtk3.cursorTheme.size", "type": "null or signed integer", "descriptionHTML": "<p>The size of the cursor.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "true", "description": "Whether to enable GTK 3 configuration.", "example": "true", "loc": ["gtk", "gtk3", "enable"], "readOnly": false, "title": "gtk.gtk3.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GTK 3 configuration.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "{ }", "description": "Extra settings for {file}$XDG_CONFIG_HOME/gtk-3.0/settings.ini.", "example": "{\n  gtk-cursor-blink = false;\n  gtk-recent-files-limit = 20;\n}", "loc": ["gtk", "gtk3", "extraConfig"], "readOnly": false, "title": "gtk.gtk3.extraConfig", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Extra settings for {file}<code>$XDG_CONFIG_HOME/gtk-3.0/settings.ini</code>.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "\"\"", "description": "Extra CSS for {file}$XDG_CONFIG_HOME/gtk-3.0/gtk.css.", "example": "", "loc": ["gtk", "gtk3", "extraCss"], "readOnly": false, "title": "gtk.gtk3.extraCss", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra CSS for {file}<code>$XDG_CONFIG_HOME/gtk-3.0/gtk.css</code>.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "config.gtk.font", "description": "Font for GTK 3 applications.", "example": "", "loc": ["gtk", "gtk3", "font"], "readOnly": false, "title": "gtk.gtk3.font", "type": "null or (submodule)", "descriptionHTML": "<p>Font for GTK 3 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "", "description": "The family name of the font within the package.", "example": "\"DejaVu Sans\"", "loc": ["gtk", "gtk3", "font", "name"], "readOnly": false, "title": "gtk.gtk3.font.name", "type": "string", "descriptionHTML": "<p>The family name of the font within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "null", "description": "Package providing the font. This package will be installed\nto your profile. If null then the font\nis assumed to already be available in your profile.", "example": "pkgs.dejavu_fonts", "loc": ["gtk", "gtk3", "font", "package"], "readOnly": false, "title": "gtk.gtk3.font.package", "type": "null or package", "descriptionHTML": "<p>Package providing the font. This package will be installed\nto your profile. If <code>null</code> then the font\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "null", "description": "The size of the font.", "example": "\"8\"", "loc": ["gtk", "gtk3", "font", "size"], "readOnly": false, "title": "gtk.gtk3.font.size", "type": "null or signed integer or floating point number", "descriptionHTML": "<p>The size of the font.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "config.gtk.iconTheme", "description": "Icon theme for GTK 3 applications.", "example": "", "loc": ["gtk", "gtk3", "iconTheme"], "readOnly": false, "title": "gtk.gtk3.iconTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Icon theme for GTK 3 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "", "description": "The name of the icon theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "gtk3", "iconTheme", "name"], "readOnly": false, "title": "gtk.gtk3.iconTheme.name", "type": "string", "descriptionHTML": "<p>The name of the icon theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "null", "description": "Package providing the icon theme. This package will be installed\nto your profile. If null then the icon theme\nis assumed to already be available in your profile.", "example": "pkgs.adwaita-icon-theme", "loc": ["gtk", "gtk3", "iconTheme", "package"], "readOnly": false, "title": "gtk.gtk3.iconTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the icon theme. This package will be installed\nto your profile. If <code>null</code> then the icon theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "config.gtk.theme", "description": "Theme for GTK 3 applications.", "example": "", "loc": ["gtk", "gtk3", "theme"], "readOnly": false, "title": "gtk.gtk3.theme", "type": "null or (submodule)", "descriptionHTML": "<p>Theme for GTK 3 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "", "description": "The name of the theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "gtk3", "theme", "name"], "readOnly": false, "title": "gtk.gtk3.theme.name", "type": "string", "descriptionHTML": "<p>The name of the theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk3.nix"}], "default": "null", "description": "Package providing the theme. This package will be installed\nto your profile. If null then the theme\nis assumed to already be available in your profile.\nFor the theme to apply to GTK 4, this option is mandatory.", "example": "pkgs.gnome.gnome-themes-extra", "loc": ["gtk", "gtk3", "theme", "package"], "readOnly": false, "title": "gtk.gtk3.theme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the theme. This package will be installed\nto your profile. If <code>null</code> then the theme\nis assumed to already be available in your profile.</p>\n<p>For the theme to apply to GTK 4, this option is mandatory.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "config.gtk.cursorTheme", "description": "Cursor theme for GTK 4 applications.", "example": "", "loc": ["gtk", "gtk4", "cursorTheme"], "readOnly": false, "title": "gtk.gtk4.cursorTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Cursor theme for GTK 4 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "", "description": "The name of the cursor theme within the package.", "example": "\"Vanilla-DMZ\"", "loc": ["gtk", "gtk4", "cursorTheme", "name"], "readOnly": false, "title": "gtk.gtk4.cursorTheme.name", "type": "string", "descriptionHTML": "<p>The name of the cursor theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "null", "description": "Package providing the cursor theme. This package will be installed\nto your profile. If null then the cursor theme\nis assumed to already be available in your profile.", "example": "pkgs.vanilla-dmz", "loc": ["gtk", "gtk4", "cursorTheme", "package"], "readOnly": false, "title": "gtk.gtk4.cursorTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the cursor theme. This package will be installed\nto your profile. If <code>null</code> then the cursor theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "null", "description": "The size of the cursor.", "example": "16", "loc": ["gtk", "gtk4", "cursorTheme", "size"], "readOnly": false, "title": "gtk.gtk4.cursorTheme.size", "type": "null or signed integer", "descriptionHTML": "<p>The size of the cursor.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "true", "description": "Whether to enable GTK 4 configuration.", "example": "true", "loc": ["gtk", "gtk4", "enable"], "readOnly": false, "title": "gtk.gtk4.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GTK 4 configuration.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "{ }", "description": "Extra settings for {file}$XDG_CONFIG_HOME/gtk-4.0/settings.ini.", "example": "{\n  gtk-cursor-blink = false;\n  gtk-recent-files-limit = 20;\n}", "loc": ["gtk", "gtk4", "extraConfig"], "readOnly": false, "title": "gtk.gtk4.extraConfig", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Extra settings for {file}<code>$XDG_CONFIG_HOME/gtk-4.0/settings.ini</code>.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "\"\"", "description": "Extra CSS for {file}$XDG_CONFIG_HOME/gtk-4.0/gtk.css.", "example": "", "loc": ["gtk", "gtk4", "extraCss"], "readOnly": false, "title": "gtk.gtk4.extraCss", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra CSS for {file}<code>$XDG_CONFIG_HOME/gtk-4.0/gtk.css</code>.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "config.gtk.font", "description": "Font for GTK 4 applications.", "example": "", "loc": ["gtk", "gtk4", "font"], "readOnly": false, "title": "gtk.gtk4.font", "type": "null or (submodule)", "descriptionHTML": "<p>Font for GTK 4 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "", "description": "The family name of the font within the package.", "example": "\"DejaVu Sans\"", "loc": ["gtk", "gtk4", "font", "name"], "readOnly": false, "title": "gtk.gtk4.font.name", "type": "string", "descriptionHTML": "<p>The family name of the font within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "null", "description": "Package providing the font. This package will be installed\nto your profile. If null then the font\nis assumed to already be available in your profile.", "example": "pkgs.dejavu_fonts", "loc": ["gtk", "gtk4", "font", "package"], "readOnly": false, "title": "gtk.gtk4.font.package", "type": "null or package", "descriptionHTML": "<p>Package providing the font. This package will be installed\nto your profile. If <code>null</code> then the font\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "null", "description": "The size of the font.", "example": "\"8\"", "loc": ["gtk", "gtk4", "font", "size"], "readOnly": false, "title": "gtk.gtk4.font.size", "type": "null or signed integer or floating point number", "descriptionHTML": "<p>The size of the font.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "config.gtk.iconTheme", "description": "Icon theme for GTK 4 applications.", "example": "", "loc": ["gtk", "gtk4", "iconTheme"], "readOnly": false, "title": "gtk.gtk4.iconTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Icon theme for GTK 4 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "", "description": "The name of the icon theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "gtk4", "iconTheme", "name"], "readOnly": false, "title": "gtk.gtk4.iconTheme.name", "type": "string", "descriptionHTML": "<p>The name of the icon theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "null", "description": "Package providing the icon theme. This package will be installed\nto your profile. If null then the icon theme\nis assumed to already be available in your profile.", "example": "pkgs.adwaita-icon-theme", "loc": ["gtk", "gtk4", "iconTheme", "package"], "readOnly": false, "title": "gtk.gtk4.iconTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the icon theme. This package will be installed\nto your profile. If <code>null</code> then the icon theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "config.gtk.theme", "description": "Theme for GTK 4 applications.", "example": "", "loc": ["gtk", "gtk4", "theme"], "readOnly": false, "title": "gtk.gtk4.theme", "type": "null or (submodule)", "descriptionHTML": "<p>Theme for GTK 4 applications.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "", "description": "The name of the theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "gtk4", "theme", "name"], "readOnly": false, "title": "gtk.gtk4.theme.name", "type": "string", "descriptionHTML": "<p>The name of the theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk/gtk4.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk/gtk4.nix"}], "default": "null", "description": "Package providing the theme. This package will be installed\nto your profile. If null then the theme\nis assumed to already be available in your profile.\nFor the theme to apply to GTK 4, this option is mandatory.", "example": "pkgs.gnome.gnome-themes-extra", "loc": ["gtk", "gtk4", "theme", "package"], "readOnly": false, "title": "gtk.gtk4.theme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the theme. This package will be installed\nto your profile. If <code>null</code> then the theme\nis assumed to already be available in your profile.</p>\n<p>For the theme to apply to GTK 4, this option is mandatory.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Default icon theme for all GTK versions.", "example": "", "loc": ["gtk", "iconTheme"], "readOnly": false, "title": "gtk.iconTheme", "type": "null or (submodule)", "descriptionHTML": "<p>Default icon theme for all GTK versions.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "", "description": "The name of the icon theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "iconTheme", "name"], "readOnly": false, "title": "gtk.iconTheme.name", "type": "string", "descriptionHTML": "<p>The name of the icon theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Package providing the icon theme. This package will be installed\nto your profile. If null then the icon theme\nis assumed to already be available in your profile.", "example": "pkgs.adwaita-icon-theme", "loc": ["gtk", "iconTheme", "package"], "readOnly": false, "title": "gtk.iconTheme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the icon theme. This package will be installed\nto your profile. If <code>null</code> then the icon theme\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Default theme for all GTK versions.", "example": "", "loc": ["gtk", "theme"], "readOnly": false, "title": "gtk.theme", "type": "null or (submodule)", "descriptionHTML": "<p>Default theme for all GTK versions.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "", "description": "The name of the theme within the package.", "example": "\"Adwaita\"", "loc": ["gtk", "theme", "name"], "readOnly": false, "title": "gtk.theme.name", "type": "string", "descriptionHTML": "<p>The name of the theme within the package.</p>"}, {"declarations": [{"name": "<misc/gtk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/gtk.nix"}], "default": "null", "description": "Package providing the theme. This package will be installed\nto your profile. If null then the theme\nis assumed to already be available in your profile.\nFor the theme to apply to GTK 4, this option is mandatory.", "example": "pkgs.gnome.gnome-themes-extra", "loc": ["gtk", "theme", "package"], "readOnly": false, "title": "gtk.theme.package", "type": "null or package", "descriptionHTML": "<p>Package providing the theme. This package will be installed\nto your profile. If <code>null</code> then the theme\nis assumed to already be available in your profile.</p>\n<p>For the theme to apply to GTK 4, this option is mandatory.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "{ }", "description": "The activation scripts blocks to run when activating a Home\nManager generation. Any entry here should be idempotent,\nmeaning running twice or more times produces the same result\nas running it once.\nIf the script block produces any observable side effect, such\nas writing or deleting files, then it\nmust be placed after the special\nwriteBoundary script block. Prior to the\nwrite boundary one can place script blocks that verifies, but\ndoes not modify, the state of the system and exits if an\nunexpected state is found. For example, the\ncheckLinkTargets script block checks for\ncollisions between non-managed files and files defined in\n.\nA script block should respect the {var}DRY_RUN variable. If it is set\nthen the actions taken by the script should be logged to standard out\nand not actually performed. A convenient shell function {command}run\nis provided for activation script blocks. It is used as follows:\n{command}run {command}\n: Runs the given command on live run, otherwise prints the command to\nstandard output.\n{command}run --quiet {command}\n: Runs the given command on live run and sends its standard output to\n{file}/dev/null, otherwise prints the command to standard output.\n{command}run --silence {command}\n: Runs the given command on live run and sends its standard and error\noutput to {file}/dev/null, otherwise prints the command to standard\noutput.\nThe --quiet and --silence flags are mutually exclusive.\nA script block should also respect the {var}VERBOSE variable, and if\nset print information on standard out that may be useful for debugging\nany issue that may arise. The variable {var}VERBOSE_ARG is set to\n{option}--verbose if verbose output is enabled. You can also use the\nprovided shell function {command}verboseEcho, which acts as\n{command}echo when verbose output is enabled.", "example": "{\n  myActivationAction = lib.hm.dag.entryAfter [\"writeBoundary\"] ''\n    run ln -s $VERBOSE_ARG \\\n        ${builtins.toPath ./link-me-directly} $HOME\n  '';\n}\n", "loc": ["home", "activation"], "readOnly": false, "title": "home.activation", "type": "DAG of string", "descriptionHTML": "<p>The activation scripts blocks to run when activating a Home\nManager generation. Any entry here should be idempotent,\nmeaning running twice or more times produces the same result\nas running it once.</p>\n<p>If the script block produces any observable side effect, such\nas writing or deleting files, then it\n<em>must</em> be placed after the special\n<code>writeBoundary</code> script block. Prior to the\nwrite boundary one can place script blocks that verifies, but\ndoes not modify, the state of the system and exits if an\nunexpected state is found. For example, the\n<code>checkLinkTargets</code> script block checks for\ncollisions between non-managed files and files defined in\n<a href=\"#opt-home.file\"></a>.</p>\n<p>A script block should respect the {var}<code>DRY_RUN</code> variable. If it is set\nthen the actions taken by the script should be logged to standard out\nand not actually performed. A convenient shell function {command}<code>run</code>\nis provided for activation script blocks. It is used as follows:</p>\n<p>{command}<code>run {command}</code>\n: Runs the given command on live run, otherwise prints the command to\nstandard output.</p>\n<p>{command}<code>run --quiet {command}</code>\n: Runs the given command on live run and sends its standard output to\n{file}<code>/dev/null</code>, otherwise prints the command to standard output.</p>\n<p>{command}<code>run --silence {command}</code>\n: Runs the given command on live run and sends its standard and error\noutput to {file}<code>/dev/null</code>, otherwise prints the command to standard\noutput.</p>\n<p>The <code>--quiet</code> and <code>--silence</code> flags are mutually exclusive.</p>\n<p>A script block should also respect the {var}<code>VERBOSE</code> variable, and if\nset print information on standard out that may be useful for debugging\nany issue that may arise. The variable {var}<code>VERBOSE_ARG</code> is set to\n{option}<code>--verbose</code> if verbose output is enabled. You can also use the\nprovided shell function {command}<code>verboseEcho</code>, which acts as\n{command}<code>echo</code> when verbose output is enabled.</p>"}, {"declarations": [{"name": "<misc/debug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/debug.nix"}], "default": "false", "description": "Some Nix packages provide debug symbols for\n{command}gdb in the debug output.\nThis option ensures that those are automatically fetched from\nthe binary cache if available and {command}gdb is\nconfigured to find those symbols.", "example": "true", "loc": ["home", "enableDebugInfo"], "readOnly": false, "title": "home.enableDebugInfo", "type": "boolean", "descriptionHTML": "<p>Some Nix packages provide debug symbols for\n{command}<code>gdb</code> in the <code>debug</code> output.\nThis option ensures that those are automatically fetched from\nthe binary cache if available and {command}<code>gdb</code> is\nconfigured to find those symbols.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "true", "description": "Determines whether to check for release version mismatch between Home\nManager and Nixpkgs. Using mismatched versions is likely to cause errors\nand unexpected behavior. It is therefore highly recommended to use a\nrelease of Home Manager that corresponds with your chosen release of\nNixpkgs.\nWhen this option is enabled and a mismatch is detected then a warning\nwill be printed when the user configuration is being built.", "example": "", "loc": ["home", "enableNixpkgsReleaseCheck"], "readOnly": false, "title": "home.enableNixpkgsReleaseCheck", "type": "boolean", "descriptionHTML": "<p>Determines whether to check for release version mismatch between Home\nManager and Nixpkgs. Using mismatched versions is likely to cause errors\nand unexpected behavior. It is therefore highly recommended to use a\nrelease of Home Manager that corresponds with your chosen release of\nNixpkgs.</p>\n<p>When this option is enabled and a mismatch is detected then a warning\nwill be printed when the user configuration is being built.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "[ ]", "description": "A list of paths that should be included in the home\nclosure but generally not visible.", "example": "", "loc": ["home", "extraDependencies"], "readOnly": false, "title": "home.extraDependencies", "type": "list of path in the Nix store", "descriptionHTML": "<p>A list of paths that should be included in the home\nclosure but generally not visible.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "[ ]", "description": "List of additional package outputs of the packages\n{var}home.packages that should be installed into\nthe user environment.", "example": "[\n  \"doc\"\n  \"info\"\n  \"devdoc\"\n]", "loc": ["home", "extraOutputsToInstall"], "readOnly": false, "title": "home.extraOutputsToInstall", "type": "list of string", "descriptionHTML": "<p>List of additional package outputs of the packages\n{var}<code>home.packages</code> that should be installed into\nthe user environment.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "{ }", "description": "Attribute set of files to link into the user home.", "example": "", "loc": ["home", "file"], "readOnly": false, "title": "home.file", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of files to link into the user home.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "true", "description": "Whether this file should be generated. This option allows specific\nfiles to be disabled.", "example": "", "loc": ["home", "file", "<name>", "enable"], "readOnly": false, "title": "home.file.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether this file should be generated. This option allows specific\nfiles to be disabled.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "null", "description": "Set the execute bit. If null, defaults to the mode\nof the {var}source file or to false\nfor files created through the {var}text option.", "example": "", "loc": ["home", "file", "<name>", "executable"], "readOnly": false, "title": "home.file.<name>.executable", "type": "null or boolean", "descriptionHTML": "<p>Set the execute bit. If <code>null</code>, defaults to the mode\nof the {var}<code>source</code> file or to <code>false</code>\nfor files created through the {var}<code>text</code> option.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "false", "description": "Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.", "example": "", "loc": ["home", "file", "<name>", "force"], "readOnly": false, "title": "home.file.<name>.force", "type": "boolean", "descriptionHTML": "<p>Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "false", "description": "When recursive is enabled, adds -ignorelinks flag to lndir\nIt causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory", "example": "", "loc": ["home", "file", "<name>", "ignorelinks"], "readOnly": false, "title": "home.file.<name>.ignorelinks", "type": "boolean", "descriptionHTML": "<p>When <code>recursive</code> is enabled, adds <code>-ignorelinks</code> flag to lndir</p>\n<p>It causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "\"\"", "description": "Shell commands to run when file has changed between\ngenerations. The script will be run\nafter the new files have been linked\ninto place.\nNote, this code is always run when recursive is\nenabled.", "example": "", "loc": ["home", "file", "<name>", "onChange"], "readOnly": false, "title": "home.file.<name>.onChange", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell commands to run when file has changed between\ngenerations. The script will be run\n<em>after</em> the new files have been linked\ninto place.</p>\n<p>Note, this code is always run when <code>recursive</code> is\nenabled.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "false", "description": "If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.\nIf false (the default) then the target\nwill be a symbolic link to the source directory. If\ntrue then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.", "example": "", "loc": ["home", "file", "<name>", "recursive"], "readOnly": false, "title": "home.file.<name>.recursive", "type": "boolean", "descriptionHTML": "<p>If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.</p>\n<p>If <code>false</code> (the default) then the target\nwill be a symbolic link to the source directory. If\n<code>true</code> then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "", "description": "Path of the source file or directory. If\n\nis non-null then this option will automatically point to a file\ncontaining that text.", "example": "", "loc": ["home", "file", "<name>", "source"], "readOnly": false, "title": "home.file.<name>.source", "type": "absolute path", "descriptionHTML": "<p>Path of the source file or directory. If\n<a href=\"#opt-home.file._name_.text\"></a>\nis non-null then this option will automatically point to a file\ncontaining that text.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "name", "description": "Path to target file relative to {env}HOME.", "example": "", "loc": ["home", "file", "<name>", "target"], "readOnly": false, "title": "home.file.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target file relative to {env}<code>HOME</code>.</p>"}, {"declarations": [{"name": "<files.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/files.nix"}], "default": "null", "description": "Text of the file. If this option is null then\n\nmust be set.", "example": "", "loc": ["home", "file", "<name>", "text"], "readOnly": false, "title": "home.file.<name>.text", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the file. If this option is null then\n<a href=\"#opt-home.file._name_.source\"></a>\nmust be set.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "\"$HOME\"   for state version < 20.09,\nundefined for state version \u2265 20.09\n", "description": "The user's home directory. Must be an absolute path.", "example": "\"/home/jane.doe\"", "loc": ["home", "homeDirectory"], "readOnly": false, "title": "home.homeDirectory", "type": "absolute path", "descriptionHTML": "<p>The user's home directory. Must be an absolute path.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "\"{ }\"  for state version < 21.11,\n\"null\" for state version \u2265 21.11\n", "description": "Keyboard configuration. Set to null to\ndisable Home Manager keyboard management.", "example": "", "loc": ["home", "keyboard"], "readOnly": false, "title": "home.keyboard", "type": "null or (submodule)", "descriptionHTML": "<p>Keyboard configuration. Set to <code>null</code> to\ndisable Home Manager keyboard management.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "Keyboard layout. If null, then the system\nconfiguration will be used.\nThis defaults to null for state\nversion\u00a0\u2265\u00a019.09 and \"us\" otherwise.", "example": "", "loc": ["home", "keyboard", "layout"], "readOnly": false, "title": "home.keyboard.layout", "type": "null or string", "descriptionHTML": "<p>Keyboard layout. If <code>null</code>, then the system\nconfiguration will be used.</p>\n<p>This defaults to <code>null</code> for state\nversion\u00a0\u2265\u00a019.09 and <code>\"us\"</code> otherwise.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "Keyboard model.", "example": "\"presario\"", "loc": ["home", "keyboard", "model"], "readOnly": false, "title": "home.keyboard.model", "type": "null or string", "descriptionHTML": "<p>Keyboard model.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "[ ]", "description": "X keyboard options; layout switching goes here.", "example": "[\n  \"grp:caps_toggle\"\n  \"grp_led:scroll\"\n]", "loc": ["home", "keyboard", "options"], "readOnly": false, "title": "home.keyboard.options", "type": "list of string", "descriptionHTML": "<p>X keyboard options; layout switching goes here.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "X keyboard variant. If null, then the\nsystem configuration will be used.\nThis defaults to null for state\nversion\u00a0\u2265\u00a019.09 and \"\" otherwise.", "example": "\"colemak\"", "loc": ["home", "keyboard", "variant"], "readOnly": false, "title": "home.keyboard.variant", "type": "null or string", "descriptionHTML": "<p>X keyboard variant. If <code>null</code>, then the\nsystem configuration will be used.</p>\n<p>This defaults to <code>null</code> for state\nversion\u00a0\u2265\u00a019.09 and <code>\"\"</code> otherwise.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "{ }", "description": "Language configuration.", "example": "", "loc": ["home", "language"], "readOnly": false, "title": "home.language", "type": "submodule", "descriptionHTML": "<p>Language configuration.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for addresses.", "example": "", "loc": ["home", "language", "address"], "readOnly": false, "title": "home.language.address", "type": "null or string", "descriptionHTML": "<p>The language to use for addresses.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use unless overridden by a more specific option.", "example": "", "loc": ["home", "language", "base"], "readOnly": false, "title": "home.language.base", "type": "null or string", "descriptionHTML": "<p>The language to use unless overridden by a more specific option.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for collation (alphabetical ordering).", "example": "", "loc": ["home", "language", "collate"], "readOnly": false, "title": "home.language.collate", "type": "null or string", "descriptionHTML": "<p>The language to use for collation (alphabetical ordering).</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "Character classification category.", "example": "", "loc": ["home", "language", "ctype"], "readOnly": false, "title": "home.language.ctype", "type": "null or string", "descriptionHTML": "<p>Character classification category.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for measurement values.", "example": "", "loc": ["home", "language", "measurement"], "readOnly": false, "title": "home.language.measurement", "type": "null or string", "descriptionHTML": "<p>The language to use for measurement values.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for messages, application UI languages, etc.", "example": "", "loc": ["home", "language", "messages"], "readOnly": false, "title": "home.language.messages", "type": "null or string", "descriptionHTML": "<p>The language to use for messages, application UI languages, etc.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for formatting currencies and money amounts.", "example": "", "loc": ["home", "language", "monetary"], "readOnly": false, "title": "home.language.monetary", "type": "null or string", "descriptionHTML": "<p>The language to use for formatting currencies and money amounts.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for personal names.", "example": "", "loc": ["home", "language", "name"], "readOnly": false, "title": "home.language.name", "type": "null or string", "descriptionHTML": "<p>The language to use for personal names.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for numerical values.", "example": "", "loc": ["home", "language", "numeric"], "readOnly": false, "title": "home.language.numeric", "type": "null or string", "descriptionHTML": "<p>The language to use for numerical values.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for paper sizes.", "example": "", "loc": ["home", "language", "paper"], "readOnly": false, "title": "home.language.paper", "type": "null or string", "descriptionHTML": "<p>The language to use for paper sizes.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for telephone numbers.", "example": "", "loc": ["home", "language", "telephone"], "readOnly": false, "title": "home.language.telephone", "type": "null or string", "descriptionHTML": "<p>The language to use for telephone numbers.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "null", "description": "The language to use for formatting times.", "example": "", "loc": ["home", "language", "time"], "readOnly": false, "title": "home.language.time", "type": "null or string", "descriptionHTML": "<p>The language to use for formatting times.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "[ ]", "description": "The set of packages to appear in the user environment.", "example": "", "loc": ["home", "packages"], "readOnly": false, "title": "home.packages", "type": "list of package", "descriptionHTML": "<p>The set of packages to appear in the user environment.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "null", "description": "Cursor configuration.\nTop-level options declared under this submodule are backend independent\noptions. Options declared under namespaces such as x11\nare backend specific options. By default, only backend independent cursor\nconfigurations are generated. If you need configurations for specific\nbackends, you can toggle them via the enable option. For example,\n\nwill enable x11 cursor configurations.\nNote that this will merely generate the cursor configurations.\nTo apply the configurations, the relevant subsytems must also be configured.\nFor example,  will generate\nthe gtk cursor configuration, but  needs\nto be set for it to be applied.", "example": "", "loc": ["home", "pointerCursor"], "readOnly": false, "title": "home.pointerCursor", "type": "null or (submodule)", "descriptionHTML": "<p>Cursor configuration.</p>\n<p>Top-level options declared under this submodule are backend independent\noptions. Options declared under namespaces such as <code>x11</code>\nare backend specific options. By default, only backend independent cursor\nconfigurations are generated. If you need configurations for specific\nbackends, you can toggle them via the enable option. For example,\n<a href=\"#opt-home.pointerCursor.x11.enable\"></a>\nwill enable x11 cursor configurations.</p>\n<p>Note that this will merely generate the cursor configurations.\nTo apply the configurations, the relevant subsytems must also be configured.\nFor example, <a href=\"#opt-home.pointerCursor.gtk.enable\"></a> will generate\nthe gtk cursor configuration, but <a href=\"#opt-gtk.enable\"></a> needs\nto be set for it to be applied.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "true", "description": "Whether to enable .icons config generation for {option}home.pointerCursor\n.", "example": "true", "loc": ["home", "pointerCursor", "dotIcons", "enable"], "readOnly": false, "title": "home.pointerCursor.dotIcons.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable <code>.icons</code> config generation for {option}<code>home.pointerCursor</code>\n.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "false", "description": "Whether to enable cursor config generation.", "example": "true", "loc": ["home", "pointerCursor", "enable"], "readOnly": false, "title": "home.pointerCursor.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable cursor config generation.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "false", "description": "Whether to enable gtk config generation for {option}home.pointerCursor\n.", "example": "true", "loc": ["home", "pointerCursor", "gtk", "enable"], "readOnly": false, "title": "home.pointerCursor.gtk.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable gtk config generation for {option}<code>home.pointerCursor</code>\n.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "false", "description": "Whether to enable hyprcursor config generation.", "example": "true", "loc": ["home", "pointerCursor", "hyprcursor", "enable"], "readOnly": false, "title": "home.pointerCursor.hyprcursor.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable hyprcursor config generation.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "\"config.home.pointerCursor.size\"", "description": "The cursor size for hyprcursor.", "example": "32", "loc": ["home", "pointerCursor", "hyprcursor", "size"], "readOnly": false, "title": "home.pointerCursor.hyprcursor.size", "type": "signed integer", "descriptionHTML": "<p>The cursor size for hyprcursor.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "", "description": "The cursor name within the package.", "example": "\"Vanilla-DMZ\"", "loc": ["home", "pointerCursor", "name"], "readOnly": false, "title": "home.pointerCursor.name", "type": "string", "descriptionHTML": "<p>The cursor name within the package.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "", "description": "Package providing the cursor theme.", "example": "pkgs.vanilla-dmz", "loc": ["home", "pointerCursor", "package"], "readOnly": false, "title": "home.pointerCursor.package", "type": "package", "descriptionHTML": "<p>Package providing the cursor theme.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "32", "description": "The cursor size.", "example": "64", "loc": ["home", "pointerCursor", "size"], "readOnly": false, "title": "home.pointerCursor.size", "type": "signed integer", "descriptionHTML": "<p>The cursor size.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "false", "description": "Whether to enable sway config generation for {option}home.pointerCursor.", "example": "true", "loc": ["home", "pointerCursor", "sway", "enable"], "readOnly": false, "title": "home.pointerCursor.sway.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sway config generation for {option}<code>home.pointerCursor</code>.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "\"left_ptr\"", "description": "The default cursor file to use within the package.", "example": "\"X_cursor\"", "loc": ["home", "pointerCursor", "x11", "defaultCursor"], "readOnly": false, "title": "home.pointerCursor.x11.defaultCursor", "type": "string", "descriptionHTML": "<p>The default cursor file to use within the package.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "false", "description": "Whether to enable x11 config generation for {option}home.pointerCursor\n.", "example": "true", "loc": ["home", "pointerCursor", "x11", "enable"], "readOnly": false, "title": "home.pointerCursor.x11.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable x11 config generation for {option}<code>home.pointerCursor</code>\n.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "false", "description": "Whether to make programs use XDG directories whenever supported.", "example": "true", "loc": ["home", "preferXdgDirectories"], "readOnly": false, "title": "home.preferXdgDirectories", "type": "boolean", "descriptionHTML": "<p>Whether to make programs use XDG directories whenever supported.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "\"${home.homeDirectory}/.nix-profile\"  or\n\"/etc/profiles/per-user/${home.username}\"\n", "description": "The profile directory where Home Manager generations are installed.", "example": "", "loc": ["home", "profileDirectory"], "readOnly": true, "title": "home.profileDirectory", "type": "absolute path", "descriptionHTML": "<p>The profile directory where Home Manager generations are installed.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "[ ]", "description": "Extra directories to prepend to {env}PATH.\nThese directories are added to the {env}PATH variable in a\ndouble-quoted context, so expressions like $HOME are\nexpanded by the shell. However, since expressions like ~ or\n* are escaped, they will end up in the {env}PATH\nverbatim.", "example": "[\n  \"$HOME/.local/bin\"\n  \"\\${xdg.configHome}/emacs/bin\"\n  \".git/safe/../../bin\"\n]", "loc": ["home", "sessionPath"], "readOnly": false, "title": "home.sessionPath", "type": "list of string", "descriptionHTML": "<p>Extra directories to prepend to {env}<code>PATH</code>.</p>\n<p>These directories are added to the {env}<code>PATH</code> variable in a\ndouble-quoted context, so expressions like <code>$HOME</code> are\nexpanded by the shell. However, since expressions like <code>~</code> or\n<code>*</code> are escaped, they will end up in the {env}<code>PATH</code>\nverbatim.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "{ }", "description": "Extra directories to prepend to arbitrary PATH-like\nenvironment variables (e.g.: {env}MANPATH). The values\nwill be concatenated by :.\nThese directories are added to the environment variable in a\ndouble-quoted context, so expressions like $HOME are\nexpanded by the shell. However, since expressions like ~ or\n* are escaped, they will end up in the environment\nverbatim.", "example": "{\n  MANPATH = [\n    \"$HOME/.npm-packages/man\"\n    \"\\${xdg.configHome}/.local/share/man\"\n  ];\n}", "loc": ["home", "sessionSearchVariables"], "readOnly": false, "title": "home.sessionSearchVariables", "type": "attribute set of list of string", "descriptionHTML": "<p>Extra directories to prepend to arbitrary PATH-like\nenvironment variables (e.g.: {env}<code>MANPATH</code>). The values\nwill be concatenated by <code>:</code>.\nThese directories are added to the environment variable in a\ndouble-quoted context, so expressions like <code>$HOME</code> are\nexpanded by the shell. However, since expressions like <code>~</code> or\n<code>*</code> are escaped, they will end up in the environment\nverbatim.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "{ }", "description": "Environment variables to always set at login.\nThe values may refer to other environment variables using\nPOSIX.2 style variable references. For example, a variable\n{var}parameter may be referenced as\n$parameter or ${parameter}. A\ndefault value foo may be given as per\n${parameter:-foo} and, similarly, an alternate\nvalue bar can be given as per\n${parameter:+bar}.\nNote, these variables may be set in any order so no session\nvariable may have a runtime dependency on another session\nvariable. In particular code like\nnix\nhome.sessionVariables = {\n  FOO = \"Hello\";\n  BAR = \"$FOO World!\";\n};\nmay not work as expected. If you need to reference another\nsession variable (even if it is declared by using other options\nlike ), then do so inside Nix instead.\nThe above example then becomes\nnix\nhome.sessionVariables = {\n  FOO = \"Hello\";\n  BAR = \"${config.home.sessionVariables.FOO} World!\";\n};", "example": "{\n  EDITOR = \"emacs\";\n  GS_OPTIONS = \"-sPAPERSIZE=a4\";\n}", "loc": ["home", "sessionVariables"], "readOnly": false, "title": "home.sessionVariables", "type": "lazy attribute set of (string or absolute path or signed integer or floating point number)", "descriptionHTML": "<p>Environment variables to always set at login.</p>\n<p>The values may refer to other environment variables using\nPOSIX.2 style variable references. For example, a variable\n{var}<code>parameter</code> may be referenced as\n<code>$parameter</code> or <code>${parameter}</code>. A\ndefault value <code>foo</code> may be given as per\n<code>${parameter:-foo}</code> and, similarly, an alternate\nvalue <code>bar</code> can be given as per\n<code>${parameter:+bar}</code>.</p>\n<p>Note, these variables may be set in any order so no session\nvariable may have a runtime dependency on another session\nvariable. In particular code like\n<code>nix\nhome.sessionVariables = {\n  FOO = \"Hello\";\n  BAR = \"$FOO World!\";\n};</code>\nmay not work as expected. If you need to reference another\nsession variable (even if it is declared by using other options\nlike <a href=\"#opt-xdg.configHome\"></a>), then do so inside Nix instead.\nThe above example then becomes\n<code>nix\nhome.sessionVariables = {\n  FOO = \"Hello\";\n  BAR = \"${config.home.sessionVariables.FOO} World!\";\n};</code></p>"}, {"declarations": [{"name": "<misc/shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/shell.nix"}], "default": "[](#opt-home.shell.enableShellIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["home", "shell", "enableBashIntegration"], "readOnly": false, "title": "home.shell.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<misc/shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/shell.nix"}], "default": "[](#opt-home.shell.enableShellIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["home", "shell", "enableFishIntegration"], "readOnly": false, "title": "home.shell.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<misc/shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/shell.nix"}], "default": "[](#opt-home.shell.enableShellIntegration)", "description": "Whether to enable Ion integration.", "example": "false", "loc": ["home", "shell", "enableIonIntegration"], "readOnly": false, "title": "home.shell.enableIonIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Ion integration.</p>"}, {"declarations": [{"name": "<misc/shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/shell.nix"}], "default": "[](#opt-home.shell.enableShellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["home", "shell", "enableNushellIntegration"], "readOnly": false, "title": "home.shell.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<misc/shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/shell.nix"}], "default": "true", "description": "Whether to globally enable shell integration for all supported shells.\nIndividual shell integrations can be overridden with their respective\nshell.enable&lt;SHELL&gt;Integration option. For example, the following\ndeclaration globally disables shell integration for Bash:\nnix\nhome.shell.enableBashIntegration = false;", "example": "false", "loc": ["home", "shell", "enableShellIntegration"], "readOnly": false, "title": "home.shell.enableShellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to globally enable shell integration for all supported shells.</p>\n<p>Individual shell integrations can be overridden with their respective\n<code>shell.enable&lt;SHELL&gt;Integration</code> option. For example, the following\ndeclaration globally disables shell integration for Bash:</p>\n<p><code>nix\nhome.shell.enableBashIntegration = false;</code></p>"}, {"declarations": [{"name": "<misc/shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/shell.nix"}], "default": "[](#opt-home.shell.enableShellIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["home", "shell", "enableZshIntegration"], "readOnly": false, "title": "home.shell.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names\nin this option) to command strings or directly to build outputs.\nThis option should only be used to manage simple aliases that are\ncompatible across all shells. If you need to use a shell specific\nfeature then make sure to use a shell specific option, for example\n for Bash.", "example": "{\n  g = \"git\";\n  \"...\" = \"cd ../..\";\n}\n", "loc": ["home", "shellAliases"], "readOnly": false, "title": "home.shellAliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names\nin this option) to command strings or directly to build outputs.</p>\n<p>This option should only be used to manage simple aliases that are\ncompatible across all shells. If you need to use a shell specific\nfeature then make sure to use a shell specific option, for example\n<a href=\"#opt-programs.bash.shellAliases\"></a> for Bash.</p>"}, {"declarations": [{"name": "<misc/version.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/version.nix"}], "default": "", "description": "It is occasionally necessary for Home Manager to change\nconfiguration defaults in a way that is incompatible with\nstateful data. This could, for example, include switching the\ndefault data format or location of a file.\nThe state version indicates which default\nsettings are in effect and will therefore help avoid breaking\nprogram configurations. Switching to a higher state version\ntypically requires performing some manual steps, such as data\nconversion or moving files.", "example": "", "loc": ["home", "stateVersion"], "readOnly": false, "title": "home.stateVersion", "type": "one of \"18.09\", \"19.03\", \"19.09\", \"20.03\", \"20.09\", \"21.03\", \"21.05\", \"21.11\", \"22.05\", \"22.11\", \"23.05\", \"23.11\", \"24.05\", \"24.11\", \"25.05\", \"25.11\"", "descriptionHTML": "<p>It is occasionally necessary for Home Manager to change\nconfiguration defaults in a way that is incompatible with\nstateful data. This could, for example, include switching the\ndefault data format or location of a file.</p>\n<p>The <em>state version</em> indicates which default\nsettings are in effect and will therefore help avoid breaking\nprogram configurations. Switching to a higher state version\ntypically requires performing some manual steps, such as data\nconversion or moving files.</p>"}, {"declarations": [{"name": "<home-environment.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/home-environment.nix"}], "default": "\"$USER\"   for state version < 20.09,\nundefined for state version \u2265 20.09\n", "description": "The user's username.", "example": "\"jane.doe\"", "loc": ["home", "username"], "readOnly": false, "title": "home.username", "type": "string", "descriptionHTML": "<p>The user's username.</p>"}, {"declarations": [{"name": "<config/i18n.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/i18n.nix"}], "default": "pkgs.glibcLocales", "description": "Customized glibcLocales package providing\nthe LOCALE_ARCHIVE_* environment variable.\nThis option only applies to the Linux platform.\nWhen Home Manager is configured with NixOS, the default value\nwill be set to {var}i18n.glibcLocales from the\nsystem configuration.", "example": "pkgs.glibcLocales.override {\n  allLocales = false;\n  locales = [ \"en_US.UTF-8/UTF-8\" ];\n}\n", "loc": ["i18n", "glibcLocales"], "readOnly": false, "title": "i18n.glibcLocales", "type": "absolute path", "descriptionHTML": "<p>Customized <code>glibcLocales</code> package providing\nthe <code>LOCALE_ARCHIVE_*</code> environment variable.</p>\n<p>This option only applies to the Linux platform.</p>\n<p>When Home Manager is configured with NixOS, the default value\nwill be set to {var}<code>i18n.glibcLocales</code> from the\nsystem configuration.</p>"}, {"declarations": [{"name": "<i18n/input-method/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/default.nix"}], "default": "`true` if the deprecated option `enabled` is set, false otherwise", "description": "Whether to enable an additional input method type.", "example": "true", "loc": ["i18n", "inputMethod", "enable"], "readOnly": false, "title": "i18n.inputMethod.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable an additional input method type.</p>"}, {"declarations": [{"name": "<i18n/input-method/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/default.nix"}], "default": "null", "description": "Deprecated - use type and enable = true instead", "example": "\"fcitx5\"", "loc": ["i18n", "inputMethod", "enabled"], "readOnly": false, "title": "i18n.inputMethod.enabled", "type": "null or one of \"fcitx\", \"fcitx5\", \"nabi\", \"uim\", \"hime\", \"kime\"", "descriptionHTML": "<p>Deprecated - use <code>type</code> and <code>enable = true</code> instead</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "[ ]", "description": "Enabled Fcitx5 addons.", "example": "with pkgs; [ fcitx5-rime ]", "loc": ["i18n", "inputMethod", "fcitx5", "addons"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.addons", "type": "list of package", "descriptionHTML": "<p>Enabled Fcitx5 addons.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "<derivation fcitx5-with-addons-5.1.12>", "description": "The fcitx5 package to use.", "example": "pkgs.kdePackages.fcitx5-with-addons", "loc": ["i18n", "inputMethod", "fcitx5", "fcitx5-with-addons"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.fcitx5-with-addons", "type": "package", "descriptionHTML": "<p>The fcitx5 package to use.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "false", "description": "Ignore the user configures. Warning: When this is enabled, the\nuser config files are totally ignored and the user dict can't be saved\nand loaded.", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "ignoreUserConfig"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.ignoreUserConfig", "type": "boolean", "descriptionHTML": "<p>Ignore the user configures. <strong>Warning</strong>: When this is enabled, the\nuser config files are totally ignored and the user dict can't be saved\nand loaded.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "Quick phrases.", "example": "{\n  smile = \"\uff08\u30fb\u2200\u30fb\uff09\";\n  angry = \"(\uffe3\u30fc\uffe3)\";\n}\n", "loc": ["i18n", "inputMethod", "fcitx5", "quickPhrase"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.quickPhrase", "type": "attribute set of string", "descriptionHTML": "<p>Quick phrases.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "Quick phrase files.", "example": "{\n  words = ./words.mb;\n  numbers = ./numbers.mb;\n}\n", "loc": ["i18n", "inputMethod", "fcitx5", "quickPhraseFiles"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.quickPhraseFiles", "type": "attribute set of absolute path", "descriptionHTML": "<p>Quick phrase files.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "The addon configures in conf folder in ini format with global sections.\nEach item is written to the corresponding file.", "example": "{\n  classicui.globalSection.Theme = \"example\";\n  pinyin.globalSection.EmojiEnabled = \"True\";\n}\n", "loc": ["i18n", "inputMethod", "fcitx5", "settings", "addons"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.settings.addons", "type": "attribute set of (submodule)", "descriptionHTML": "<p>The addon configures in <code>conf</code> folder in ini format with global sections.\nEach item is written to the corresponding file.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "global section of an INI file (attrs of INI atom (null, bool, int, float or string))", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "settings", "addons", "<name>", "globalSection"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.settings.addons.<name>.globalSection", "type": "section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>global section of an INI file (attrs of INI atom (null, bool, int, float or string))</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "settings", "addons", "<name>", "sections"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.settings.addons.<name>.sections", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "The global options in config file in ini format.", "example": "{\n  Behavior = {\n    ActiveByDefault = false;\n  };\n  Hotkey = {\n    EnumerateWithTriggerKeys = true;\n    EnumerateSkipFirst = false;\n    ModifierOnlyKeyTimeout = 250;\n  };\n}\n", "loc": ["i18n", "inputMethod", "fcitx5", "settings", "globalOptions"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.settings.globalOptions", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>The global options in <code>config</code> file in ini format.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "The input method configure in profile file in ini format.", "example": "{\n  GroupOrder.\"0\" = \"Default\";\n  \"Groups/0\" = {\n    Name = \"Default\";\n    \"Default Layout\" = \"us\";\n    DefaultIM = \"pinyin\";\n  };\n  \"Groups/0/Items/0\".Name = \"keyboard-us\";\n  \"Groups/0/Items/1\".Name = \"pinyin\";\n}\n", "loc": ["i18n", "inputMethod", "fcitx5", "settings", "inputMethod"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.settings.inputMethod", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>The input method configure in <code>profile</code> file in ini format.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "{ }", "description": "Themes to be written to {file}$XDG_DATA_HOME/fcitx5/themes/${name}", "example": "\"\"", "loc": ["i18n", "inputMethod", "fcitx5", "themes"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.themes", "type": "lazy attribute set of (submodule)", "descriptionHTML": "<p>Themes to be written to {file}<code>$XDG_DATA_HOME/fcitx5/themes/${name}</code></p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "null", "description": "Path to the SVG of the highlight.", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "themes", "<name>", "highlightImage"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.themes.<name>.highlightImage", "type": "null or absolute path", "descriptionHTML": "<p>Path to the SVG of the highlight.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "null", "description": "Path to the SVG of the panel.", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "themes", "<name>", "panelImage"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.themes.<name>.panelImage", "type": "null or absolute path", "descriptionHTML": "<p>Path to the SVG of the panel.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "null", "description": "The theme.conf file of the theme.\nSee https://fcitx-im.org/wiki/Fcitx_5_Theme#Background_images\nfor more information.", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "themes", "<name>", "theme"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.themes.<name>.theme", "type": "null or (attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))) or strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>The <code>theme.conf</code> file of the theme.</p>\n<p>See https://fcitx-im.org/wiki/Fcitx_5_Theme#Background_images\nfor more information.</p>"}, {"declarations": [{"name": "<i18n/input-method/fcitx5.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/fcitx5.nix"}], "default": "false", "description": "Use the Wayland input method frontend.\nSee Using Fcitx 5 on Wayland.", "example": "", "loc": ["i18n", "inputMethod", "fcitx5", "waylandFrontend"], "readOnly": false, "title": "i18n.inputMethod.fcitx5.waylandFrontend", "type": "boolean", "descriptionHTML": "<p>Use the Wayland input method frontend.\nSee <a href=\"https://fcitx-im.org/wiki/Using_Fcitx_5_on_Wayland\">Using Fcitx 5 on Wayland</a>.</p>"}, {"declarations": [{"name": "<i18n/input-method/kime.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/kime.nix"}], "default": "\"\"", "description": "kime configuration. Refer to\nhttps://github.com/Riey/kime/blob/develop/docs/CONFIGURATION.md\nfor details on supported values.", "example": "daemon:\n  modules: [Xim,Indicator]\nindicator:\n  icon_color: White\nengine:\n  hangul:\n    layout: dubeolsik\n", "loc": ["i18n", "inputMethod", "kime", "extraConfig"], "readOnly": false, "title": "i18n.inputMethod.kime.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>kime configuration. Refer to\n<a href=\"https://github.com/Riey/kime/blob/develop/docs/CONFIGURATION.md\">https://github.com/Riey/kime/blob/develop/docs/CONFIGURATION.md</a>\nfor details on supported values.</p>"}, {"declarations": [{"name": "<i18n/input-method/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/default.nix"}], "default": "The value of the deprecated option `enabled`, defaulting to null", "description": "Select the enabled input method. Input methods are software to input\nsymbols that are not available on standard input devices.\nInput methods are especially used to input Chinese, Japanese and\nKorean characters.\nCurrently the following input methods are available in Home Manager:\nfcitx5\n: A customizable lightweight input method.\n  The next generation of fcitx.\n  Addons (including engines, dictionaries, skins) can be added using\n  .\nnabi\n: A Korean input method based on XIM. Nabi doesn't support Qt 5.\nuim\n: The \"universal input method\" is a library with an XIM bridge.\n  uim mainly supports Chinese, Japanese and Korean.\nhime\n: An extremely easy-to-use input method framework.\nkime\n: A Korean IME.", "example": "\"fcitx5\"", "loc": ["i18n", "inputMethod", "type"], "readOnly": false, "title": "i18n.inputMethod.type", "type": "null or one of \"fcitx\", \"fcitx5\", \"nabi\", \"uim\", \"hime\", \"kime\"", "descriptionHTML": "<p>Select the enabled input method. Input methods are software to input\nsymbols that are not available on standard input devices.</p>\n<p>Input methods are especially used to input Chinese, Japanese and\nKorean characters.</p>\n<p>Currently the following input methods are available in Home Manager:</p>\n<p><code>fcitx5</code>\n: A customizable lightweight input method.\n  The next generation of fcitx.\n  Addons (including engines, dictionaries, skins) can be added using\n  <a href=\"#opt-i18n.inputMethod.fcitx5.addons\"></a>.</p>\n<p><code>nabi</code>\n: A Korean input method based on XIM. Nabi doesn't support Qt 5.</p>\n<p><code>uim</code>\n: The \"universal input method\" is a library with an XIM bridge.\n  uim mainly supports Chinese, Japanese and Korean.</p>\n<p><code>hime</code>\n: An extremely easy-to-use input method framework.</p>\n<p><code>kime</code>\n: A Korean IME.</p>"}, {"declarations": [{"name": "<i18n/input-method/uim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/i18n/input-method/uim.nix"}], "default": "\"gtk\"", "description": "Selected UIM toolbar.", "example": "\"gtk-systray\"", "loc": ["i18n", "inputMethod", "uim", "toolbar"], "readOnly": false, "title": "i18n.inputMethod.uim.toolbar", "type": "one of \"gtk\", \"gtk3\", \"gtk-systray\", \"gtk3-systray\", \"qt4\"", "descriptionHTML": "<p>Selected UIM toolbar.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "{ }", "description": "Define LaunchAgents.", "example": "", "loc": ["launchd", "agents"], "readOnly": false, "title": "launchd.agents", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Define LaunchAgents.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "{ }", "description": "Define a launchd job. See {manpage}launchd.plist(5) for details.", "example": "{\n  ProgramArguments = [ \"/usr/bin/say\" \"Good afternoon\" ];\n  StartCalendarInterval = [\n    {\n      Hour = 12;\n      Minute = 0;\n    }\n  ];\n}\n", "loc": ["launchd", "agents", "<name>", "config"], "readOnly": false, "title": "launchd.agents.<name>.config", "type": "attribute set of anything", "descriptionHTML": "<p>Define a launchd job. See {manpage}<code>launchd.plist(5)</code> for details.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "When a job dies, launchd kills any remaining processes with the same process group ID as the job. Setting\nthis key to true disables that behavior.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "AbandonProcessGroup"], "readOnly": false, "title": "launchd.agents.<name>.config.AbandonProcessGroup", "type": "null or boolean", "descriptionHTML": "<p>When a job dies, launchd kills any remaining processes with the same process group ID as the job. Setting\nthis key to true disables that behavior.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies that launchd should adjust its log mask temporarily to LOG_DEBUG while\ndealing with this job.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Debug"], "readOnly": false, "title": "launchd.agents.<name>.config.Debug", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies that launchd should adjust its log mask temporarily to LOG_DEBUG while\ndealing with this job.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used as a hint to launchctl(1) that it should not submit this job to launchd when\nloading a job or jobs. The value of this key does NOT reflect the current state of the job on the running\nsystem. If you wish to know whether a job is loaded in launchd, reading this key from a configuration\nfile yourself is not a sufficient test. You should query launchd for the presence of the job using\nthe launchctl(1) list subcommand or use the ServiceManagement framework's\nSMJobCopyDictionary() method.\nNote that as of Mac OS X v10.6, this key's value in a configuration file conveys a default value, which\nis changed with the [-w] option of the launchctl(1) load and unload subcommands. These subcommands no\nlonger modify the configuration file, so the value displayed in the configuration file is not necessarily\nthe value that launchctl(1) will apply. See launchctl(1) for more information.\nPlease also be mindful that you should only use this key if the provided on-demand and KeepAlive criteria\nare insufficient to describe the conditions under which your job needs to run. The cost to have a\njob loaded in launchd is negligible, so there is no harm in loading a job which only runs once or very\nrarely.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Disabled"], "readOnly": false, "title": "launchd.agents.<name>.config.Disabled", "type": "null or boolean", "descriptionHTML": "<p>This optional key is used as a hint to <code>launchctl(1)</code> that it should not submit this job to launchd when\nloading a job or jobs. The value of this key does NOT reflect the current state of the job on the running\nsystem. If you wish to know whether a job is loaded in launchd, reading this key from a configuration\nfile yourself is not a sufficient test. You should query launchd for the presence of the job using\nthe <code>launchctl(1)</code> list subcommand or use the ServiceManagement framework's\n<code>SMJobCopyDictionary()</code> method.</p>\n<p>Note that as of Mac OS X v10.6, this key's value in a configuration file conveys a default value, which\nis changed with the [-w] option of the <code>launchctl(1)</code> load and unload subcommands. These subcommands no\nlonger modify the configuration file, so the value displayed in the configuration file is not necessarily\nthe value that <code>launchctl(1)</code> will apply. See <code>launchctl(1)</code> for more information.</p>\n<p>Please also be mindful that you should only use this key if the provided on-demand and KeepAlive criteria\nare insufficient to describe the conditions under which your job needs to run. The cost to have a\njob loaded in launchd is negligible, so there is no harm in loading a job which only runs once or very\nrarely.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This flag causes launchd to use the glob(3) mechanism to update the program arguments before invocation.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "EnableGlobbing"], "readOnly": false, "title": "launchd.agents.<name>.config.EnableGlobbing", "type": "null or boolean", "descriptionHTML": "<p>This flag causes launchd to use the <code>glob(3)</code> mechanism to update the program arguments before invocation.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This flag instructs launchd that the job promises to use vproc_transaction_begin(3) and\nvproc_transaction_end(3) to track outstanding transactions that need to be reconciled before the\nprocess can safely terminate. If no outstanding transactions are in progress, then launchd is free to\nsend the SIGKILL signal.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "EnableTransactions"], "readOnly": false, "title": "launchd.agents.<name>.config.EnableTransactions", "type": "null or boolean", "descriptionHTML": "<p>This flag instructs launchd that the job promises to use <code>vproc_transaction_begin(3)</code> and\n<code>vproc_transaction_end(3)</code> to track outstanding transactions that need to be reconciled before the\nprocess can safely terminate. If no outstanding transactions are in progress, then launchd is free to\nsend the SIGKILL signal.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to specify additional environment variables to be set before running the\njob.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "EnvironmentVariables"], "readOnly": false, "title": "launchd.agents.<name>.config.EnvironmentVariables", "type": "null or (attribute set of string)", "descriptionHTML": "<p>This optional key is used to specify additional environment variables to be set before running the\njob.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The amount of time launchd waits before sending a SIGKILL signal. The default value is 20 seconds. The\nvalue zero is interpreted as infinity.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "ExitTimeOut"], "readOnly": false, "title": "launchd.agents.<name>.config.ExitTimeOut", "type": "null or signed integer", "descriptionHTML": "<p>The amount of time launchd waits before sending a SIGKILL signal. The default value is 20 seconds. The\nvalue zero is interpreted as infinity.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies the group to run the job as. This key is only applicable when launchd is\nrunning as root. If UserName is set and GroupName is not, the the group will be set to the default\ngroup of the user.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "GroupName"], "readOnly": false, "title": "launchd.agents.<name>.config.GroupName", "type": "null or string", "descriptionHTML": "<p>This optional key specifies the group to run the job as. This key is only applicable when launchd is\nrunning as root. If UserName is set and GroupName is not, the the group will be set to the default\ngroup of the user.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "Resource limits to be imposed on the job. These adjust variables set with setrlimit(2).  The following\nkeys apply:", "example": "{\n  NumberOfFiles = 4096;\n}", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits", "type": "null or (submodule)", "descriptionHTML": "<p>Resource limits to be imposed on the job. These adjust variables set with <code>setrlimit(2)</code>.  The following\nkeys apply:</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum amount of cpu time (in seconds) to be used by each process.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "CPU"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.CPU", "type": "null or signed integer", "descriptionHTML": "<p>The maximum amount of cpu time (in seconds) to be used by each process.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The largest size (in bytes) core file that may be created.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "Core"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.Core", "type": "null or signed integer", "descriptionHTML": "<p>The largest size (in bytes) core file that may be created.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) of the data segment for a process; this defines how far a program may\nextend its break with the sbrk(2) system call.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "Data"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.Data", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) of the data segment for a process; this defines how far a program may\nextend its break with the <code>sbrk(2)</code> system call.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The largest size (in bytes) file that may be created.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "FileSize"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.FileSize", "type": "null or signed integer", "descriptionHTML": "<p>The largest size (in bytes) file that may be created.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) which a process may lock into memory using the mlock(2) function.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "MemoryLock"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.MemoryLock", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) which a process may lock into memory using the <code>mlock(2)</code> function.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum number of open files for this process.  Setting this value in a system wide daemon\nwill set the sysctl(3) kern.maxfiles (SoftResourceLimits) or kern.maxfilesperproc (HardResourceLimits)\nvalue in addition to the setrlimit(2) values.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "NumberOfFiles"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.NumberOfFiles", "type": "null or signed integer", "descriptionHTML": "<p>The maximum number of open files for this process.  Setting this value in a system wide daemon\nwill set the <code>sysctl(3)</code> kern.maxfiles (SoftResourceLimits) or kern.maxfilesperproc (HardResourceLimits)\nvalue in addition to the <code>setrlimit(2)</code> values.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum number of simultaneous processes for this user id.  Setting this value in a system\nwide daemon will set the sysctl(3) kern.maxproc (SoftResourceLimits) or kern.maxprocperuid\n(HardResourceLimits) value in addition to the setrlimit(2) values.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "NumberOfProcesses"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.NumberOfProcesses", "type": "null or signed integer", "descriptionHTML": "<p>The maximum number of simultaneous processes for this user id.  Setting this value in a system\nwide daemon will set the <code>sysctl(3)</code> kern.maxproc (SoftResourceLimits) or kern.maxprocperuid\n(HardResourceLimits) value in addition to the <code>setrlimit(2)</code> values.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) to which a process's resident set size may grow.  This imposes a\nlimit on the amount of physical memory to be given to a process; if memory is tight, the system\nwill prefer to take memory from processes that are exceeding their declared resident set size.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "ResidentSetSize"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.ResidentSetSize", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) to which a process's resident set size may grow.  This imposes a\nlimit on the amount of physical memory to be given to a process; if memory is tight, the system\nwill prefer to take memory from processes that are exceeding their declared resident set size.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) of the stack segment for a process; this defines how far a program's\nstack segment may be extended.  Stack extension is performed automatically by the system.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "HardResourceLimits", "Stack"], "readOnly": false, "title": "launchd.agents.<name>.config.HardResourceLimits.Stack", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) of the stack segment for a process; this defines how far a program's\nstack segment may be extended.  Stack extension is performed automatically by the system.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies whether initgroups(3) should be called before running the job.  The default\nis true in 10.5 and false in 10.4. This key will be ignored if the UserName key is not set.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "InitGroups"], "readOnly": false, "title": "launchd.agents.<name>.config.InitGroups", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies whether <code>initgroups(3)</code> should be called before running the job.  The default\nis true in 10.5 and false in 10.4. This key will be ignored if the UserName key is not set.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to control whether your job is to be kept continuously running or to let\ndemand and conditions control the invocation. The default is false and therefore only demand will start\nthe job. The value may be set to true to unconditionally keep the job alive. Alternatively, a dictionary\nof conditions may be specified to selectively control whether launchd keeps a job alive or not. If\nmultiple keys are provided, launchd ORs them, thus providing maximum flexibility to the job to refine\nthe logic and stall if necessary. If launchd finds no reason to restart the job, it falls back on\ndemand based invocation.  Jobs that exit quickly and frequently when configured to be kept alive will\nbe throttled to converve system resources.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "KeepAlive"], "readOnly": false, "title": "launchd.agents.<name>.config.KeepAlive", "type": "null or boolean or (submodule)", "descriptionHTML": "<p>This optional key is used to control whether your job is to be kept continuously running or to let\ndemand and conditions control the invocation. The default is false and therefore only demand will start\nthe job. The value may be set to true to unconditionally keep the job alive. Alternatively, a dictionary\nof conditions may be specified to selectively control whether launchd keeps a job alive or not. If\nmultiple keys are provided, launchd ORs them, thus providing maximum flexibility to the job to refine\nthe logic and stall if necessary. If launchd finds no reason to restart the job, it falls back on\ndemand based invocation.  Jobs that exit quickly and frequently when configured to be kept alive will\nbe throttled to converve system resources.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "", "description": "This required key uniquely identifies the job to launchd.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Label"], "readOnly": false, "title": "launchd.agents.<name>.config.Label", "type": "string", "descriptionHTML": "<p>This required key uniquely identifies the job to launchd.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "Specifies higher-level event types to be used as launch-on-demand event\nsources.  Each sub-dictionary defines events for a particular event\nsubsystem, such as \"com.apple.iokit.matching\", which can be used to\nlaunch jobs based on the appearance of nodes in the IORegistry. Each\ndictionary within the sub-dictionary specifies an event descriptor that\nis specified to each event subsystem. With this key, the job promises to\nuse the xpc_set_event_stream_handler(3) API to consume events. See\nxpc_events(3) for more details on event sources.", "example": "{\n  \"com.apple.iokit.matching\" = {\n    \"com.apple.usb.device\" = {\n      IOMatchLaunchStream = true;\n      IOProviderClass = \"IOUSBDevice\";\n      idProduct = \"*\";\n      idVendor = \"*\";\n    };\n  };\n}", "loc": ["launchd", "agents", "<name>", "config", "LaunchEvents"], "readOnly": false, "title": "launchd.agents.<name>.config.LaunchEvents", "type": "null or (attribute set)", "descriptionHTML": "<p>Specifies higher-level event types to be used as launch-on-demand event\nsources.  Each sub-dictionary defines events for a particular event\nsubsystem, such as \"com.apple.iokit.matching\", which can be used to\nlaunch jobs based on the appearance of nodes in the IORegistry. Each\ndictionary within the sub-dictionary specifies an event descriptor that\nis specified to each event subsystem. With this key, the job promises to\nuse the xpc_set_event_stream_handler(3) API to consume events. See\nxpc_events(3) for more details on event sources.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies whether the job can only be run once and only once.  In other words, if the\njob cannot be safely respawned without a full machine reboot, then set this key to be true.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "LaunchOnlyOnce"], "readOnly": false, "title": "launchd.agents.<name>.config.LaunchOnlyOnce", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies whether the job can only be run once and only once.  In other words, if the\njob cannot be safely respawned without a full machine reboot, then set this key to be true.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This configuration file only applies to hosts NOT listed with this key. Note: One should set kern.hostname\nin sysctl.conf(5) for this feature to work reliably.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "LimitLoadFromHosts"], "readOnly": false, "title": "launchd.agents.<name>.config.LimitLoadFromHosts", "type": "null or (list of string)", "descriptionHTML": "<p>This configuration file only applies to hosts NOT listed with this key. Note: One should set kern.hostname\nin <code>sysctl.conf(5)</code> for this feature to work reliably.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This configuration file only applies to the hosts listed with this key. Note: One should set kern.hostname\nin sysctl.conf(5) for this feature to work reliably.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "LimitLoadToHosts"], "readOnly": false, "title": "launchd.agents.<name>.config.LimitLoadToHosts", "type": "null or (list of string)", "descriptionHTML": "<p>This configuration file only applies to the hosts listed with this key. Note: One should set kern.hostname\nin <code>sysctl.conf(5)</code> for this feature to work reliably.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This configuration file only applies to sessions of the type specified. This key is used in concert\nwith the -S flag to {command}launchctl.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "LimitLoadToSessionType"], "readOnly": false, "title": "launchd.agents.<name>.config.LimitLoadToSessionType", "type": "null or string or list of string", "descriptionHTML": "<p>This configuration file only applies to sessions of the type specified. This key is used in concert\nwith the -S flag to {command}<code>launchctl</code>.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies whether the kernel should consider this daemon to be low priority when\ndoing file system I/O when the process is throttled with the Darwin-background classification.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "LowPriorityBackgroundIO"], "readOnly": false, "title": "launchd.agents.<name>.config.LowPriorityBackgroundIO", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies whether the kernel should consider this daemon to be low priority when\ndoing file system I/O when the process is throttled with the Darwin-background classification.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies whether the kernel should consider this daemon to be low priority when\ndoing file system I/O.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "LowPriorityIO"], "readOnly": false, "title": "launchd.agents.<name>.config.LowPriorityIO", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies whether the kernel should consider this daemon to be low priority when\ndoing file system I/O.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to specify Mach services to be registered with the Mach bootstrap sub-system.\nEach key in this dictionary should be the name of service to be advertised. The value of the key must\nbe a boolean and set to true.  Alternatively, a dictionary can be used instead of a simple true value.\nFinally, for the job itself, the values will be replaced with Mach ports at the time of check-in with\nlaunchd.", "example": "{\n  \"org.nixos.service\" = {\n    ResetAtClose = true;\n  };\n}", "loc": ["launchd", "agents", "<name>", "config", "MachServices"], "readOnly": false, "title": "launchd.agents.<name>.config.MachServices", "type": "null or (attribute set of (boolean or (submodule)))", "descriptionHTML": "<p>This optional key is used to specify Mach services to be registered with the Mach bootstrap sub-system.\nEach key in this dictionary should be the name of service to be advertised. The value of the key must\nbe a boolean and set to true.  Alternatively, a dictionary can be used instead of a simple true value.</p>\n<p>Finally, for the job itself, the values will be replaced with Mach ports at the time of check-in with\nlaunchd.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies what nice(3) value should be applied to the daemon.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Nice"], "readOnly": false, "title": "launchd.agents.<name>.config.Nice", "type": "null or signed integer", "descriptionHTML": "<p>This optional key specifies what nice(3) value should be applied to the daemon.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This key was used in Mac OS X 10.4 to control whether a job was kept alive or not. The default was\ntrue.  This key has been deprecated and replaced in Mac OS X 10.5 and later with the more powerful\nKeepAlive option.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "OnDemand"], "readOnly": false, "title": "launchd.agents.<name>.config.OnDemand", "type": "null or boolean", "descriptionHTML": "<p>This key was used in Mac OS X 10.4 to control whether a job was kept alive or not. The default was\ntrue.  This key has been deprecated and replaced in Mac OS X 10.5 and later with the more powerful\nKeepAlive option.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key describes, at a high level, the intended purpose of the job.  The system will apply\nresource limits based on what kind of job it is. If left unspecified, the system will apply light\nresource limits to the job, throttling its CPU usage and I/O bandwidth. The following are valid values:\nBackground\n: Background jobs are generally processes that do work that was not directly requested by the user.\n  The resource limits applied to Background jobs are intended to prevent them from disrupting the\n  user experience.\nStandard\n: Standard jobs are equivalent to no ProcessType being set.\nAdaptive\n: Adaptive jobs move between the Background and Interactive classifications based on activity over\n  XPC connections. See xpc_transaction_begin(3) for details.\nInteractive\n: Interactive jobs run with the same resource limitations as apps, that is to say, none. Interactive\n  jobs are critical to maintaining a responsive user experience, and this key should only be\n  used if an app's ability to be responsive depends on it, and cannot be made Adaptive.", "example": "\"Background\"", "loc": ["launchd", "agents", "<name>", "config", "ProcessType"], "readOnly": false, "title": "launchd.agents.<name>.config.ProcessType", "type": "null or one of \"Background\", \"Standard\", \"Adaptive\", \"Interactive\"", "descriptionHTML": "<p>This optional key describes, at a high level, the intended purpose of the job.  The system will apply\nresource limits based on what kind of job it is. If left unspecified, the system will apply light\nresource limits to the job, throttling its CPU usage and I/O bandwidth. The following are valid values:</p>\n<p>Background\n: Background jobs are generally processes that do work that was not directly requested by the user.\n  The resource limits applied to Background jobs are intended to prevent them from disrupting the\n  user experience.</p>\n<p>Standard\n: Standard jobs are equivalent to no ProcessType being set.</p>\n<p>Adaptive\n: Adaptive jobs move between the Background and Interactive classifications based on activity over\n  XPC connections. See <code>xpc_transaction_begin(3)</code> for details.</p>\n<p>Interactive\n: Interactive jobs run with the same resource limitations as apps, that is to say, none. Interactive\n  jobs are critical to maintaining a responsive user experience, and this key should only be\n  used if an app's ability to be responsive depends on it, and cannot be made Adaptive.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This key maps to the first argument of execvp(3).  If this key is missing, then the first element of\nthe array of strings provided to the ProgramArguments will be used instead.  This key is required in\nthe absence of the ProgramArguments key.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Program"], "readOnly": false, "title": "launchd.agents.<name>.config.Program", "type": "null or absolute path", "descriptionHTML": "<p>This key maps to the first argument of <code>execvp(3)</code>.  If this key is missing, then the first element of\nthe array of strings provided to the ProgramArguments will be used instead.  This key is required in\nthe absence of the ProgramArguments key.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This key maps to the second argument of execvp(3).  This key is required in the absence of the Program\nkey. Please note: many people are confused by this key. Please read execvp(3) very carefully!", "example": "", "loc": ["launchd", "agents", "<name>", "config", "ProgramArguments"], "readOnly": false, "title": "launchd.agents.<name>.config.ProgramArguments", "type": "null or (list of string)", "descriptionHTML": "<p>This key maps to the second argument of <code>execvp(3)</code>.  This key is required in the absence of the Program\nkey. Please note: many people are confused by this key. Please read <code>execvp(3)</code> very carefully!</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "Much like the WatchPaths option, this key will watch the paths for modifications. The difference being\nthat the job will only be started if the path is a directory and the directory is not empty.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "QueueDirectories"], "readOnly": false, "title": "launchd.agents.<name>.config.QueueDirectories", "type": "null or (list of string)", "descriptionHTML": "<p>Much like the WatchPaths option, this key will watch the paths for modifications. The difference being\nthat the job will only be started if the path is a directory and the directory is not empty.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to specify a directory to chroot(2) to before running the job.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "RootDirectory"], "readOnly": false, "title": "launchd.agents.<name>.config.RootDirectory", "type": "null or string", "descriptionHTML": "<p>This optional key is used to specify a directory to <code>chroot(2)</code> to before running the job.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to control whether your job is launched once at the time the job is loaded.\nThe default is false.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "RunAtLoad"], "readOnly": false, "title": "launchd.agents.<name>.config.RunAtLoad", "type": "null or boolean", "descriptionHTML": "<p>This optional key is used to control whether your job is launched once at the time the job is loaded.\nThe default is false.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies whether the job participates in advanced\ncommunication with launchd. The default is false. This flag is\nincompatible with the inetdCompatibility key.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "ServiceIPC"], "readOnly": false, "title": "launchd.agents.<name>.config.ServiceIPC", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies whether the job participates in advanced\ncommunication with launchd. The default is false. This flag is\nincompatible with the inetdCompatibility key.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This key specifies that the job should be spawned into a new security\naudit session rather than the default session for the context is belongs\nto. See auditon(2) for details.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SessionCreate"], "readOnly": false, "title": "launchd.agents.<name>.config.SessionCreate", "type": "null or boolean", "descriptionHTML": "<p>This key specifies that the job should be spawned into a new security\naudit session rather than the default session for the context is belongs\nto. See auditon(2) for details.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to specify launch on demand sockets that can be used to let launchd know when\nto run the job. The job must check-in to get a copy of the file descriptors using APIs outlined in\nlaunch(3).  The keys of the top level Sockets dictionary can be anything. They are meant for the application\ndeveloper to use to differentiate which descriptors correspond to which application level protocols\n(e.g. http vs. ftp vs. DNS...).  At check-in time, the value of each Sockets dictionary key will\nbe an array of descriptors. Daemon/Agent writers should consider all descriptors of a given key to be\nto be effectively equivalent, even though each file descriptor likely represents a different networking\nprotocol which conforms to the criteria specified in the job configuration file.\nThe parameters below are used as inputs to call getaddrinfo(3).", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets", "type": "null or (attribute set of (submodule))", "descriptionHTML": "<p>This optional key is used to specify launch on demand sockets that can be used to let launchd know when\nto run the job. The job must check-in to get a copy of the file descriptors using APIs outlined in\nlaunch(3).  The keys of the top level Sockets dictionary can be anything. They are meant for the application\ndeveloper to use to differentiate which descriptors correspond to which application level protocols\n(e.g. http vs. ftp vs. DNS...).  At check-in time, the value of each Sockets dictionary key will\nbe an array of descriptors. Daemon/Agent writers should consider all descriptors of a given key to be\nto be effectively equivalent, even though each file descriptor likely represents a different networking\nprotocol which conforms to the criteria specified in the job configuration file.</p>\n<p>The parameters below are used as inputs to call <code>getaddrinfo(3)</code>.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key can be used to request that the service be registered with the\nmDNSResponder(8).  If the value is boolean, the service name is inferred from the SockServiceName.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "Bonjour"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.Bonjour", "type": "null or boolean or list of string", "descriptionHTML": "<p>This optional key can be used to request that the service be registered with the\n<code>mDNSResponder(8)</code>.  If the value is boolean, the service name is inferred from the SockServiceName.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key can be used to request that the datagram socket join a multicast group.  If the\nvalue is a hostname, then getaddrinfo(3) will be used to join the correct multicast address for a\ngiven socket family.  If an explicit IPv4 or IPv6 address is given, it is required that the SockFamily\nfamily also be set, otherwise the results are undefined.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "MulticastGroup"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.MulticastGroup", "type": "null or string", "descriptionHTML": "<p>This optional key can be used to request that the datagram socket join a multicast group.  If the\nvalue is a hostname, then <code>getaddrinfo(3)</code> will be used to join the correct multicast address for a\ngiven socket family.  If an explicit IPv4 or IPv6 address is given, it is required that the SockFamily\nfamily also be set, otherwise the results are undefined.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is a variant of SockPathName. Instead of binding to a known path, a securely\ngenerated socket is created and the path is assigned to the environment variable that is inherited\nby all jobs spawned by launchd.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SecureSocketWithKey"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SecureSocketWithKey", "type": "null or string", "descriptionHTML": "<p>This optional key is a variant of SockPathName. Instead of binding to a known path, a securely\ngenerated socket is created and the path is assigned to the environment variable that is inherited\nby all jobs spawned by launchd.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key can be used to specifically request that \"IPv4\" or \"IPv6\" socket(s) be created.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockFamily"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockFamily", "type": "null or one of \"IPv4\", \"IPv6\"", "descriptionHTML": "<p>This optional key can be used to specifically request that \"IPv4\" or \"IPv6\" socket(s) be created.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies the node to connect(2) or bind(2) to.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockNodeName"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockNodeName", "type": "null or string", "descriptionHTML": "<p>This optional key specifies the node to <code>connect(2)</code> or <code>bind(2)</code> to.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies whether listen(2) or connect(2) should be called on the created file\ndescriptor. The default is true (\"to listen\").", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockPassive"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockPassive", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies whether <code>listen(2)</code> or <code>connect(2)</code> should be called on the created file\ndescriptor. The default is true (\"to listen\").</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies the mode of the socket. Known bug: Property lists don't support\noctal, so please convert the value to decimal.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockPathMode"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockPathMode", "type": "null or signed integer", "descriptionHTML": "<p>This optional key specifies the mode of the socket. Known bug: Property lists don't support\noctal, so please convert the value to decimal.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key implies SockFamily is set to \"Unix\". It specifies the path to connect(2) or\nbind(2) to.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockPathName"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockPathName", "type": "null or absolute path", "descriptionHTML": "<p>This optional key implies SockFamily is set to \"Unix\". It specifies the path to <code>connect(2)</code> or\n<code>bind(2)</code> to.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies the protocol to be passed to socket(2).  The only value understood by\nthis key at the moment is \"TCP\".", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockProtocol"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockProtocol", "type": "null or value \"TCP\" (singular enum)", "descriptionHTML": "<p>This optional key specifies the protocol to be passed to <code>socket(2)</code>.  The only value understood by\nthis key at the moment is \"TCP\".</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies the service on the node to connect(2) or bind(2) to.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockServiceName"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockServiceName", "type": "null or string", "descriptionHTML": "<p>This optional key specifies the service on the node to <code>connect(2)</code> or <code>bind(2)</code> to.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key tells launchctl what type of socket to create. The default is \"stream\" and\nother valid values for this key are \"dgram\" and \"seqpacket\" respectively.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Sockets", "<name>", "SockType"], "readOnly": false, "title": "launchd.agents.<name>.config.Sockets.<name>.SockType", "type": "null or one of \"stream\", \"dgram\", \"seqpacket\"", "descriptionHTML": "<p>This optional key tells launchctl what type of socket to create. The default is \"stream\" and\nother valid values for this key are \"dgram\" and \"seqpacket\" respectively.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "Resource limits to be imposed on the job. These adjust variables set with setrlimit(2).  The following\nkeys apply:", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits", "type": "null or (submodule)", "descriptionHTML": "<p>Resource limits to be imposed on the job. These adjust variables set with <code>setrlimit(2)</code>.  The following\nkeys apply:</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum amount of cpu time (in seconds) to be used by each process.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "CPU"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.CPU", "type": "null or signed integer", "descriptionHTML": "<p>The maximum amount of cpu time (in seconds) to be used by each process.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The largest size (in bytes) core file that may be created.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "Core"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.Core", "type": "null or signed integer", "descriptionHTML": "<p>The largest size (in bytes) core file that may be created.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) of the data segment for a process; this defines how far a program may\nextend its break with the sbrk(2) system call.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "Data"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.Data", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) of the data segment for a process; this defines how far a program may\nextend its break with the <code>sbrk(2)</code> system call.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The largest size (in bytes) file that may be created.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "FileSize"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.FileSize", "type": "null or signed integer", "descriptionHTML": "<p>The largest size (in bytes) file that may be created.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) which a process may lock into memory using the mlock(2) function.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "MemoryLock"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.MemoryLock", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) which a process may lock into memory using the mlock(2) function.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum number of open files for this process.  Setting this value in a system wide daemon\nwill set the sysctl(3) kern.maxfiles (SoftResourceLimits) or kern.maxfilesperproc (HardResourceLimits)\nvalue in addition to the setrlimit(2) values.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "NumberOfFiles"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.NumberOfFiles", "type": "null or signed integer", "descriptionHTML": "<p>The maximum number of open files for this process.  Setting this value in a system wide daemon\nwill set the <code>sysctl(3)</code> kern.maxfiles (SoftResourceLimits) or kern.maxfilesperproc (HardResourceLimits)\nvalue in addition to the <code>setrlimit(2)</code> values.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum number of simultaneous processes for this user id.  Setting this value in a system\nwide daemon will set the sysctl(3) kern.maxproc (SoftResourceLimits) or kern.maxprocperuid\n(HardResourceLimits) value in addition to the setrlimit(2) values.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "NumberOfProcesses"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.NumberOfProcesses", "type": "null or signed integer", "descriptionHTML": "<p>The maximum number of simultaneous processes for this user id.  Setting this value in a system\nwide daemon will set the <code>sysctl(3)</code> kern.maxproc (SoftResourceLimits) or kern.maxprocperuid\n(HardResourceLimits) value in addition to the <code>setrlimit(2)</code> values.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) to which a process's resident set size may grow.  This imposes a\nlimit on the amount of physical memory to be given to a process; if memory is tight, the system\nwill prefer to take memory from processes that are exceeding their declared resident set size.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "ResidentSetSize"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.ResidentSetSize", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) to which a process's resident set size may grow.  This imposes a\nlimit on the amount of physical memory to be given to a process; if memory is tight, the system\nwill prefer to take memory from processes that are exceeding their declared resident set size.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The maximum size (in bytes) of the stack segment for a process; this defines how far a program's\nstack segment may be extended.  Stack extension is performed automatically by the system.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "SoftResourceLimits", "Stack"], "readOnly": false, "title": "launchd.agents.<name>.config.SoftResourceLimits.Stack", "type": "null or signed integer", "descriptionHTML": "<p>The maximum size (in bytes) of the stack segment for a process; this defines how far a program's\nstack segment may be extended.  Stack extension is performed automatically by the system.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies what file should be used for data being sent to stderr when using stdio(3).", "example": "", "loc": ["launchd", "agents", "<name>", "config", "StandardErrorPath"], "readOnly": false, "title": "launchd.agents.<name>.config.StandardErrorPath", "type": "null or absolute path", "descriptionHTML": "<p>This optional key specifies what file should be used for data being sent to stderr when using <code>stdio(3)</code>.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies what file should be used for data being supplied to stdin when using\nstdio(3).", "example": "", "loc": ["launchd", "agents", "<name>", "config", "StandardInPath"], "readOnly": false, "title": "launchd.agents.<name>.config.StandardInPath", "type": "null or absolute path", "descriptionHTML": "<p>This optional key specifies what file should be used for data being supplied to stdin when using\n<code>stdio(3)</code>.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies what file should be used for data being sent to stdout when using stdio(3).", "example": "", "loc": ["launchd", "agents", "<name>", "config", "StandardOutPath"], "readOnly": false, "title": "launchd.agents.<name>.config.StandardOutPath", "type": "null or absolute path", "descriptionHTML": "<p>This optional key specifies what file should be used for data being sent to stdout when using <code>stdio(3)</code>.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key causes the job to be started every calendar interval as specified. The semantics are\nmuch like {manpage}crontab(5): Missing attributes are considered to be wildcard. Unlike cron which skips\njob invocations when the computer is asleep, launchd will start the job the next time the computer wakes\nup.  If multiple intervals transpire before the computer is woken, those events will be coalesced into\none event upon waking from sleep.\n::: {.important}\nThe list must not be empty and must not contain duplicate entries (attrsets which compare equally).\n:::\n::: {.caution}\nSince missing attrs become wildcards, an empty attrset effectively means \"every minute\".\n:::", "example": "[\n  {\n    Hour = 2;\n    Minute = 30;\n  }\n]", "loc": ["launchd", "agents", "<name>", "config", "StartCalendarInterval"], "readOnly": false, "title": "launchd.agents.<name>.config.StartCalendarInterval", "type": "null or (submodule) or unique (non-empty (list of (submodule)))", "descriptionHTML": "<p>This optional key causes the job to be started every calendar interval as specified. The semantics are\nmuch like {manpage}<code>crontab(5)</code>: Missing attributes are considered to be wildcard. Unlike cron which skips\njob invocations when the computer is asleep, launchd will start the job the next time the computer wakes\nup.  If multiple intervals transpire before the computer is woken, those events will be coalesced into\none event upon waking from sleep.</p>\n<p>::: {.important}\nThe list must not be empty and must not contain duplicate entries (attrsets which compare equally).\n:::</p>\n<p>::: {.caution}\nSince missing attrs become wildcards, an empty attrset effectively means \"every minute\".\n:::</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key causes the job to be started every N seconds.  If the system is asleep, the job will\nbe started the next time the computer wakes up.  If multiple intervals transpire before the computer is\nwoken, those events will be coalesced into one event upon wake from sleep.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "StartInterval"], "readOnly": false, "title": "launchd.agents.<name>.config.StartInterval", "type": "null or signed integer", "descriptionHTML": "<p>This optional key causes the job to be started every N seconds.  If the system is asleep, the job will\nbe started the next time the computer wakes up.  If multiple intervals transpire before the computer is\nwoken, those events will be coalesced into one event upon wake from sleep.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key causes the job to be started every time a filesystem is mounted.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "StartOnMount"], "readOnly": false, "title": "launchd.agents.<name>.config.StartOnMount", "type": "null or boolean", "descriptionHTML": "<p>This optional key causes the job to be started every time a filesystem is mounted.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This key lets one override the default throttling policy imposed on jobs by launchd.  The value is in\nseconds, and by default, jobs will not be spawned more than once every 10 seconds.  The principle\nbehind this is that jobs should linger around just in case they are needed again in the near future.\nThis not only reduces the latency of responses, but it encourages developers to amortize the cost of\nprogram invocation.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "ThrottleInterval"], "readOnly": false, "title": "launchd.agents.<name>.config.ThrottleInterval", "type": "null or signed integer", "descriptionHTML": "<p>This key lets one override the default throttling policy imposed on jobs by launchd.  The value is in\nseconds, and by default, jobs will not be spawned more than once every 10 seconds.  The principle\nbehind this is that jobs should linger around just in case they are needed again in the near future.\nThis not only reduces the latency of responses, but it encourages developers to amortize the cost of\nprogram invocation.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The recommended idle time out (in seconds) to pass to the job. If no value is specified, a default time\nout will be supplied by launchd for use by the job at check in time.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "TimeOut"], "readOnly": false, "title": "launchd.agents.<name>.config.TimeOut", "type": "null or signed integer", "descriptionHTML": "<p>The recommended idle time out (in seconds) to pass to the job. If no value is specified, a default time\nout will be supplied by launchd for use by the job at check in time.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies what value should be passed to umask(2) before running the job. Known bug:\nProperty lists don't support octal, so please convert the value to decimal.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "Umask"], "readOnly": false, "title": "launchd.agents.<name>.config.Umask", "type": "null or signed integer", "descriptionHTML": "<p>This optional key specifies what value should be passed to <code>umask(2)</code> before running the job. Known bug:\nProperty lists don't support octal, so please convert the value to decimal.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies the user to run the job as. This key is only applicable when launchd is\nrunning as root.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "UserName"], "readOnly": false, "title": "launchd.agents.<name>.config.UserName", "type": "null or string", "descriptionHTML": "<p>This optional key specifies the user to run the job as. This key is only applicable when launchd is\nrunning as root.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key specifies that launchd should instruct the kernel to have the job wait for a debugger\nto attach before any code in the job is executed.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "WaitForDebugger"], "readOnly": false, "title": "launchd.agents.<name>.config.WaitForDebugger", "type": "null or boolean", "descriptionHTML": "<p>This optional key specifies that launchd should instruct the kernel to have the job wait for a debugger\nto attach before any code in the job is executed.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key causes the job to be started if any one of the listed paths are modified.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "WatchPaths"], "readOnly": false, "title": "launchd.agents.<name>.config.WatchPaths", "type": "null or (list of absolute path)", "descriptionHTML": "<p>This optional key causes the job to be started if any one of the listed paths are modified.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This optional key is used to specify a directory to chdir(2) to before running the job.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "WorkingDirectory"], "readOnly": false, "title": "launchd.agents.<name>.config.WorkingDirectory", "type": "null or string", "descriptionHTML": "<p>This optional key is used to specify a directory to <code>chdir(2)</code> to before running the job.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "The presence of this key specifies that the daemon expects to be run as if it were launched from inetd.", "example": "{\n  Wait = true;\n}", "loc": ["launchd", "agents", "<name>", "config", "inetdCompatibility"], "readOnly": false, "title": "launchd.agents.<name>.config.inetdCompatibility", "type": "null or (submodule)", "descriptionHTML": "<p>The presence of this key specifies that the daemon expects to be run as if it were launched from inetd.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "null", "description": "This flag corresponds to the \"wait\" or \"nowait\" option of inetd. If true, then the listening\nsocket is passed via the standard in/out/error file descriptors. If false, then accept(2) is\ncalled on behalf of the job, and the result is passed via the standard in/out/error descriptors.", "example": "", "loc": ["launchd", "agents", "<name>", "config", "inetdCompatibility", "Wait"], "readOnly": false, "title": "launchd.agents.<name>.config.inetdCompatibility.Wait", "type": "null or boolean or string", "descriptionHTML": "<p>This flag corresponds to the \"wait\" or \"nowait\" option of inetd. If true, then the listening\nsocket is passed via the standard in/out/error file descriptors. If false, then <code>accept(2)</code> is\ncalled on behalf of the job, and the result is passed via the standard in/out/error descriptors.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "false", "description": "Whether to enable \u2039name\u203a.", "example": "true", "loc": ["launchd", "agents", "<name>", "enable"], "readOnly": false, "title": "launchd.agents.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable \u2039name\u203a.</p>"}, {"declarations": [{"name": "<launchd/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/launchd/default.nix"}], "default": "pkgs.stdenv.hostPlatform.isDarwin", "description": "Whether to enable Home Manager to define per-user daemons by making use\nof launchd's LaunchAgents.", "example": "", "loc": ["launchd", "enable"], "readOnly": false, "title": "launchd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Home Manager to define per-user daemons by making use\nof launchd's LaunchAgents.</p>"}, {"declarations": [{"name": "<misc/lib.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/lib.nix"}], "default": "{ }", "description": "This option allows modules to define helper functions,\nconstants, etc.", "example": "", "loc": ["lib"], "readOnly": false, "title": "lib", "type": "attribute set of (attribute set)", "descriptionHTML": "<p>This option allows modules to define helper functions,\nconstants, etc.</p>"}, {"declarations": [{"name": "<manual.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/manual.nix"}], "default": "false", "description": "Whether to install the HTML manual. This also installs the\n{command}home-manager-help tool, which opens a local\ncopy of the Home Manager manual in the system web browser.", "example": "", "loc": ["manual", "html", "enable"], "readOnly": false, "title": "manual.html.enable", "type": "boolean", "descriptionHTML": "<p>Whether to install the HTML manual. This also installs the\n{command}<code>home-manager-help</code> tool, which opens a local\ncopy of the Home Manager manual in the system web browser.</p>"}, {"declarations": [{"name": "<manual.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/manual.nix"}], "default": "false", "description": "Whether to install a JSON formatted list of all Home Manager\noptions. This can be located at\n{file}&lt;profile\u00a0directory&gt;/share/doc/home-manager/options.json,\nand may be used for navigating definitions, auto-completing,\nand other miscellaneous tasks.", "example": "true", "loc": ["manual", "json", "enable"], "readOnly": false, "title": "manual.json.enable", "type": "boolean", "descriptionHTML": "<p>Whether to install a JSON formatted list of all Home Manager\noptions. This can be located at\n{file}<code>&lt;profile\u00a0directory&gt;/share/doc/home-manager/options.json</code>,\nand may be used for navigating definitions, auto-completing,\nand other miscellaneous tasks.</p>"}, {"declarations": [{"name": "<manual.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/manual.nix"}], "default": "true", "description": "Whether to install the configuration manual page. The manual can\nbe reached by {command}man home-configuration.nix.\nWhen looking at the manual page pretend that all references to\nNixOS stuff are actually references to Home Manager stuff.\nThanks!", "example": "false", "loc": ["manual", "manpages", "enable"], "readOnly": false, "title": "manual.manpages.enable", "type": "boolean", "descriptionHTML": "<p>Whether to install the configuration manual page. The manual can\nbe reached by {command}<code>man home-configuration.nix</code>.</p>\n<p>When looking at the manual page pretend that all references to\nNixOS stuff are actually references to Home Manager stuff.\nThanks!</p>"}, {"declarations": [{"name": "<misc/news.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/news.nix"}], "default": "\"notify\"", "description": "How unread and relevant news should be presented when\nrunning {command}home-manager build and\n{command}home-manager switch.\nThe options are\nsilent\n: Do not print anything during build or switch. The\n  {command}home-manager news command still\n  works for viewing the entries.\nnotify\n: The number of unread and relevant news entries will be\n  printed to standard output. The {command}home-manager\n  news command can later be used to view the entries.\nshow\n: A pager showing unread news entries is opened.", "example": "", "loc": ["news", "display"], "readOnly": false, "title": "news.display", "type": "one of \"silent\", \"notify\", \"show\"", "descriptionHTML": "<p>How unread and relevant news should be presented when\nrunning {command}<code>home-manager build</code> and\n{command}<code>home-manager switch</code>.</p>\n<p>The options are</p>\n<p><code>silent</code>\n: Do not print anything during build or switch. The\n  {command}<code>home-manager news</code> command still\n  works for viewing the entries.</p>\n<p><code>notify</code>\n: The number of unread and relevant news entries will be\n  printed to standard output. The {command}<code>home-manager\n  news</code> command can later be used to view the entries.</p>\n<p><code>show</code>\n: A pager showing unread news entries is opened.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "{ }", "description": "A declarative alternative to Nix channels. Whereas with stock channels,\nyou would register URLs and fetch them into the Nix store with\n{manpage}nix-channel(1), this option allows you to register the store\npath directly. One particularly useful example is registering flake\ninputs as channels.\nThis option can coexist with stock Nix channels. If the same channel is\ndefined in both, this option takes precedence.", "example": "{ inherit nixpkgs; }", "loc": ["nix", "channels"], "readOnly": false, "title": "nix.channels", "type": "attribute set of package", "descriptionHTML": "<p>A declarative alternative to Nix channels. Whereas with stock channels,\nyou would register URLs and fetch them into the Nix store with\n{manpage}<code>nix-channel(1)</code>, this option allows you to register the store\npath directly. One particularly useful example is registering flake\ninputs as channels.</p>\n<p>This option can coexist with stock Nix channels. If the same channel is\ndefined in both, this option takes precedence.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "true", "description": "If enabled (the default), checks for data type mismatches and that Nix\ncan parse the generated nix.conf.", "example": "", "loc": ["nix", "checkConfig"], "readOnly": false, "title": "nix.checkConfig", "type": "boolean", "descriptionHTML": "<p>If enabled (the default), checks for data type mismatches and that Nix\ncan parse the generated nix.conf.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "\"\"", "description": "Additional text appended to {file}nix.conf.", "example": "''\n  keep-outputs = true\n  keep-derivations = true\n''", "loc": ["nix", "extraOptions"], "readOnly": false, "title": "nix.extraOptions", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional text appended to {file}<code>nix.conf</code>.</p>"}, {"declarations": [{"name": "<services/nix-gc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nix-gc.nix"}], "default": "false", "description": "Automatically run the garbage collector at a specific time.\nNote: This will only garbage collect the current user's profiles.", "example": "", "loc": ["nix", "gc", "automatic"], "readOnly": false, "title": "nix.gc.automatic", "type": "boolean", "descriptionHTML": "<p>Automatically run the garbage collector at a specific time.</p>\n<p>Note: This will only garbage collect the current user's profiles.</p>"}, {"declarations": [{"name": "<services/nix-gc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nix-gc.nix"}], "default": "\"weekly\"", "description": "When to run the Nix garbage collector.\nOn Linux this is a string as defined by {manpage}systemd.time(7).\nOn Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}systemd.time(7).", "example": "\"03:15\"", "loc": ["nix", "gc", "frequency"], "readOnly": false, "title": "nix.gc.frequency", "type": "string", "descriptionHTML": "<p>When to run the Nix garbage collector.</p>\n<p>On Linux this is a string as defined by {manpage}<code>systemd.time(7)</code>.</p>\n<p>On Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<services/nix-gc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nix-gc.nix"}], "default": "null", "description": "Options given to {file}nix-collect-garbage when the\ngarbage collector is run automatically.", "example": "\"--max-freed $((64 * 1024**3))\"", "loc": ["nix", "gc", "options"], "readOnly": false, "title": "nix.gc.options", "type": "null or string", "descriptionHTML": "<p>Options given to {file}<code>nix-collect-garbage</code> when the\ngarbage collector is run automatically.</p>"}, {"declarations": [{"name": "<services/nix-gc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nix-gc.nix"}], "default": "true", "description": "If true, the time when the service unit was last triggered is\nstored on disk. When the timer is activated, the service unit is\ntriggered immediately if it would have been triggered at least once\nduring the time when the timer was inactive.", "example": "false", "loc": ["nix", "gc", "persistent"], "readOnly": false, "title": "nix.gc.persistent", "type": "boolean", "descriptionHTML": "<p>If true, the time when the service unit was last triggered is\nstored on disk. When the timer is activated, the service unit is\ntriggered immediately if it would have been triggered at least once\nduring the time when the timer was inactive.</p>"}, {"declarations": [{"name": "<services/nix-gc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nix-gc.nix"}], "default": "\"0\"", "description": "Add a randomized delay before each garbage collection.\nThe delay will be chosen between zero and this value.\nThis value must be a time span in the format specified by\n{manpage}systemd.time(7)", "example": "\"45min\"", "loc": ["nix", "gc", "randomizedDelaySec"], "readOnly": false, "title": "nix.gc.randomizedDelaySec", "type": "(optionally newline-terminated) single-line string", "descriptionHTML": "<p>Add a randomized delay before each garbage collection.\nThe delay will be chosen between zero and this value.\nThis value must be a time span in the format specified by\n{manpage}<code>systemd.time(7)</code></p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "true", "description": "Whether {option}nix.nixPath should keep the previously set values in\n{env}NIX_PATH.", "example": "false", "loc": ["nix", "keepOldNixPath"], "readOnly": false, "title": "nix.keepOldNixPath", "type": "boolean", "descriptionHTML": "<p>Whether {option}<code>nix.nixPath</code> should keep the previously set values in\n{env}<code>NIX_PATH</code>.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "[ ]", "description": "Adds new directories to the Nix expression search path.\nUsed by Nix when looking up paths in angular brackets\n(e.g. &lt;nixpkgs&gt;).", "example": "[\n  \"$HOME/.nix-defexpr/channels\"\n  \"darwin-config=$HOME/.config/nixpkgs/darwin-configuration.nix\"\n]", "loc": ["nix", "nixPath"], "readOnly": false, "title": "nix.nixPath", "type": "list of string", "descriptionHTML": "<p>Adds new directories to the Nix expression search path.</p>\n<p>Used by Nix when looking up paths in angular brackets\n(e.g. <code>&lt;nixpkgs&gt;</code>).</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "null", "description": "The Nix package that the configuration should be generated for.", "example": "pkgs.nix", "loc": ["nix", "package"], "readOnly": false, "title": "nix.package", "type": "null or package", "descriptionHTML": "<p>The Nix package that the configuration should be generated for.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "{ }", "description": "User level flake registry.", "example": "", "loc": ["nix", "registry"], "readOnly": false, "title": "nix.registry", "type": "attribute set of (submodule)", "descriptionHTML": "<p>User level flake registry.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "true", "description": "Whether the {option}from reference needs to match exactly. If set,\na {option}from reference like nixpkgs does not\nmatch with a reference like nixpkgs/nixos-20.03.", "example": "", "loc": ["nix", "registry", "<name>", "exact"], "readOnly": false, "title": "nix.registry.<name>.exact", "type": "boolean", "descriptionHTML": "<p>Whether the {option}<code>from</code> reference needs to match exactly. If set,\na {option}<code>from</code> reference like <code>nixpkgs</code> does not\nmatch with a reference like <code>nixpkgs/nixos-20.03</code>.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "null", "description": "The flake input to which {option}from&gt; is to be rewritten.", "example": "nixpkgs", "loc": ["nix", "registry", "<name>", "flake"], "readOnly": false, "title": "nix.registry.<name>.flake", "type": "null or (attribute set)", "descriptionHTML": "<p>The flake input to which {option}<code>from&gt;</code> is to be rewritten.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "", "description": "The flake reference to be rewritten.", "example": "{\n  id = \"nixpkgs\";\n  type = \"indirect\";\n}", "loc": ["nix", "registry", "<name>", "from"], "readOnly": false, "title": "nix.registry.<name>.from", "type": "attribute set of (string or signed integer or boolean or package)", "descriptionHTML": "<p>The flake reference to be rewritten.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "", "description": "The flake reference to which {option}from&gt; is to be rewritten.", "example": "{\n  owner = \"my-org\";\n  repo = \"my-nixpkgs\";\n  type = \"github\";\n}", "loc": ["nix", "registry", "<name>", "to"], "readOnly": false, "title": "nix.registry.<name>.to", "type": "attribute set of (string or signed integer or boolean or package)", "descriptionHTML": "<p>The flake reference to which {option}<code>from&gt;</code> is to be rewritten.</p>"}, {"declarations": [{"name": "<misc/nix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nix.nix"}], "default": "{ }", "description": "Configuration for Nix; see {manpage}nix.conf(5) for available options.\nThe value declared here will be translated directly to the key-value pairs Nix expects.\nConfiguration specified in  will be appended\nverbatim to the resulting config file.", "example": "{\n  sandbox = true;\n  show-trace = true;\n  system-features = [ \"big-parallel\" \"kvm\" \"recursive-nix\" ];\n}\n", "loc": ["nix", "settings"], "readOnly": false, "title": "nix.settings", "type": "attribute set of (Nix config atom (null, bool, int, float, str, path or package) or list of (Nix config atom (null, bool, int, float, str, path or package)))", "descriptionHTML": "<p>Configuration for Nix; see {manpage}<code>nix.conf(5)</code> for available options.\nThe value declared here will be translated directly to the key-value pairs Nix expects.</p>\n<p>Configuration specified in <a href=\"#opt-nix.extraOptions\"></a> will be appended\nverbatim to the resulting config file.</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "\"mesa\"", "description": "The package wrapper function available for use as (config.lib.nixGL.wrap\n&lt;package&gt;). Intended to start programs on the main GPU.\nWrapper functions can be found under config.lib.nixGL.wrappers. They\ncan be used directly, however, setting this option provides a convenient\nshorthand.\nThe following wrappers are available:\n- mesa\n- mesaPrime\n- nvidia\n- nvidiaPrime", "example": "", "loc": ["nixGL", "defaultWrapper"], "readOnly": false, "title": "nixGL.defaultWrapper", "type": "one of \"mesa\", \"mesaPrime\", \"nvidia\", \"nvidiaPrime\"", "descriptionHTML": "<p>The package wrapper function available for use as <code>(config.lib.nixGL.wrap\n&lt;package&gt;)</code>. Intended to start programs on the main GPU.</p>\n<p>Wrapper functions can be found under <code>config.lib.nixGL.wrappers</code>. They\ncan be used directly, however, setting this option provides a convenient\nshorthand.</p>\n<p>The following wrappers are available:\n- mesa\n- mesaPrime\n- nvidia\n- nvidiaPrime</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "null", "description": "For each wrapper wrp named in the provided list, a wrapper script\nnamed nixGLWrp is installed into the environment. These scripts are\nuseful for running programs not installed via Home Manager.\nThe following wrappers are available:\n- mesa\n- mesaPrime\n- nvidia\n- nvidiaPrime", "example": "[\n  \"mesa\"\n  \"mesaPrime\"\n]", "loc": ["nixGL", "installScripts"], "readOnly": false, "title": "nixGL.installScripts", "type": "null or (list of (one of \"mesa\", \"mesaPrime\", \"nvidia\", \"nvidiaPrime\"))", "descriptionHTML": "<p>For each wrapper <code>wrp</code> named in the provided list, a wrapper script\nnamed <code>nixGLWrp</code> is installed into the environment. These scripts are\nuseful for running programs not installed via Home Manager.</p>\n<p>The following wrappers are available:\n- mesa\n- mesaPrime\n- nvidia\n- nvidiaPrime</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "\"mesaPrime\"", "description": "The package wrapper function available for use as\n(config.lib.nixGL.wrapOffload &lt;package&gt;). Intended to start programs\non the secondary GPU.\nWrapper functions can be found under config.lib.nixGL.wrappers. They\ncan be used directly, however, setting this option provides a convenient\nshorthand.\nThe following wrappers are available:\n- mesa\n- mesaPrime\n- nvidia\n- nvidiaPrime", "example": "", "loc": ["nixGL", "offloadWrapper"], "readOnly": false, "title": "nixGL.offloadWrapper", "type": "one of \"mesa\", \"mesaPrime\", \"nvidia\", \"nvidiaPrime\"", "descriptionHTML": "<p>The package wrapper function available for use as\n<code>(config.lib.nixGL.wrapOffload &lt;package&gt;)</code>. Intended to start programs\non the secondary GPU.</p>\n<p>Wrapper functions can be found under <code>config.lib.nixGL.wrappers</code>. They\ncan be used directly, however, setting this option provides a convenient\nshorthand.</p>\n<p>The following wrappers are available:\n- mesa\n- mesaPrime\n- nvidia\n- nvidiaPrime</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "null", "description": "The nixGL package set containing GPU library wrappers. This can be used\nto provide OpenGL and Vulkan access to applications on non-NixOS systems\nby using (config.lib.nixGL.wrap &lt;package&gt;) for the default wrapper, or\n(config.lib.nixGL.wrappers.&lt;wrapper&gt; &lt;package&gt;) for any available\nwrapper.\nThe wrapper functions are always available. If this option is empty (the\ndefault), they are a no-op. This is useful on NixOS where the wrappers\nare unnecessary.\nNote that using any Nvidia wrapper requires building the configuration\nwith the --impure option.", "example": "inputs.nixGL.packages", "loc": ["nixGL", "packages"], "readOnly": false, "title": "nixGL.packages", "type": "null or (attribute set)", "descriptionHTML": "<p>The nixGL package set containing GPU library wrappers. This can be used\nto provide OpenGL and Vulkan access to applications on non-NixOS systems\nby using <code>(config.lib.nixGL.wrap &lt;package&gt;)</code> for the default wrapper, or\n<code>(config.lib.nixGL.wrappers.&lt;wrapper&gt; &lt;package&gt;)</code> for any available\nwrapper.</p>\n<p>The wrapper functions are always available. If this option is empty (the\ndefault), they are a no-op. This is useful on NixOS where the wrappers\nare unnecessary.</p>\n<p>Note that using any Nvidia wrapper requires building the configuration\nwith the <code>--impure</code> option.</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "\"1\"", "description": "Selects the non-default graphics card used for PRIME render offloading.\nThe value can be:\n\na number, selecting the n-th non-default GPU;\na PCI bus id in the form pci-XXX_YY_ZZ_U;\na PCI id in the form vendor_id:device_id\n\nFor more information, consult the Mesa documentation on the DRI_PRIME\nenvironment variable.", "example": "\"pci-0000_06_00_0\"", "loc": ["nixGL", "prime", "card"], "readOnly": false, "title": "nixGL.prime.card", "type": "string", "descriptionHTML": "<p>Selects the non-default graphics card used for PRIME render offloading.\nThe value can be:</p>\n<ul>\n<li>a number, selecting the n-th non-default GPU;</li>\n<li>a PCI bus id in the form <code>pci-XXX_YY_ZZ_U</code>;</li>\n<li>a PCI id in the form <code>vendor_id:device_id</code></li>\n</ul>\n<p>For more information, consult the Mesa documentation on the <code>DRI_PRIME</code>\nenvironment variable.</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "null", "description": "If this option is set, the wrapper script prime-offload is installed\ninto the environment. It allows starting programs on the secondary GPU\nselected by the nixGL.prime.card option. This makes sense when the\nprogram is not already using one of nixGL PRIME wrappers, or for\nprograms not installed from Nixpkgs.\nThis option can be set to either \"mesa\" or \"nvidia\", making the script\nuse one or the other graphics library.", "example": "\"mesa\"", "loc": ["nixGL", "prime", "installScript"], "readOnly": false, "title": "nixGL.prime.installScript", "type": "null or one of \"mesa\", \"nvidia\"", "descriptionHTML": "<p>If this option is set, the wrapper script <code>prime-offload</code> is installed\ninto the environment. It allows starting programs on the secondary GPU\nselected by the <code>nixGL.prime.card</code> option. This makes sense when the\nprogram is not already using one of nixGL PRIME wrappers, or for\nprograms not installed from Nixpkgs.</p>\n<p>This option can be set to either \"mesa\" or \"nvidia\", making the script\nuse one or the other graphics library.</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "null", "description": "If this option is set, it overrides the offload provider for Nvidia\nPRIME offloading. Consult the proprietary Nvidia driver documentation\non the __NV_PRIME_RENDER_OFFLOAD_PROVIDER environment variable.", "example": "\"NVIDIA-G0\"", "loc": ["nixGL", "prime", "nvidiaProvider"], "readOnly": false, "title": "nixGL.prime.nvidiaProvider", "type": "null or string", "descriptionHTML": "<p>If this option is set, it overrides the offload provider for Nvidia\nPRIME offloading. Consult the proprietary Nvidia driver documentation\non the <code>__NV_PRIME_RENDER_OFFLOAD_PROVIDER</code> environment variable.</p>"}, {"declarations": [{"name": "<misc/nixgl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixgl.nix"}], "default": "false", "description": "Whether to enable Vulkan in nixGL wrappers.\nThis is disabled by default bacause Vulkan brings in several libraries\nthat can cause symbol version conflicts in wrapped programs. Your\nmileage may vary.", "example": "true", "loc": ["nixGL", "vulkan", "enable"], "readOnly": false, "title": "nixGL.vulkan.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Vulkan in nixGL wrappers.</p>\n<p>This is disabled by default bacause Vulkan brings in several libraries\nthat can cause symbol version conflicts in wrapped programs. Your\nmileage may vary.</p>"}, {"declarations": [{"name": "<misc/nixpkgs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixpkgs.nix"}], "default": "null", "description": "The configuration of the Nix Packages collection. (For\ndetails, see the Nixpkgs documentation.) It allows you to set\npackage configuration options.\nIf null, then configuration is taken from\nthe fallback location, for example,\n{file}~/.config/nixpkgs/config.nix.\nNote, this option will not apply outside your Home Manager\nconfiguration like when installing manually through\n{command}nix-env. If you want to apply it both\ninside and outside Home Manager you can put it in a separate\nfile and include something like\nnix\n  nixpkgs.config = import ./nixpkgs-config.nix;\n  xdg.configFile.\"nixpkgs/config.nix\".source = ./nixpkgs-config.nix;\nin your Home Manager configuration.", "example": "{\n  allowBroken = true;\n}", "loc": ["nixpkgs", "config"], "readOnly": false, "title": "nixpkgs.config", "type": "null or (nixpkgs config)", "descriptionHTML": "<p>The configuration of the Nix Packages collection. (For\ndetails, see the Nixpkgs documentation.) It allows you to set\npackage configuration options.</p>\n<p>If <code>null</code>, then configuration is taken from\nthe fallback location, for example,\n{file}<code>~/.config/nixpkgs/config.nix</code>.</p>\n<p>Note, this option will not apply outside your Home Manager\nconfiguration like when installing manually through\n{command}<code>nix-env</code>. If you want to apply it both\ninside and outside Home Manager you can put it in a separate\nfile and include something like</p>\n<p><code>nix\n  nixpkgs.config = import ./nixpkgs-config.nix;\n  xdg.configFile.\"nixpkgs/config.nix\".source = ./nixpkgs-config.nix;</code></p>\n<p>in your Home Manager configuration.</p>"}, {"declarations": [{"name": "<misc/nixpkgs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/nixpkgs.nix"}], "default": "null", "description": "List of overlays to use with the Nix Packages collection. (For\ndetails, see the Nixpkgs documentation.) It allows you to\noverride packages globally. This is a function that takes as\nan argument the original Nixpkgs. The\nfirst argument should be used for finding dependencies, and\nthe second should be used for overriding recipes.\nIf null, then the overlays are taken from\nthe fallback location, for example,\n{file}~/.config/nixpkgs/overlays.\nLike {var}nixpkgs.config this option only\napplies within the Home Manager configuration. See\n{var}nixpkgs.config for a suggested setup that\nworks both internally and externally.", "example": "[\n  (final: prev: {\n    openssh = prev.openssh.override {\n      hpnSupport = true;\n      withKerberos = true;\n      kerberos = final.libkrb5;\n    };\n  })\n]\n", "loc": ["nixpkgs", "overlays"], "readOnly": false, "title": "nixpkgs.overlays", "type": "null or (list of (nixpkgs overlay))", "descriptionHTML": "<p>List of overlays to use with the Nix Packages collection. (For\ndetails, see the Nixpkgs documentation.) It allows you to\noverride packages globally. This is a function that takes as\nan argument the <em>original</em> Nixpkgs. The\nfirst argument should be used for finding dependencies, and\nthe second should be used for overriding recipes.</p>\n<p>If <code>null</code>, then the overlays are taken from\nthe fallback location, for example,\n{file}<code>~/.config/nixpkgs/overlays</code>.</p>\n<p>Like {var}<code>nixpkgs.config</code> this option only\napplies within the Home Manager configuration. See\n{var}<code>nixpkgs.config</code> for a suggested setup that\nworks both internally and externally.</p>"}, {"declarations": [{"name": "<misc/pam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/pam.nix"}], "default": "{ }", "description": "Environment variables that will be set for the PAM session.\nThe variable values must be as described in\n{manpage}pam_env.conf(5).\nNote, this option will become deprecated in the future and its use is\ntherefore discouraged.", "example": "{\n  EDITOR = \"vim\";\n}", "loc": ["pam", "sessionVariables"], "readOnly": false, "title": "pam.sessionVariables", "type": "attribute set", "descriptionHTML": "<p>Environment variables that will be set for the PAM session.\nThe variable values must be as described in\n{manpage}<code>pam_env.conf(5)</code>.</p>\n<p>Note, this option will become deprecated in the future and its use is\ntherefore discouraged.</p>"}, {"declarations": [{"name": "<misc/pam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/pam.nix"}], "default": "[ ]", "description": "List of authorized YubiKey token IDs. Refer to\nhttps://developers.yubico.com/yubico-pam\nfor details on how to obtain the token ID of a YubiKey.", "example": "", "loc": ["pam", "yubico", "authorizedYubiKeys", "ids"], "readOnly": false, "title": "pam.yubico.authorizedYubiKeys.ids", "type": "list of string of length 12", "descriptionHTML": "<p>List of authorized YubiKey token IDs. Refer to\n<a href=\"https://developers.yubico.com/yubico-pam\">https://developers.yubico.com/yubico-pam</a>\nfor details on how to obtain the token ID of a YubiKey.</p>"}, {"declarations": [{"name": "<misc/pam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/pam.nix"}], "default": "\".yubico/authorized_yubikeys\"", "description": "File path to write the authorized YubiKeys,\nrelative to {env}HOME.", "example": "", "loc": ["pam", "yubico", "authorizedYubiKeys", "path"], "readOnly": false, "title": "pam.yubico.authorizedYubiKeys.path", "type": "string", "descriptionHTML": "<p>File path to write the authorized YubiKeys,\nrelative to {env}<code>HOME</code>.</p>"}, {"declarations": [{"name": "<programs/abook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/abook.nix"}], "default": "false", "description": "Whether to enable Abook.", "example": "true", "loc": ["programs", "abook", "enable"], "readOnly": false, "title": "programs.abook.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Abook.</p>"}, {"declarations": [{"name": "<programs/abook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/abook.nix"}], "default": "\"\"", "description": "Extra lines added to {file}$HOME/.config/abook/abookrc.\nAvailable configuration options are described in the abook repository:\nhttps://sourceforge.net/p/abook/git/ci/master/tree/sample.abookrc.", "example": "''\n  field pager = Pager\n  view CONTACT = name, email\n  set autosave=true\n''", "loc": ["programs", "abook", "extraConfig"], "readOnly": false, "title": "programs.abook.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to {file}<code>$HOME/.config/abook/abookrc</code>.\nAvailable configuration options are described in the abook repository:\n<a href=\"https://sourceforge.net/p/abook/git/ci/master/tree/sample.abookrc\">https://sourceforge.net/p/abook/git/ci/master/tree/sample.abookrc</a>.</p>"}, {"declarations": [{"name": "<programs/abook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/abook.nix"}], "default": "pkgs.abook", "description": "The abook package to use.", "example": "", "loc": ["programs", "abook", "package"], "readOnly": false, "title": "programs.abook.package", "type": "null or package", "descriptionHTML": "<p>The abook package to use.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "false", "description": "Whether to enable aerc.", "example": "true", "loc": ["programs", "aerc", "enable"], "readOnly": false, "title": "programs.aerc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable aerc.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Extra lines added to {file}$HOME/.config/aerc/accounts.conf.\nSee {manpage}aerc-config(5).", "example": "{ Work = { source = \"maildir://~/Maildir/work\"; }; }", "loc": ["programs", "aerc", "extraAccounts"], "readOnly": false, "title": "programs.aerc.extraAccounts", "type": "strings concatenated with \"\\n\" or attribute set of (strings concatenated with \"\\n\" or attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma))", "descriptionHTML": "<p>Extra lines added to {file}<code>$HOME/.config/aerc/accounts.conf</code>.</p>\n<p>See {manpage}<code>aerc-config(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Extra lines added to {file}$HOME/.config/aerc/binds.conf.\nGlobal keybindings can be set in the global section.\nSee {manpage}aerc-config(5).", "example": "{ messages = { q = \":quit<Enter>\"; }; }", "loc": ["programs", "aerc", "extraBinds"], "readOnly": false, "title": "programs.aerc.extraBinds", "type": "strings concatenated with \"\\n\" or attribute set of (strings concatenated with \"\\n\" or attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma))", "descriptionHTML": "<p>Extra lines added to {file}<code>$HOME/.config/aerc/binds.conf</code>.\nGlobal keybindings can be set in the <code>global</code> section.</p>\n<p>See {manpage}<code>aerc-config(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Extra lines added to {file}$HOME/.config/aerc/aerc.conf.\nSee {manpage}aerc-config(5).", "example": "{ ui = { sort = \"-r date\"; }; }", "loc": ["programs", "aerc", "extraConfig"], "readOnly": false, "title": "programs.aerc.extraConfig", "type": "strings concatenated with \"\\n\" or attribute set of (strings concatenated with \"\\n\" or attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma))", "descriptionHTML": "<p>Extra lines added to {file}<code>$HOME/.config/aerc/aerc.conf</code>.</p>\n<p>See {manpage}<code>aerc-config(5)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "pkgs.aerc", "description": "The aerc package to use.", "example": "", "loc": ["programs", "aerc", "package"], "readOnly": false, "title": "programs.aerc.package", "type": "null or package", "descriptionHTML": "<p>The aerc package to use.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Stylesets added to {file}$HOME/.config/aerc/stylesets/.\nSee {manpage}aerc-stylesets(7).", "example": "{ default = { ui = { \"tab.selected.reverse\" = toggle; }; }; };\n", "loc": ["programs", "aerc", "stylesets"], "readOnly": false, "title": "programs.aerc.stylesets", "type": "attribute set of ((attribute set of (values (null, bool, int, string, or float) or a list of values, that will be joined with a comma)) or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Stylesets added to {file}<code>$HOME/.config/aerc/stylesets/</code>.</p>\n<p>See {manpage}<code>aerc-stylesets(7)</code>.</p>"}, {"declarations": [{"name": "<programs/aerc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerc/default.nix"}], "default": "{ }", "description": "Templates added to {file}$HOME/.config/aerc/templates/.\nSee {manpage}aerc-templates(7).", "example": "{ new_message = \"Hello!\"; };\n", "loc": ["programs", "aerc", "templates"], "readOnly": false, "title": "programs.aerc.templates", "type": "attribute set of strings concatenated with \"\\n\"", "descriptionHTML": "<p>Templates added to {file}<code>$HOME/.config/aerc/templates/</code>.</p>\n<p>See {manpage}<code>aerc-templates(7)</code>.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "false", "description": "Whether to enable AeroSpace window manager.", "example": "true", "loc": ["programs", "aerospace", "enable"], "readOnly": false, "title": "programs.aerospace.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable AeroSpace window manager.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "false", "description": "Configure the launchd agent to manage the AeroSpace process.\nThe first time this is enabled, macOS will prompt you to allow this background\nitem in System Settings.\nYou can verify the service is running correctly from your terminal.\nRun: launchctl list | grep aerospace\n\n\nA running process will show a Process ID (PID) and a status of 0, for example:\n  12345    0   org.nix-community.home.aerospace\n\n\nIf the service has crashed or failed to start, the PID will be a dash and the\n  status will be a non-zero number, for example:\n  -    1   org.nix-community.home.aerospace\n\n\nIn case of failure, check the logs with cat /tmp/aerospace.err.log.\nFor more detailed service status, run launchctl print gui/$(id -u)/org.nix-community.home.aerospace.\nNOTE: Enabling this option will configure AeroSpace to not manage its own\nlaunchd agent. Specifically, it will set start-at-login = false and\nafter-login-command = [] in the configuration file, as those are now handled\nby Home Manager and launchd instead.", "example": "", "loc": ["programs", "aerospace", "launchd", "enable"], "readOnly": false, "title": "programs.aerospace.launchd.enable", "type": "boolean", "descriptionHTML": "<p>Configure the launchd agent to manage the AeroSpace process.</p>\n<p>The first time this is enabled, macOS will prompt you to allow this background\nitem in System Settings.</p>\n<p>You can verify the service is running correctly from your terminal.\nRun: <code>launchctl list | grep aerospace</code></p>\n<ul>\n<li>\n<p>A running process will show a Process ID (PID) and a status of 0, for example:\n  <code>12345    0   org.nix-community.home.aerospace</code></p>\n</li>\n<li>\n<p>If the service has crashed or failed to start, the PID will be a dash and the\n  status will be a non-zero number, for example:\n  <code>-    1   org.nix-community.home.aerospace</code></p>\n</li>\n</ul>\n<p>In case of failure, check the logs with <code>cat /tmp/aerospace.err.log</code>.</p>\n<p>For more detailed service status, run <code>launchctl print gui/$(id -u)/org.nix-community.home.aerospace</code>.</p>\n<p>NOTE: Enabling this option will configure AeroSpace to <strong>not</strong> manage its own\nlaunchd agent. Specifically, it will set <code>start-at-login = false</code> and\n<code>after-login-command = []</code> in the configuration file, as those are now handled\nby Home Manager and launchd instead.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "true", "description": "Whether the launchd service should be kept alive.", "example": "", "loc": ["programs", "aerospace", "launchd", "keepAlive"], "readOnly": false, "title": "programs.aerospace.launchd.keepAlive", "type": "boolean", "descriptionHTML": "<p>Whether the launchd service should be kept alive.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "pkgs.aerospace", "description": "The aerospace package to use.", "example": "", "loc": ["programs", "aerospace", "package"], "readOnly": false, "title": "programs.aerospace.package", "type": "null or package", "descriptionHTML": "<p>The aerospace package to use.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "{ }", "description": "AeroSpace configuration, see\nhttps://nikitabobko.github.io/AeroSpace/guide#configuring-aerospace\nfor supported values.", "example": "{\n  gaps = {\n    outer.left = 8;\n    outer.bottom = 8;\n    outer.top = 8;\n    outer.right = 8;\n  };\n  mode.main.binding = {\n    alt-h = \"focus left\";\n    alt-j = \"focus down\";\n    alt-k = \"focus up\";\n    alt-l = \"focus right\";\n  };\n}\n", "loc": ["programs", "aerospace", "userSettings"], "readOnly": false, "title": "programs.aerospace.userSettings", "type": "TOML value", "descriptionHTML": "<p>AeroSpace configuration, see\n<a href=\"https://nikitabobko.github.io/AeroSpace/guide#configuring-aerospace\">https://nikitabobko.github.io/AeroSpace/guide#configuring-aerospace</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "30", "description": "Padding between windows in an accordion container.", "example": "", "loc": ["programs", "aerospace", "userSettings", "accordion-padding"], "readOnly": false, "title": "programs.aerospace.userSettings.accordion-padding", "type": "signed integer", "descriptionHTML": "<p>Padding between windows in an accordion container.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "[ ]", "description": "A list of AeroSpace commands to execute immediately after the AeroSpace application starts.\nThese commands are written to your aerospace.toml config file and are run after the after-login-command sequence.\nA list of all available commands can be found at https://nikitabobko.github.io/AeroSpace/commands.\nWhile this module checks for valid command names, using incorrect arguments can still cause issues.\nIf AeroSpace is not behaving correctly after startup, check the logs for errors with cat /tmp/aerospace.err.log.", "example": "[\n  \"exec-and-forget open -n /System/Applications/Utilities/Terminal.app\"\n  \"layout tiles accordion\"\n]", "loc": ["programs", "aerospace", "userSettings", "after-startup-command"], "readOnly": false, "title": "programs.aerospace.userSettings.after-startup-command", "type": "list of string", "descriptionHTML": "<p>A list of AeroSpace commands to execute immediately after the AeroSpace application starts.\nThese commands are written to your <code>aerospace.toml</code> config file and are run after the <code>after-login-command</code> sequence.</p>\n<p>A list of all available commands can be found at <a href=\"https://nikitabobko.github.io/AeroSpace/commands\">https://nikitabobko.github.io/AeroSpace/commands</a>.</p>\n<p>While this module checks for valid command names, using incorrect <em>arguments</em> can still cause issues.\nIf AeroSpace is not behaving correctly after startup, check the logs for errors with <code>cat /tmp/aerospace.err.log</code>.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "\"tiles\"", "description": "Default layout for the root container.", "example": "", "loc": ["programs", "aerospace", "userSettings", "default-root-container-layout"], "readOnly": false, "title": "programs.aerospace.userSettings.default-root-container-layout", "type": "one of \"tiles\", \"accordion\"", "descriptionHTML": "<p>Default layout for the root container.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "\"auto\"", "description": "Default orientation for the root container.", "example": "", "loc": ["programs", "aerospace", "userSettings", "default-root-container-orientation"], "readOnly": false, "title": "programs.aerospace.userSettings.default-root-container-orientation", "type": "one of \"horizontal\", \"vertical\", \"auto\"", "descriptionHTML": "<p>Default orientation for the root container.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "true", "description": "Containers that have only one child are \"flattened\".", "example": "", "loc": ["programs", "aerospace", "userSettings", "enable-normalization-flatten-containers"], "readOnly": false, "title": "programs.aerospace.userSettings.enable-normalization-flatten-containers", "type": "boolean", "descriptionHTML": "<p>Containers that have only one child are \"flattened\".</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "true", "description": "Containers that nest into each other must have opposite orientations.", "example": "", "loc": ["programs", "aerospace", "userSettings", "enable-normalization-opposite-orientation-for-nested-containers"], "readOnly": false, "title": "programs.aerospace.userSettings.enable-normalization-opposite-orientation-for-nested-containers", "type": "boolean", "descriptionHTML": "<p>Containers that nest into each other must have opposite orientations.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "[ ]", "description": "Commands to run every time workspace changes.", "example": "[\n  \"/bin/bash\"\n  \"-c\"\n  \"sketchybar --trigger aerospace_workspace_change FOCUSED=$AEROSPACE_FOCUSED_WORKSPACE\"\n]", "loc": ["programs", "aerospace", "userSettings", "exec-on-workspace-change"], "readOnly": false, "title": "programs.aerospace.userSettings.exec-on-workspace-change", "type": "list of string", "descriptionHTML": "<p>Commands to run every time workspace changes.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "\"qwerty\"", "description": "Keymapping preset.", "example": "", "loc": ["programs", "aerospace", "userSettings", "key-mapping", "preset"], "readOnly": false, "title": "programs.aerospace.userSettings.key-mapping.preset", "type": "one of \"qwerty\", \"dvorak\"", "descriptionHTML": "<p>Keymapping preset.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "[ ]", "description": "Commands to run every time focused window or workspace changes.", "example": "[\n  \"move-mouse monitor-lazy-center\"\n]", "loc": ["programs", "aerospace", "userSettings", "on-focus-changed"], "readOnly": false, "title": "programs.aerospace.userSettings.on-focus-changed", "type": "list of string", "descriptionHTML": "<p>Commands to run every time focused window or workspace changes.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "[\n  \"move-mouse monitor-lazy-center\"\n]", "description": "Commands to run every time focused monitor changes.", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-focused-monitor-changed"], "readOnly": false, "title": "programs.aerospace.userSettings.on-focused-monitor-changed", "type": "list of string", "descriptionHTML": "<p>Commands to run every time focused monitor changes.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "[ ]", "description": "Commands to run every time a new window is detected with optional conditions.", "example": "[\n  {\n    check-further-callbacks = false;\n    if = {\n      app-id = \"Another.Cool.App\";\n      app-name-regex-substring = \"CoolApp\";\n      during-aerospace-startup = false;\n      window-title-regex-substring = \"Title\";\n      workspace = \"cool-workspace\";\n    };\n    run = [\n      \"move-node-to-workspace m\"\n      \"resize-node\"\n    ];\n  }\n]", "loc": ["programs", "aerospace", "userSettings", "on-window-detected"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected", "type": "list of (submodule)", "descriptionHTML": "<p>Commands to run every time a new window is detected with optional conditions.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "Whether to check further callbacks after this rule (optional).", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "check-further-callbacks"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.check-further-callbacks", "type": "null or boolean", "descriptionHTML": "<p>Whether to check further callbacks after this rule (optional).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "{ }", "description": "Conditions for detecting a window.", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "if"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.if", "type": "submodule", "descriptionHTML": "<p>Conditions for detecting a window.</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "The application ID to match (optional).", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "if", "app-id"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.if.app-id", "type": "null or string", "descriptionHTML": "<p>The application ID to match (optional).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "Regex substring to match the app name (optional).", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "if", "app-name-regex-substring"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.if.app-name-regex-substring", "type": "null or string", "descriptionHTML": "<p>Regex substring to match the app name (optional).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "Whether to match during aerospace startup (optional).", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "if", "during-aerospace-startup"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.if.during-aerospace-startup", "type": "null or boolean", "descriptionHTML": "<p>Whether to match during aerospace startup (optional).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "Substring to match in the window title (optional).", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "if", "window-title-regex-substring"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.if.window-title-regex-substring", "type": "null or string", "descriptionHTML": "<p>Substring to match in the window title (optional).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "The workspace name to match (optional).", "example": "", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "if", "workspace"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.if.workspace", "type": "null or string", "descriptionHTML": "<p>The workspace name to match (optional).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "", "description": "Commands to execute when the conditions match (required).", "example": "[\n  \"move-node-to-workspace m\"\n  \"resize-node\"\n]", "loc": ["programs", "aerospace", "userSettings", "on-window-detected", "*", "run"], "readOnly": false, "title": "programs.aerospace.userSettings.on-window-detected.*.run", "type": "string or list of string", "descriptionHTML": "<p>Commands to execute when the conditions match (required).</p>"}, {"declarations": [{"name": "<programs/aerospace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aerospace.nix"}], "default": "null", "description": "Map workspaces to specific monitors.\nLeft-hand side is the workspace name, and right-hand side is the monitor pattern.", "example": "{\n  \"1\" = 1;\n  \"2\" = \"main\";\n  \"3\" = \"secondary\";\n  \"4\" = \"built-in\";\n  \"5\" = \"^built-in retina display$\";\n  \"6\" = [\n    \"secondary\"\n    \"dell\"\n  ];\n}", "loc": ["programs", "aerospace", "userSettings", "workspace-to-monitor-force-assignment"], "readOnly": false, "title": "programs.aerospace.userSettings.workspace-to-monitor-force-assignment", "type": "null or (attribute set of (signed integer or string or list of string))", "descriptionHTML": "<p>Map workspaces to specific monitors.\nLeft-hand side is the workspace name, and right-hand side is the monitor pattern.</p>"}, {"declarations": [{"name": "<programs/afew.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/afew.nix"}], "default": "false", "description": "Whether to enable the afew initial tagging script for Notmuch.", "example": "true", "loc": ["programs", "afew", "enable"], "readOnly": false, "title": "programs.afew.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the afew initial tagging script for Notmuch.</p>"}, {"declarations": [{"name": "<programs/afew.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/afew.nix"}], "default": "''\n  [SpamFilter]\n  [KillThreadsFilter]\n  [ListMailsFilter]\n  [ArchiveSentMailsFilter]\n  [InboxFilter]\n''", "description": "Extra lines added to afew configuration file. Available\nconfiguration options are described in the afew manual:\nhttps://afew.readthedocs.io/en/latest/configuration.html.", "example": "''\n  [SpamFilter]\n  \n  [Filter.0]\n  query = from:pointyheaded@boss.com\n  tags = -new;+boss\n  message = Message from above\n  \n  [InboxFilter]\n''", "loc": ["programs", "afew", "extraConfig"], "readOnly": false, "title": "programs.afew.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to afew configuration file. Available\nconfiguration options are described in the afew manual:\n<a href=\"https://afew.readthedocs.io/en/latest/configuration.html\">https://afew.readthedocs.io/en/latest/configuration.html</a>.</p>"}, {"declarations": [{"name": "<programs/afew.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/afew.nix"}], "default": "pkgs.afew", "description": "The afew package to use.", "example": "", "loc": ["programs", "afew", "package"], "readOnly": false, "title": "programs.afew.package", "type": "null or package", "descriptionHTML": "<p>The afew package to use.</p>"}, {"declarations": [{"name": "<programs/aichat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aichat.nix"}], "default": "false", "description": "Whether to enable aichat, an All-in-one LLM CLI tool.", "example": "true", "loc": ["programs", "aichat", "enable"], "readOnly": false, "title": "programs.aichat.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable aichat, an All-in-one LLM CLI tool.</p>"}, {"declarations": [{"name": "<programs/aichat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aichat.nix"}], "default": "pkgs.aichat", "description": "The aichat package to use.", "example": "", "loc": ["programs", "aichat", "package"], "readOnly": false, "title": "programs.aichat.package", "type": "null or package", "descriptionHTML": "<p>The aichat package to use.</p>"}, {"declarations": [{"name": "<programs/aichat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aichat.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/aichat/config.yaml\non Linux or on Darwin if  is set, otherwise\n{file}~/Library/Application Support/aichat/config.yaml.\nSee\nhttps://github.com/sigoden/aichat/blob/main/config.example.yaml\nfor supported values.", "example": "{\n  model = \"ollama:mistral-small3.1:latest\";\n  clients = [\n    {\n      type = \"openai-compatible\";\n      name = \"ollama\";\n      api_base = \"http://localhost:11434/v1\";\n      models = [\n        {\n          name = \"mistral-small3.1:latest\";\n          supports_function_calling = true;\n          supports_vision = true;\n        }\n      ];\n    }\n  ];\n}\n", "loc": ["programs", "aichat", "settings"], "readOnly": false, "title": "programs.aichat.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/aichat/config.yaml</code>\non Linux or on Darwin if <a href=\"#opt-xdg.enable\"></a> is set, otherwise\n{file}<code>~/Library/Application Support/aichat/config.yaml</code>.\nSee\n<a href=\"https://github.com/sigoden/aichat/blob/main/config.example.yaml\">https://github.com/sigoden/aichat/blob/main/config.example.yaml</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/alacritty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alacritty.nix"}], "default": "false", "description": "Whether to enable Alacritty.", "example": "true", "loc": ["programs", "alacritty", "enable"], "readOnly": false, "title": "programs.alacritty.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Alacritty.</p>"}, {"declarations": [{"name": "<programs/alacritty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alacritty.nix"}], "default": "pkgs.alacritty", "description": "The alacritty package to use.", "example": "", "loc": ["programs", "alacritty", "package"], "readOnly": false, "title": "programs.alacritty.package", "type": "null or package", "descriptionHTML": "<p>The alacritty package to use.</p>"}, {"declarations": [{"name": "<programs/alacritty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alacritty.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/alacritty/alacritty.yml or\n{file}$XDG_CONFIG_HOME/alacritty/alacritty.toml\n(the latter being used for alacritty 0.13 and later).\nSee https://github.com/alacritty/alacritty/tree/master#configuration\nfor more info.", "example": "{\n  window.dimensions = {\n    lines = 3;\n    columns = 200;\n  };\n  keyboard.bindings = [\n    {\n      key = \"K\";\n      mods = \"Control\";\n      chars = \"\\\\u000c\";\n    }\n  ];\n}\n", "loc": ["programs", "alacritty", "settings"], "readOnly": false, "title": "programs.alacritty.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/alacritty/alacritty.yml</code> or\n{file}<code>$XDG_CONFIG_HOME/alacritty/alacritty.toml</code>\n(the latter being used for alacritty 0.13 and later).\nSee <a href=\"https://github.com/alacritty/alacritty/tree/master#configuration\">https://github.com/alacritty/alacritty/tree/master#configuration</a>\nfor more info.</p>"}, {"declarations": [{"name": "<programs/alacritty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alacritty.nix"}], "default": "null", "description": "A theme from the\nalacritty-theme\nrepository to import in the configuration.\nSee https://github.com/alacritty/alacritty-theme/tree/master/themes\nfor a list of available themes.\nIf you would like to import your own theme, use\n{option}programs.alacritty.settings.general.import or\n{option}programs.alacritty.settings.colors directly.", "example": "\"solarized_dark\"", "loc": ["programs", "alacritty", "theme"], "readOnly": false, "title": "programs.alacritty.theme", "type": "null or string", "descriptionHTML": "<p>A theme from the\n<a href=\"https://github.com/alacritty/alacritty-theme\">alacritty-theme</a>\nrepository to import in the configuration.\nSee <a href=\"https://github.com/alacritty/alacritty-theme/tree/master/themes\">https://github.com/alacritty/alacritty-theme/tree/master/themes</a>\nfor a list of available themes.\nIf you would like to import your own theme, use\n{option}<code>programs.alacritty.settings.general.import</code> or\n{option}<code>programs.alacritty.settings.colors</code> directly.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Keybindings.", "example": "", "loc": ["programs", "alot", "bindings"], "readOnly": false, "title": "programs.alot.bindings", "type": "submodule", "descriptionHTML": "<p>Keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Bufferlist mode keybindings.", "example": "", "loc": ["programs", "alot", "bindings", "bufferlist"], "readOnly": false, "title": "programs.alot.bindings.bufferlist", "type": "attribute set of string", "descriptionHTML": "<p>Bufferlist mode keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Envelope mode keybindings.", "example": "", "loc": ["programs", "alot", "bindings", "envelope"], "readOnly": false, "title": "programs.alot.bindings.envelope", "type": "attribute set of string", "descriptionHTML": "<p>Envelope mode keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Global keybindings.", "example": "", "loc": ["programs", "alot", "bindings", "global"], "readOnly": false, "title": "programs.alot.bindings.global", "type": "attribute set of string", "descriptionHTML": "<p>Global keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Search mode keybindings.", "example": "", "loc": ["programs", "alot", "bindings", "search"], "readOnly": false, "title": "programs.alot.bindings.search", "type": "attribute set of string", "descriptionHTML": "<p>Search mode keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Taglist mode keybindings.", "example": "", "loc": ["programs", "alot", "bindings", "taglist"], "readOnly": false, "title": "programs.alot.bindings.taglist", "type": "attribute set of string", "descriptionHTML": "<p>Taglist mode keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "Thread mode keybindings.", "example": "", "loc": ["programs", "alot", "bindings", "thread"], "readOnly": false, "title": "programs.alot.bindings.thread", "type": "attribute set of string", "descriptionHTML": "<p>Thread mode keybindings.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "false", "description": "Whether to enable the Alot mail user agent. Alot uses the\nNotmuch email system and will therefore be automatically\nenabled for each email account that is managed by Notmuch.", "example": "true", "loc": ["programs", "alot", "enable"], "readOnly": false, "title": "programs.alot.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Alot mail user agent. Alot uses the\nNotmuch email system and will therefore be automatically\nenabled for each email account that is managed by Notmuch.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "\"\"", "description": "Extra lines added to alot configuration file.", "example": "", "loc": ["programs", "alot", "extraConfig"], "readOnly": false, "title": "programs.alot.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to alot configuration file.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "\"\"", "description": "Content of the hooks file.", "example": "", "loc": ["programs", "alot", "hooks"], "readOnly": false, "title": "programs.alot.hooks", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Content of the hooks file.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "pkgs.alot", "description": "The alot package to use.", "example": "", "loc": ["programs", "alot", "package"], "readOnly": false, "title": "programs.alot.package", "type": "null or package", "descriptionHTML": "<p>The alot package to use.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{\n  auto_remove_unread = true;\n  handle_mouse = true;\n  initial_command = \"search tag:inbox AND NOT tag:killed\";\n  prefer_plaintext = true;\n}", "description": "Configuration options added to alot configuration file.", "example": "{\n  auto_remove_unread = true;\n  ask_subject = false;\n  thread_indent_replies = 2;\n}\n", "loc": ["programs", "alot", "settings"], "readOnly": false, "title": "programs.alot.settings", "type": "attribute set of (string or signed integer or boolean or floating point number)", "descriptionHTML": "<p>Configuration options added to alot configuration file.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "{ }", "description": "How to display the tags.", "example": "", "loc": ["programs", "alot", "tags"], "readOnly": false, "title": "programs.alot.tags", "type": "attribute set of (submodule)", "descriptionHTML": "<p>How to display the tags.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "null", "description": "How to display the tag when focused.", "example": "", "loc": ["programs", "alot", "tags", "<name>", "focus"], "readOnly": false, "title": "programs.alot.tags.<name>.focus", "type": "null or string", "descriptionHTML": "<p>How to display the tag when focused.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "null", "description": "How to display the tag when unfocused.\nSee https://alot.readthedocs.io/en/latest/configuration/theming.html#tagstring-formatting.", "example": "\"'','', 'white','light red', 'white','#d66'\"", "loc": ["programs", "alot", "tags", "<name>", "normal"], "readOnly": false, "title": "programs.alot.tags.<name>.normal", "type": "null or string", "descriptionHTML": "<p>How to display the tag when unfocused.\nSee <a href=\"https://alot.readthedocs.io/en/latest/configuration/theming.html#tagstring-formatting\">https://alot.readthedocs.io/en/latest/configuration/theming.html#tagstring-formatting</a>.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "", "description": "Fixed string representation for this tag. The tag can be\nhidden from view, if the key translated is set to\n\"\", the empty string.", "example": "", "loc": ["programs", "alot", "tags", "<name>", "translated"], "readOnly": false, "title": "programs.alot.tags.<name>.translated", "type": "null or string", "descriptionHTML": "<p>Fixed string representation for this tag. The tag can be\nhidden from view, if the key translated is set to\n<code>\"\"</code>, the empty string.</p>"}, {"declarations": [{"name": "<programs/alot/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/alot/default.nix"}], "default": "null", "description": "A pair of strings that define a regular substitution to\ncompute the string representation on the fly using\nre.sub.", "example": "", "loc": ["programs", "alot", "tags", "<name>", "translation"], "readOnly": false, "title": "programs.alot.tags.<name>.translation", "type": "null or string", "descriptionHTML": "<p>A pair of strings that define a regular substitution to\ncompute the string representation on the fly using\n<code>re.sub</code>.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "[ ]", "description": "List of Anki add-on packages to install.", "example": "[\n  # When the add-on is already available in nixpkgs\n  pkgs.ankiAddons.anki-connect\n\n  # When the add-on is not available in nixpkgs\n  (pkgs.anki-utils.buildAnkiAddon (finalAttrs: {\n    pname = \"recolor\";\n    version = \"3.1\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"AnKing-VIP\";\n      repo = \"AnkiRecolor\";\n      rev = finalAttrs.version;\n      sparseCheckout = [ \"src/addon\" ];\n      hash = \"sha256-28DJq2l9DP8O6OsbNQCZ0pm4S6CQ3Yz0Vfvlj+iQw8Y=\";\n    };\n    sourceRoot = \"${finalAttrs.src.name}/src/addon\";\n  }))\n\n  # When the add-on needs to be configured\n  pkgs.ankiAddons.passfail2.withConfig {\n    config = {\n      again_button_name = \"not quite\";\n      good_button_name = \"excellent\";\n    };\n    user_files = ./dir-to-be-merged-into-addon-user-files-dir;\n  };\n]\n", "loc": ["programs", "anki", "addons"], "readOnly": false, "title": "programs.anki.addons", "type": "list of package", "descriptionHTML": "<p>List of Anki add-on packages to install.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "[ ]", "description": "Overrides for choosing what keyboard shortcut activates each\nanswer button. The Anki default will be used for ones without an\noverride defined.", "example": "[\n  {\n    ease = 1;\n    key = \"left\";\n  }\n  {\n    ease = 2;\n    key = \"up\";\n  }\n  {\n    ease = 3;\n    key = \"right\";\n  }\n  {\n    ease = 4;\n    key = \"down\";\n  }\n]", "loc": ["programs", "anki", "answerKeys"], "readOnly": false, "title": "programs.anki.answerKeys", "type": "list of (submodule)", "descriptionHTML": "<p>Overrides for choosing what keyboard shortcut activates each\nanswer button. The Anki default will be used for ones without an\noverride defined.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "", "description": "Number associated with an answer button.\nBy default, 1 = Again, 2 = Hard, 3 = Good, and 4 = Easy.", "example": "3", "loc": ["programs", "anki", "answerKeys", "*", "ease"], "readOnly": false, "title": "programs.anki.answerKeys.*.ease", "type": "signed integer", "descriptionHTML": "<p>Number associated with an answer button.</p>\n<p>By default, 1 = Again, 2 = Hard, 3 = Good, and 4 = Easy.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "", "description": "Keyboard shortcut for this answer button. The shortcut should be in\nthe string format used by https://doc.qt.io/qt-6/qkeysequence.html.", "example": "\"3\"", "loc": ["programs", "anki", "answerKeys", "*", "key"], "readOnly": false, "title": "programs.anki.answerKeys.*.key", "type": "string", "descriptionHTML": "<p>Keyboard shortcut for this answer button. The shortcut should be in\nthe string format used by <a href=\"https://doc.qt.io/qt-6/qkeysequence.html\">https://doc.qt.io/qt-6/qkeysequence.html</a>.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "false", "description": "Whether to enable Anki.", "example": "true", "loc": ["programs", "anki", "enable"], "readOnly": false, "title": "programs.anki.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Anki.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Hide bottom bar during review.", "example": "true", "loc": ["programs", "anki", "hideBottomBar"], "readOnly": false, "title": "programs.anki.hideBottomBar", "type": "null or boolean", "descriptionHTML": "<p>Hide bottom bar during review.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "When to hide the bottom bar when hideBottomBar is enabled.", "example": "\"fullscreen\"", "loc": ["programs", "anki", "hideBottomBarMode"], "readOnly": false, "title": "programs.anki.hideBottomBarMode", "type": "null or one of \"fullscreen\", \"always\"", "descriptionHTML": "<p>When to hide the bottom bar when <code>hideBottomBar</code> is enabled.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Hide top bar during review.", "example": "true", "loc": ["programs", "anki", "hideTopBar"], "readOnly": false, "title": "programs.anki.hideTopBar", "type": "null or boolean", "descriptionHTML": "<p>Hide top bar during review.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "When to hide the top bar when hideTopBar is enabled.", "example": "\"fullscreen\"", "loc": ["programs", "anki", "hideTopBarMode"], "readOnly": false, "title": "programs.anki.hideTopBarMode", "type": "null or one of \"fullscreen\", \"always\"", "descriptionHTML": "<p>When to hide the top bar when <code>hideTopBar</code> is enabled.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Display language. Should be an underscore separated language tag.\nSee https://github.com/ankitects/anki/blob/main/pylib/anki/lang.py for\nsupported tags.", "example": "\"en_US\"", "loc": ["programs", "anki", "language"], "readOnly": false, "title": "programs.anki.language", "type": "null or string", "descriptionHTML": "<p>Display language. Should be an underscore separated language tag.\nSee <a href=\"https://github.com/ankitects/anki/blob/main/pylib/anki/lang.py\">https://github.com/ankitects/anki/blob/main/pylib/anki/lang.py</a> for\nsupported tags.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Use legacy (pre 2.1.55) import/export handling code.", "example": "", "loc": ["programs", "anki", "legacyImportExport"], "readOnly": false, "title": "programs.anki.legacyImportExport", "type": "null or boolean", "descriptionHTML": "<p>Use legacy (pre 2.1.55) import/export handling code.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Minimalist user interface mode.", "example": "true", "loc": ["programs", "anki", "minimalistMode"], "readOnly": false, "title": "programs.anki.minimalistMode", "type": "null or boolean", "descriptionHTML": "<p>Minimalist user interface mode.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "pkgs.anki", "description": "The anki package to use.", "example": "", "loc": ["programs", "anki", "package"], "readOnly": false, "title": "programs.anki.package", "type": "package", "descriptionHTML": "<p>The anki package to use.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Disable various animations and transitions of the user interface.", "example": "true", "loc": ["programs", "anki", "reduceMotion"], "readOnly": false, "title": "programs.anki.reduceMotion", "type": "null or boolean", "descriptionHTML": "<p>Disable various animations and transitions of the user interface.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Spacebar (or enter) also answers card.", "example": "true", "loc": ["programs", "anki", "spacebarRatesCard"], "readOnly": false, "title": "programs.anki.spacebarRatesCard", "type": "null or boolean", "descriptionHTML": "<p>Spacebar (or enter) also answers card.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Widgets style.", "example": "\"native\"", "loc": ["programs", "anki", "style"], "readOnly": false, "title": "programs.anki.style", "type": "null or one of \"anki\", \"native\"", "descriptionHTML": "<p>Widgets style.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Automatically sync on profile open/close.", "example": "true", "loc": ["programs", "anki", "sync", "autoSync"], "readOnly": false, "title": "programs.anki.sync.autoSync", "type": "null or boolean", "descriptionHTML": "<p>Automatically sync on profile open/close.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Automatically sync media every X minutes. Set this to 0 to disable\nperiodic media syncing.", "example": "15", "loc": ["programs", "anki", "sync", "autoSyncMediaMinutes"], "readOnly": false, "title": "programs.anki.sync.autoSyncMediaMinutes", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>Automatically sync media every X minutes. Set this to 0 to disable\nperiodic media syncing.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Network timeout in seconds.", "example": "60", "loc": ["programs", "anki", "sync", "networkTimeout"], "readOnly": false, "title": "programs.anki.sync.networkTimeout", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>Network timeout in seconds.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Path to a file containing the sync account password.", "example": "", "loc": ["programs", "anki", "sync", "passwordFile"], "readOnly": false, "title": "programs.anki.sync.passwordFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to a file containing the sync account password.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Synchronize audio and images too.", "example": "true", "loc": ["programs", "anki", "sync", "syncMedia"], "readOnly": false, "title": "programs.anki.sync.syncMedia", "type": "null or boolean", "descriptionHTML": "<p>Synchronize audio and images too.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Custom sync server URL. See https://docs.ankiweb.net/sync-server.html.", "example": "\"http://example.com/anki-sync/\"", "loc": ["programs", "anki", "sync", "url"], "readOnly": false, "title": "programs.anki.sync.url", "type": "null or string", "descriptionHTML": "<p>Custom sync server URL. See <a href=\"https://docs.ankiweb.net/sync-server.html\">https://docs.ankiweb.net/sync-server.html</a>.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Sync account username.", "example": "\"lovelearning@email.com\"", "loc": ["programs", "anki", "sync", "username"], "readOnly": false, "title": "programs.anki.sync.username", "type": "null or string", "descriptionHTML": "<p>Sync account username.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Path to a file containing the sync account username.", "example": "", "loc": ["programs", "anki", "sync", "usernameFile"], "readOnly": false, "title": "programs.anki.sync.usernameFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to a file containing the sync account username.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Theme to use.", "example": "\"dark\"", "loc": ["programs", "anki", "theme"], "readOnly": false, "title": "programs.anki.theme", "type": "null or one of \"followSystem\", \"light\", \"dark\"", "descriptionHTML": "<p>Theme to use.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "User interface scale.", "example": "1.0", "loc": ["programs", "anki", "uiScale"], "readOnly": false, "title": "programs.anki.uiScale", "type": "null or integer or floating point number between 0.0 and 1.0 (both inclusive)", "descriptionHTML": "<p>User interface scale.</p>"}, {"declarations": [{"name": "<programs/anki/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anki/default.nix"}], "default": "null", "description": "Video driver to use.", "example": "\"opengl\"", "loc": ["programs", "anki", "videoDriver"], "readOnly": false, "title": "programs.anki.videoDriver", "type": "null or one of \"opengl\", \"angle\", \"software\", \"metal\", \"vulkan\", \"d3d11\"", "descriptionHTML": "<p>Video driver to use.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "false", "description": "Close window when a click outside the main box is received.", "example": "", "loc": ["programs", "anyrun", "config", "closeOnClick"], "readOnly": false, "title": "programs.anyrun.config.closeOnClick", "type": "boolean", "descriptionHTML": "<p>Close window when a click outside the main box is received.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "{\n  absolute = 0;\n}", "description": "The minimum height of the runner, the runner will expand to fit all the entries.\nThis is a numeric option - pass either { absolute = int; }; or { fraction = float; };.\nwhen using absolute it sets the absolute value in pixels,\nwhen using fraction, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window", "example": "''\n  { absolute = 200; };\n  or\n  { fraction = 0.4; };\n''", "loc": ["programs", "anyrun", "config", "height"], "readOnly": false, "title": "programs.anyrun.config.height", "type": "submodule", "descriptionHTML": "<p>The minimum height of the runner, the runner will expand to fit all the entries.</p>\n<p>This is a numeric option - pass either <code>{ absolute = int; };</code> or <code>{ fraction = float; };</code>.\nwhen using <code>absolute</code> it sets the absolute value in pixels,\nwhen using <code>fraction</code>, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Absolute value in pixels.", "example": "", "loc": ["programs", "anyrun", "config", "height", "absolute"], "readOnly": false, "title": "programs.anyrun.config.height.absolute", "type": "null or signed integer", "descriptionHTML": "<p>Absolute value in pixels.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Fraction of the screen.", "example": "", "loc": ["programs", "anyrun", "config", "height", "fraction"], "readOnly": false, "title": "programs.anyrun.config.height.fraction", "type": "null or floating point number", "descriptionHTML": "<p>Fraction of the screen.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "false", "description": "Hide match and plugin info icons.", "example": "", "loc": ["programs", "anyrun", "config", "hideIcons"], "readOnly": false, "title": "programs.anyrun.config.hideIcons", "type": "boolean", "descriptionHTML": "<p>Hide match and plugin info icons.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "false", "description": "Hide the plugin info panel.", "example": "", "loc": ["programs", "anyrun", "config", "hidePluginInfo"], "readOnly": false, "title": "programs.anyrun.config.hidePluginInfo", "type": "boolean", "descriptionHTML": "<p>Hide the plugin info panel.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "false", "description": "Ignore exclusive zones, eg. Waybar.", "example": "", "loc": ["programs", "anyrun", "config", "ignoreExclusiveZones"], "readOnly": false, "title": "programs.anyrun.config.ignoreExclusiveZones", "type": "boolean", "descriptionHTML": "<p>Ignore exclusive zones, eg. Waybar.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "\"overlay\"", "description": "Layer shell layer (background, bottom, top or overlay).", "example": "", "loc": ["programs", "anyrun", "config", "layer"], "readOnly": false, "title": "programs.anyrun.config.layer", "type": "one of \"background\", \"bottom\", \"top\", \"overlay\"", "descriptionHTML": "<p>Layer shell layer (background, bottom, top or overlay).</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Limit amount of entries shown in total.", "example": "", "loc": ["programs", "anyrun", "config", "maxEntries"], "readOnly": false, "title": "programs.anyrun.config.maxEntries", "type": "null or signed integer", "descriptionHTML": "<p>Limit amount of entries shown in total.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "List of anyrun plugins to use. Can either be packages, absolute plugin paths, or strings.", "example": "", "loc": ["programs", "anyrun", "config", "plugins"], "readOnly": false, "title": "programs.anyrun.config.plugins", "type": "null or (list of (package or string))", "descriptionHTML": "<p>List of anyrun plugins to use. Can either be packages, absolute plugin paths, or strings.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "false", "description": "Show search results immediately when Anyrun starts.", "example": "", "loc": ["programs", "anyrun", "config", "showResultsImmediately"], "readOnly": false, "title": "programs.anyrun.config.showResultsImmediately", "type": "boolean", "descriptionHTML": "<p>Show search results immediately when Anyrun starts.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "{\n  absolute = 800;\n}", "description": "The width of the runner.\nThis is a numeric option - pass either { absolute = int; }; or { fraction = float; };.\nwhen using absolute it sets the absolute value in pixels,\nwhen using fraction, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window", "example": "''\n  { absolute = 200; };\n  or\n  { fraction = 0.4; };\n''", "loc": ["programs", "anyrun", "config", "width"], "readOnly": false, "title": "programs.anyrun.config.width", "type": "submodule", "descriptionHTML": "<p>The width of the runner.</p>\n<p>This is a numeric option - pass either <code>{ absolute = int; };</code> or <code>{ fraction = float; };</code>.\nwhen using <code>absolute</code> it sets the absolute value in pixels,\nwhen using <code>fraction</code>, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Absolute value in pixels.", "example": "", "loc": ["programs", "anyrun", "config", "width", "absolute"], "readOnly": false, "title": "programs.anyrun.config.width.absolute", "type": "null or signed integer", "descriptionHTML": "<p>Absolute value in pixels.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Fraction of the screen.", "example": "", "loc": ["programs", "anyrun", "config", "width", "fraction"], "readOnly": false, "title": "programs.anyrun.config.width.fraction", "type": "null or floating point number", "descriptionHTML": "<p>Fraction of the screen.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "{\n  fraction = 0.5;\n}", "description": "The horizontal position, adjusted so that { relative = 0.5; } always centers the runner.\nThis is a numeric option - pass either { absolute = int; }; or { fraction = float; };.\nwhen using absolute it sets the absolute value in pixels,\nwhen using fraction, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window", "example": "''\n  { absolute = 200; };\n  or\n  { fraction = 0.4; };\n''", "loc": ["programs", "anyrun", "config", "x"], "readOnly": false, "title": "programs.anyrun.config.x", "type": "submodule", "descriptionHTML": "<p>The horizontal position, adjusted so that { relative = 0.5; } always centers the runner.</p>\n<p>This is a numeric option - pass either <code>{ absolute = int; };</code> or <code>{ fraction = float; };</code>.\nwhen using <code>absolute</code> it sets the absolute value in pixels,\nwhen using <code>fraction</code>, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Absolute value in pixels.", "example": "", "loc": ["programs", "anyrun", "config", "x", "absolute"], "readOnly": false, "title": "programs.anyrun.config.x.absolute", "type": "null or signed integer", "descriptionHTML": "<p>Absolute value in pixels.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Fraction of the screen.", "example": "", "loc": ["programs", "anyrun", "config", "x", "fraction"], "readOnly": false, "title": "programs.anyrun.config.x.fraction", "type": "null or floating point number", "descriptionHTML": "<p>Fraction of the screen.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "{\n  fraction = 0.0;\n}", "description": "The vertical position, works the same as x.\nThis is a numeric option - pass either { absolute = int; }; or { fraction = float; };.\nwhen using absolute it sets the absolute value in pixels,\nwhen using fraction, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window", "example": "''\n  { absolute = 200; };\n  or\n  { fraction = 0.4; };\n''", "loc": ["programs", "anyrun", "config", "y"], "readOnly": false, "title": "programs.anyrun.config.y", "type": "submodule", "descriptionHTML": "<p>The vertical position, works the same as x.</p>\n<p>This is a numeric option - pass either <code>{ absolute = int; };</code> or <code>{ fraction = float; };</code>.\nwhen using <code>absolute</code> it sets the absolute value in pixels,\nwhen using <code>fraction</code>, it sets a fraction of the width or height of the full screen (depends on exclusive zones and the settings related to them) window</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Absolute value in pixels.", "example": "", "loc": ["programs", "anyrun", "config", "y", "absolute"], "readOnly": false, "title": "programs.anyrun.config.y.absolute", "type": "null or signed integer", "descriptionHTML": "<p>Absolute value in pixels.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "null", "description": "Fraction of the screen.", "example": "", "loc": ["programs", "anyrun", "config", "y", "fraction"], "readOnly": false, "title": "programs.anyrun.config.y.fraction", "type": "null or floating point number", "descriptionHTML": "<p>Fraction of the screen.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "false", "description": "Whether to enable anyrun.", "example": "true", "loc": ["programs", "anyrun", "enable"], "readOnly": false, "title": "programs.anyrun.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable anyrun.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "{ }", "description": "Extra files to put in {file}~/.config/anyrun, a wrapper over {option}xdg.configFile.", "example": "''\n  programs.anyrun.extraConfigFiles.\"plugin-name.ron\".text = '''\n    Config(\n      some_option: true,\n    )\n  '''\n''", "loc": ["programs", "anyrun", "extraConfigFiles"], "readOnly": false, "title": "programs.anyrun.extraConfigFiles", "type": "attribute set", "descriptionHTML": "<p>Extra files to put in {file}<code>~/.config/anyrun</code>, a wrapper over {option}<code>xdg.configFile</code>.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "\"\"", "description": "Extra CSS lines to add to {file}~/.config/anyrun/style.css.", "example": "", "loc": ["programs", "anyrun", "extraCss"], "readOnly": false, "title": "programs.anyrun.extraCss", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra CSS lines to add to {file}<code>~/.config/anyrun/style.css</code>.</p>"}, {"declarations": [{"name": "<programs/anyrun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/anyrun.nix"}], "default": "pkgs.anyrun", "description": "The anyrun package to use.", "example": "", "loc": ["programs", "anyrun", "package"], "readOnly": false, "title": "programs.anyrun.package", "type": "null or package", "descriptionHTML": "<p>The anyrun package to use.</p>"}, {"declarations": [{"name": "<programs/aria2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aria2.nix"}], "default": "false", "description": "Whether to enable aria2.", "example": "true", "loc": ["programs", "aria2", "enable"], "readOnly": false, "title": "programs.aria2.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable aria2.</p>"}, {"declarations": [{"name": "<programs/aria2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aria2.nix"}], "default": "\"\"", "description": "Extra lines added to {file}aria2.conf file.", "example": "", "loc": ["programs", "aria2", "extraConfig"], "readOnly": false, "title": "programs.aria2.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to {file}<code>aria2.conf</code> file.</p>"}, {"declarations": [{"name": "<programs/aria2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aria2.nix"}], "default": "pkgs.aria2", "description": "The aria2 package to use.", "example": "", "loc": ["programs", "aria2", "package"], "readOnly": false, "title": "programs.aria2.package", "type": "null or package", "descriptionHTML": "<p>The aria2 package to use.</p>"}, {"declarations": [{"name": "<programs/aria2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/aria2.nix"}], "default": "{ }", "description": "Options to add to {file}aria2.conf file.\nSee\n{manpage}aria2c(1)\nfor options.", "example": "{\n  listen-port = 60000;\n  dht-listen-port = 60000;\n  seed-ratio = 1.0;\n  max-upload-limit = \"50K\";\n  ftp-pasv = true;\n}\n", "loc": ["programs", "aria2", "settings"], "readOnly": false, "title": "programs.aria2.settings", "type": "attribute set of (boolean or floating point number or signed integer or string)", "descriptionHTML": "<p>Options to add to {file}<code>aria2.conf</code> file.\nSee\n{manpage}<code>aria2c(1)</code>\nfor options.</p>"}, {"declarations": [{"name": "<programs/ashell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ashell.nix"}], "default": "false", "description": "Whether to enable ashell, a ready to go wayland status bar for hyprland.", "example": "true", "loc": ["programs", "ashell", "enable"], "readOnly": false, "title": "programs.ashell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ashell, a ready to go wayland status bar for hyprland.</p>"}, {"declarations": [{"name": "<programs/ashell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ashell.nix"}], "default": "pkgs.ashell", "description": "The ashell package to use.", "example": "", "loc": ["programs", "ashell", "package"], "readOnly": false, "title": "programs.ashell.package", "type": "null or package", "descriptionHTML": "<p>The ashell package to use.</p>"}, {"declarations": [{"name": "<programs/ashell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ashell.nix"}], "default": "{ }", "description": "Ashell configuration written to {file}$XDG_CONFIG_HOME/ashell/config.toml (0.5.0+)\nor {file}$XDG_CONFIG_HOME/ashell/config.yaml (<0.5.0).\nFor available settings see\nhttps://github.com/MalpenZibo/ashell?tab=readme-ov-file#configuration.", "example": "{\n  modules = {\n    center = [\n      \"Window Title\"\n    ];\n    left = [\n      \"Workspaces\"\n    ];\n    right = [\n      \"SystemInfo\"\n      [\n        \"Clock\"\n        \"Privacy\"\n        \"Settings\"\n      ]\n    ];\n  };\n  workspaces = {\n    visibilityMode = \"MonitorSpecific\";\n  };\n}", "loc": ["programs", "ashell", "settings"], "readOnly": false, "title": "programs.ashell.settings", "type": "TOML value", "descriptionHTML": "<p>Ashell configuration written to {file}<code>$XDG_CONFIG_HOME/ashell/config.toml</code> (0.5.0+)\nor {file}<code>$XDG_CONFIG_HOME/ashell/config.yaml</code> (&lt;0.5.0).\nFor available settings see\n<a href=\"https://github.com/MalpenZibo/ashell?tab=readme-ov-file#configuration\">https://github.com/MalpenZibo/ashell?tab=readme-ov-file#configuration</a>.</p>"}, {"declarations": [{"name": "<programs/ashell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ashell.nix"}], "default": "false", "description": "Whether to enable ashell systemd service.", "example": "true", "loc": ["programs", "ashell", "systemd", "enable"], "readOnly": false, "title": "programs.ashell.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ashell systemd service.</p>"}, {"declarations": [{"name": "<programs/ashell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ashell.nix"}], "default": "config.wayland.systemd.target", "description": "The systemd target that will automatically start ashell.\nIf you set this to a WM-specific target, make sure that systemd\nintegration for that WM is enabled (for example,\n). This is\ntypically true by default.", "example": "\"hyprland-session.target\"", "loc": ["programs", "ashell", "systemd", "target"], "readOnly": false, "title": "programs.ashell.systemd.target", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start ashell.</p>\n<p>If you set this to a WM-specific target, make sure that systemd\nintegration for that WM is enabled (for example,\n<a href=\"#opt-wayland.windowManager.hyprland.systemd.enable\"></a>). This is\ntypically true by default.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "false", "description": "Whether to enable Astroid.", "example": "true", "loc": ["programs", "astroid", "enable"], "readOnly": false, "title": "programs.astroid.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Astroid.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "null", "description": "You can use the following variables:\n%1\n: file name\n%2\n: server name\n%3\n: socket ID\nSee Customizing editor\non the Astroid wiki.", "example": "\"nvim-qt -- -c 'set ft=mail' '+set fileencoding=utf-8' '+set ff=unix' '+set enc=utf-8' '+set fo+=w' %1\"", "loc": ["programs", "astroid", "externalEditor"], "readOnly": false, "title": "programs.astroid.externalEditor", "type": "null or string", "descriptionHTML": "<p>You can use the following variables:</p>\n<p><code>%1</code>\n: file name</p>\n<p><code>%2</code>\n: server name</p>\n<p><code>%3</code>\n: socket ID</p>\n<p>See <a href=\"https://github.com/astroidmail/astroid/wiki/Customizing-editor\">Customizing editor</a>\non the Astroid wiki.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "{ }", "description": "JSON config that will override the default Astroid configuration.", "example": "{\n  poll.interval = 0;\n}\n", "loc": ["programs", "astroid", "extraConfig"], "readOnly": false, "title": "programs.astroid.extraConfig", "type": "JSON value", "descriptionHTML": "<p>JSON config that will override the default Astroid configuration.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "pkgs.astroid", "description": "The astroid package to use.", "example": "", "loc": ["programs", "astroid", "package"], "readOnly": false, "title": "programs.astroid.package", "type": "null or package", "descriptionHTML": "<p>The astroid package to use.</p>"}, {"declarations": [{"name": "<programs/astroid/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/astroid/default.nix"}], "default": "\"\"", "description": "Script to run to fetch/update mails.", "example": "\"mbsync gmail\"", "loc": ["programs", "astroid", "pollScript"], "readOnly": false, "title": "programs.astroid.pollScript", "type": "string", "descriptionHTML": "<p>Script to run to fetch/update mails.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "false", "description": "Whether to enable Atuin daemon.", "example": "true", "loc": ["programs", "atuin", "daemon", "enable"], "readOnly": false, "title": "programs.atuin.daemon.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Atuin daemon.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "null", "description": "Verbosity of Atuin daemon logging.", "example": "", "loc": ["programs", "atuin", "daemon", "logLevel"], "readOnly": false, "title": "programs.atuin.daemon.logLevel", "type": "null or one of \"trace\", \"debug\", \"info\", \"warn\", \"error\"", "descriptionHTML": "<p>Verbosity of Atuin daemon logging.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "false", "description": "Whether to enable atuin.", "example": "true", "loc": ["programs", "atuin", "enable"], "readOnly": false, "title": "programs.atuin.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable atuin.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.\nIf enabled, this will bind ctrl-r to open the Atuin history.", "example": "false", "loc": ["programs", "atuin", "enableBashIntegration"], "readOnly": false, "title": "programs.atuin.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>\n<p>If enabled, this will bind <code>ctrl-r</code> to open the Atuin history.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.\nIf enabled, this will bind the up-arrow key to open the Atuin history.", "example": "false", "loc": ["programs", "atuin", "enableFishIntegration"], "readOnly": false, "title": "programs.atuin.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>\n<p>If enabled, this will bind the up-arrow key to open the Atuin history.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "atuin", "enableNushellIntegration"], "readOnly": false, "title": "programs.atuin.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.\nIf enabled, this will bind ctrl-r and the up-arrow key to open the\nAtuin history.", "example": "false", "loc": ["programs", "atuin", "enableZshIntegration"], "readOnly": false, "title": "programs.atuin.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>\n<p>If enabled, this will bind <code>ctrl-r</code> and the up-arrow key to open the\nAtuin history.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "[ ]", "description": "Flags to append to the shell hook.", "example": "[\n  \"--disable-up-arrow\"\n  \"--disable-ctrl-r\"\n]", "loc": ["programs", "atuin", "flags"], "readOnly": false, "title": "programs.atuin.flags", "type": "list of string", "descriptionHTML": "<p>Flags to append to the shell hook.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "pkgs.atuin", "description": "The atuin package to use.", "example": "", "loc": ["programs", "atuin", "package"], "readOnly": false, "title": "programs.atuin.package", "type": "package", "descriptionHTML": "<p>The atuin package to use.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/atuin/config.toml.\nSee https://docs.atuin.sh/configuration/config/ for the full list\nof options.", "example": "{\n  auto_sync = true;\n  sync_frequency = \"5m\";\n  sync_address = \"https://api.atuin.sh\";\n  search_mode = \"prefix\";\n}\n", "loc": ["programs", "atuin", "settings"], "readOnly": false, "title": "programs.atuin.settings", "type": "Atuin configuration", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/atuin/config.toml</code>.</p>\n<p>See <a href=\"https://docs.atuin.sh/configuration/config/\">https://docs.atuin.sh/configuration/config/</a> for the full list\nof options.</p>"}, {"declarations": [{"name": "<programs/atuin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/atuin.nix"}], "default": "{ }", "description": "Each theme is written to\n{file}$XDG_CONFIG_HOME/atuin/themes/theme-name.toml\nwhere the name of each attribute is the theme-name\nSee https://docs.atuin.sh/guide/theming/ for the full list\nof options.", "example": "{\n  \"my-theme\" = {\n    theme.name = \"My Theme\";\n    colors = {\n      Base = \"#000000\";\n      Title = \"#FFFFFF\";\n    };\n  };\n}\n", "loc": ["programs", "atuin", "themes"], "readOnly": false, "title": "programs.atuin.themes", "type": "attribute set of (TOML value or absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Each theme is written to\n{file}<code>$XDG_CONFIG_HOME/atuin/themes/theme-name.toml</code>\nwhere the name of each attribute is the theme-name</p>\n<p>See <a href=\"https://docs.atuin.sh/guide/theming/\">https://docs.atuin.sh/guide/theming/</a> for the full list\nof options.</p>"}, {"declarations": [{"name": "<programs/autojump.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autojump.nix"}], "default": "false", "description": "Whether to enable autojump.", "example": "true", "loc": ["programs", "autojump", "enable"], "readOnly": false, "title": "programs.autojump.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable autojump.</p>"}, {"declarations": [{"name": "<programs/autojump.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autojump.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "autojump", "enableBashIntegration"], "readOnly": false, "title": "programs.autojump.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/autojump.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autojump.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "autojump", "enableFishIntegration"], "readOnly": false, "title": "programs.autojump.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/autojump.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autojump.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "autojump", "enableZshIntegration"], "readOnly": false, "title": "programs.autojump.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/autojump.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autojump.nix"}], "default": "pkgs.autojump", "description": "The autojump package to use.", "example": "", "loc": ["programs", "autojump", "package"], "readOnly": false, "title": "programs.autojump.package", "type": "package", "descriptionHTML": "<p>The autojump package to use.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "false", "description": "Whether to enable Autorandr.", "example": "true", "loc": ["programs", "autorandr", "enable"], "readOnly": false, "title": "programs.autorandr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Autorandr.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Global hook scripts", "example": "{\n  postswitch = {\n    \"notify-i3\" = \"${pkgs.i3}/bin/i3-msg restart\";\n    \"change-background\" = readFile ./change-background.sh;\n    \"change-dpi\" = ''\n      case \"$AUTORANDR_CURRENT_PROFILE\" in\n        default)\n          DPI=120\n          ;;\n        home)\n          DPI=192\n          ;;\n        work)\n          DPI=144\n          ;;\n        *)\n          echo \"Unknown profile: $AUTORANDR_CURRENT_PROFILE\"\n          exit 1\n      esac\n\n      echo \"Xft.dpi: $DPI\" | ${pkgs.xorg.xrdb}/bin/xrdb -merge\n    ''\n  };\n}\n", "loc": ["programs", "autorandr", "hooks"], "readOnly": false, "title": "programs.autorandr.hooks", "type": "submodule", "descriptionHTML": "<p>Global hook scripts</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Postswitch hook executed after mode switch.", "example": "", "loc": ["programs", "autorandr", "hooks", "postswitch"], "readOnly": false, "title": "programs.autorandr.hooks.postswitch", "type": "attribute set of strings concatenated with \"\\n\"", "descriptionHTML": "<p>Postswitch hook executed after mode switch.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Predetect hook executed before autorandr attempts to run xrandr.", "example": "", "loc": ["programs", "autorandr", "hooks", "predetect"], "readOnly": false, "title": "programs.autorandr.hooks.predetect", "type": "attribute set of strings concatenated with \"\\n\"", "descriptionHTML": "<p>Predetect hook executed before autorandr attempts to run xrandr.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Preswitch hook executed before mode switch.", "example": "", "loc": ["programs", "autorandr", "hooks", "preswitch"], "readOnly": false, "title": "programs.autorandr.hooks.preswitch", "type": "attribute set of strings concatenated with \"\\n\"", "descriptionHTML": "<p>Preswitch hook executed before mode switch.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "pkgs.autorandr", "description": "The autorandr package to use.", "example": "", "loc": ["programs", "autorandr", "package"], "readOnly": false, "title": "programs.autorandr.package", "type": "null or package", "descriptionHTML": "<p>The autorandr package to use.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Autorandr profiles specification.", "example": "{\n  \"work\" = {\n    fingerprint = {\n      eDP1 = \"<EDID>\";\n      DP1 = \"<EDID>\";\n    };\n    config = {\n      eDP1.enable = false;\n      DP1 = {\n        enable = true;\n        crtc = 0;\n        primary = true;\n        position = \"0x0\";\n        mode = \"3840x2160\";\n        gamma = \"1.0:0.909:0.833\";\n        rate = \"60.00\";\n        rotate = \"left\";\n      };\n    };\n    hooks.postswitch = readFile ./work-postswitch.sh;\n  };\n}\n", "loc": ["programs", "autorandr", "profiles"], "readOnly": false, "title": "programs.autorandr.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Autorandr profiles specification.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Per output profile configuration.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "config"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Per output profile configuration.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "null", "description": "Output video display controller.", "example": "0", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "crtc"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.crtc", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>Output video display controller.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "null", "description": "Output DPI configuration.", "example": "96", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "dpi"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.dpi", "type": "null or (positive integer, meaning >0)", "descriptionHTML": "<p>Output DPI configuration.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "true", "description": "Whether to enable the output.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "enable"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the output.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Extra lines to append to this profile's config.", "example": "''\n  x-prop-non_desktop 0\n  some-key some-value\n''\n", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "extraConfig"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines to append to this profile's config.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "null", "description": "Interpolation method to be used for scaling the output.", "example": "\"nearest\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "filter"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.filter", "type": "null or one of \"bilinear\", \"nearest\"", "descriptionHTML": "<p>Interpolation method to be used for scaling the output.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Output gamma configuration.", "example": "\"1.0:0.909:0.833\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "gamma"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.gamma", "type": "string", "descriptionHTML": "<p>Output gamma configuration.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Output resolution.", "example": "\"3840x2160\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "mode"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.mode", "type": "string", "descriptionHTML": "<p>Output resolution.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Output position", "example": "\"5760x0\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "position"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.position", "type": "string", "descriptionHTML": "<p>Output position</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "false", "description": "Whether output should be marked as primary", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "primary"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.primary", "type": "boolean", "descriptionHTML": "<p>Whether output should be marked as primary</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Output framerate.", "example": "\"60.00\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "rate"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.rate", "type": "string", "descriptionHTML": "<p>Output framerate.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "null", "description": "Output rotate configuration.", "example": "\"left\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "rotate"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.rotate", "type": "null or one of \"normal\", \"left\", \"right\", \"inverted\"", "descriptionHTML": "<p>Output rotate configuration.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "null", "description": "Output scale configuration.\nEither configure by pixels or a scaling factor. When using pixel method the\n{manpage}xrandr(1)\noption\n--scale-from\nwill be used; when using factor method the option\n--scale\nwill be used.\nThis option is a shortcut version of the transform option and they are mutually\nexclusive.", "example": "{\n  x = 1.25;\n  y = 1.25;\n}\n", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "scale"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.scale", "type": "null or (submodule)", "descriptionHTML": "<p>Output scale configuration.</p>\n<p>Either configure by pixels or a scaling factor. When using pixel method the\n{manpage}<code>xrandr(1)</code>\noption\n<code>--scale-from</code>\nwill be used; when using factor method the option\n<code>--scale</code>\nwill be used.</p>\n<p>This option is a shortcut version of the transform option and they are mutually\nexclusive.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"factor\"", "description": "Output scaling method.", "example": "\"pixel\"", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "scale", "method"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.scale.method", "type": "one of \"factor\", \"pixel\"", "descriptionHTML": "<p>Output scaling method.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "", "description": "Horizontal scaling factor/pixels.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "scale", "x"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.scale.x", "type": "floating point number or (positive integer, meaning >0)", "descriptionHTML": "<p>Horizontal scaling factor/pixels.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "", "description": "Vertical scaling factor/pixels.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "scale", "y"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.scale.y", "type": "floating point number or (positive integer, meaning >0)", "descriptionHTML": "<p>Vertical scaling factor/pixels.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "null", "description": "Refer to\n{manpage}xrandr(1)\nfor the documentation of the transform matrix.", "example": "[\n  [ 0.6 0.0 0.0 ]\n  [ 0.0 0.6 0.0 ]\n  [ 0.0 0.0 1.0 ]\n]\n", "loc": ["programs", "autorandr", "profiles", "<name>", "config", "<name>", "transform"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.config.<name>.transform", "type": "null or (3\u00d73 matrix of floating point numbers)", "descriptionHTML": "<p>Refer to\n{manpage}<code>xrandr(1)</code>\nfor the documentation of the transform matrix.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Output name to EDID mapping.\nUse autorandr --fingerprint to get current setup values.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "fingerprint"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.fingerprint", "type": "attribute set of string", "descriptionHTML": "<p>Output name to EDID mapping.\nUse <code>autorandr --fingerprint</code> to get current setup values.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "{ }", "description": "Profile hook scripts.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "hooks"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.hooks", "type": "submodule", "descriptionHTML": "<p>Profile hook scripts.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Postswitch hook executed after mode switch.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "hooks", "postswitch"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.hooks.postswitch", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Postswitch hook executed after mode switch.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Predetect hook executed before autorandr attempts to run xrandr.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "hooks", "predetect"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.hooks.predetect", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Predetect hook executed before autorandr attempts to run xrandr.</p>"}, {"declarations": [{"name": "<programs/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/autorandr.nix"}], "default": "\"\"", "description": "Preswitch hook executed before mode switch.", "example": "", "loc": ["programs", "autorandr", "profiles", "<name>", "hooks", "preswitch"], "readOnly": false, "title": "programs.autorandr.profiles.<name>.hooks.preswitch", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Preswitch hook executed before mode switch.</p>"}, {"declarations": [{"name": "<programs/awscli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/awscli.nix"}], "default": "{ }", "description": "Configuration written to {file}$HOME/.aws/credentials.\nFor security reasons, never store cleartext passwords here.\nWe recommend that you use credential_process option to retrieve\nthe IAM credentials from your favorite password manager during runtime,\nor use AWS IAM Identity Center to get short-term credentials.\nSee https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-authentication.html.", "example": "{\n  \"default\" = {\n    \"credential_process\" = \"${pkgs.pass}/bin/pass show aws\";\n  };\n};\n", "loc": ["programs", "awscli", "credentials"], "readOnly": false, "title": "programs.awscli.credentials", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to {file}<code>$HOME/.aws/credentials</code>.</p>\n<p>For security reasons, never store cleartext passwords here.\nWe recommend that you use <code>credential_process</code> option to retrieve\nthe IAM credentials from your favorite password manager during runtime,\nor use AWS IAM Identity Center to get short-term credentials.</p>\n<p>See <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-authentication.html\">https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-authentication.html</a>.</p>"}, {"declarations": [{"name": "<programs/awscli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/awscli.nix"}], "default": "false", "description": "Whether to enable AWS CLI tool.", "example": "true", "loc": ["programs", "awscli", "enable"], "readOnly": false, "title": "programs.awscli.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable AWS CLI tool.</p>"}, {"declarations": [{"name": "<programs/awscli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/awscli.nix"}], "default": "pkgs.awscli2", "description": "The aws package to use.", "example": "", "loc": ["programs", "awscli", "package"], "readOnly": false, "title": "programs.awscli.package", "type": "null or package", "descriptionHTML": "<p>The aws package to use.</p>"}, {"declarations": [{"name": "<programs/awscli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/awscli.nix"}], "default": "{ }", "description": "Configuration written to {file}$HOME/.aws/config.", "example": "{\n  \"default\" = {\n    region = \"eu-west-3\";\n    output = \"json\";\n  };\n};\n", "loc": ["programs", "awscli", "settings"], "readOnly": false, "title": "programs.awscli.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to {file}<code>$HOME/.aws/config</code>.</p>"}, {"declarations": [{"name": "<programs/bacon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bacon.nix"}], "default": "false", "description": "Whether to enable bacon, a background rust code checker.", "example": "true", "loc": ["programs", "bacon", "enable"], "readOnly": false, "title": "programs.bacon.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable bacon, a background rust code checker.</p>"}, {"declarations": [{"name": "<programs/bacon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bacon.nix"}], "default": "pkgs.bacon", "description": "The bacon package to use.", "example": "", "loc": ["programs", "bacon", "package"], "readOnly": false, "title": "programs.bacon.package", "type": "null or package", "descriptionHTML": "<p>The bacon package to use.</p>"}, {"declarations": [{"name": "<programs/bacon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bacon.nix"}], "default": "{ }", "description": "Bacon configuration written to either {file}Library/Application Support/org.dystroy.bacon/prefs.toml\n(darwin) or {file}$XDG_CONFIG_HOME/bacon/prefs.toml.\nFor available settings see https://dystroy.org/bacon/#global-preferences.", "example": "{\n  jobs = {\n    default = {\n      command = [\n        \"cargo\"\n        \"build\"\n        \"--all-features\"\n        \"--color\"\n        \"always\"\n      ];\n      need_stdout = true;\n    };\n  };\n}", "loc": ["programs", "bacon", "settings"], "readOnly": false, "title": "programs.bacon.settings", "type": "TOML value", "descriptionHTML": "<p>Bacon configuration written to either {file}<code>Library/Application Support/org.dystroy.bacon/prefs.toml</code>\n(darwin) or {file}<code>$XDG_CONFIG_HOME/bacon/prefs.toml</code>.\nFor available settings see <a href=\"https://dystroy.org/bacon/#global-preferences\">https://dystroy.org/bacon/#global-preferences</a>.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "\"\"", "description": "Extra commands that should be placed in {file}~/.bashrc.\nNote that these commands will be run even in non-interactive shells.", "example": "", "loc": ["programs", "bash", "bashrcExtra"], "readOnly": false, "title": "programs.bash.bashrcExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be placed in {file}<code>~/.bashrc</code>.\nNote that these commands will be run even in non-interactive shells.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "false", "description": "Whether to enable GNU Bourne-Again SHell.", "example": "true", "loc": ["programs", "bash", "enable"], "readOnly": false, "title": "programs.bash.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GNU Bourne-Again SHell.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "true", "description": "Whether to enable Bash completion for all interactive Bash shells.\nNote, if you use NixOS or nix-darwin and do not have Bash completion\nenabled in the system configuration, then make sure to add\nnix\n  environment.pathsToLink = [ \"/share/bash-completion\" ];\nto your system configuration to get completion for system packages.\nNote, the legacy {file}/etc/bash_completion.d path is\nnot supported by Home Manager.", "example": "", "loc": ["programs", "bash", "enableCompletion"], "readOnly": false, "title": "programs.bash.enableCompletion", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash completion for all interactive Bash shells.</p>\n<p>Note, if you use NixOS or nix-darwin and do not have Bash completion\nenabled in the system configuration, then make sure to add</p>\n<p><code>nix\n  environment.pathsToLink = [ \"/share/bash-completion\" ];</code></p>\n<p>to your system configuration to get completion for system packages.\nNote, the legacy {file}<code>/etc/bash_completion.d</code> path is\nnot supported by Home Manager.</p>"}, {"declarations": [{"name": "<misc/vte.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/vte.nix"}], "default": "false", "description": "Whether to enable integration with terminals using the VTE\nlibrary. This will let the terminal track the current working\ndirectory.", "example": "true", "loc": ["programs", "bash", "enableVteIntegration"], "readOnly": false, "title": "programs.bash.enableVteIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable integration with terminals using the VTE\nlibrary. This will let the terminal track the current working\ndirectory.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "[ ]", "description": "Controlling how commands are saved on the history list.", "example": "", "loc": ["programs", "bash", "historyControl"], "readOnly": false, "title": "programs.bash.historyControl", "type": "list of (one of \"erasedups\", \"ignoredups\", \"ignorespace\", \"ignoreboth\")", "descriptionHTML": "<p>Controlling how commands are saved on the history list.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "null", "description": "Location of the bash history file.", "example": "", "loc": ["programs", "bash", "historyFile"], "readOnly": false, "title": "programs.bash.historyFile", "type": "null or string", "descriptionHTML": "<p>Location of the bash history file.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "100000", "description": "Number of history lines to keep on file.", "example": "", "loc": ["programs", "bash", "historyFileSize"], "readOnly": false, "title": "programs.bash.historyFileSize", "type": "null or signed integer", "descriptionHTML": "<p>Number of history lines to keep on file.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "[ ]", "description": "List of commands that should not be saved to the history list.", "example": "[\n  \"ls\"\n  \"cd\"\n  \"exit\"\n]", "loc": ["programs", "bash", "historyIgnore"], "readOnly": false, "title": "programs.bash.historyIgnore", "type": "list of string", "descriptionHTML": "<p>List of commands that should not be saved to the history list.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "10000", "description": "Number of history lines to keep in memory.", "example": "", "loc": ["programs", "bash", "historySize"], "readOnly": false, "title": "programs.bash.historySize", "type": "null or signed integer", "descriptionHTML": "<p>Number of history lines to keep in memory.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "\"\"", "description": "Extra commands that should be run when initializing an\ninteractive shell.", "example": "", "loc": ["programs", "bash", "initExtra"], "readOnly": false, "title": "programs.bash.initExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be run when initializing an\ninteractive shell.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "\"\"", "description": "Extra commands that should be run when logging out of an\ninteractive shell.", "example": "", "loc": ["programs", "bash", "logoutExtra"], "readOnly": false, "title": "programs.bash.logoutExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be run when logging out of an\ninteractive shell.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "pkgs.bashInteractive", "description": "The bash package to use.", "example": "", "loc": ["programs", "bash", "package"], "readOnly": false, "title": "programs.bash.package", "type": "null or package", "descriptionHTML": "<p>The bash package to use.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "\"\"", "description": "Extra commands that should be run when initializing a login\nshell.", "example": "", "loc": ["programs", "bash", "profileExtra"], "readOnly": false, "title": "programs.bash.profileExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be run when initializing a login\nshell.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "{ }", "description": "Environment variables that will be set for the Bash session.", "example": "{\n  MAILCHECK = 30;\n}", "loc": ["programs", "bash", "sessionVariables"], "readOnly": false, "title": "programs.bash.sessionVariables", "type": "lazy attribute set of (string or signed integer or absolute path)", "descriptionHTML": "<p>Environment variables that will be set for the Bash session.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs.", "example": "{\n  ll = \"ls -l\";\n  \"..\" = \"cd ..\";\n}\n", "loc": ["programs", "bash", "shellAliases"], "readOnly": false, "title": "programs.bash.shellAliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs.</p>"}, {"declarations": [{"name": "<programs/bash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bash.nix"}], "default": "[\n  \"histappend\"\n  \"checkwinsize\"\n  \"extglob\"\n  \"globstar\"\n  \"checkjobs\"\n]", "description": "Shell options to set. Prefix an option with\n\"-\" to unset.", "example": "[\n  \"extglob\"\n  \"-cdspell\"\n]", "loc": ["programs", "bash", "shellOptions"], "readOnly": false, "title": "programs.bash.shellOptions", "type": "list of string", "descriptionHTML": "<p>Shell options to set. Prefix an option with\n\"<code>-</code>\" to unset.</p>"}, {"declarations": [{"name": "<programs/bashmount.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bashmount.nix"}], "default": "false", "description": "Whether to enable bashmount.", "example": "true", "loc": ["programs", "bashmount", "enable"], "readOnly": false, "title": "programs.bashmount.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable bashmount.</p>"}, {"declarations": [{"name": "<programs/bashmount.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bashmount.nix"}], "default": "\"\"", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/bashmount/config. Look at\nhttps://github.com/jamielinux/bashmount/blob/master/bashmount.conf\nfor explanation about possible values.", "example": "", "loc": ["programs", "bashmount", "extraConfig"], "readOnly": false, "title": "programs.bashmount.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/bashmount/config</code>. Look at\n<a href=\"https://github.com/jamielinux/bashmount/blob/master/bashmount.conf\">https://github.com/jamielinux/bashmount/blob/master/bashmount.conf</a>\nfor explanation about possible values.</p>"}, {"declarations": [{"name": "<programs/bashmount.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bashmount.nix"}], "default": "pkgs.bashmount", "description": "The bashmount package to use.", "example": "", "loc": ["programs", "bashmount", "package"], "readOnly": false, "title": "programs.bashmount.package", "type": "null or package", "descriptionHTML": "<p>The bashmount package to use.</p>"}, {"declarations": [{"name": "<programs/bat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bat.nix"}], "default": "{ }", "description": "Bat configuration.", "example": "{\n  map-syntax = [\n    \"*.jenkinsfile:Groovy\"\n    \"*.props:Java Properties\"\n  ];\n  pager = \"less -FR\";\n  theme = \"TwoDark\";\n}", "loc": ["programs", "bat", "config"], "readOnly": false, "title": "programs.bat.config", "type": "attribute set of (string or list of string or boolean)", "descriptionHTML": "<p>Bat configuration.</p>"}, {"declarations": [{"name": "<programs/bat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bat.nix"}], "default": "false", "description": "Whether to enable bat, a cat clone with wings.", "example": "true", "loc": ["programs", "bat", "enable"], "readOnly": false, "title": "programs.bat.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable bat, a cat clone with wings.</p>"}, {"declarations": [{"name": "<programs/bat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bat.nix"}], "default": "[ ]", "description": "Additional bat packages to install.", "example": "with pkgs.bat-extras; [ batdiff batman batgrep batwatch ];", "loc": ["programs", "bat", "extraPackages"], "readOnly": false, "title": "programs.bat.extraPackages", "type": "list of package", "descriptionHTML": "<p>Additional bat packages to install.</p>"}, {"declarations": [{"name": "<programs/bat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bat.nix"}], "default": "pkgs.bat", "description": "The bat package to use.", "example": "", "loc": ["programs", "bat", "package"], "readOnly": false, "title": "programs.bat.package", "type": "package", "descriptionHTML": "<p>The bat package to use.</p>"}, {"declarations": [{"name": "<programs/bat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bat.nix"}], "default": "{ }", "description": "Additional syntaxes to provide.", "example": "{\n  gleam = {\n    src = pkgs.fetchFromGitHub {\n      owner = \"molnarmark\";\n      repo = \"sublime-gleam\";\n      rev = \"2e761cdb1a87539d827987f997a20a35efd68aa9\";\n      hash = \"sha256-Zj2DKTcO1t9g18qsNKtpHKElbRSc9nBRE2QBzRn9+qs=\";\n    };\n    file = \"syntax/gleam.sublime-syntax\";\n  };\n}\n", "loc": ["programs", "bat", "syntaxes"], "readOnly": false, "title": "programs.bat.syntaxes", "type": "attribute set of (strings concatenated with \"\\n\" or (submodule))", "descriptionHTML": "<p>Additional syntaxes to provide.</p>"}, {"declarations": [{"name": "<programs/bat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bat.nix"}], "default": "{ }", "description": "Additional themes to provide.", "example": "{\n  dracula = {\n    src = pkgs.fetchFromGitHub {\n      owner = \"dracula\";\n      repo = \"sublime\"; # Bat uses sublime syntax for its themes\n      rev = \"26c57ec282abcaa76e57e055f38432bd827ac34e\";\n      sha256 = \"019hfl4zbn4vm4154hh3bwk6hm7bdxbr1hdww83nabxwjn99ndhv\";\n    };\n    file = \"Dracula.tmTheme\";\n  };\n}\n", "loc": ["programs", "bat", "themes"], "readOnly": false, "title": "programs.bat.themes", "type": "attribute set of (strings concatenated with \"\\n\" or (submodule))", "descriptionHTML": "<p>Additional themes to provide.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "\"false\"", "description": "Whether to enable the beets music library manager. This\ndefaults to false for state\nversion\u00a0\u2265\u00a019.03. For earlier versions beets is enabled if\n{option}programs.beets.settings is non-empty.", "example": "", "loc": ["programs", "beets", "enable"], "readOnly": false, "title": "programs.beets.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the beets music library manager. This\ndefaults to <code>false</code> for state\nversion\u00a0\u2265\u00a019.03. For earlier versions beets is enabled if\n{option}<code>programs.beets.settings</code> is non-empty.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "false", "description": "Whether to enable mpdstats plugin and service.", "example": "true", "loc": ["programs", "beets", "mpdIntegration", "enableStats"], "readOnly": false, "title": "programs.beets.mpdIntegration.enableStats", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpdstats plugin and service.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "false", "description": "Whether to enable mpdupdate plugin.", "example": "true", "loc": ["programs", "beets", "mpdIntegration", "enableUpdate"], "readOnly": false, "title": "programs.beets.mpdIntegration.enableUpdate", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpdupdate plugin.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "\"localhost\"", "description": "The host that mpdstats will connect to.", "example": "\"10.0.0.42\"", "loc": ["programs", "beets", "mpdIntegration", "host"], "readOnly": false, "title": "programs.beets.mpdIntegration.host", "type": "string", "descriptionHTML": "<p>The host that mpdstats will connect to.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "config.services.mpd.network.port", "description": "The port that mpdstats will connect to.", "example": "6601", "loc": ["programs", "beets", "mpdIntegration", "port"], "readOnly": false, "title": "programs.beets.mpdIntegration.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port that mpdstats will connect to.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "pkgs.beets", "description": "The beets package to use. Can be used to specify extensions.", "example": "(pkgs.beets.override { pluginOverrides = { beatport.enable = false; }; })", "loc": ["programs", "beets", "package"], "readOnly": false, "title": "programs.beets.package", "type": "package", "descriptionHTML": "<p>The beets package to use. Can be used to specify extensions.</p>"}, {"declarations": [{"name": "<programs/beets.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/beets.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/beets/config.yaml", "example": "", "loc": ["programs", "beets", "settings"], "readOnly": false, "title": "programs.beets.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/beets/config.yaml</code></p>"}, {"declarations": [{"name": "<programs/bemenu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bemenu.nix"}], "default": "false", "description": "Whether to enable bemenu.", "example": "true", "loc": ["programs", "bemenu", "enable"], "readOnly": false, "title": "programs.bemenu.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable bemenu.</p>"}, {"declarations": [{"name": "<programs/bemenu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bemenu.nix"}], "default": "pkgs.bemenu", "description": "The bemenu package to use.", "example": "", "loc": ["programs", "bemenu", "package"], "readOnly": false, "title": "programs.bemenu.package", "type": "null or package", "descriptionHTML": "<p>The bemenu package to use.</p>"}, {"declarations": [{"name": "<programs/bemenu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bemenu.nix"}], "default": "{ }", "description": "Configuration options for bemenu. See {manpage}bemenu(1).", "example": "{\n  line-height = 28;\n  prompt = \"open\";\n  ignorecase = true;\n  fb = \"#1e1e2e\";\n  ff = \"#cdd6f4\";\n  nb = \"#1e1e2e\";\n  nf = \"#cdd6f4\";\n  tb = \"#1e1e2e\";\n  hb = \"#1e1e2e\";\n  tf = \"#f38ba8\";\n  hf = \"#f9e2af\";\n  af = \"#cdd6f4\";\n  ab = \"#1e1e2e\";\n  width-factor = 0.3;\n}\n", "loc": ["programs", "bemenu", "settings"], "readOnly": false, "title": "programs.bemenu.settings", "type": "attribute set of (string or signed integer or floating point number or boolean)", "descriptionHTML": "<p>Configuration options for bemenu. See {manpage}<code>bemenu(1)</code>.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "", "description": "Borgmatic allows for several named backup configurations,\neach with its own source directories and repositories.", "example": "{\n  personal = {\n    location = {\n      sourceDirectories = [ \"/home/me/personal\" ];\n      repositories = [ \"ssh://myuser@myserver.com/./personal-repo\" ];\n    };\n  };\n  work = {\n    location = {\n      sourceDirectories = [ \"/home/me/work\" ];\n      repositories = [ \"ssh://myuser@myserver.com/./work-repo\" ];\n    };\n  };\n};\n", "loc": ["programs", "borgmatic", "backups"], "readOnly": false, "title": "programs.borgmatic.backups", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Borgmatic allows for several named backup configurations,\neach with its own source directories and repositories.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "[ ]", "description": "Consistency checks to run", "example": "[\n  {\n    name = \"repository\";\n    frequency = \"2 weeks\";\n  }\n  {\n    name = \"archives\";\n    frequency = \"4 weeks\";\n  }\n  {\n    name = \"data\";\n    frequency = \"6 weeks\";\n  }\n  {\n    name = \"extract\";\n    frequency = \"6 weeks\";\n  }\n];\n", "loc": ["programs", "borgmatic", "backups", "<name>", "consistency", "checks"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.consistency.checks", "type": "list of (submodule)", "descriptionHTML": "<p>Consistency checks to run</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Frequency of this type of check", "example": "\"2 weeks\"", "loc": ["programs", "borgmatic", "backups", "<name>", "consistency", "checks", "*", "frequency"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.consistency.checks.*.frequency", "type": "null or string matching the pattern ([[:digit:]]+ .*)|always", "descriptionHTML": "<p>Frequency of this type of check</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "", "description": "Name of consistency check to run.", "example": "\"repository\"", "loc": ["programs", "borgmatic", "backups", "<name>", "consistency", "checks", "*", "name"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.consistency.checks.*.name", "type": "one of \"repository\", \"archives\", \"data\", \"extract\"", "descriptionHTML": "<p>Name of consistency check to run.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "{ }", "description": "Extra settings.", "example": "", "loc": ["programs", "borgmatic", "backups", "<name>", "consistency", "extraConfig"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.consistency.extraConfig", "type": "YAML 1.1 value", "descriptionHTML": "<p>Extra settings.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "{ }", "description": "Extra settings.", "example": "", "loc": ["programs", "borgmatic", "backups", "<name>", "hooks", "extraConfig"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.hooks.extraConfig", "type": "YAML 1.1 value", "descriptionHTML": "<p>Extra settings.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "false", "description": "Whether to exclude Home Manager generated symbolic links from\nthe backups. This facilitates restoring the whole home\ndirectory when the Nix store doesn't contain the latest\nHome Manager generation.", "example": "true", "loc": ["programs", "borgmatic", "backups", "<name>", "location", "excludeHomeManagerSymlinks"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.location.excludeHomeManagerSymlinks", "type": "boolean", "descriptionHTML": "<p>Whether to exclude Home Manager generated symbolic links from\nthe backups. This facilitates restoring the whole home\ndirectory when the Nix store doesn't contain the latest\nHome Manager generation.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "{ }", "description": "Extra settings.", "example": "", "loc": ["programs", "borgmatic", "backups", "<name>", "location", "extraConfig"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.location.extraConfig", "type": "YAML 1.1 value", "descriptionHTML": "<p>Extra settings.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Patterns to include/exclude.\nSee the output of borg help patterns for the syntax. Pattern paths\nare relative to / even when a different recursion root is set.\nMutually exclusive with .", "example": "[\n  \"R /home/user\"\n  \"- home/user/.cache\"\n  \"- home/user/Downloads\"\n  \"+ home/user/Videos/Important Video\"\n  \"- home/user/Videos\"\n]\n", "loc": ["programs", "borgmatic", "backups", "<name>", "location", "patterns"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.location.patterns", "type": "null or (list of string)", "descriptionHTML": "<p>Patterns to include/exclude.</p>\n<p>See the output of <code>borg help patterns</code> for the syntax. Pattern paths\nare relative to <code>/</code> even when a different recursion root is set.</p>\n<p>Mutually exclusive with <a href=\"#opt-programs.borgmatic.backups._name_.location.sourceDirectories\"></a>.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "", "description": "List of local or remote repositories with paths and optional labels.", "example": "[\n  {\n    \"path\" = \"ssh://myuser@myrepo.myserver.com/./repo\";\n    \"label\" = \"server\";\n  }\n  {\n    \"path\" = \"/var/lib/backups/local.borg\";\n    \"label\" = \"local\";\n  }\n]\n", "loc": ["programs", "borgmatic", "backups", "<name>", "location", "repositories"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.location.repositories", "type": "list of (string or (submodule))", "descriptionHTML": "<p>List of local or remote repositories with paths and optional labels.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Directories to backup.\nMutually exclusive with .", "example": "[config.home.homeDirectory]", "loc": ["programs", "borgmatic", "backups", "<name>", "location", "sourceDirectories"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.location.sourceDirectories", "type": "null or (list of string)", "descriptionHTML": "<p>Directories to backup.</p>\n<p>Mutually exclusive with <a href=\"#opt-programs.borgmatic.backups._name_.location.patterns\"></a>.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "{ }", "description": "Extra settings.", "example": "", "loc": ["programs", "borgmatic", "backups", "<name>", "output", "extraConfig"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.output.extraConfig", "type": "YAML 1.1 value", "descriptionHTML": "<p>Extra settings.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "{ }", "description": "Extra settings.", "example": "", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "extraConfig"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.extraConfig", "type": "YAML 1.1 value", "descriptionHTML": "<p>Extra settings.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of daily archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepDaily"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepDaily", "type": "null or signed integer", "descriptionHTML": "<p>Number of daily archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of hourly archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepHourly"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepHourly", "type": "null or signed integer", "descriptionHTML": "<p>Number of hourly archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of minutely archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepMinutely"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepMinutely", "type": "null or signed integer", "descriptionHTML": "<p>Number of minutely archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of monthly archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepMonthly"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepMonthly", "type": "null or signed integer", "descriptionHTML": "<p>Number of monthly archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of secondly archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepSecondly"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepSecondly", "type": "null or signed integer", "descriptionHTML": "<p>Number of secondly archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of weekly archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepWeekly"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepWeekly", "type": "null or signed integer", "descriptionHTML": "<p>Number of weekly archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Keep all archives within this time interval.", "example": "\"2d\"", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepWithin"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepWithin", "type": "null or string matching the pattern [[:digit:]]+[Hdwmy]", "descriptionHTML": "<p>Keep all archives within this time interval.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Number of yearly archives to keep. Use -1 for no limit.", "example": "3", "loc": ["programs", "borgmatic", "backups", "<name>", "retention", "keepYearly"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.retention.keepYearly", "type": "null or signed integer", "descriptionHTML": "<p>Number of yearly archives to keep. Use -1 for no limit.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "null", "description": "Command writing the passphrase to standard output.", "example": "\"${pkgs.password-store}/bin/pass borg-repo\"", "loc": ["programs", "borgmatic", "backups", "<name>", "storage", "encryptionPasscommand"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.storage.encryptionPasscommand", "type": "null or string", "descriptionHTML": "<p>Command writing the passphrase to standard output.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "{ }", "description": "Extra settings.", "example": "", "loc": ["programs", "borgmatic", "backups", "<name>", "storage", "extraConfig"], "readOnly": false, "title": "programs.borgmatic.backups.<name>.storage.extraConfig", "type": "YAML 1.1 value", "descriptionHTML": "<p>Extra settings.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "false", "description": "Whether to enable Borgmatic.", "example": "true", "loc": ["programs", "borgmatic", "enable"], "readOnly": false, "title": "programs.borgmatic.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Borgmatic.</p>"}, {"declarations": [{"name": "<programs/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/borgmatic.nix"}], "default": "pkgs.borgmatic", "description": "The borgmatic package to use.", "example": "", "loc": ["programs", "borgmatic", "package"], "readOnly": false, "title": "programs.borgmatic.package", "type": "null or package", "descriptionHTML": "<p>The borgmatic package to use.</p>"}, {"declarations": [{"name": "<programs/bottom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bottom.nix"}], "default": "false", "description": "Whether to enable bottom, a cross-platform graphical process/system monitor with a\ncustomizable interface.", "example": "true", "loc": ["programs", "bottom", "enable"], "readOnly": false, "title": "programs.bottom.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable bottom, a cross-platform graphical process/system monitor with a\ncustomizable interface.</p>"}, {"declarations": [{"name": "<programs/bottom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bottom.nix"}], "default": "pkgs.bottom", "description": "The bottom package to use.", "example": "", "loc": ["programs", "bottom", "package"], "readOnly": false, "title": "programs.bottom.package", "type": "null or package", "descriptionHTML": "<p>The bottom package to use.</p>"}, {"declarations": [{"name": "<programs/bottom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bottom.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/bottom/bottom.toml.\nSee https://github.com/ClementTsang/bottom/blob/master/sample_configs/default_config.toml\nfor the default configuration.", "example": "{\n  flags = {\n    avg_cpu = true;\n    temperature_type = \"c\";\n  };\n\n  colors = {\n    low_battery_color = \"red\";\n  };\n}\n", "loc": ["programs", "bottom", "settings"], "readOnly": false, "title": "programs.bottom.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/bottom/bottom.toml</code>.</p>\n<p>See <a href=\"https://github.com/ClementTsang/bottom/blob/master/sample_configs/default_config.toml\">https://github.com/ClementTsang/bottom/blob/master/sample_configs/default_config.toml</a>\nfor the default configuration.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "false", "description": "Whether to enable boxxy: Boxes in badly behaving applications.", "example": "true", "loc": ["programs", "boxxy", "enable"], "readOnly": false, "title": "programs.boxxy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable boxxy: Boxes in badly behaving applications.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "pkgs.boxxy", "description": "The boxxy package to use.", "example": "", "loc": ["programs", "boxxy", "package"], "readOnly": false, "title": "programs.boxxy.package", "type": "null or package", "descriptionHTML": "<p>The boxxy package to use.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "[ ]", "description": "List of boxxy rules", "example": "", "loc": ["programs", "boxxy", "rules"], "readOnly": false, "title": "programs.boxxy.rules", "type": "list of (YAML 1.1 value)", "descriptionHTML": "<p>List of boxxy rules</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "[ ]", "description": "Apply redirection ONLY when in a certain directory.", "example": "[\n  \"/home/example/Projects/my-project\"\n]", "loc": ["programs", "boxxy", "rules", "*", "context"], "readOnly": false, "title": "programs.boxxy.rules.*.context", "type": "list of string", "descriptionHTML": "<p>Apply redirection ONLY when in a certain directory.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "{ }", "description": "Give certain environment variables for said match.", "example": "{\n  MY_ENV_VAR = \"my_env_var_value\";\n}\n", "loc": ["programs", "boxxy", "rules", "*", "env"], "readOnly": false, "title": "programs.boxxy.rules.*.env", "type": "attribute set of string", "descriptionHTML": "<p>Give certain environment variables for said match.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "\"directory\"", "description": "Does the current path redirect a file or a directory?", "example": "", "loc": ["programs", "boxxy", "rules", "*", "mode"], "readOnly": false, "title": "programs.boxxy.rules.*.mode", "type": "one of \"file\", \"directory\"", "descriptionHTML": "<p>Does the current path redirect a file or a directory?</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "", "description": "Unique identifier of the boxxy rule. This can be any single-line string.", "example": "", "loc": ["programs", "boxxy", "rules", "*", "name"], "readOnly": false, "title": "programs.boxxy.rules.*.name", "type": "string", "descriptionHTML": "<p>Unique identifier of the boxxy rule. This can be any single-line string.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "[ ]", "description": "Apply redirection ONLY to specified executable names.", "example": "[\n  \"bash\"\n  \"/usr/bin/sh\"\n]\n", "loc": ["programs", "boxxy", "rules", "*", "only"], "readOnly": false, "title": "programs.boxxy.rules.*.only", "type": "list of string", "descriptionHTML": "<p>Apply redirection ONLY to specified executable names.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "\"\"", "description": "Where that file/directory should be rewritten to.", "example": "\"${config.xdg.configHome}/ssh\"", "loc": ["programs", "boxxy", "rules", "*", "rewrite"], "readOnly": false, "title": "programs.boxxy.rules.*.rewrite", "type": "string", "descriptionHTML": "<p>Where that file/directory should be rewritten to.</p>"}, {"declarations": [{"name": "<programs/boxxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/boxxy.nix"}], "default": "\"\"", "description": "What directory/file to redirect.", "example": "\"~/.ssh\"", "loc": ["programs", "boxxy", "rules", "*", "target"], "readOnly": false, "title": "programs.boxxy.rules.*.target", "type": "string", "descriptionHTML": "<p>What directory/file to redirect.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "[ ]", "description": "List of Brave Browser native messaging hosts to install.", "example": "[\n  pkgs.kdePackages.plasma-browser-integration\n]\n", "loc": ["programs", "brave", "nativeMessagingHosts"], "readOnly": false, "title": "programs.brave.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>List of Brave Browser native messaging hosts to install.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "false", "description": "Whether to enable Broot, a better way to navigate directories.", "example": "true", "loc": ["programs", "broot", "enable"], "readOnly": false, "title": "programs.broot.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Broot, a better way to navigate directories.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "broot", "enableBashIntegration"], "readOnly": false, "title": "programs.broot.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "broot", "enableFishIntegration"], "readOnly": false, "title": "programs.broot.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "broot", "enableNushellIntegration"], "readOnly": false, "title": "programs.broot.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "broot", "enableZshIntegration"], "readOnly": false, "title": "programs.broot.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "pkgs.broot", "description": "The broot package to use.", "example": "", "loc": ["programs", "broot", "package"], "readOnly": false, "title": "programs.broot.package", "type": "package", "descriptionHTML": "<p>The broot package to use.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "{ }", "description": "Verbatim config entries", "example": "", "loc": ["programs", "broot", "settings"], "readOnly": false, "title": "programs.broot.settings", "type": "JSON value", "descriptionHTML": "<p>Verbatim config entries</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "false", "description": "Whether to enable modal (vim) mode.", "example": "true", "loc": ["programs", "broot", "settings", "modal"], "readOnly": false, "title": "programs.broot.settings.modal", "type": "boolean", "descriptionHTML": "<p>Whether to enable modal (vim) mode.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "{ }", "description": "Color configuration.\nComplete list of keys (expected to change before the v1 of broot):\n\nchar_match\ncode\ndirectory\nexe\nfile\nfile_error\nflag_label\nflag_value\ninput\nlink\npermissions\nselected_line\nsize_bar_full\nsize_bar_void\nsize_text\nspinner\nstatus_error\nstatus_normal\ntable_border\ntree\nunlisted\n\nAdd _fg for a foreground color and\n_bg for a background color.", "example": "{\n  status_normal_fg = \"grayscale(18)\";\n  status_normal_bg = \"grayscale(3)\";\n  status_error_fg = \"red\";\n  status_error_bg = \"yellow\";\n  tree_fg = \"red\";\n  selected_line_bg = \"grayscale(7)\";\n  permissions_fg = \"grayscale(12)\";\n  size_bar_full_bg = \"red\";\n  size_bar_void_bg = \"black\";\n  directory_fg = \"lightyellow\";\n  input_fg = \"cyan\";\n  flag_value_fg = \"lightyellow\";\n  table_border_fg = \"red\";\n  code_fg = \"lightyellow\";\n}\n", "loc": ["programs", "broot", "settings", "skin"], "readOnly": false, "title": "programs.broot.settings.skin", "type": "attribute set of string", "descriptionHTML": "<p>Color configuration.</p>\n<p>Complete list of keys (expected to change before the v1 of broot):</p>\n<ul>\n<li><code>char_match</code></li>\n<li><code>code</code></li>\n<li><code>directory</code></li>\n<li><code>exe</code></li>\n<li><code>file</code></li>\n<li><code>file_error</code></li>\n<li><code>flag_label</code></li>\n<li><code>flag_value</code></li>\n<li><code>input</code></li>\n<li><code>link</code></li>\n<li><code>permissions</code></li>\n<li><code>selected_line</code></li>\n<li><code>size_bar_full</code></li>\n<li><code>size_bar_void</code></li>\n<li><code>size_text</code></li>\n<li><code>spinner</code></li>\n<li><code>status_error</code></li>\n<li><code>status_normal</code></li>\n<li><code>table_border</code></li>\n<li><code>tree</code></li>\n<li><code>unlisted</code></li>\n</ul>\n<p>Add <code>_fg</code> for a foreground color and\n<code>_bg</code> for a background color.</p>"}, {"declarations": [{"name": "<programs/broot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/broot.nix"}], "default": "[ ]", "description": "Define new verbs. For more information, see\nVerb Definition Attributes\nin the broot documentation.\nThe possible attributes are:\ninvocation (optional)\n: how the verb is called by the user, with placeholders for arguments\nexecution (mandatory)\n: how the verb is executed\nkey (optional)\n: a keyboard key triggering execution\nkeys (optional)\n: multiple keyboard keys each triggering execution\nshortcut (optional)\n: an alternate way to call the verb (without\n  the arguments part)\nleave_broot (optional)\n: whether to quit broot on execution\n  (default: true)\nfrom_shell (optional)\n: whether the verb must be executed from the\n  parent shell (default: false)", "example": "[\n  { invocation = \"p\"; execution = \":parent\"; }\n  { invocation = \"edit\"; shortcut = \"e\"; execution = \"$EDITOR {file}\" ; }\n  { invocation = \"create {subpath}\"; execution = \"$EDITOR {directory}/{subpath}\"; }\n  { invocation = \"view\"; execution = \"less {file}\"; }\n  {\n    invocation = \"blop {name}\\\\.{type}\";\n    execution = \"mkdir {parent}/{type} && ${pkgs.neovim}/bin/nvim {parent}/{type}/{name}.{type}\";\n    from_shell = true;\n  }\n]\n", "loc": ["programs", "broot", "settings", "verbs"], "readOnly": false, "title": "programs.broot.settings.verbs", "type": "list of attribute set of (boolean or string or list of string)", "descriptionHTML": "<p>Define new verbs. For more information, see\n<a href=\"https://dystroy.org/broot/documentation/configuration/#verb-definition-attributes\">Verb Definition Attributes</a>\nin the broot documentation.</p>\n<p>The possible attributes are:</p>\n<p><code>invocation</code> (optional)\n: how the verb is called by the user, with placeholders for arguments</p>\n<p><code>execution</code> (mandatory)\n: how the verb is executed</p>\n<p><code>key</code> (optional)\n: a keyboard key triggering execution</p>\n<p><code>keys</code> (optional)\n: multiple keyboard keys each triggering execution</p>\n<p><code>shortcut</code> (optional)\n: an alternate way to call the verb (without\n  the arguments part)</p>\n<p><code>leave_broot</code> (optional)\n: whether to quit broot on execution\n  (default: <code>true</code>)</p>\n<p><code>from_shell</code> (optional)\n: whether the verb must be executed from the\n  parent shell (default: <code>false</code>)</p>"}, {"declarations": [{"name": "<programs/browserpass.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/browserpass.nix"}], "default": "[\n  \"brave\"\n  \"chrome\"\n  \"chromium\"\n  \"firefox\"\n  \"librewolf\"\n  \"vivaldi\"\n]", "description": "Which browsers to install browserpass for", "example": "[\n  \"firefox\"\n]", "loc": ["programs", "browserpass", "browsers"], "readOnly": false, "title": "programs.browserpass.browsers", "type": "list of (one of \"brave\", \"chrome\", \"chromium\", \"firefox\", \"librewolf\", \"vivaldi\")", "descriptionHTML": "<p>Which browsers to install browserpass for</p>"}, {"declarations": [{"name": "<programs/browserpass.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/browserpass.nix"}], "default": "false", "description": "Whether to enable the browserpass extension host application.", "example": "true", "loc": ["programs", "browserpass", "enable"], "readOnly": false, "title": "programs.browserpass.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the browserpass extension host application.</p>"}, {"declarations": [{"name": "<programs/btop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/btop.nix"}], "default": "false", "description": "Whether to enable btop.", "example": "true", "loc": ["programs", "btop", "enable"], "readOnly": false, "title": "programs.btop.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable btop.</p>"}, {"declarations": [{"name": "<programs/btop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/btop.nix"}], "default": "\"\"", "description": "Extra lines added to the {file}btop.conf file.", "example": "", "loc": ["programs", "btop", "extraConfig"], "readOnly": false, "title": "programs.btop.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to the {file}<code>btop.conf</code> file.</p>"}, {"declarations": [{"name": "<programs/btop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/btop.nix"}], "default": "pkgs.btop", "description": "The btop package to use.", "example": "", "loc": ["programs", "btop", "package"], "readOnly": false, "title": "programs.btop.package", "type": "null or package", "descriptionHTML": "<p>The btop package to use.</p>"}, {"declarations": [{"name": "<programs/btop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/btop.nix"}], "default": "{ }", "description": "Options to add to {file}btop.conf file.\nSee https://github.com/aristocratos/btop#configurability\nfor options.", "example": "{\n  color_theme = \"Default\";\n  theme_background = false;\n}", "loc": ["programs", "btop", "settings"], "readOnly": false, "title": "programs.btop.settings", "type": "attribute set of (boolean or floating point number or signed integer or string)", "descriptionHTML": "<p>Options to add to {file}<code>btop.conf</code> file.\nSee <a href=\"https://github.com/aristocratos/btop#configurability\">https://github.com/aristocratos/btop#configurability</a>\nfor options.</p>"}, {"declarations": [{"name": "<programs/btop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/btop.nix"}], "default": "{ }", "description": "Themes to be written to {file}$XDG_CONFIG_HOME/btop/themes/${name}.theme", "example": "{\n  my-theme = ''\n    theme[main_bg]=\"#282a36\"\n    theme[main_fg]=\"#f8f8f2\"\n    theme[title]=\"#f8f8f2\"\n    theme[hi_fg]=\"#6272a4\"\n    theme[selected_bg]=\"#ff79c6\"\n    theme[selected_fg]=\"#f8f8f2\"\n    theme[inactive_fg]=\"#44475a\"\n    theme[graph_text]=\"#f8f8f2\"\n    theme[meter_bg]=\"#44475a\"\n    theme[proc_misc]=\"#bd93f9\"\n    theme[cpu_box]=\"#bd93f9\"\n    theme[mem_box]=\"#50fa7b\"\n    theme[net_box]=\"#ff5555\"\n    theme[proc_box]=\"#8be9fd\"\n    theme[div_line]=\"#44475a\"\n    theme[temp_start]=\"#bd93f9\"\n    theme[temp_mid]=\"#ff79c6\"\n    theme[temp_end]=\"#ff33a8\"\n    theme[cpu_start]=\"#bd93f9\"\n    theme[cpu_mid]=\"#8be9fd\"\n    theme[cpu_end]=\"#50fa7b\"\n    theme[free_start]=\"#ffa6d9\"\n    theme[free_mid]=\"#ff79c6\"\n    theme[free_end]=\"#ff33a8\"\n    theme[cached_start]=\"#b1f0fd\"\n    theme[cached_mid]=\"#8be9fd\"\n    theme[cached_end]=\"#26d7fd\"\n    theme[available_start]=\"#ffd4a6\"\n    theme[available_mid]=\"#ffb86c\"\n    theme[available_end]=\"#ff9c33\"\n    theme[used_start]=\"#96faaf\"\n    theme[used_mid]=\"#50fa7b\"\n    theme[used_end]=\"#0dfa49\"\n    theme[download_start]=\"#bd93f9\"\n    theme[download_mid]=\"#50fa7b\"\n    theme[download_end]=\"#8be9fd\"\n    theme[upload_start]=\"#8c42ab\"\n    theme[upload_mid]=\"#ff79c6\"\n    theme[upload_end]=\"#ff33a8\"\n    theme[process_start]=\"#50fa7b\"\n    theme[process_mid]=\"#59b690\"\n    theme[process_end]=\"#6272a4\"\n  '';\n}", "loc": ["programs", "btop", "themes"], "readOnly": false, "title": "programs.btop.themes", "type": "lazy attribute set of (absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Themes to be written to {file}<code>$XDG_CONFIG_HOME/btop/themes/${name}.theme</code></p>"}, {"declarations": [{"name": "<programs/bun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bun.nix"}], "default": "false", "description": "Whether to enable Bun JavaScript runtime.", "example": "true", "loc": ["programs", "bun", "enable"], "readOnly": false, "title": "programs.bun.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bun JavaScript runtime.</p>"}, {"declarations": [{"name": "<programs/bun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bun.nix"}], "default": "true", "description": "Whether to enable Git integration.", "example": "true", "loc": ["programs", "bun", "enableGitIntegration"], "readOnly": false, "title": "programs.bun.enableGitIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Git integration.</p>"}, {"declarations": [{"name": "<programs/bun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bun.nix"}], "default": "pkgs.bun", "description": "The bun package to use.", "example": "", "loc": ["programs", "bun", "package"], "readOnly": false, "title": "programs.bun.package", "type": "null or package", "descriptionHTML": "<p>The bun package to use.</p>"}, {"declarations": [{"name": "<programs/bun.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/bun.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/.bunfig.toml.\nSee https://bun.sh/docs/runtime/bunfig\nfor the full list of options.", "example": "{\n  smol = true;\n  telemetry = false;\n  test = {\n    coverage = true;\n    coverageThreshold = 0.9;\n  };\n  install.lockfile = {\n    print = \"yarn\";\n  };\n}\n", "loc": ["programs", "bun", "settings"], "readOnly": false, "title": "programs.bun.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/.bunfig.toml</code>.</p>\n<p>See <a href=\"https://bun.sh/docs/runtime/bunfig\">https://bun.sh/docs/runtime/bunfig</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/carapace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/carapace.nix"}], "default": "false", "description": "Whether to enable carapace, a multi-shell multi-command argument completer.", "example": "true", "loc": ["programs", "carapace", "enable"], "readOnly": false, "title": "programs.carapace.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable carapace, a multi-shell multi-command argument completer.</p>"}, {"declarations": [{"name": "<programs/carapace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/carapace.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "carapace", "enableBashIntegration"], "readOnly": false, "title": "programs.carapace.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/carapace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/carapace.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "carapace", "enableFishIntegration"], "readOnly": false, "title": "programs.carapace.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/carapace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/carapace.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "carapace", "enableNushellIntegration"], "readOnly": false, "title": "programs.carapace.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/carapace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/carapace.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "carapace", "enableZshIntegration"], "readOnly": false, "title": "programs.carapace.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/carapace.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/carapace.nix"}], "default": "pkgs.carapace", "description": "The carapace package to use.", "example": "", "loc": ["programs", "carapace", "package"], "readOnly": false, "title": "programs.carapace.package", "type": "package", "descriptionHTML": "<p>The carapace package to use.</p>"}, {"declarations": [{"name": "<programs/cava.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cava.nix"}], "default": "false", "description": "Whether to enable Cava audio visualizer.", "example": "true", "loc": ["programs", "cava", "enable"], "readOnly": false, "title": "programs.cava.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Cava audio visualizer.</p>"}, {"declarations": [{"name": "<programs/cava.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cava.nix"}], "default": "pkgs.cava", "description": "The cava package to use.", "example": "", "loc": ["programs", "cava", "package"], "readOnly": false, "title": "programs.cava.package", "type": "null or package", "descriptionHTML": "<p>The cava package to use.</p>"}, {"declarations": [{"name": "<programs/cava.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cava.nix"}], "default": "{ }", "description": "Settings to be written to the Cava configuration file. See\nhttps://github.com/karlstav/cava/blob/master/example_files/config for\nall available options.", "example": "{\n  general.framerate = 60;\n  input.method = \"alsa\";\n  smoothing.noise_reduction = 88;\n  color = {\n    background = \"'#000000'\";\n    foreground = \"'#FFFFFF'\";\n  };\n}\n", "loc": ["programs", "cava", "settings"], "readOnly": false, "title": "programs.cava.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings to be written to the Cava configuration file. See\n<a href=\"https://github.com/karlstav/cava/blob/master/example_files/config\">https://github.com/karlstav/cava/blob/master/example_files/config</a> for\nall available options.</p>"}, {"declarations": [{"name": "<programs/cavalier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cavalier.nix"}], "default": "false", "description": "Whether to enable Cava audio visualizer GUI.", "example": "true", "loc": ["programs", "cavalier", "enable"], "readOnly": false, "title": "programs.cavalier.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Cava audio visualizer GUI.</p>"}, {"declarations": [{"name": "<programs/cavalier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cavalier.nix"}], "default": "pkgs.cavalier", "description": "The cavalier package to use.", "example": "", "loc": ["programs", "cavalier", "package"], "readOnly": false, "title": "programs.cavalier.package", "type": "null or package", "descriptionHTML": "<p>The cavalier package to use.</p>"}, {"declarations": [{"name": "<programs/cavalier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cavalier.nix"}], "default": "{ }", "description": "Settings to be written to the underlying Cava configuration file. See\nhttps://github.com/karlstav/cava/blob/master/example_files/config for\nall available options.", "example": "{\n  general.framerate = 60;\n  input.method = \"alsa\";\n  smoothing.noise_reduction = 88;\n  color = {\n    background = \"'#000000'\";\n    foreground = \"'#FFFFFF'\";\n  };\n}\n", "loc": ["programs", "cavalier", "settings", "cava"], "readOnly": false, "title": "programs.cavalier.settings.cava", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings to be written to the underlying Cava configuration file. See\n<a href=\"https://github.com/karlstav/cava/blob/master/example_files/config\">https://github.com/karlstav/cava/blob/master/example_files/config</a> for\nall available options.</p>"}, {"declarations": [{"name": "<programs/cavalier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cavalier.nix"}], "default": "{ }", "description": "Settings to be written to the Cavalier configuration file. See\nhttps://github.com/NickvisionApps/Cavalier/blob/main/NickvisionCavalier.Shared/Models/Configuration.cs\nfor all available options.", "example": "{\n  ShowControls = true;\n  ColorProfiles = [\n    {\n      Name = \"Default\";\n      FgColors = [\n        \"#ffed333b\"\n        \"#ffffa348\"\n        \"#fff8e45c\"\n        \"#ff57e389\"\n        \"#ff62a0ea\"\n        \"#ffc061cb\"\n      ];\n      BgColors = [\n        \"#ff1e1e2e\"\n      ];\n      Theme = 1;\n    }\n  ];\n  ActiveProfile = 0;\n}\n", "loc": ["programs", "cavalier", "settings", "general"], "readOnly": false, "title": "programs.cavalier.settings.general", "type": "JSON value", "descriptionHTML": "<p>Settings to be written to the Cavalier configuration file. See\n<a href=\"https://github.com/NickvisionApps/Cavalier/blob/main/NickvisionCavalier.Shared/Models/Configuration.cs\">https://github.com/NickvisionApps/Cavalier/blob/main/NickvisionCavalier.Shared/Models/Configuration.cs</a>\nfor all available options.</p>"}, {"declarations": [{"name": "<programs/chawan.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chawan.nix"}], "default": "false", "description": "Whether to enable chawan, A TUI web browser.", "example": "true", "loc": ["programs", "chawan", "enable"], "readOnly": false, "title": "programs.chawan.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable chawan, A TUI web browser.</p>"}, {"declarations": [{"name": "<programs/chawan.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chawan.nix"}], "default": "pkgs.chawan", "description": "The chawan package to use.", "example": "", "loc": ["programs", "chawan", "package"], "readOnly": false, "title": "programs.chawan.package", "type": "null or package", "descriptionHTML": "<p>The chawan package to use.</p>"}, {"declarations": [{"name": "<programs/chawan.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chawan.nix"}], "default": "{ }", "description": "Configuration options for chawan.\nSee {manpage}cha-config(5)", "example": "{\n  buffer = {\n    images = true;\n    autofocus = true;\n  };\n  page.\"C-k\" = \"() => pager.load('ddg:')\";\n}\n", "loc": ["programs", "chawan", "settings"], "readOnly": false, "title": "programs.chawan.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration options for chawan.</p>\n<p>See {manpage}<code>cha-config(5)</code></p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "[ ]", "description": "List of command-line arguments to be passed to Chromium.\nFor a list of common switches, see\nChrome switches.\nTo search switches for other components, see\nChromium codesearch.", "example": "[\n  \"--enable-logging=stderr\"\n  \"--ignore-gpu-blocklist\"\n]", "loc": ["programs", "chromium", "commandLineArgs"], "readOnly": false, "title": "programs.chromium.commandLineArgs", "type": "list of string", "descriptionHTML": "<p>List of command-line arguments to be passed to Chromium.</p>\n<p>For a list of common switches, see\n<a href=\"https://chromium.googlesource.com/chromium/src/+/refs/heads/main/chrome/common/chrome_switches.cc\">Chrome switches</a>.</p>\n<p>To search switches for other components, see\n<a href=\"https://source.chromium.org/search?q=file:switches.cc&amp;ss=chromium%2Fchromium%2Fsrc\">Chromium codesearch</a>.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "[ ]", "description": "List of Chromium dictionaries to install.", "example": "[\n  pkgs.hunspellDictsChromium.en_US\n]\n", "loc": ["programs", "chromium", "dictionaries"], "readOnly": false, "title": "programs.chromium.dictionaries", "type": "list of package", "descriptionHTML": "<p>List of Chromium dictionaries to install.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "false", "description": "Whether to enable Chromium.", "example": "true", "loc": ["programs", "chromium", "enable"], "readOnly": false, "title": "programs.chromium.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Chromium.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "[ ]", "description": "List of Chromium extensions to install.\nTo find the extension ID, check its URL on the\nChrome Web Store.\nTo install extensions outside of the Chrome Web Store set\nupdateUrl or crxPath and\nversion as explained in the\nChrome\ndocumentation.", "example": "[\n  { id = \"cjpalhdlnbpafiamejdnhcphjbkeiagm\"; } # ublock origin\n  {\n    id = \"dcpihecpambacapedldabdbpakmachpb\";\n    updateUrl = \"https://raw.githubusercontent.com/iamadamdev/bypass-paywalls-chrome/master/updates.xml\";\n  }\n  {\n    id = \"aaaaaaaaaabbbbbbbbbbcccccccccc\";\n    crxPath = \"/home/share/extension.crx\";\n    version = \"1.0\";\n  }\n]\n", "loc": ["programs", "chromium", "extensions"], "readOnly": false, "title": "programs.chromium.extensions", "type": "list of ((submodule) or string convertible to it)", "descriptionHTML": "<p>List of Chromium extensions to install.\nTo find the extension ID, check its URL on the\n<a href=\"https://chrome.google.com/webstore/category/extensions\">Chrome Web Store</a>.</p>\n<p>To install extensions outside of the Chrome Web Store set\n<code>updateUrl</code> or <code>crxPath</code> and\n<code>version</code> as explained in the\n<a href=\"https://developer.chrome.com/docs/extensions/mv2/external_extensions\">Chrome\ndocumentation</a>.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "null", "description": "Path to the extension's crx file. Linux only.", "example": "", "loc": ["programs", "chromium", "extensions", "*", "crxPath"], "readOnly": false, "title": "programs.chromium.extensions.*.crxPath", "type": "null or absolute path", "descriptionHTML": "<p>Path to the extension's crx file. Linux only.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "\"\"", "description": "The extension's ID from the Chrome Web Store url or the unpacked crx.", "example": "", "loc": ["programs", "chromium", "extensions", "*", "id"], "readOnly": false, "title": "programs.chromium.extensions.*.id", "type": "string matching the pattern [a-zA-Z]{32}", "descriptionHTML": "<p>The extension's ID from the Chrome Web Store url or the unpacked crx.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "\"https://clients2.google.com/service/update2/crx\"", "description": "URL of the extension's update manifest XML file. Linux only.", "example": "", "loc": ["programs", "chromium", "extensions", "*", "updateUrl"], "readOnly": false, "title": "programs.chromium.extensions.*.updateUrl", "type": "string", "descriptionHTML": "<p>URL of the extension's update manifest XML file. Linux only.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "null", "description": "The extension's version, required for local installation. Linux only.", "example": "", "loc": ["programs", "chromium", "extensions", "*", "version"], "readOnly": false, "title": "programs.chromium.extensions.*.version", "type": "null or string", "descriptionHTML": "<p>The extension's version, required for local installation. Linux only.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "[ ]", "description": "List of Chromium native messaging hosts to install.", "example": "[\n  pkgs.kdePackages.plasma-browser-integration\n]\n", "loc": ["programs", "chromium", "nativeMessagingHosts"], "readOnly": false, "title": "programs.chromium.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>List of Chromium native messaging hosts to install.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "pkgs.chromium", "description": "The Chromium package to use.", "example": "", "loc": ["programs", "chromium", "package"], "readOnly": false, "title": "programs.chromium.package", "type": "null or package", "descriptionHTML": "<p>The Chromium package to use.</p>"}, {"declarations": [{"name": "<programs/clock-rs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/clock-rs.nix"}], "default": "false", "description": "Whether to enable clock-rs.", "example": "true", "loc": ["programs", "clock-rs", "enable"], "readOnly": false, "title": "programs.clock-rs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable clock-rs.</p>"}, {"declarations": [{"name": "<programs/clock-rs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/clock-rs.nix"}], "default": "pkgs.clock-rs", "description": "The clock-rs package to use.", "example": "", "loc": ["programs", "clock-rs", "package"], "readOnly": false, "title": "programs.clock-rs.package", "type": "null or package", "descriptionHTML": "<p>The clock-rs package to use.</p>"}, {"declarations": [{"name": "<programs/clock-rs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/clock-rs.nix"}], "default": "{ }", "description": "The configuration file to be used for clock-rs", "example": "general = {\n  color = \"magenta\";\n  interval = 250;\n  blink = true;\n  bold = true;\n};\n\nposition = {\n  horizontal = \"start\";\n  vertical = \"end\";\n};\n\ndate = {\n  fmt = \"%A, %B %d, %Y\";\n  use_12h = true;\n  utc = true;\n  hide_seconds = true;\n};\n", "loc": ["programs", "clock-rs", "settings"], "readOnly": false, "title": "programs.clock-rs.settings", "type": "TOML value", "descriptionHTML": "<p>The configuration file to be used for clock-rs</p>"}, {"declarations": [{"name": "<programs/cmus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cmus.nix"}], "default": "false", "description": "Whether to enable Enable cmus, the music player..", "example": "true", "loc": ["programs", "cmus", "enable"], "readOnly": false, "title": "programs.cmus.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Enable cmus, the music player..</p>"}, {"declarations": [{"name": "<programs/cmus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cmus.nix"}], "default": "\"\"", "description": "Extra configuration to add to cmus {file}rc.", "example": "''\n  set audio_backend = \"mpd\"\n  set status_display = \"default\"\n''", "loc": ["programs", "cmus", "extraConfig"], "readOnly": false, "title": "programs.cmus.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration to add to cmus {file}<code>rc</code>.</p>"}, {"declarations": [{"name": "<programs/cmus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cmus.nix"}], "default": "pkgs.cmus", "description": "The cmus package to use.", "example": "", "loc": ["programs", "cmus", "package"], "readOnly": false, "title": "programs.cmus.package", "type": "null or package", "descriptionHTML": "<p>The cmus package to use.</p>"}, {"declarations": [{"name": "<programs/cmus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/cmus.nix"}], "default": "\"\"", "description": "Select color theme. A list of available color themes can be found\nhere: https://github.com/cmus/cmus/tree/master/data.", "example": "\"gruvbox\"", "loc": ["programs", "cmus", "theme"], "readOnly": false, "title": "programs.cmus.theme", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Select color theme. A list of available color themes can be found\nhere: <a href=\"https://github.com/cmus/cmus/tree/master/data\">https://github.com/cmus/cmus/tree/master/data</a>.</p>"}, {"declarations": [{"name": "<programs/codex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/codex.nix"}], "default": "\"\"", "description": "Define custom guidance for the agents; this value is written to {file}~/.codex/AGENTS.md", "example": "''\n  - Always respond with emojis\n  - Only use git commands when explicitly requested\n''\n", "loc": ["programs", "codex", "custom-instructions"], "readOnly": false, "title": "programs.codex.custom-instructions", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Define custom guidance for the agents; this value is written to {file}~/.codex/AGENTS.md</p>"}, {"declarations": [{"name": "<programs/codex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/codex.nix"}], "default": "false", "description": "Whether to enable Lightweight coding agent that runs in your terminal.", "example": "true", "loc": ["programs", "codex", "enable"], "readOnly": false, "title": "programs.codex.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Lightweight coding agent that runs in your terminal.</p>"}, {"declarations": [{"name": "<programs/codex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/codex.nix"}], "default": "pkgs.codex", "description": "The codex package to use.", "example": "", "loc": ["programs", "codex", "package"], "readOnly": false, "title": "programs.codex.package", "type": "null or package", "descriptionHTML": "<p>The codex package to use.</p>"}, {"declarations": [{"name": "<programs/codex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/codex.nix"}], "default": "{ }", "description": "Configuration written to {file}~/.codex/config.toml (0.2.0+) or {file}~/.codex/config.yaml (<0.2.0).\nSee https://github.com/openai/codex/blob/main/codex-rs/config.md for supported values.", "example": "{\n  model = \"gemma3:latest\";\n  model_provider = \"ollama\";\n  model_providers = {\n    ollama = {\n      name = \"Ollama\";\n      baseURL = \"http://localhost:11434/v1\";\n      envKey = \"OLLAMA_API_KEY\";\n    };\n  };\n}\n", "loc": ["programs", "codex", "settings"], "readOnly": false, "title": "programs.codex.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>~/.codex/config.toml</code> (0.2.0+) or {file}<code>~/.codex/config.yaml</code> (&lt;0.2.0).\nSee <a href=\"https://github.com/openai/codex/blob/main/codex-rs/config.md\">https://github.com/openai/codex/blob/main/codex-rs/config.md</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/command-not-found/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/command-not-found/default.nix"}], "default": "\"/nix/var/nix/profiles/per-user/root/channels/nixos/programs.sqlite\"", "description": "Absolute path to {file}programs.sqlite. By\ndefault this file will be provided by your channel\n(nixexprs.tar.xz).", "example": "", "loc": ["programs", "command-not-found", "dbPath"], "readOnly": false, "title": "programs.command-not-found.dbPath", "type": "absolute path", "descriptionHTML": "<p>Absolute path to {file}<code>programs.sqlite</code>. By\ndefault this file will be provided by your channel\n(nixexprs.tar.xz).</p>"}, {"declarations": [{"name": "<programs/command-not-found/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/command-not-found/default.nix"}], "default": "false", "description": "Whether to enable command-not-found hook for interactive shell.", "example": "true", "loc": ["programs", "command-not-found", "enable"], "readOnly": false, "title": "programs.command-not-found.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable command-not-found hook for interactive shell.</p>"}, {"declarations": [{"name": "<programs/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/comodoro.nix"}], "default": "false", "description": "Whether to enable Comodoro, a CLI to manage your time.", "example": "true", "loc": ["programs", "comodoro", "enable"], "readOnly": false, "title": "programs.comodoro.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Comodoro, a CLI to manage your time.</p>"}, {"declarations": [{"name": "<programs/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/comodoro.nix"}], "default": "pkgs.comodoro", "description": "The comodoro package to use.", "example": "", "loc": ["programs", "comodoro", "package"], "readOnly": false, "title": "programs.comodoro.package", "type": "null or package", "descriptionHTML": "<p>The comodoro package to use.</p>"}, {"declarations": [{"name": "<programs/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/comodoro.nix"}], "default": "{ }", "description": "Comodoro configuration.\nSee https://pimalaya.org/comodoro/cli/configuration/ for supported values.", "example": "", "loc": ["programs", "comodoro", "settings"], "readOnly": false, "title": "programs.comodoro.settings", "type": "TOML value", "descriptionHTML": "<p>Comodoro configuration.\nSee <a href=\"https://pimalaya.org/comodoro/cli/configuration/\">https://pimalaya.org/comodoro/cli/configuration/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/darcs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/darcs.nix"}], "default": "[ ]", "description": "If this list has a single entry, it will be used as the author\nwhen you record a patch. If there are multiple entries, Darcs\nwill prompt you to choose one of them.", "example": "[\n  \"Fred Bloggs <fred@example.net>\"\n]", "loc": ["programs", "darcs", "author"], "readOnly": false, "title": "programs.darcs.author", "type": "list of string", "descriptionHTML": "<p>If this list has a single entry, it will be used as the author\nwhen you record a patch. If there are multiple entries, Darcs\nwill prompt you to choose one of them.</p>"}, {"declarations": [{"name": "<programs/darcs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/darcs.nix"}], "default": "[ ]", "description": "File patterns to ignore", "example": "[\n  \"^.idea$\"\n  \".iml$\"\n  \"^.stack-work$\"\n]", "loc": ["programs", "darcs", "boring"], "readOnly": false, "title": "programs.darcs.boring", "type": "list of string", "descriptionHTML": "<p>File patterns to ignore</p>"}, {"declarations": [{"name": "<programs/darcs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/darcs.nix"}], "default": "false", "description": "Whether to enable darcs.", "example": "true", "loc": ["programs", "darcs", "enable"], "readOnly": false, "title": "programs.darcs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable darcs.</p>"}, {"declarations": [{"name": "<programs/darcs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/darcs.nix"}], "default": "pkgs.darcs", "description": "The darcs package to use.", "example": "", "loc": ["programs", "darcs", "package"], "readOnly": false, "title": "programs.darcs.package", "type": "null or package", "descriptionHTML": "<p>The darcs package to use.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "false", "description": "Whether to manage {file}.dir_colors\nand set LS_COLORS.", "example": "", "loc": ["programs", "dircolors", "enable"], "readOnly": false, "title": "programs.dircolors.enable", "type": "boolean", "descriptionHTML": "<p>Whether to manage {file}<code>.dir_colors</code>\nand set <code>LS_COLORS</code>.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "dircolors", "enableBashIntegration"], "readOnly": false, "title": "programs.dircolors.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "dircolors", "enableFishIntegration"], "readOnly": false, "title": "programs.dircolors.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "dircolors", "enableZshIntegration"], "readOnly": false, "title": "programs.dircolors.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "\"\"", "description": "Extra lines added to {file}.dir_colors file.", "example": "", "loc": ["programs", "dircolors", "extraConfig"], "readOnly": false, "title": "programs.dircolors.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to {file}<code>.dir_colors</code> file.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "pkgs.coreutils", "description": "The dircolors package to use.", "example": "", "loc": ["programs", "dircolors", "package"], "readOnly": false, "title": "programs.dircolors.package", "type": "package", "descriptionHTML": "<p>The dircolors package to use.</p>"}, {"declarations": [{"name": "<programs/dircolors.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/dircolors.nix"}], "default": "{ }", "description": "Options to add to {file}.dir_colors file.\nSee {command}dircolors --print-database\nfor options.", "example": "{\n  OTHER_WRITABLE = \"30;46\";\n  \".sh\" = \"01;32\";\n  \".csh\" = \"01;32\";\n}\n", "loc": ["programs", "dircolors", "settings"], "readOnly": false, "title": "programs.dircolors.settings", "type": "attribute set of string", "descriptionHTML": "<p>Options to add to {file}<code>.dir_colors</code> file.\nSee {command}<code>dircolors --print-database</code>\nfor options.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/direnv/direnv.toml.\nSee\n{manpage}direnv.toml(1).\nfor the full list of options.", "example": "", "loc": ["programs", "direnv", "config"], "readOnly": false, "title": "programs.direnv.config", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/direnv/direnv.toml</code>.</p>\n<p>See\n{manpage}<code>direnv.toml(1)</code>.\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "false", "description": "Whether to enable direnv, the environment switcher.", "example": "true", "loc": ["programs", "direnv", "enable"], "readOnly": false, "title": "programs.direnv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable direnv, the environment switcher.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "direnv", "enableBashIntegration"], "readOnly": false, "title": "programs.direnv.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.\nNote, enabling the direnv module will always activate its functionality\nfor Fish since the direnv package automatically gets loaded in Fish.\nIf this is not the case try adding\nnix\nenvironment.pathsToLink = [ \"/share/fish\" ];\nto the system configuration.", "example": "false", "loc": ["programs", "direnv", "enableFishIntegration"], "readOnly": true, "title": "programs.direnv.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>\n<p>Note, enabling the direnv module will always activate its functionality\nfor Fish since the direnv package automatically gets loaded in Fish.\nIf this is not the case try adding</p>\n<p><code>nix\nenvironment.pathsToLink = [ \"/share/fish\" ];</code></p>\n<p>to the system configuration.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "direnv", "enableNushellIntegration"], "readOnly": false, "title": "programs.direnv.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "direnv", "enableZshIntegration"], "readOnly": false, "title": "programs.direnv.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "false", "description": "Whether to enable mise,\nintegration of use_mise for direnv.", "example": "true", "loc": ["programs", "direnv", "mise", "enable"], "readOnly": false, "title": "programs.direnv.mise.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable <a href=\"https://mise.jdx.dev/direnv.html\">mise</a>,\nintegration of use_mise for direnv.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "pkgs.mise", "description": "The mise package to use.", "example": "", "loc": ["programs", "direnv", "mise", "package"], "readOnly": false, "title": "programs.direnv.mise.package", "type": "package", "descriptionHTML": "<p>The mise package to use.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "false", "description": "Whether to enable nix-direnv,\na fast, persistent use_nix implementation for direnv.", "example": "true", "loc": ["programs", "direnv", "nix-direnv", "enable"], "readOnly": false, "title": "programs.direnv.nix-direnv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable <a href=\"https://github.com/nix-community/nix-direnv\">nix-direnv</a>,\na fast, persistent use_nix implementation for direnv.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "pkgs.nix-direnv", "description": "The nix-direnv package to use.", "example": "", "loc": ["programs", "direnv", "nix-direnv", "package"], "readOnly": false, "title": "programs.direnv.nix-direnv.package", "type": "package", "descriptionHTML": "<p>The nix-direnv package to use.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "pkgs.direnv", "description": "The direnv package to use.", "example": "", "loc": ["programs", "direnv", "package"], "readOnly": false, "title": "programs.direnv.package", "type": "package", "descriptionHTML": "<p>The direnv package to use.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "false", "description": "Whether to enable silent mode, that is, disabling direnv logging.", "example": "true", "loc": ["programs", "direnv", "silent"], "readOnly": false, "title": "programs.direnv.silent", "type": "boolean", "descriptionHTML": "<p>Whether to enable silent mode, that is, disabling direnv logging.</p>"}, {"declarations": [{"name": "<programs/direnv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/direnv.nix"}], "default": "\"\"", "description": "Custom stdlib written to\n{file}$XDG_CONFIG_HOME/direnv/direnvrc.", "example": "", "loc": ["programs", "direnv", "stdlib"], "readOnly": false, "title": "programs.direnv.stdlib", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom stdlib written to\n{file}<code>$XDG_CONFIG_HOME/direnv/direnvrc</code>.</p>"}, {"declarations": [{"name": "<programs/discocss.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/discocss.nix"}], "default": "\"\"", "description": "The custom CSS for discocss to use.", "example": "", "loc": ["programs", "discocss", "css"], "readOnly": false, "title": "programs.discocss.css", "type": "string", "descriptionHTML": "<p>The custom CSS for discocss to use.</p>"}, {"declarations": [{"name": "<programs/discocss.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/discocss.nix"}], "default": "true", "description": "Whether to alias discocss to discord.", "example": "", "loc": ["programs", "discocss", "discordAlias"], "readOnly": false, "title": "programs.discocss.discordAlias", "type": "boolean", "descriptionHTML": "<p>Whether to alias discocss to discord.</p>"}, {"declarations": [{"name": "<programs/discocss.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/discocss.nix"}], "default": "pkgs.discord", "description": "The discord package to use.", "example": "", "loc": ["programs", "discocss", "discordPackage"], "readOnly": false, "title": "programs.discocss.discordPackage", "type": "null or package", "descriptionHTML": "<p>The discord package to use.</p>"}, {"declarations": [{"name": "<programs/discocss.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/discocss.nix"}], "default": "false", "description": "Whether to enable discocss, a tiny Discord CSS injector for Linux and MacOS.", "example": "true", "loc": ["programs", "discocss", "enable"], "readOnly": false, "title": "programs.discocss.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable discocss, a tiny Discord CSS injector for Linux and MacOS.</p>"}, {"declarations": [{"name": "<programs/discocss.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/discocss.nix"}], "default": "pkgs.discocss", "description": "The discocss package to use.", "example": "", "loc": ["programs", "discocss", "package"], "readOnly": false, "title": "programs.discocss.package", "type": "null or package", "descriptionHTML": "<p>The discocss package to use.</p>"}, {"declarations": [{"name": "<programs/distrobox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/distrobox.nix"}], "default": "{ }", "description": "A set of containers and all its respective configurations. Each option can be either a\nbool, string or a list of strings. If passed a list, the option will be repeated for each element.\nSee common-debian in the example config. All the available options for the containers can be found\nin the distrobox-assemble documentation at https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-assemble.md.", "example": "''\n  {\n    python-project = {\n      image = \"fedora:40\";\n      additional_packages = \"python3 git\";\n      init_hooks = \"pip3 install numpy pandas torch torchvision\";\n    };\n  \n    common-debian = {\n      image = \"debian:13\";\n      entry = true;\n      additional_packages = \"git\";\n      init_hooks = [\n        \"ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/docker\"\n        \"ln -sf /usr/bin/distrobox-host-exec /usr/local/bin/docker-compose\"\n      ];\n    };\n  \n    office = {\n      clone = \"common-debian\";\n      additional_packages = \"libreoffice onlyoffice\";\n      entry = true;\n    };\n  \n    random-things = {\n      clone = \"common-debian\";\n      entry = false;\n    };\n  }\n''", "loc": ["programs", "distrobox", "containers"], "readOnly": false, "title": "programs.distrobox.containers", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a list of them for duplicate keys)", "descriptionHTML": "<p>A set of containers and all its respective configurations. Each option can be either a\nbool, string or a list of strings. If passed a list, the option will be repeated for each element.\nSee common-debian in the example config. All the available options for the containers can be found\nin the distrobox-assemble documentation at <a href=\"https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-assemble.md\">https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-assemble.md</a>.</p>"}, {"declarations": [{"name": "<programs/distrobox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/distrobox.nix"}], "default": "false", "description": "Whether to enable distrobox.", "example": "true", "loc": ["programs", "distrobox", "enable"], "readOnly": false, "title": "programs.distrobox.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable distrobox.</p>"}, {"declarations": [{"name": "<programs/distrobox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/distrobox.nix"}], "default": "true", "description": "Whatever to enable a Systemd Unit that automatically rebuilds your\ncontainers when changes are detected.", "example": "false", "loc": ["programs", "distrobox", "enableSystemdUnit"], "readOnly": false, "title": "programs.distrobox.enableSystemdUnit", "type": "boolean", "descriptionHTML": "<p>Whatever to enable a Systemd Unit that automatically rebuilds your\ncontainers when changes are detected.</p>"}, {"declarations": [{"name": "<programs/distrobox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/distrobox.nix"}], "default": "pkgs.distrobox", "description": "The distrobox package to use.", "example": "", "loc": ["programs", "distrobox", "package"], "readOnly": false, "title": "programs.distrobox.package", "type": "package", "descriptionHTML": "<p>The distrobox package to use.</p>"}, {"declarations": [{"name": "<programs/docker-cli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/docker-cli.nix"}], "default": "\".docker/config.json\"", "description": "Relative path to the user's home directory where the Docker CLI settings should be stored.", "example": "", "loc": ["programs", "docker-cli", "configPath"], "readOnly": false, "title": "programs.docker-cli.configPath", "type": "string", "descriptionHTML": "<p>Relative path to the user's home directory where the Docker CLI settings should be stored.</p>"}, {"declarations": [{"name": "<programs/docker-cli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/docker-cli.nix"}], "default": "false", "description": "Whether to enable management of docker client config.", "example": "true", "loc": ["programs", "docker-cli", "enable"], "readOnly": false, "title": "programs.docker-cli.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable management of docker client config.</p>"}, {"declarations": [{"name": "<programs/docker-cli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/docker-cli.nix"}], "default": "{ }", "description": "Available configuration options for the Docker CLI see:\n<https://docs.docker.com/reference/cli/docker/#docker-cli-configuration-file-configjson-properties", "example": "''\n  {\n    \"proxies\" = {\n      \"default\" = {\n        \"httpProxy\" = \"http://proxy.example.org:3128\";\n        \"httpsProxy\" = \"http://proxy.example.org:3128\";\n        \"noProxy\" = \"localhost\";\n      };\n    };\n''", "loc": ["programs", "docker-cli", "settings"], "readOnly": false, "title": "programs.docker-cli.settings", "type": "JSON value", "descriptionHTML": "<p>Available configuration options for the Docker CLI see:\n&lt;https://docs.docker.com/reference/cli/docker/#docker-cli-configuration-file-configjson-properties</p>"}, {"declarations": [{"name": "<programs/earthly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/earthly.nix"}], "default": "false", "description": "Whether to enable earthly.", "example": "true", "loc": ["programs", "earthly", "enable"], "readOnly": false, "title": "programs.earthly.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable earthly.</p>"}, {"declarations": [{"name": "<programs/earthly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/earthly.nix"}], "default": "pkgs.earthly", "description": "The earthly package to use.", "example": "", "loc": ["programs", "earthly", "package"], "readOnly": false, "title": "programs.earthly.package", "type": "null or package", "descriptionHTML": "<p>The earthly package to use.</p>"}, {"declarations": [{"name": "<programs/earthly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/earthly.nix"}], "default": "{ }", "description": "Configuration written to ~/.earthly/config.yml file.\nSee https://docs.earthly.dev/docs/earthly-config for supported values.", "example": "global = {\n  disable_analytics = true;\n  disable_log_sharing = true;\n};\n", "loc": ["programs", "earthly", "settings"], "readOnly": false, "title": "programs.earthly.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to ~/.earthly/config.yml file.\nSee https://docs.earthly.dev/docs/earthly-config for supported values.</p>"}, {"declarations": [{"name": "<programs/eclipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eclipse.nix"}], "default": "false", "description": "Whether to enable Eclipse.", "example": "true", "loc": ["programs", "eclipse", "enable"], "readOnly": false, "title": "programs.eclipse.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Eclipse.</p>"}, {"declarations": [{"name": "<programs/eclipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eclipse.nix"}], "default": "false", "description": "Whether to enable the Lombok Java Agent in Eclipse. This is\nnecessary to use the Lombok class annotations.", "example": "true", "loc": ["programs", "eclipse", "enableLombok"], "readOnly": false, "title": "programs.eclipse.enableLombok", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Lombok Java Agent in Eclipse. This is\nnecessary to use the Lombok class annotations.</p>"}, {"declarations": [{"name": "<programs/eclipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eclipse.nix"}], "default": "[ ]", "description": "JVM arguments to use for the Eclipse process.", "example": "", "loc": ["programs", "eclipse", "jvmArgs"], "readOnly": false, "title": "programs.eclipse.jvmArgs", "type": "list of string", "descriptionHTML": "<p>JVM arguments to use for the Eclipse process.</p>"}, {"declarations": [{"name": "<programs/eclipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eclipse.nix"}], "default": "pkgs.eclipses.eclipse-platform", "description": "The eclipse package to use.", "example": "pkgs.eclipses.eclipse-java", "loc": ["programs", "eclipse", "package"], "readOnly": false, "title": "programs.eclipse.package", "type": "package", "descriptionHTML": "<p>The eclipse package to use.</p>"}, {"declarations": [{"name": "<programs/eclipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eclipse.nix"}], "default": "[ ]", "description": "Plugins that should be added to Eclipse.", "example": "", "loc": ["programs", "eclipse", "plugins"], "readOnly": false, "title": "programs.eclipse.plugins", "type": "list of package", "descriptionHTML": "<p>Plugins that should be added to Eclipse.</p>"}, {"declarations": [{"name": "<programs/element-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/element-desktop.nix"}], "default": "false", "description": "Whether to enable element-desktop.", "example": "true", "loc": ["programs", "element-desktop", "enable"], "readOnly": false, "title": "programs.element-desktop.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable element-desktop.</p>"}, {"declarations": [{"name": "<programs/element-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/element-desktop.nix"}], "default": "pkgs.element-desktop", "description": "The element-desktop package to use.", "example": "", "loc": ["programs", "element-desktop", "package"], "readOnly": false, "title": "programs.element-desktop.package", "type": "null or package", "descriptionHTML": "<p>The element-desktop package to use.</p>"}, {"declarations": [{"name": "<programs/element-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/element-desktop.nix"}], "default": "{ }", "description": "Extra profiles for Element. Those can be accessed using the\n\"--profile $NAME\" flag. The same warning and options apply\nhere.", "example": "''\n  {\n    work = {\n      default_server_config = {\n        \"m.homeserver\" = {\n            base_url = \"https://matrix-client.matrix.org\";\n            server_name = \"matrix.org\";\n        };\n        \"m.identity_server\" = {\n            base_url = \"https://vector.im\";\n        };\n      };\n    };\n    home = {\n      disable_custom_urls = false;\n      disable_guests = false;\n      disable_login_language_selector = false;\n      disable_3pid_login = false;\n    };\n    other = {\n      force_verification = false;\n      brand = \"Element\";\n      integrations_ui_url = \"https://scalar.vector.im/\";\n      integrations_rest_url = \"https://scalar.vector.im/api\";\n    };\n  }\n''", "loc": ["programs", "element-desktop", "profiles"], "readOnly": false, "title": "programs.element-desktop.profiles", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>Extra profiles for Element. Those can be accessed using the\n\"--profile $NAME\" flag. The same warning and options apply\nhere.</p>"}, {"declarations": [{"name": "<programs/element-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/element-desktop.nix"}], "default": "{ }", "description": "Configuration settings for Element's default profiles.\nWARNING: Element doesn't combine this config with the defaults,\nso make sure to configure most options. For details about this\nbehavior and available configuration options see:\nhttps://github.com/element-hq/element-web/blob/develop/docs/config.md", "example": "''\n  {\n    default_server_config = {\n      \"m.homeserver\" = {\n          base_url = \"https://matrix-client.matrix.org\";\n          server_name = \"matrix.org\";\n      };\n      \"m.identity_server\" = {\n          base_url = \"https://vector.im\";\n      };\n    };\n    disable_custom_urls = false;\n    disable_guests = false;\n    disable_login_language_selector = false;\n    disable_3pid_login = false;\n    force_verification = false;\n    brand = \"Element\";\n    integrations_ui_url = \"https://scalar.vector.im/\";\n    integrations_rest_url = \"https://scalar.vector.im/api\";\n  }\n''", "loc": ["programs", "element-desktop", "settings"], "readOnly": false, "title": "programs.element-desktop.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration settings for Element's default profiles.\nWARNING: Element doesn't combine this config with the defaults,\nso make sure to configure most options. For details about this\nbehavior and available configuration options see:\n<a href=\"https://github.com/element-hq/element-web/blob/develop/docs/config.md\">https://github.com/element-hq/element-web/blob/develop/docs/config.md</a></p>"}, {"declarations": [{"name": "<programs/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/emacs.nix"}], "default": "false", "description": "Whether to enable Emacs.", "example": "true", "loc": ["programs", "emacs", "enable"], "readOnly": false, "title": "programs.emacs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Emacs.</p>"}, {"declarations": [{"name": "<programs/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/emacs.nix"}], "default": "\"\"", "description": "Configuration to include in the Emacs default init file. See\nhttps://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html\nfor more.\nNote, the inhibit-startup-message Emacs option\ncannot be set here since Emacs disallows setting it from the default\ninitialization file.", "example": "''\n  (setq standard-indent 2)\n''", "loc": ["programs", "emacs", "extraConfig"], "readOnly": false, "title": "programs.emacs.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration to include in the Emacs default init file. See\n<a href=\"https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html\">https://www.gnu.org/software/emacs/manual/html_node/elisp/Init-File.html</a>\nfor more.</p>\n<p>Note, the <code>inhibit-startup-message</code> Emacs option\ncannot be set here since Emacs disallows setting it from the default\ninitialization file.</p>"}, {"declarations": [{"name": "<programs/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/emacs.nix"}], "default": "\"epkgs: []\"", "description": "Extra packages available to Emacs. To get a list of\navailable packages run:\n{command}nix-env -f '&lt;nixpkgs&gt;' -qaP -A emacsPackages.", "example": "epkgs: [ epkgs.emms epkgs.magit ]", "loc": ["programs", "emacs", "extraPackages"], "readOnly": false, "title": "programs.emacs.extraPackages", "type": "Function that takes an attribute set and returns a list containing a selection of the values of the input set", "descriptionHTML": "<p>Extra packages available to Emacs. To get a list of\navailable packages run:\n{command}<code>nix-env -f '&lt;nixpkgs&gt;' -qaP -A emacsPackages</code>.</p>"}, {"declarations": [{"name": "<programs/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/emacs.nix"}], "default": "\"self: super: {}\"", "description": "Allows overriding packages within the Emacs package set.", "example": "self: super: rec {\n  haskell-mode = self.melpaPackages.haskell-mode;\n  # ...\n};\n", "loc": ["programs", "emacs", "overrides"], "readOnly": false, "title": "programs.emacs.overrides", "type": "An overlay function, takes self and super and returns an attribute set overriding the desired attributes.", "descriptionHTML": "<p>Allows overriding packages within the Emacs package set.</p>"}, {"declarations": [{"name": "<programs/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/emacs.nix"}], "default": "pkgs.emacs", "description": "The emacs package to use.", "example": "pkgs.emacs25-nox", "loc": ["programs", "emacs", "package"], "readOnly": false, "title": "programs.emacs.package", "type": "package", "descriptionHTML": "<p>The emacs package to use.</p>"}, {"declarations": [{"name": "<programs/eww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eww.nix"}], "default": "null", "description": "The directory that gets symlinked to\n{file}$XDG_CONFIG_HOME/eww.", "example": "./eww-config-dir", "loc": ["programs", "eww", "configDir"], "readOnly": false, "title": "programs.eww.configDir", "type": "null or absolute path", "descriptionHTML": "<p>The directory that gets symlinked to\n{file}<code>$XDG_CONFIG_HOME/eww</code>.</p>"}, {"declarations": [{"name": "<programs/eww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eww.nix"}], "default": "false", "description": "Whether to enable eww.", "example": "true", "loc": ["programs", "eww", "enable"], "readOnly": false, "title": "programs.eww.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable eww.</p>"}, {"declarations": [{"name": "<programs/eww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eww.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "eww", "enableBashIntegration"], "readOnly": false, "title": "programs.eww.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/eww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eww.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "eww", "enableFishIntegration"], "readOnly": false, "title": "programs.eww.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/eww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eww.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "eww", "enableZshIntegration"], "readOnly": false, "title": "programs.eww.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/eww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eww.nix"}], "default": "pkgs.eww", "description": "The eww package to use.", "example": "", "loc": ["programs", "eww", "package"], "readOnly": false, "title": "programs.eww.package", "type": "package", "descriptionHTML": "<p>The eww package to use.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "null", "description": "Use terminal colors in output ({option}--color argument).", "example": "", "loc": ["programs", "eza", "colors"], "readOnly": false, "title": "programs.eza.colors", "type": "one of <null>, \"auto\", \"always\", \"never\"", "descriptionHTML": "<p>Use terminal colors in output ({option}<code>--color</code> argument).</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "false", "description": "Whether to enable eza, a modern replacement for {command}ls.", "example": "true", "loc": ["programs", "eza", "enable"], "readOnly": false, "title": "programs.eza.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable eza, a modern replacement for {command}<code>ls</code>.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "eza", "enableBashIntegration"], "readOnly": false, "title": "programs.eza.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "eza", "enableFishIntegration"], "readOnly": false, "title": "programs.eza.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "[](#opt-home.shell.enableIonIntegration)", "description": "Whether to enable Ion integration.", "example": "false", "loc": ["programs", "eza", "enableIonIntegration"], "readOnly": false, "title": "programs.eza.enableIonIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Ion integration.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "true", "loc": ["programs", "eza", "enableNushellIntegration"], "readOnly": false, "title": "programs.eza.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "eza", "enableZshIntegration"], "readOnly": false, "title": "programs.eza.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "[ ]", "description": "Extra command line options passed to eza.", "example": "[\n  \"--group-directories-first\"\n  \"--header\"\n]", "loc": ["programs", "eza", "extraOptions"], "readOnly": false, "title": "programs.eza.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command line options passed to eza.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "false", "description": "List each file's Git status if tracked or ignored ({option}--git argument).", "example": "", "loc": ["programs", "eza", "git"], "readOnly": false, "title": "programs.eza.git", "type": "boolean", "descriptionHTML": "<p>List each file's Git status if tracked or ignored ({option}<code>--git</code> argument).</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "null", "description": "Display icons next to file names ({option}--icons argument).\nNote, the support for Boolean values is deprecated.\nSetting this option to true corresponds to --icons=auto.", "example": "", "loc": ["programs", "eza", "icons"], "readOnly": false, "title": "programs.eza.icons", "type": "one of <null>, true, false, \"auto\", \"always\", \"never\"", "descriptionHTML": "<p>Display icons next to file names ({option}<code>--icons</code> argument).</p>\n<p>Note, the support for Boolean values is deprecated.\nSetting this option to <code>true</code> corresponds to <code>--icons=auto</code>.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "pkgs.eza", "description": "The eza package to use.", "example": "", "loc": ["programs", "eza", "package"], "readOnly": false, "title": "programs.eza.package", "type": "null or package", "descriptionHTML": "<p>The eza package to use.</p>"}, {"declarations": [{"name": "<programs/eza.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/eza.nix"}], "default": "{ }", "description": "Written to {file}$XDG_CONFIG_HOME/eza/theme.yml\nSee https://github.com/eza-community/eza#custom-themes", "example": "", "loc": ["programs", "eza", "theme"], "readOnly": false, "title": "programs.eza.theme", "type": "YAML 1.1 value", "descriptionHTML": "<p>Written to {file}<code>$XDG_CONFIG_HOME/eza/theme.yml</code></p>\n<p>See <a href=\"https://github.com/eza-community/eza#custom-themes\">https://github.com/eza-community/eza#custom-themes</a></p>"}, {"declarations": [{"name": "<programs/fastfetch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fastfetch.nix"}], "default": "false", "description": "Whether to enable Fastfetch.", "example": "true", "loc": ["programs", "fastfetch", "enable"], "readOnly": false, "title": "programs.fastfetch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fastfetch.</p>"}, {"declarations": [{"name": "<programs/fastfetch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fastfetch.nix"}], "default": "pkgs.fastfetch", "description": "The fastfetch package to use.", "example": "", "loc": ["programs", "fastfetch", "package"], "readOnly": false, "title": "programs.fastfetch.package", "type": "null or package", "descriptionHTML": "<p>The fastfetch package to use.</p>"}, {"declarations": [{"name": "<programs/fastfetch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fastfetch.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/fastfetch/config.jsonc.\nSee https://github.com/fastfetch-cli/fastfetch/wiki/Json-Schema\nfor the documentation.", "example": "{\n  logo = {\n    source = \"nixos_small\";\n    padding = {\n      right = 1;\n    };\n  };\n  display = {\n    size = {\n      binaryPrefix = \"si\";\n    };\n    color = \"blue\";\n    separator = \" \uf178 \";\n  };\n  modules = [\n    {\n      type = \"datetime\";\n      key = \"Date\";\n      format = \"{1}-{3}-{11}\";\n    }\n    {\n      type = \"datetime\";\n      key = \"Time\";\n      format = \"{14}:{17}:{20}\";\n    }\n    \"break\"\n    \"player\"\n    \"media\"\n  ];\n};\n", "loc": ["programs", "fastfetch", "settings"], "readOnly": false, "title": "programs.fastfetch.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/fastfetch/config.jsonc</code>.\nSee <a href=\"https://github.com/fastfetch-cli/fastfetch/wiki/Json-Schema\">https://github.com/fastfetch-cli/fastfetch/wiki/Json-Schema</a>\nfor the documentation.</p>"}, {"declarations": [{"name": "<programs/fd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fd.nix"}], "default": "false", "description": "Whether to enable fd, a simple, fast and user-friendly alternative to {command}find.", "example": "true", "loc": ["programs", "fd", "enable"], "readOnly": false, "title": "programs.fd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fd, a simple, fast and user-friendly alternative to {command}<code>find</code>.</p>"}, {"declarations": [{"name": "<programs/fd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fd.nix"}], "default": "[ ]", "description": "Extra command line options passed to fd.", "example": "[\n  \"--no-ignore\"\n  \"--absolute-path\"\n]", "loc": ["programs", "fd", "extraOptions"], "readOnly": false, "title": "programs.fd.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command line options passed to fd.</p>"}, {"declarations": [{"name": "<programs/fd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fd.nix"}], "default": "false", "description": "Search hidden files and directories ({option}--hidden argument).", "example": "", "loc": ["programs", "fd", "hidden"], "readOnly": false, "title": "programs.fd.hidden", "type": "boolean", "descriptionHTML": "<p>Search hidden files and directories ({option}<code>--hidden</code> argument).</p>"}, {"declarations": [{"name": "<programs/fd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fd.nix"}], "default": "[ ]", "description": "List of paths that should be globally ignored.", "example": "[\n  \".git/\"\n  \"*.bak\"\n]", "loc": ["programs", "fd", "ignores"], "readOnly": false, "title": "programs.fd.ignores", "type": "list of string", "descriptionHTML": "<p>List of paths that should be globally ignored.</p>"}, {"declarations": [{"name": "<programs/fd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fd.nix"}], "default": "pkgs.fd", "description": "The fd package to use.", "example": "", "loc": ["programs", "fd", "package"], "readOnly": false, "title": "programs.fd.package", "type": "null or package", "descriptionHTML": "<p>The fd package to use.</p>"}, {"declarations": [{"name": "<programs/feh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/feh.nix"}], "default": "{ }", "description": "Override feh's default mouse button mapping. If you want to disable an\naction, set its value to null. If you want to bind multiple buttons to\nan action, set its value to a list.\nSee https://man.finalrewind.org/1/feh/#BUTTONS_CONFIG_SYNTAX for\ndefault bindings and available commands.", "example": "{\n  prev_img = [\n    3\n    \"C-3\"\n  ];\n  zoom_in = 4;\n  zoom_out = \"C-4\";\n}", "loc": ["programs", "feh", "buttons"], "readOnly": false, "title": "programs.feh.buttons", "type": "attribute set of (null or string or signed integer or list of (string or signed integer))", "descriptionHTML": "<p>Override feh's default mouse button mapping. If you want to disable an\naction, set its value to null. If you want to bind multiple buttons to\nan action, set its value to a list.\nSee <a href=\"https://man.finalrewind.org/1/feh/#BUTTONS_CONFIG_SYNTAX\">https://man.finalrewind.org/1/feh/#BUTTONS_CONFIG_SYNTAX</a> for\ndefault bindings and available commands.</p>"}, {"declarations": [{"name": "<programs/feh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/feh.nix"}], "default": "false", "description": "Whether to enable feh - a fast and light image viewer.", "example": "true", "loc": ["programs", "feh", "enable"], "readOnly": false, "title": "programs.feh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable feh - a fast and light image viewer.</p>"}, {"declarations": [{"name": "<programs/feh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/feh.nix"}], "default": "{ }", "description": "Override feh's default keybindings. If you want to disable a keybinding\nset its value to null. If you want to bind multiple keys to an action,\nset its value to a list.\nSee https://man.finalrewind.org/1/feh/#KEYS_CONFIG_SYNTAX for\ndefault bindings and available commands.", "example": "{\n  prev_img = [\n    \"h\"\n    \"Left\"\n  ];\n  zoom_in = \"plus\";\n  zoom_out = \"minus\";\n}", "loc": ["programs", "feh", "keybindings"], "readOnly": false, "title": "programs.feh.keybindings", "type": "attribute set of (null or string or list of string)", "descriptionHTML": "<p>Override feh's default keybindings. If you want to disable a keybinding\nset its value to null. If you want to bind multiple keys to an action,\nset its value to a list.\nSee <a href=\"https://man.finalrewind.org/1/feh/#KEYS_CONFIG_SYNTAX\">https://man.finalrewind.org/1/feh/#KEYS_CONFIG_SYNTAX</a> for\ndefault bindings and available commands.</p>"}, {"declarations": [{"name": "<programs/feh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/feh.nix"}], "default": "pkgs.feh", "description": "The feh package to use.", "example": "", "loc": ["programs", "feh", "package"], "readOnly": false, "title": "programs.feh.package", "type": "null or package", "descriptionHTML": "<p>The feh package to use.</p>"}, {"declarations": [{"name": "<programs/feh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/feh.nix"}], "default": "{ }", "description": "Define themes for feh.\nSee https://man.finalrewind.org/1/feh/#THEMES_CONFIG_SYNTAX for\nimportant guidelines and limitations related to theme configuration.", "example": "{\n  booth = [\n    \"--full-screen\"\n    \"--hide-pointer\"\n    \"--slideshow-delay\"\n    \"20\"\n  ];\n  example = [\n    \"--info\"\n    \"foo bar\"\n  ];\n  feh = [\n    \"--image-bg\"\n    \"black\"\n  ];\n  imagemap = [\n    \"-rVq\"\n    \"--thumb-width\"\n    \"40\"\n    \"--thumb-height\"\n    \"30\"\n    \"--index-info\"\n    \"%n\\\\n%wx%h\"\n  ];\n  present = [\n    \"--full-screen\"\n    \"--sort\"\n    \"name\"\n    \"--hide-pointer\"\n  ];\n  webcam = [\n    \"--multiwindow\"\n    \"--reload\"\n    \"20\"\n  ];\n}", "loc": ["programs", "feh", "themes"], "readOnly": false, "title": "programs.feh.themes", "type": "attribute set of list of string", "descriptionHTML": "<p>Define themes for feh.\nSee <a href=\"https://man.finalrewind.org/1/feh/#THEMES_CONFIG_SYNTAX\">https://man.finalrewind.org/1/feh/#THEMES_CONFIG_SYNTAX</a> for\nimportant guidelines and limitations related to theme configuration.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Whether to enable Firefox.", "example": "true", "loc": ["programs", "firefox", "enable"], "readOnly": false, "title": "programs.firefox.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Firefox.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Whether to enable the GNOME Shell native host connector. Note, you\nalso need to set the NixOS option\nservices.gnome.gnome-browser-connector.enable to\ntrue.", "example": "", "loc": ["programs", "firefox", "enableGnomeExtensions"], "readOnly": false, "title": "programs.firefox.enableGnomeExtensions", "type": "boolean", "descriptionHTML": "<p>Whether to enable the GNOME Shell native host connector. Note, you\nalso need to set the NixOS option\n<code>services.gnome.gnome-browser-connector.enable</code> to\n<code>true</code>.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "", "description": "Resulting Firefox package.", "example": "", "loc": ["programs", "firefox", "finalPackage"], "readOnly": true, "title": "programs.firefox.finalPackage", "type": "null or package", "descriptionHTML": "<p>Resulting Firefox package.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "[ ]", "description": "The language packs to install. Available language codes can be found\non the releases page:\nhttps://releases.mozilla.org/pub/firefox/releases/${version}/linux-x86_64/xpi/,\nreplacing ${version} with the version of Firefox you have. If\nthe version string of your Firefox derivative diverts from the upstream\nversion, try setting the release option.", "example": "[\n  \"en-GB\"\n  \"de\"\n]", "loc": ["programs", "firefox", "languagePacks"], "readOnly": false, "title": "programs.firefox.languagePacks", "type": "list of string", "descriptionHTML": "<p>The language packs to install. Available language codes can be found\non the releases page:\n<code>https://releases.mozilla.org/pub/firefox/releases/${version}/linux-x86_64/xpi/</code>,\nreplacing <code>${version}</code> with the version of Firefox you have. If\nthe version string of your Firefox derivative diverts from the upstream\nversion, try setting the <code>release</code> option.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "[ ]", "description": "Additional packages containing native messaging hosts that should be\nmade available to Firefox extensions.", "example": "", "loc": ["programs", "firefox", "nativeMessagingHosts"], "readOnly": false, "title": "programs.firefox.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>Additional packages containing native messaging hosts that should be\nmade available to Firefox extensions.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "pkgs.firefox", "description": "The Firefox package to use. If state version \u2265 19.09 then\nthis should be a wrapped Firefox package. For earlier state\nversions it should be an unwrapped Firefox package.\nSet to null to disable installing Firefox.", "example": "pkgs.firefox.override {\n  # See nixpkgs' firefox/wrapper.nix to check which options you can use\n  nativeMessagingHosts = [\n    # Gnome shell native connector\n    pkgs.gnome-browser-connector\n    # Tridactyl native connector\n    pkgs.tridactyl-native\n  ];\n}\n", "loc": ["programs", "firefox", "package"], "readOnly": false, "title": "programs.firefox.package", "type": "null or package", "descriptionHTML": "<p>The Firefox package to use. If state version \u2265 19.09 then\nthis should be a wrapped Firefox package. For earlier state\nversions it should be an unwrapped Firefox package.\nSet to <code>null</code> to disable installing Firefox.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "[ ]", "description": "Additional packages to be loaded as PKCS #11 modules in Firefox.", "example": "", "loc": ["programs", "firefox", "pkcs11Modules"], "readOnly": false, "title": "programs.firefox.pkcs11Modules", "type": "list of package", "descriptionHTML": "<p>Additional packages to be loaded as PKCS #11 modules in Firefox.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "See list of policies.", "example": "{\n  BlockAboutConfig = true;\n  DefaultDownloadDirectory = \"\\${home}/Downloads\";\n  ExtensionSettings = {\n    \"uBlock0@raymondhill.net\" = {\n      default_area = \"menupanel\";\n      install_url = \"https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi\";\n      installation_mode = \"force_installed\";\n      private_browsing = true;\n    };\n  };\n}", "loc": ["programs", "firefox", "policies"], "readOnly": false, "title": "programs.firefox.policies", "type": "attribute set of (JSON value)", "descriptionHTML": "<p><a href=\"https://mozilla.github.io/policy-templates/\">See list of policies</a>.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Attribute set of Firefox profiles.", "example": "", "loc": ["programs", "firefox", "profiles"], "readOnly": false, "title": "programs.firefox.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of Firefox profiles.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Declarative bookmarks.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "bookmarks"], "readOnly": false, "title": "programs.firefox.profiles.<name>.bookmarks", "type": "(submodule) or ((list of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) or (attribute set of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) convertible to it) convertible to it", "descriptionHTML": "<p>Declarative bookmarks.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "null", "description": "Configuration file to define custom bookmarks.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "bookmarks", "configFile"], "readOnly": false, "title": "programs.firefox.profiles.<name>.bookmarks.configFile", "type": "null or absolute path", "descriptionHTML": "<p>Configuration file to define custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Whether to force override existing custom bookmarks.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "bookmarks", "force"], "readOnly": false, "title": "programs.firefox.profiles.<name>.bookmarks.force", "type": "boolean", "descriptionHTML": "<p>Whether to force override existing custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "[ ]", "description": "Custom bookmarks.", "example": "[\n  {\n    name = \"wikipedia\";\n    tags = [ \"wiki\" ];\n    keyword = \"wiki\";\n    url = \"https://en.wikipedia.org/wiki/Special:Search?search=%s&go=Go\";\n  }\n  {\n    name = \"kernel.org\";\n    url = \"https://www.kernel.org\";\n  }\n  \"separator\"\n  {\n    name = \"Nix sites\";\n    toolbar = true;\n    bookmarks = [\n      {\n        name = \"homepage\";\n        url = \"https://nixos.org/\";\n      }\n      {\n        name = \"wiki\";\n        tags = [ \"wiki\" \"nix\" ];\n        url = \"https://wiki.nixos.org/\";\n      }\n    ];\n  }\n]\n", "loc": ["programs", "firefox", "profiles", "<name>", "bookmarks", "settings"], "readOnly": false, "title": "programs.firefox.profiles.<name>.bookmarks.settings", "type": "(list of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) or (attribute set of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) convertible to it", "descriptionHTML": "<p>Custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Attribute set of container configurations. See\nMulti-Account\nContainers\nfor more information.", "example": "{\n  dangerous = {\n    color = \"red\";\n    icon = \"fruit\";\n    id = 2;\n  };\n  shopping = {\n    color = \"blue\";\n    icon = \"cart\";\n    id = 1;\n  };\n}", "loc": ["programs", "firefox", "profiles", "<name>", "containers"], "readOnly": false, "title": "programs.firefox.profiles.<name>.containers", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of container configurations. See\n<a href=\"https://support.mozilla.org/en-US/kb/containers\">Multi-Account\nContainers</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"pink\"", "description": "Container color.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "containers", "<name>", "color"], "readOnly": false, "title": "programs.firefox.profiles.<name>.containers.<name>.color", "type": "one of \"blue\", \"turquoise\", \"green\", \"yellow\", \"orange\", \"red\", \"pink\", \"purple\", \"toolbar\"", "descriptionHTML": "<p>Container color.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"fruit\"", "description": "Container icon.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "containers", "<name>", "icon"], "readOnly": false, "title": "programs.firefox.profiles.<name>.containers.<name>.icon", "type": "one of \"briefcase\", \"cart\", \"circle\", \"dollar\", \"fence\", \"fingerprint\", \"gift\", \"vacation\", \"food\", \"fruit\", \"pet\", \"tree\", \"chill\"", "descriptionHTML": "<p>Container icon.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "0", "description": "Container ID. This should be set to a unique number per container in this profile.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "containers", "<name>", "id"], "readOnly": false, "title": "programs.firefox.profiles.<name>.containers.<name>.id", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Container ID. This should be set to a unique number per container in this profile.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\u2039name\u203a\"", "description": "Container name, e.g., shopping.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "containers", "<name>", "name"], "readOnly": false, "title": "programs.firefox.profiles.<name>.containers.<name>.name", "type": "string", "descriptionHTML": "<p>Container name, e.g., shopping.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Whether to force replace the existing containers configuration.\nThis is recommended since Firefox will replace the symlink on\nevery launch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "containersForce"], "readOnly": false, "title": "programs.firefox.profiles.<name>.containersForce", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing containers configuration.\nThis is recommended since Firefox will replace the symlink on\nevery launch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Submodule for installing and configuring extensions.", "example": "{\n  packages = with pkgs.nur.repos.rycee.firefox-addons; [\n    ublock-origin\n  ];\n  settings.\"uBlock0@raymondhill.net\".settings = {\n    selectedFilterLists = [\n      \"ublock-filters\"\n      \"ublock-badware\"\n      \"ublock-privacy\"\n      \"ublock-unbreak\"\n      \"ublock-quick-fixes\"\n    ];\n  };\n}\n", "loc": ["programs", "firefox", "profiles", "<name>", "extensions"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions", "type": "(submodule) or (list of package) convertible to it", "descriptionHTML": "<p>Submodule for installing and configuring extensions.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Whether to override all previous firefox settings.\nThis is required when using settings.", "example": "true", "loc": ["programs", "firefox", "profiles", "<name>", "extensions", "force"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions.force", "type": "boolean", "descriptionHTML": "<p>Whether to override all previous firefox settings.</p>\n<p>This is required when using <code>settings</code>.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "[ ]", "description": "List of \u2039name\u203a add-on packages to install for this profile.\nSome pre-packaged add-ons are accessible from the Nix User Repository.\nOnce you have NUR installed run\nconsole\n$ nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.rycee.firefox-addons\nto list the available \u2039name\u203a add-ons.\nNote that it is necessary to manually enable these extensions\ninside \u2039name\u203a after the first installation.\nTo automatically enable extensions add\n\"extensions.autoDisableScopes\" = 0;\nto\n{option}programs.firefox.profiles.&lt;profile&gt;.settings", "example": "with pkgs.nur.repos.rycee.firefox-addons; [\n  privacy-badger\n]\n", "loc": ["programs", "firefox", "profiles", "<name>", "extensions", "packages"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions.packages", "type": "list of package", "descriptionHTML": "<p>List of \u2039name\u203a add-on packages to install for this profile.\nSome pre-packaged add-ons are accessible from the Nix User Repository.\nOnce you have NUR installed run</p>\n<p><code>console\n$ nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.rycee.firefox-addons</code></p>\n<p>to list the available \u2039name\u203a add-ons.</p>\n<p>Note that it is necessary to manually enable these extensions\ninside \u2039name\u203a after the first installation.</p>\n<p>To automatically enable extensions add\n<code>\"extensions.autoDisableScopes\" = 0;</code>\nto\n<a href=\"#opt-programs.firefox.profiles._name_.settings\">{option}<code>programs.firefox.profiles.&lt;profile&gt;.settings</code></a></p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Attribute set of options for each extension.\nThe keys of the attribute set consist of the ID of the extension\nor its UUID wrapped in curly braces.", "example": "{\n  # Example with uBlock origin's extensionID\n  \"uBlock0@raymondhill.net\".settings = {\n    selectedFilterLists = [\n      \"ublock-filters\"\n      \"ublock-badware\"\n      \"ublock-privacy\"\n      \"ublock-unbreak\"\n      \"ublock-quick-fixes\"\n    ];\n  };\n\n  # Example with Stylus' UUID-form extensionID\n  \"{7a7a4a92-a2a0-41d1-9fd7-1e92480d612d}\".settings = {\n    dbInChromeStorage = true; # required for Stylus\n  }\n}\n", "loc": ["programs", "firefox", "profiles", "<name>", "extensions", "settings"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions.settings", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of options for each extension.\nThe keys of the attribute set consist of the ID of the extension\nor its UUID wrapped in curly braces.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Forcibly override any existing configuration for\nthis extension.", "example": "true", "loc": ["programs", "firefox", "profiles", "<name>", "extensions", "settings", "<name>", "force"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions.settings.<name>.force", "type": "boolean", "descriptionHTML": "<p>Forcibly override any existing configuration for\nthis extension.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"Any permissions\"", "description": "Allowed permissions for this extension. See\nhttps://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions\nfor a list of relevant permissions.", "example": "[\n  \"activeTab\"\n]", "loc": ["programs", "firefox", "profiles", "<name>", "extensions", "settings", "<name>", "permissions"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions.settings.<name>.permissions", "type": "null or (list of string)", "descriptionHTML": "<p>Allowed permissions for this extension. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions\">https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions</a>\nfor a list of relevant permissions.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Json formatted options for this extension.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "extensions", "settings", "<name>", "settings"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extensions.settings.<name>.settings", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>Json formatted options for this extension.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "extraConfig"], "readOnly": false, "title": "programs.firefox.profiles.<name>.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "0", "description": "Profile ID. This should be set to a unique number per profile.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "id"], "readOnly": false, "title": "programs.firefox.profiles.<name>.id", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Profile ID. This should be set to a unique number per profile.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"true if profile ID is 0\"", "description": "Whether this is a default profile.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "isDefault"], "readOnly": false, "title": "programs.firefox.profiles.<name>.isDefault", "type": "boolean", "descriptionHTML": "<p>Whether this is a default profile.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\u2039name\u203a\"", "description": "Profile name.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "name"], "readOnly": false, "title": "programs.firefox.profiles.<name>.name", "type": "string", "descriptionHTML": "<p>Profile name.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\u2039name\u203a\"", "description": "Profile path.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "path"], "readOnly": false, "title": "programs.firefox.profiles.<name>.path", "type": "string", "descriptionHTML": "<p>Profile path.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js, before\n.\nUse , unless\nyou want to overwrite in\n, then use this\noption.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "preConfig"], "readOnly": false, "title": "programs.firefox.profiles.<name>.preConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>, before\n<a href=\"#opt-programs.firefox.profiles._name_.settings\"></a>.</p>\n<p>Use <a href=\"#opt-programs.firefox.profiles._name_.extraConfig\"></a>, unless\nyou want to overwrite in\n<a href=\"#opt-programs.firefox.profiles._name_.settings\"></a>, then use this\noption.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Declarative search engine configuration.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "search"], "readOnly": false, "title": "programs.firefox.profiles.<name>.search", "type": "submodule", "descriptionHTML": "<p>Declarative search engine configuration.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "null", "description": "The default search engine used in the address bar and search\nbar.", "example": "\"ddg\"", "loc": ["programs", "firefox", "profiles", "<name>", "search", "default"], "readOnly": false, "title": "programs.firefox.profiles.<name>.search.default", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the address bar and search\nbar.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Attribute set of search engine configurations. Engines that\nonly have {var}metaData specified will be treated as builtin\nto Firefox.\nSee SearchEngine.jsm\nin Firefox's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.\nNote, {var}icon is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.", "example": "{\n  nix-packages = {\n    name = \"Nix Packages\";\n    urls = [{\n      template = \"https://search.nixos.org/packages\";\n      params = [\n        { name = \"type\"; value = \"packages\"; }\n        { name = \"query\"; value = \"{searchTerms}\"; }\n      ];\n    }];\n\n    icon = \"${pkgs.nixos-icons}/share/icons/hicolor/scalable/apps/nix-snowflake.svg\";\n    definedAliases = [ \"@np\" ];\n  };\n\n  nixos-wiki = {\n    name = \"NixOS Wiki\";\n    urls = [{ template = \"https://wiki.nixos.org/w/index.php?search={searchTerms}\"; }];\n    iconMapObj.\"16\" = \"https://wiki.nixos.org/favicon.ico\";\n    definedAliases = [ \"@nw\" ];\n  };\n\n  bing.metaData.hidden = true;\n  google.metaData.alias = \"@g\"; # builtin engines only support specifying one additional alias\n}\n", "loc": ["programs", "firefox", "profiles", "<name>", "search", "engines"], "readOnly": false, "title": "programs.firefox.profiles.<name>.search.engines", "type": "attribute set of attribute set of (JSON value)", "descriptionHTML": "<p>Attribute set of search engine configurations. Engines that\nonly have {var}<code>metaData</code> specified will be treated as builtin\nto Firefox.</p>\n<p>See <a href=\"https://searchfox.org/mozilla-central/rev/e3f42ec9320748b2aab3d474d1e47075def9000c/toolkit/components/search/SearchEngine.sys.mjs#890-923\">SearchEngine.jsm</a>\nin Firefox's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.</p>\n<p>Note, {var}<code>icon</code> is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "false", "description": "Whether to force replace the existing search\nconfiguration. This is recommended since Firefox will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "firefox", "profiles", "<name>", "search", "force"], "readOnly": false, "title": "programs.firefox.profiles.<name>.search.force", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing search\nconfiguration. This is recommended since Firefox will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "[ ]", "description": "The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.", "example": "[\n  \"ddg\"\n  \"google\"\n]", "loc": ["programs", "firefox", "profiles", "<name>", "search", "order"], "readOnly": false, "title": "programs.firefox.profiles.<name>.search.order", "type": "list of string", "descriptionHTML": "<p>The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "null", "description": "The default search engine used in the Private Browsing.", "example": "\"ddg\"", "loc": ["programs", "firefox", "profiles", "<name>", "search", "privateDefault"], "readOnly": false, "title": "programs.firefox.profiles.<name>.search.privateDefault", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the Private Browsing.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "{ }", "description": "Attribute set of Firefox preferences.\nFirefox only supports int, bool, and string types for\npreferences, but home-manager will automatically\nconvert all other JSON-compatible values into strings.", "example": "{\n  \"browser.startup.homepage\" = \"https://nixos.org\";\n  \"browser.search.region\" = \"GB\";\n  \"browser.search.isUS\" = false;\n  \"distribution.searchplugins.defaultLocale\" = \"en-GB\";\n  \"general.useragent.locale\" = \"en-GB\";\n  \"browser.bookmarks.showMobileBookmarks\" = true;\n  \"browser.newtabpage.pinned\" = [{\n    title = \"NixOS\";\n    url = \"https://nixos.org\";\n  }];\n}\n", "loc": ["programs", "firefox", "profiles", "<name>", "settings"], "readOnly": false, "title": "programs.firefox.profiles.<name>.settings", "type": "attribute set of (Firefox preference (int, bool, string, and also attrs, list, float as a JSON string))", "descriptionHTML": "<p>Attribute set of Firefox preferences.</p>\n<p>Firefox only supports int, bool, and string types for\npreferences, but home-manager will automatically\nconvert all other JSON-compatible values into strings.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\"", "description": "Custom Firefox user chrome CSS.", "example": "''\n  /* Hide tab bar in FF Quantum */\n  @-moz-document url(chrome://browser/content/browser.xul), url(chrome://browser/content/browser.xhtml) {\n    #TabsToolbar {\n      visibility: collapse !important;\n      margin-bottom: 21px !important;\n    }\n  \n    #sidebar-box[sidebarcommand=\"treestyletab_piro_sakura_ne_jp-sidebar-action\"] #sidebar-header {\n      visibility: collapse !important;\n    }\n  }\n''", "loc": ["programs", "firefox", "profiles", "<name>", "userChrome"], "readOnly": false, "title": "programs.firefox.profiles.<name>.userChrome", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Custom Firefox user chrome CSS.</p>"}, {"declarations": [{"name": "<programs/firefox/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefox/default.nix"}], "default": "\"\"", "description": "Custom Firefox user content CSS.", "example": "''\n  /* Hide scrollbar in FF Quantum */\n  *{scrollbar-width:none !important}\n''", "loc": ["programs", "firefox", "profiles", "<name>", "userContent"], "readOnly": false, "title": "programs.firefox.profiles.<name>.userContent", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Custom Firefox user content CSS.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "false", "description": "Whether to enable Progressive Web Apps for Firefox.", "example": "true", "loc": ["programs", "firefoxpwa", "enable"], "readOnly": false, "title": "programs.firefoxpwa.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Progressive Web Apps for Firefox.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "pkgs.firefoxpwa", "description": "The firefoxpwa package to use.", "example": "", "loc": ["programs", "firefoxpwa", "package"], "readOnly": false, "title": "programs.firefoxpwa.package", "type": "null or package", "descriptionHTML": "<p>The firefoxpwa package to use.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "{ }", "description": "Attribute set of profile options. The keys of that attribute set consist of\nULIDs. A ULID is made of 16 characters, each of which is one of\n'0123456789ABCDEFGHJKMNPQRSTVWXYZ' (Excluding I, L, O and U). See\nhttps://github.com/ulid/spec?tab=readme-ov-file#canonical-string-representation.", "example": "{\n  \"0123456789ABCDEFGHJKMNPQRSTVWXYZ\".sites.\"ZYXWVTSRQPNMKJHGFEDCBA9876543210\" = {\n    name = \"MDN Web Docs\";\n    url = \"https://developer.mozilla.org/\";\n    manifestUrl = \"https://developer.mozilla.org/manifest.f42880861b394dd4dc9b.json\";\n    desktopEntry.icon = pkgs.fetchurl {\n      url = \"https://developer.mozilla.org/favicon-192x192.png\";\n      sha256 = \"0p8zgf2ba48l2pq1gjcffwzmd9kfmj9qc0v7zpwf2qd54fndifxr\";\n    };\n  };\n}\n", "loc": ["programs", "firefoxpwa", "profiles"], "readOnly": false, "title": "programs.firefoxpwa.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of profile options. The keys of that attribute set consist of\nULIDs. A ULID is made of 16 characters, each of which is one of\n'0123456789ABCDEFGHJKMNPQRSTVWXYZ' (Excluding I, L, O and U). See\n<a href=\"https://github.com/ulid/spec?tab=readme-ov-file#canonical-string-representation\">https://github.com/ulid/spec?tab=readme-ov-file#canonical-string-representation</a>.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "\"\u2039name\u203a\"", "description": "Name of the profile.", "example": "", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "name"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.name", "type": "string", "descriptionHTML": "<p>Name of the profile.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "{ }", "description": "Settings for this profile. See\nhttps://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/components/profile.rs#L13-L34\nfor a list of available options.", "example": "", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "settings"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.settings", "type": "JSON value", "descriptionHTML": "<p>Settings for this profile. See\n<a href=\"https://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/components/profile.rs#L13-L34\">https://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/components/profile.rs#L13-L34</a>\nfor a list of available options.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "{ }", "description": "Attribute set of site options for this profile. The keys of that attribute set\nconsist of ULIDs. A ULID is made of 16 characters, each of which is one of\n'0123456789ABCDEFGHJKMNPQRSTVWXYZ' (Excluding I, L, O and U). See\nhttps://github.com/ulid/spec?tab=readme-ov-file#canonical-string-representation.\nSite ULIDs must be unique across profiles.", "example": "", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of site options for this profile. The keys of that attribute set\nconsist of ULIDs. A ULID is made of 16 characters, each of which is one of\n'0123456789ABCDEFGHJKMNPQRSTVWXYZ' (Excluding I, L, O and U). See\n<a href=\"https://github.com/ulid/spec?tab=readme-ov-file#canonical-string-representation\">https://github.com/ulid/spec?tab=readme-ov-file#canonical-string-representation</a>.\nSite ULIDs must be unique across profiles.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "null", "description": "Categories in which the entry should be shown in a menu.", "example": "", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "desktopEntry", "categories"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.desktopEntry.categories", "type": "null or (list of string)", "descriptionHTML": "<p>Categories in which the entry should be shown in a menu.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "\"true if host platform is Linux\"", "description": "Whether to enable the desktop entry for this site.", "example": "", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "desktopEntry", "enable"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.desktopEntry.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the desktop entry for this site.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "null", "description": "Icon to display in file manager, menus, etc.", "example": "pkgs.fetchurl {\n  url = \"https://developer.mozilla.org/favicon-192x192.png\";\n  sha256 = \"0p8zgf2ba48l2pq1gjcffwzmd9kfmj9qc0v7zpwf2qd54fndifxr\";\n}\n", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "desktopEntry", "icon"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.desktopEntry.icon", "type": "null or string or absolute path", "descriptionHTML": "<p>Icon to display in file manager, menus, etc.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "", "description": "URL of the site's web app manifest.", "example": "\"https://developer.mozilla.org/manifest.f42880861b394dd4dc9b.json\"", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "manifestUrl"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.manifestUrl", "type": "string", "descriptionHTML": "<p>URL of the site's web app manifest.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "\"\u2039name\u203a\"", "description": "Name of the site.", "example": "\"MDN Web Docs\"", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "name"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.name", "type": "string", "descriptionHTML": "<p>Name of the site.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "{ }", "description": "Settings for this site. See\nhttps://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/components/site.rs#L98-L115\nfor a list of available options.", "example": "{\n  config = {\n    manifest_url = \"https://developer.mozilla.org/manifest.f42880861b394dd4dc9b.json\";\n  };\n}", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "settings"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.settings", "type": "JSON value", "descriptionHTML": "<p>Settings for this site. See\n<a href=\"https://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/components/site.rs#L98-L115\">https://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/components/site.rs#L98-L115</a>\nfor a list of available options.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "", "description": "Start URL of the site.", "example": "\"https://developer.mozilla.org/\"", "loc": ["programs", "firefoxpwa", "profiles", "<name>", "sites", "<name>", "url"], "readOnly": false, "title": "programs.firefoxpwa.profiles.<name>.sites.<name>.url", "type": "string", "descriptionHTML": "<p>Start URL of the site.</p>"}, {"declarations": [{"name": "<programs/firefoxpwa.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/firefoxpwa.nix"}], "default": "{ }", "description": "Settings to be written to the configuration file. See\nhttps://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/storage.rs#L61-L77\nfor a list of available options.", "example": "", "loc": ["programs", "firefoxpwa", "settings"], "readOnly": false, "title": "programs.firefoxpwa.settings", "type": "JSON value", "descriptionHTML": "<p>Settings to be written to the configuration file. See\n<a href=\"https://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/storage.rs#L61-L77\">https://github.com/filips123/PWAsForFirefox/blob/cb4fc76873cc51129d9290754768e6a340c521b2/native/src/storage.rs#L61-L77</a>\nfor a list of available options.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "{ }", "description": "Manage key bindings", "example": "{\n  \"alt-shift-b\".command = \"fish_commandline_append bat\";\n  \"alt-s\".erase = true;\n  \"alt-s\".operate = \"preset\";\n}\n", "loc": ["programs", "fish", "binds"], "readOnly": false, "title": "programs.fish.binds", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Manage key bindings</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "null", "description": "command that will be execute", "example": "", "loc": ["programs", "fish", "binds", "<name>", "command"], "readOnly": false, "title": "programs.fish.binds.<name>.command", "type": "string or list of string (optional when erase is set to true)", "descriptionHTML": "<p>command that will be execute</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "true", "description": "Whether to enable enable the bind. Set false if you want to ignore the bind.", "example": "true", "loc": ["programs", "fish", "binds", "<name>", "enable"], "readOnly": false, "title": "programs.fish.binds.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable enable the bind. Set false if you want to ignore the bind.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "false", "description": "Whether to enable remove bind.", "example": "true", "loc": ["programs", "fish", "binds", "<name>", "erase"], "readOnly": false, "title": "programs.fish.binds.<name>.erase", "type": "boolean", "descriptionHTML": "<p>Whether to enable remove bind.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "null", "description": "Specify the bind mode that the bind is used in", "example": "", "loc": ["programs", "fish", "binds", "<name>", "mode"], "readOnly": false, "title": "programs.fish.binds.<name>.mode", "type": "null or one of \"default\", \"insert\", \"paste\"", "descriptionHTML": "<p>Specify the bind mode that the bind is used in</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "null", "description": "Operate on preset bindings or user bindings", "example": "", "loc": ["programs", "fish", "binds", "<name>", "operate"], "readOnly": false, "title": "programs.fish.binds.<name>.operate", "type": "null or one of \"preset\", \"user\"", "descriptionHTML": "<p>Operate on preset bindings or user bindings</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "null", "description": "Change current mode after bind is executed", "example": "", "loc": ["programs", "fish", "binds", "<name>", "setsMode"], "readOnly": false, "title": "programs.fish.binds.<name>.setsMode", "type": "null or one of \"default\", \"insert\", \"paste\"", "descriptionHTML": "<p>Change current mode after bind is executed</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "false", "description": "Whether to enable Operate silently.", "example": "true", "loc": ["programs", "fish", "binds", "<name>", "silent"], "readOnly": false, "title": "programs.fish.binds.<name>.silent", "type": "boolean", "descriptionHTML": "<p>Whether to enable Operate silently.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "false", "description": "Whether to enable fish, the friendly interactive shell.", "example": "true", "loc": ["programs", "fish", "enable"], "readOnly": false, "title": "programs.fish.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fish, the friendly interactive shell.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "{ }", "description": "Basic functions to add to fish. For more information see\nhttps://fishshell.com/docs/current/cmds/function.html.", "example": "{\n  __fish_command_not_found_handler = {\n    body = \"__fish_default_command_not_found_handler $argv[1]\";\n    onEvent = \"fish_command_not_found\";\n  };\n\n  gitignore = \"curl -sL https://www.gitignore.io/api/$argv\";\n}\n", "loc": ["programs", "fish", "functions"], "readOnly": false, "title": "programs.fish.functions", "type": "attribute set of (strings concatenated with \"\\n\" or (submodule))", "descriptionHTML": "<p>Basic functions to add to fish. For more information see\n<a href=\"https://fishshell.com/docs/current/cmds/function.html\">https://fishshell.com/docs/current/cmds/function.html</a>.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "true", "description": "Whether to enable the automatic generation of completions based upon installed man pages.", "example": "true", "loc": ["programs", "fish", "generateCompletions"], "readOnly": false, "title": "programs.fish.generateCompletions", "type": "boolean", "descriptionHTML": "<p>Whether to enable the automatic generation of completions based upon installed man pages.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "\"\"", "description": "Shell script code called during interactive fish shell\ninitialisation.", "example": "", "loc": ["programs", "fish", "interactiveShellInit"], "readOnly": false, "title": "programs.fish.interactiveShellInit", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell script code called during interactive fish shell\ninitialisation.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "\"\"", "description": "Shell script code called during fish login shell\ninitialisation.", "example": "", "loc": ["programs", "fish", "loginShellInit"], "readOnly": false, "title": "programs.fish.loginShellInit", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell script code called during fish login shell\ninitialisation.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "pkgs.fish", "description": "The fish package to use.", "example": "", "loc": ["programs", "fish", "package"], "readOnly": false, "title": "programs.fish.package", "type": "package", "descriptionHTML": "<p>The fish package to use.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "[ ]", "description": "The plugins to source in\n{file}conf.d/99plugins.fish.", "example": "[\n  {\n    name = \"z\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"jethrokuan\";\n      repo = \"z\";\n      rev = \"ddeb28a7b6a1f0ec6dae40c636e5ca4908ad160a\";\n      sha256 = \"0c5i7sdrsp0q3vbziqzdyqn4fmp235ax4mn4zslrswvn8g3fvdyh\";\n    };\n  }\n\n  # oh-my-fish plugins are stored in their own repositories, which\n  # makes them simple to import into home-manager.\n  {\n    name = \"fasd\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"oh-my-fish\";\n      repo = \"plugin-fasd\";\n      rev = \"38a5b6b6011106092009549e52249c6d6f501fba\";\n      sha256 = \"06v37hqy5yrv5a6ssd1p3cjd9y3hnp19d3ab7dag56fs1qmgyhbs\";\n    };\n  }\n]\n", "loc": ["programs", "fish", "plugins"], "readOnly": false, "title": "programs.fish.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>The plugins to source in\n{file}<code>conf.d/99plugins.fish</code>.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "", "description": "The name of the plugin.", "example": "", "loc": ["programs", "fish", "plugins", "*", "name"], "readOnly": false, "title": "programs.fish.plugins.*.name", "type": "string", "descriptionHTML": "<p>The name of the plugin.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "", "description": "Path to the plugin folder.\nRelevant pieces will be added to the fish function path and\nthe completion path. The {file}init.fish and\n{file}key_binding.fish files are sourced if\nthey exist.", "example": "", "loc": ["programs", "fish", "plugins", "*", "src"], "readOnly": false, "title": "programs.fish.plugins.*.src", "type": "absolute path", "descriptionHTML": "<p>Path to the plugin folder.</p>\n<p>Relevant pieces will be added to the fish function path and\nthe completion path. The {file}<code>init.fish</code> and\n{file}<code>key_binding.fish</code> files are sourced if\nthey exist.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "false", "description": "If enabled, abbreviations will be preferred over aliases when\nother modules define aliases for fish.", "example": "true", "loc": ["programs", "fish", "preferAbbrs"], "readOnly": false, "title": "programs.fish.preferAbbrs", "type": "boolean", "descriptionHTML": "<p>If enabled, abbreviations will be preferred over aliases when\nother modules define aliases for fish.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names\nin this option) to abbreviations. Abbreviations are expanded with\nthe longer phrase after they are entered.", "example": "{\n  l = \"less\";\n  gco = \"git checkout\";\n  \"-C\" = {\n    position = \"anywhere\";\n    expansion = \"--color\";\n  };\n}\n", "loc": ["programs", "fish", "shellAbbrs"], "readOnly": false, "title": "programs.fish.shellAbbrs", "type": "attribute set of (string or (submodule))", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names\nin this option) to abbreviations. Abbreviations are expanded with\nthe longer phrase after they are entered.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names\nin this option) to command strings or directly to build outputs.", "example": "{\n  g = \"git\";\n  \"...\" = \"cd ../..\";\n}\n", "loc": ["programs", "fish", "shellAliases"], "readOnly": false, "title": "programs.fish.shellAliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names\nin this option) to command strings or directly to build outputs.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "\"\"", "description": "Shell script code called during fish shell\ninitialisation.", "example": "", "loc": ["programs", "fish", "shellInit"], "readOnly": false, "title": "programs.fish.shellInit", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell script code called during fish shell\ninitialisation.</p>"}, {"declarations": [{"name": "<programs/fish.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fish.nix"}], "default": "\"\"", "description": "Shell script code called during interactive fish shell\ninitialisation, this will be the last thing executed in fish startup.", "example": "", "loc": ["programs", "fish", "shellInitLast"], "readOnly": false, "title": "programs.fish.shellInitLast", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell script code called during interactive fish shell\ninitialisation, this will be the last thing executed in fish startup.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Whether to enable Floorp.", "example": "true", "loc": ["programs", "floorp", "enable"], "readOnly": false, "title": "programs.floorp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Floorp.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Whether to enable the GNOME Shell native host connector. Note, you\nalso need to set the NixOS option\nservices.gnome.gnome-browser-connector.enable to\ntrue.", "example": "", "loc": ["programs", "floorp", "enableGnomeExtensions"], "readOnly": false, "title": "programs.floorp.enableGnomeExtensions", "type": "boolean", "descriptionHTML": "<p>Whether to enable the GNOME Shell native host connector. Note, you\nalso need to set the NixOS option\n<code>services.gnome.gnome-browser-connector.enable</code> to\n<code>true</code>.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "", "description": "Resulting Floorp package.", "example": "", "loc": ["programs", "floorp", "finalPackage"], "readOnly": true, "title": "programs.floorp.finalPackage", "type": "null or package", "descriptionHTML": "<p>Resulting Floorp package.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "[ ]", "description": "The language packs to install. Available language codes can be found\non the releases page:\nhttps://releases.mozilla.org/pub/firefox/releases/${version}/linux-x86_64/xpi/,\nreplacing ${version} with the version of Floorp you have. If\nthe version string of your Firefox derivative diverts from the upstream\nversion, try setting the release option.", "example": "[\n  \"en-GB\"\n  \"de\"\n]", "loc": ["programs", "floorp", "languagePacks"], "readOnly": false, "title": "programs.floorp.languagePacks", "type": "list of string", "descriptionHTML": "<p>The language packs to install. Available language codes can be found\non the releases page:\n<code>https://releases.mozilla.org/pub/firefox/releases/${version}/linux-x86_64/xpi/</code>,\nreplacing <code>${version}</code> with the version of Floorp you have. If\nthe version string of your Firefox derivative diverts from the upstream\nversion, try setting the <code>release</code> option.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "[ ]", "description": "Additional packages containing native messaging hosts that should be\nmade available to Floorp extensions.", "example": "", "loc": ["programs", "floorp", "nativeMessagingHosts"], "readOnly": false, "title": "programs.floorp.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>Additional packages containing native messaging hosts that should be\nmade available to Floorp extensions.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "pkgs.floorp", "description": "The Floorp package to use. If state version \u2265 19.09 then\nthis should be a wrapped Floorp package. For earlier state\nversions it should be an unwrapped Floorp package.\nSet to null to disable installing Floorp.", "example": "pkgs.floorp.override {\n  # See nixpkgs' firefox/wrapper.nix to check which options you can use\n  nativeMessagingHosts = [\n    # Gnome shell native connector\n    pkgs.gnome-browser-connector\n    # Tridactyl native connector\n    pkgs.tridactyl-native\n  ];\n}\n", "loc": ["programs", "floorp", "package"], "readOnly": false, "title": "programs.floorp.package", "type": "null or package", "descriptionHTML": "<p>The Floorp package to use. If state version \u2265 19.09 then\nthis should be a wrapped Floorp package. For earlier state\nversions it should be an unwrapped Floorp package.\nSet to <code>null</code> to disable installing Floorp.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "[ ]", "description": "Additional packages to be loaded as PKCS #11 modules in Firefox.", "example": "", "loc": ["programs", "floorp", "pkcs11Modules"], "readOnly": false, "title": "programs.floorp.pkcs11Modules", "type": "list of package", "descriptionHTML": "<p>Additional packages to be loaded as PKCS #11 modules in Firefox.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "See list of policies.", "example": "{\n  BlockAboutConfig = true;\n  DefaultDownloadDirectory = \"\\${home}/Downloads\";\n  ExtensionSettings = {\n    \"uBlock0@raymondhill.net\" = {\n      default_area = \"menupanel\";\n      install_url = \"https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi\";\n      installation_mode = \"force_installed\";\n      private_browsing = true;\n    };\n  };\n}", "loc": ["programs", "floorp", "policies"], "readOnly": false, "title": "programs.floorp.policies", "type": "attribute set of (JSON value)", "descriptionHTML": "<p><a href=\"https://mozilla.github.io/policy-templates/\">See list of policies</a>.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Attribute set of Floorp profiles.", "example": "", "loc": ["programs", "floorp", "profiles"], "readOnly": false, "title": "programs.floorp.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of Floorp profiles.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Declarative bookmarks.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "bookmarks"], "readOnly": false, "title": "programs.floorp.profiles.<name>.bookmarks", "type": "(submodule) or ((list of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) or (attribute set of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) convertible to it) convertible to it", "descriptionHTML": "<p>Declarative bookmarks.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "null", "description": "Configuration file to define custom bookmarks.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "bookmarks", "configFile"], "readOnly": false, "title": "programs.floorp.profiles.<name>.bookmarks.configFile", "type": "null or absolute path", "descriptionHTML": "<p>Configuration file to define custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Whether to force override existing custom bookmarks.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "bookmarks", "force"], "readOnly": false, "title": "programs.floorp.profiles.<name>.bookmarks.force", "type": "boolean", "descriptionHTML": "<p>Whether to force override existing custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "[ ]", "description": "Custom bookmarks.", "example": "[\n  {\n    name = \"wikipedia\";\n    tags = [ \"wiki\" ];\n    keyword = \"wiki\";\n    url = \"https://en.wikipedia.org/wiki/Special:Search?search=%s&go=Go\";\n  }\n  {\n    name = \"kernel.org\";\n    url = \"https://www.kernel.org\";\n  }\n  \"separator\"\n  {\n    name = \"Nix sites\";\n    toolbar = true;\n    bookmarks = [\n      {\n        name = \"homepage\";\n        url = \"https://nixos.org/\";\n      }\n      {\n        name = \"wiki\";\n        tags = [ \"wiki\" \"nix\" ];\n        url = \"https://wiki.nixos.org/\";\n      }\n    ];\n  }\n]\n", "loc": ["programs", "floorp", "profiles", "<name>", "bookmarks", "settings"], "readOnly": false, "title": "programs.floorp.profiles.<name>.bookmarks.settings", "type": "(list of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) or (attribute set of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) convertible to it", "descriptionHTML": "<p>Custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Attribute set of container configurations. See\nMulti-Account\nContainers\nfor more information.", "example": "{\n  dangerous = {\n    color = \"red\";\n    icon = \"fruit\";\n    id = 2;\n  };\n  shopping = {\n    color = \"blue\";\n    icon = \"cart\";\n    id = 1;\n  };\n}", "loc": ["programs", "floorp", "profiles", "<name>", "containers"], "readOnly": false, "title": "programs.floorp.profiles.<name>.containers", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of container configurations. See\n<a href=\"https://support.mozilla.org/en-US/kb/containers\">Multi-Account\nContainers</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"pink\"", "description": "Container color.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "containers", "<name>", "color"], "readOnly": false, "title": "programs.floorp.profiles.<name>.containers.<name>.color", "type": "one of \"blue\", \"turquoise\", \"green\", \"yellow\", \"orange\", \"red\", \"pink\", \"purple\", \"toolbar\"", "descriptionHTML": "<p>Container color.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"fruit\"", "description": "Container icon.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "containers", "<name>", "icon"], "readOnly": false, "title": "programs.floorp.profiles.<name>.containers.<name>.icon", "type": "one of \"briefcase\", \"cart\", \"circle\", \"dollar\", \"fence\", \"fingerprint\", \"gift\", \"vacation\", \"food\", \"fruit\", \"pet\", \"tree\", \"chill\"", "descriptionHTML": "<p>Container icon.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "0", "description": "Container ID. This should be set to a unique number per container in this profile.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "containers", "<name>", "id"], "readOnly": false, "title": "programs.floorp.profiles.<name>.containers.<name>.id", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Container ID. This should be set to a unique number per container in this profile.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\u2039name\u203a\"", "description": "Container name, e.g., shopping.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "containers", "<name>", "name"], "readOnly": false, "title": "programs.floorp.profiles.<name>.containers.<name>.name", "type": "string", "descriptionHTML": "<p>Container name, e.g., shopping.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Whether to force replace the existing containers configuration.\nThis is recommended since Floorp will replace the symlink on\nevery launch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "containersForce"], "readOnly": false, "title": "programs.floorp.profiles.<name>.containersForce", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing containers configuration.\nThis is recommended since Floorp will replace the symlink on\nevery launch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Submodule for installing and configuring extensions.", "example": "{\n  packages = with pkgs.nur.repos.rycee.firefox-addons; [\n    ublock-origin\n  ];\n  settings.\"uBlock0@raymondhill.net\".settings = {\n    selectedFilterLists = [\n      \"ublock-filters\"\n      \"ublock-badware\"\n      \"ublock-privacy\"\n      \"ublock-unbreak\"\n      \"ublock-quick-fixes\"\n    ];\n  };\n}\n", "loc": ["programs", "floorp", "profiles", "<name>", "extensions"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions", "type": "(submodule) or (list of package) convertible to it", "descriptionHTML": "<p>Submodule for installing and configuring extensions.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Whether to override all previous firefox settings.\nThis is required when using settings.", "example": "true", "loc": ["programs", "floorp", "profiles", "<name>", "extensions", "force"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions.force", "type": "boolean", "descriptionHTML": "<p>Whether to override all previous firefox settings.</p>\n<p>This is required when using <code>settings</code>.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "[ ]", "description": "List of \u2039name\u203a add-on packages to install for this profile.\nSome pre-packaged add-ons are accessible from the Nix User Repository.\nOnce you have NUR installed run\nconsole\n$ nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.rycee.firefox-addons\nto list the available \u2039name\u203a add-ons.\nNote that it is necessary to manually enable these extensions\ninside \u2039name\u203a after the first installation.\nTo automatically enable extensions add\n\"extensions.autoDisableScopes\" = 0;\nto\n{option}programs.floorp.profiles.&lt;profile&gt;.settings", "example": "with pkgs.nur.repos.rycee.firefox-addons; [\n  privacy-badger\n]\n", "loc": ["programs", "floorp", "profiles", "<name>", "extensions", "packages"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions.packages", "type": "list of package", "descriptionHTML": "<p>List of \u2039name\u203a add-on packages to install for this profile.\nSome pre-packaged add-ons are accessible from the Nix User Repository.\nOnce you have NUR installed run</p>\n<p><code>console\n$ nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.rycee.firefox-addons</code></p>\n<p>to list the available \u2039name\u203a add-ons.</p>\n<p>Note that it is necessary to manually enable these extensions\ninside \u2039name\u203a after the first installation.</p>\n<p>To automatically enable extensions add\n<code>\"extensions.autoDisableScopes\" = 0;</code>\nto\n<a href=\"#opt-programs.floorp.profiles._name_.settings\">{option}<code>programs.floorp.profiles.&lt;profile&gt;.settings</code></a></p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Attribute set of options for each extension.\nThe keys of the attribute set consist of the ID of the extension\nor its UUID wrapped in curly braces.", "example": "{\n  # Example with uBlock origin's extensionID\n  \"uBlock0@raymondhill.net\".settings = {\n    selectedFilterLists = [\n      \"ublock-filters\"\n      \"ublock-badware\"\n      \"ublock-privacy\"\n      \"ublock-unbreak\"\n      \"ublock-quick-fixes\"\n    ];\n  };\n\n  # Example with Stylus' UUID-form extensionID\n  \"{7a7a4a92-a2a0-41d1-9fd7-1e92480d612d}\".settings = {\n    dbInChromeStorage = true; # required for Stylus\n  }\n}\n", "loc": ["programs", "floorp", "profiles", "<name>", "extensions", "settings"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions.settings", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of options for each extension.\nThe keys of the attribute set consist of the ID of the extension\nor its UUID wrapped in curly braces.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Forcibly override any existing configuration for\nthis extension.", "example": "true", "loc": ["programs", "floorp", "profiles", "<name>", "extensions", "settings", "<name>", "force"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions.settings.<name>.force", "type": "boolean", "descriptionHTML": "<p>Forcibly override any existing configuration for\nthis extension.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"Any permissions\"", "description": "Allowed permissions for this extension. See\nhttps://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions\nfor a list of relevant permissions.", "example": "[\n  \"activeTab\"\n]", "loc": ["programs", "floorp", "profiles", "<name>", "extensions", "settings", "<name>", "permissions"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions.settings.<name>.permissions", "type": "null or (list of string)", "descriptionHTML": "<p>Allowed permissions for this extension. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions\">https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions</a>\nfor a list of relevant permissions.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Json formatted options for this extension.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "extensions", "settings", "<name>", "settings"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extensions.settings.<name>.settings", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>Json formatted options for this extension.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "extraConfig"], "readOnly": false, "title": "programs.floorp.profiles.<name>.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "0", "description": "Profile ID. This should be set to a unique number per profile.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "id"], "readOnly": false, "title": "programs.floorp.profiles.<name>.id", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Profile ID. This should be set to a unique number per profile.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"true if profile ID is 0\"", "description": "Whether this is a default profile.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "isDefault"], "readOnly": false, "title": "programs.floorp.profiles.<name>.isDefault", "type": "boolean", "descriptionHTML": "<p>Whether this is a default profile.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\u2039name\u203a\"", "description": "Profile name.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "name"], "readOnly": false, "title": "programs.floorp.profiles.<name>.name", "type": "string", "descriptionHTML": "<p>Profile name.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\u2039name\u203a\"", "description": "Profile path.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "path"], "readOnly": false, "title": "programs.floorp.profiles.<name>.path", "type": "string", "descriptionHTML": "<p>Profile path.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js, before\n.\nUse , unless\nyou want to overwrite in\n, then use this\noption.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "preConfig"], "readOnly": false, "title": "programs.floorp.profiles.<name>.preConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>, before\n<a href=\"#opt-programs.firefox.profiles._name_.settings\"></a>.</p>\n<p>Use <a href=\"#opt-programs.firefox.profiles._name_.extraConfig\"></a>, unless\nyou want to overwrite in\n<a href=\"#opt-programs.firefox.profiles._name_.settings\"></a>, then use this\noption.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Declarative search engine configuration.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "search"], "readOnly": false, "title": "programs.floorp.profiles.<name>.search", "type": "submodule", "descriptionHTML": "<p>Declarative search engine configuration.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "null", "description": "The default search engine used in the address bar and search\nbar.", "example": "\"ddg\"", "loc": ["programs", "floorp", "profiles", "<name>", "search", "default"], "readOnly": false, "title": "programs.floorp.profiles.<name>.search.default", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the address bar and search\nbar.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Attribute set of search engine configurations. Engines that\nonly have {var}metaData specified will be treated as builtin\nto Floorp.\nSee SearchEngine.jsm\nin Floorp's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.\nNote, {var}icon is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.", "example": "{\n  nix-packages = {\n    name = \"Nix Packages\";\n    urls = [{\n      template = \"https://search.nixos.org/packages\";\n      params = [\n        { name = \"type\"; value = \"packages\"; }\n        { name = \"query\"; value = \"{searchTerms}\"; }\n      ];\n    }];\n\n    icon = \"${pkgs.nixos-icons}/share/icons/hicolor/scalable/apps/nix-snowflake.svg\";\n    definedAliases = [ \"@np\" ];\n  };\n\n  nixos-wiki = {\n    name = \"NixOS Wiki\";\n    urls = [{ template = \"https://wiki.nixos.org/w/index.php?search={searchTerms}\"; }];\n    iconMapObj.\"16\" = \"https://wiki.nixos.org/favicon.ico\";\n    definedAliases = [ \"@nw\" ];\n  };\n\n  bing.metaData.hidden = true;\n  google.metaData.alias = \"@g\"; # builtin engines only support specifying one additional alias\n}\n", "loc": ["programs", "floorp", "profiles", "<name>", "search", "engines"], "readOnly": false, "title": "programs.floorp.profiles.<name>.search.engines", "type": "attribute set of attribute set of (JSON value)", "descriptionHTML": "<p>Attribute set of search engine configurations. Engines that\nonly have {var}<code>metaData</code> specified will be treated as builtin\nto Floorp.</p>\n<p>See <a href=\"https://searchfox.org/mozilla-central/rev/e3f42ec9320748b2aab3d474d1e47075def9000c/toolkit/components/search/SearchEngine.sys.mjs#890-923\">SearchEngine.jsm</a>\nin Floorp's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.</p>\n<p>Note, {var}<code>icon</code> is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "false", "description": "Whether to force replace the existing search\nconfiguration. This is recommended since Floorp will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "floorp", "profiles", "<name>", "search", "force"], "readOnly": false, "title": "programs.floorp.profiles.<name>.search.force", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing search\nconfiguration. This is recommended since Floorp will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "[ ]", "description": "The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.", "example": "[\n  \"ddg\"\n  \"google\"\n]", "loc": ["programs", "floorp", "profiles", "<name>", "search", "order"], "readOnly": false, "title": "programs.floorp.profiles.<name>.search.order", "type": "list of string", "descriptionHTML": "<p>The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "null", "description": "The default search engine used in the Private Browsing.", "example": "\"ddg\"", "loc": ["programs", "floorp", "profiles", "<name>", "search", "privateDefault"], "readOnly": false, "title": "programs.floorp.profiles.<name>.search.privateDefault", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the Private Browsing.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "{ }", "description": "Attribute set of Floorp preferences.\nFloorp only supports int, bool, and string types for\npreferences, but home-manager will automatically\nconvert all other JSON-compatible values into strings.", "example": "{\n  \"browser.startup.homepage\" = \"https://nixos.org\";\n  \"browser.search.region\" = \"GB\";\n  \"browser.search.isUS\" = false;\n  \"distribution.searchplugins.defaultLocale\" = \"en-GB\";\n  \"general.useragent.locale\" = \"en-GB\";\n  \"browser.bookmarks.showMobileBookmarks\" = true;\n  \"browser.newtabpage.pinned\" = [{\n    title = \"NixOS\";\n    url = \"https://nixos.org\";\n  }];\n}\n", "loc": ["programs", "floorp", "profiles", "<name>", "settings"], "readOnly": false, "title": "programs.floorp.profiles.<name>.settings", "type": "attribute set of (Floorp preference (int, bool, string, and also attrs, list, float as a JSON string))", "descriptionHTML": "<p>Attribute set of Floorp preferences.</p>\n<p>Floorp only supports int, bool, and string types for\npreferences, but home-manager will automatically\nconvert all other JSON-compatible values into strings.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\"", "description": "Custom Floorp user chrome CSS.", "example": "''\n  /* Hide tab bar in FF Quantum */\n  @-moz-document url(chrome://browser/content/browser.xul), url(chrome://browser/content/browser.xhtml) {\n    #TabsToolbar {\n      visibility: collapse !important;\n      margin-bottom: 21px !important;\n    }\n  \n    #sidebar-box[sidebarcommand=\"treestyletab_piro_sakura_ne_jp-sidebar-action\"] #sidebar-header {\n      visibility: collapse !important;\n    }\n  }\n''", "loc": ["programs", "floorp", "profiles", "<name>", "userChrome"], "readOnly": false, "title": "programs.floorp.profiles.<name>.userChrome", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Custom Floorp user chrome CSS.</p>"}, {"declarations": [{"name": "<programs/floorp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/floorp.nix"}], "default": "\"\"", "description": "Custom Floorp user content CSS.", "example": "''\n  /* Hide scrollbar in FF Quantum */\n  *{scrollbar-width:none !important}\n''", "loc": ["programs", "floorp", "profiles", "<name>", "userContent"], "readOnly": false, "title": "programs.floorp.profiles.<name>.userContent", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Custom Floorp user content CSS.</p>"}, {"declarations": [{"name": "<programs/foliate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foliate.nix"}], "default": "false", "description": "Whether to enable Foliate.", "example": "true", "loc": ["programs", "foliate", "enable"], "readOnly": false, "title": "programs.foliate.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Foliate.</p>"}, {"declarations": [{"name": "<programs/foliate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foliate.nix"}], "default": "pkgs.foliate", "description": "The foliate package to use.", "example": "", "loc": ["programs", "foliate", "package"], "readOnly": false, "title": "programs.foliate.package", "type": "null or package", "descriptionHTML": "<p>The foliate package to use.</p>"}, {"declarations": [{"name": "<programs/foliate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foliate.nix"}], "default": "{ }", "description": "Added to config.dconf.settings under com/github/johnfactotum/Foliate,\nthe scheme is defined at\nhttps://github.com/johnfactotum/foliate/blob/gtk4/data/com.github.johnfactotum.Foliate.gschema.xml", "example": "{\n  myTheme = {\n    color-scheme = 0;\n    library = {\n      view-mode = \"grid\";\n      show-covers = true;\n    };\n    \"viewer/view\" = {\n      theme = \"myTheme.json\";\n    };\n    \"viewer/font\" = {\n      monospace = \"Maple Mono\";\n      default-size = 12;\n    };\n  };\n}\n", "loc": ["programs", "foliate", "settings"], "readOnly": false, "title": "programs.foliate.settings", "type": "attribute set of ((GVariant value) or attribute set of (GVariant value))", "descriptionHTML": "<p>Added to <code>config.dconf.settings</code> under <code>com/github/johnfactotum/Foliate</code>,\nthe scheme is defined at\n<a href=\"https://github.com/johnfactotum/foliate/blob/gtk4/data/com.github.johnfactotum.Foliate.gschema.xml\">https://github.com/johnfactotum/foliate/blob/gtk4/data/com.github.johnfactotum.Foliate.gschema.xml</a></p>"}, {"declarations": [{"name": "<programs/foliate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foliate.nix"}], "default": "{ }", "description": "Each theme is written to\n{file}$XDG_CONFIG_HOME/com.github.johnfactotum.Foliate/themes/NAME.json.\nSee https://github.com/johnfactotum/foliate/blob/gtk4/src/themes.js\nfor implementation of themes in Foliate.", "example": "{\n  label = \"My Theme\";\n  light = {\n    fg = \"#89b4fa\";\n    bg = \"#1e1e2e\";\n    link = \"#89b4fa\";\n  };\n  dark = { };\n}\n", "loc": ["programs", "foliate", "themes"], "readOnly": false, "title": "programs.foliate.themes", "type": "attribute set of (JSON value or string or absolute path)", "descriptionHTML": "<p>Each theme is written to\n{file}<code>$XDG_CONFIG_HOME/com.github.johnfactotum.Foliate/themes/NAME.json</code>.\nSee <a href=\"https://github.com/johnfactotum/foliate/blob/gtk4/src/themes.js\">https://github.com/johnfactotum/foliate/blob/gtk4/src/themes.js</a>\nfor implementation of themes in Foliate.</p>"}, {"declarations": [{"name": "<programs/foot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foot.nix"}], "default": "false", "description": "Whether to enable Foot terminal.", "example": "true", "loc": ["programs", "foot", "enable"], "readOnly": false, "title": "programs.foot.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Foot terminal.</p>"}, {"declarations": [{"name": "<programs/foot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foot.nix"}], "default": "pkgs.foot", "description": "The foot package to use.", "example": "", "loc": ["programs", "foot", "package"], "readOnly": false, "title": "programs.foot.package", "type": "package", "descriptionHTML": "<p>The foot package to use.</p>"}, {"declarations": [{"name": "<programs/foot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foot.nix"}], "default": "false", "description": "Whether to enable Foot terminal server.", "example": "true", "loc": ["programs", "foot", "server", "enable"], "readOnly": false, "title": "programs.foot.server.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Foot terminal server.</p>"}, {"declarations": [{"name": "<programs/foot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/foot.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/foot/foot.ini. See https://codeberg.org/dnkl/foot/src/branch/master/foot.ini\nfor a list of available options.", "example": "{\n  main = {\n    term = \"xterm-256color\";\n\n    font = \"Fira Code:size=11\";\n    dpi-aware = \"yes\";\n  };\n\n  mouse = {\n    hide-when-typing = \"yes\";\n  };\n}\n", "loc": ["programs", "foot", "settings"], "readOnly": false, "title": "programs.foot.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a list of them for duplicate keys)", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/foot/foot.ini</code>. See <a href=\"https://codeberg.org/dnkl/foot/src/branch/master/foot.ini\">https://codeberg.org/dnkl/foot/src/branch/master/foot.ini</a>\nfor a list of available options.</p>"}, {"declarations": [{"name": "<programs/freetube.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/freetube.nix"}], "default": "false", "description": "Whether to enable FreeTube, a YT client for Windows, Mac, and Linux.", "example": "true", "loc": ["programs", "freetube", "enable"], "readOnly": false, "title": "programs.freetube.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable FreeTube, a YT client for Windows, Mac, and Linux.</p>"}, {"declarations": [{"name": "<programs/freetube.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/freetube.nix"}], "default": "pkgs.freetube", "description": "The freetube package to use.", "example": "", "loc": ["programs", "freetube", "package"], "readOnly": false, "title": "programs.freetube.package", "type": "null or package", "descriptionHTML": "<p>The freetube package to use.</p>"}, {"declarations": [{"name": "<programs/freetube.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/freetube.nix"}], "default": "{ }", "description": "Configuration settings for FreeTube.\nAll configurable options can be deduced by enabling them through the\nGUI and observing the changes in {file}settings.db.", "example": "{\n  allowDashAv1Formats = true;\n  checkForUpdates     = false;\n  defaultQuality      = \"1080\";\n  baseTheme           = \"catppuccinMocha\";\n}\n", "loc": ["programs", "freetube", "settings"], "readOnly": false, "title": "programs.freetube.settings", "type": "attribute set", "descriptionHTML": "<p>Configuration settings for FreeTube.</p>\n<p>All configurable options can be deduced by enabling them through the\nGUI and observing the changes in {file}<code>settings.db</code>.</p>"}, {"declarations": [{"name": "<programs/fuzzel.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fuzzel.nix"}], "default": "false", "description": "Whether to enable fuzzel.", "example": "true", "loc": ["programs", "fuzzel", "enable"], "readOnly": false, "title": "programs.fuzzel.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fuzzel.</p>"}, {"declarations": [{"name": "<programs/fuzzel.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fuzzel.nix"}], "default": "pkgs.fuzzel", "description": "The fuzzel package to use.", "example": "", "loc": ["programs", "fuzzel", "package"], "readOnly": false, "title": "programs.fuzzel.package", "type": "null or package", "descriptionHTML": "<p>The fuzzel package to use.</p>"}, {"declarations": [{"name": "<programs/fuzzel.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fuzzel.nix"}], "default": "{ }", "description": "Configuration for fuzzel written to\n{file}$XDG_CONFIG_HOME/fuzzel/fuzzel.ini. See\n{manpage}fuzzel.ini(5) for a list of available options.", "example": "{\n  main = {\n    terminal = \"${pkgs.foot}/bin/foot\";\n    layer = \"overlay\";\n  };\n  colors.background = \"ffffffff\";\n}\n", "loc": ["programs", "fuzzel", "settings"], "readOnly": false, "title": "programs.fuzzel.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration for fuzzel written to\n{file}<code>$XDG_CONFIG_HOME/fuzzel/fuzzel.ini</code>. See\n{manpage}<code>fuzzel.ini(5)</code> for a list of available options.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "null", "description": "The command that gets executed as the source for fzf for the\nALT-C keybinding.", "example": "\"fd --type d\"", "loc": ["programs", "fzf", "changeDirWidgetCommand"], "readOnly": false, "title": "programs.fzf.changeDirWidgetCommand", "type": "null or string", "descriptionHTML": "<p>The command that gets executed as the source for fzf for the\nALT-C keybinding.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[ ]", "description": "Command line options for the ALT-C keybinding.", "example": "[\n  \"--preview 'tree -C {} | head -200'\"\n]", "loc": ["programs", "fzf", "changeDirWidgetOptions"], "readOnly": false, "title": "programs.fzf.changeDirWidgetOptions", "type": "list of string", "descriptionHTML": "<p>Command line options for the ALT-C keybinding.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "{ }", "description": "Color scheme options added to FZF_DEFAULT_OPTS. See\nhttps://github.com/junegunn/fzf/wiki/Color-schemes\nfor documentation.", "example": "{\n  bg = \"#1e1e1e\";\n  \"bg+\" = \"#1e1e1e\";\n  fg = \"#d4d4d4\";\n  \"fg+\" = \"#d4d4d4\";\n}\n", "loc": ["programs", "fzf", "colors"], "readOnly": false, "title": "programs.fzf.colors", "type": "attribute set of string", "descriptionHTML": "<p>Color scheme options added to <code>FZF_DEFAULT_OPTS</code>. See\n<a href=\"https://github.com/junegunn/fzf/wiki/Color-schemes\">https://github.com/junegunn/fzf/wiki/Color-schemes</a>\nfor documentation.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "null", "description": "The command that gets executed as the default source for fzf\nwhen running.", "example": "\"fd --type f\"", "loc": ["programs", "fzf", "defaultCommand"], "readOnly": false, "title": "programs.fzf.defaultCommand", "type": "null or string", "descriptionHTML": "<p>The command that gets executed as the default source for fzf\nwhen running.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[ ]", "description": "Extra command line options given to fzf by default.", "example": "[\n  \"--height 40%\"\n  \"--border\"\n]", "loc": ["programs", "fzf", "defaultOptions"], "readOnly": false, "title": "programs.fzf.defaultOptions", "type": "list of string", "descriptionHTML": "<p>Extra command line options given to fzf by default.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "false", "description": "Whether to enable fzf - a command-line fuzzy finder.", "example": "true", "loc": ["programs", "fzf", "enable"], "readOnly": false, "title": "programs.fzf.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fzf - a command-line fuzzy finder.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "fzf", "enableBashIntegration"], "readOnly": false, "title": "programs.fzf.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "fzf", "enableFishIntegration"], "readOnly": false, "title": "programs.fzf.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "fzf", "enableZshIntegration"], "readOnly": false, "title": "programs.fzf.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "null", "description": "The command that gets executed as the source for fzf for the\nCTRL-T keybinding.", "example": "\"fd --type f\"", "loc": ["programs", "fzf", "fileWidgetCommand"], "readOnly": false, "title": "programs.fzf.fileWidgetCommand", "type": "null or string", "descriptionHTML": "<p>The command that gets executed as the source for fzf for the\nCTRL-T keybinding.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[ ]", "description": "Command line options for the CTRL-T keybinding.", "example": "[\n  \"--preview 'head {}'\"\n]", "loc": ["programs", "fzf", "fileWidgetOptions"], "readOnly": false, "title": "programs.fzf.fileWidgetOptions", "type": "list of string", "descriptionHTML": "<p>Command line options for the CTRL-T keybinding.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[ ]", "description": "Command line options for the CTRL-R keybinding.", "example": "[\n  \"--sort\"\n  \"--exact\"\n]", "loc": ["programs", "fzf", "historyWidgetOptions"], "readOnly": false, "title": "programs.fzf.historyWidgetOptions", "type": "list of string", "descriptionHTML": "<p>Command line options for the CTRL-R keybinding.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "pkgs.fzf", "description": "The fzf package to use.", "example": "", "loc": ["programs", "fzf", "package"], "readOnly": false, "title": "programs.fzf.package", "type": "package", "descriptionHTML": "<p>The fzf package to use.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "false", "description": "Whether to enable setting FZF_TMUX=1 which causes shell integration to use fzf-tmux\n.", "example": "true", "loc": ["programs", "fzf", "tmux", "enableShellIntegration"], "readOnly": false, "title": "programs.fzf.tmux.enableShellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable setting <code>FZF_TMUX=1</code> which causes shell integration to use fzf-tmux\n.</p>"}, {"declarations": [{"name": "<programs/fzf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/fzf.nix"}], "default": "[ ]", "description": "If {option}programs.fzf.tmux.enableShellIntegration is set to true,\nshell integration will use these options for fzf-tmux.\nSee {command}fzf-tmux --help for available options.", "example": "[ \"-d 40%\" ]", "loc": ["programs", "fzf", "tmux", "shellIntegrationOptions"], "readOnly": false, "title": "programs.fzf.tmux.shellIntegrationOptions", "type": "list of string", "descriptionHTML": "<p>If {option}<code>programs.fzf.tmux.enableShellIntegration</code> is set to <code>true</code>,\nshell integration will use these options for fzf-tmux.\nSee {command}<code>fzf-tmux --help</code> for available options.</p>"}, {"declarations": [{"name": "<programs/gallery-dl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gallery-dl.nix"}], "default": "false", "description": "Whether to enable gallery-dl.", "example": "true", "loc": ["programs", "gallery-dl", "enable"], "readOnly": false, "title": "programs.gallery-dl.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable gallery-dl.</p>"}, {"declarations": [{"name": "<programs/gallery-dl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gallery-dl.nix"}], "default": "pkgs.gallery-dl", "description": "The gallery-dl package to use.", "example": "", "loc": ["programs", "gallery-dl", "package"], "readOnly": false, "title": "programs.gallery-dl.package", "type": "null or package", "descriptionHTML": "<p>The gallery-dl package to use.</p>"}, {"declarations": [{"name": "<programs/gallery-dl.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gallery-dl.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/gallery-dl/config.json. See\nhttps://github.com/mikf/gallery-dl#configuration\nfor supported values.", "example": "{\n  extractor.base-directory = \"~/Downloads\";\n}\n", "loc": ["programs", "gallery-dl", "settings"], "readOnly": false, "title": "programs.gallery-dl.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/gallery-dl/config.json</code>. See\n<a href=\"https://github.com/mikf/gallery-dl#configuration\">https://github.com/mikf/gallery-dl#configuration</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/gh-dash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh-dash.nix"}], "default": "false", "description": "Whether to enable GitHub CLI dashboard plugin.", "example": "true", "loc": ["programs", "gh-dash", "enable"], "readOnly": false, "title": "programs.gh-dash.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GitHub CLI dashboard plugin.</p>"}, {"declarations": [{"name": "<programs/gh-dash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh-dash.nix"}], "default": "pkgs.gh-dash", "description": "The gh-dash package to use.", "example": "", "loc": ["programs", "gh-dash", "package"], "readOnly": false, "title": "programs.gh-dash.package", "type": "null or package", "descriptionHTML": "<p>The gh-dash package to use.</p>"}, {"declarations": [{"name": "<programs/gh-dash.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh-dash.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/gh-dash/config.yml.", "example": "{\n  prSections = [{\n    title = \"My Pull Requests\";\n    filters = \"is:open author:@me\";\n  }];\n}\n", "loc": ["programs", "gh-dash", "settings"], "readOnly": false, "title": "programs.gh-dash.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/gh-dash/config.yml</code>.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "false", "description": "Whether to enable GitHub CLI tool.", "example": "true", "loc": ["programs", "gh", "enable"], "readOnly": false, "title": "programs.gh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GitHub CLI tool.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "[ ]", "description": "gh extensions, see https://cli.github.com/manual/gh_extension.", "example": "[ pkgs.gh-eco ]", "loc": ["programs", "gh", "extensions"], "readOnly": false, "title": "programs.gh.extensions", "type": "list of package", "descriptionHTML": "<p>gh extensions, see <a href=\"https://cli.github.com/manual/gh_extension\">https://cli.github.com/manual/gh_extension</a>.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "true", "description": "Whether to enable the gh git credential helper.", "example": "true", "loc": ["programs", "gh", "gitCredentialHelper", "enable"], "readOnly": false, "title": "programs.gh.gitCredentialHelper.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the gh git credential helper.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "[\n  \"https://github.com\"\n  \"https://gist.github.com\"\n]", "description": "GitHub hosts to enable the gh git credential helper for", "example": "[ \"https://github.com\" \"https://github.example.com\" ]\n", "loc": ["programs", "gh", "gitCredentialHelper", "hosts"], "readOnly": false, "title": "programs.gh.gitCredentialHelper.hosts", "type": "list of string", "descriptionHTML": "<p>GitHub hosts to enable the gh git credential helper for</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "{ }", "description": "Host-specific configuration written to {file}$XDG_CONFIG_HOME/gh/hosts.yml.", "example": "{\n  \"github.com\" = {\n    user = \"<your_username>\";\n  };\n}", "loc": ["programs", "gh", "hosts"], "readOnly": false, "title": "programs.gh.hosts", "type": "YAML 1.1 value", "descriptionHTML": "<p>Host-specific configuration written to {file}<code>$XDG_CONFIG_HOME/gh/hosts.yml</code>.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "pkgs.gh", "description": "The gh package to use.", "example": "", "loc": ["programs", "gh", "package"], "readOnly": false, "title": "programs.gh.package", "type": "package", "descriptionHTML": "<p>The gh package to use.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/gh/config.yml.", "example": "{\n  git_protocol = \"ssh\";\n\n  prompt = \"enabled\";\n\n  aliases = {\n    co = \"pr checkout\";\n    pv = \"pr view\";\n  };\n};\n", "loc": ["programs", "gh", "settings"], "readOnly": false, "title": "programs.gh.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/gh/config.yml</code>.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "{ }", "description": "Aliases that allow you to create nicknames for gh commands.", "example": "{\n  co = \"pr checkout\";\n  pv = \"pr view\";\n}\n", "loc": ["programs", "gh", "settings", "aliases"], "readOnly": false, "title": "programs.gh.settings.aliases", "type": "attribute set of string", "descriptionHTML": "<p>Aliases that allow you to create nicknames for gh commands.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "\"\"", "description": "The editor that gh should run when creating issues, pull requests, etc.\nIf blank, will refer to environment.", "example": "", "loc": ["programs", "gh", "settings", "editor"], "readOnly": false, "title": "programs.gh.settings.editor", "type": "string", "descriptionHTML": "<p>The editor that gh should run when creating issues, pull requests, etc.\nIf blank, will refer to environment.</p>"}, {"declarations": [{"name": "<programs/gh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gh.nix"}], "default": "\"https\"", "description": "The protocol to use when performing Git operations.", "example": "\"ssh\"", "loc": ["programs", "gh", "settings", "git_protocol"], "readOnly": false, "title": "programs.gh.settings.git_protocol", "type": "string", "descriptionHTML": "<p>The protocol to use when performing Git operations.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "false", "description": "Whether to clear default keybinds.", "example": "true", "loc": ["programs", "ghostty", "clearDefaultKeybinds"], "readOnly": false, "title": "programs.ghostty.clearDefaultKeybinds", "type": "boolean", "descriptionHTML": "<p>Whether to clear default keybinds.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "false", "description": "Whether to enable Ghostty.", "example": "true", "loc": ["programs", "ghostty", "enable"], "readOnly": false, "title": "programs.ghostty.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Ghostty.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.\nThis ensures that shell integration works in more scenarios, such as\nswitching shells within Ghostty. But it is not needed to have shell\nintegration.\nSee\nhttps://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup\nfor more information.", "example": "false", "loc": ["programs", "ghostty", "enableBashIntegration"], "readOnly": false, "title": "programs.ghostty.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>\n<p>This ensures that shell integration works in more scenarios, such as\nswitching shells within Ghostty. But it is not needed to have shell\nintegration.</p>\n<p>See\n<a href=\"https://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup\">https://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.\nThis ensures that shell integration works in more scenarios, such as\nswitching shells within Ghostty. But it is not needed to have shell\nintegration.\nSee\nhttps://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup\nfor more information.", "example": "false", "loc": ["programs", "ghostty", "enableFishIntegration"], "readOnly": false, "title": "programs.ghostty.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>\n<p>This ensures that shell integration works in more scenarios, such as\nswitching shells within Ghostty. But it is not needed to have shell\nintegration.</p>\n<p>See\n<a href=\"https://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup\">https://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.\nThis ensures that shell integration works in more scenarios, such as\nswitching shells within Ghostty. But it is not needed to have shell\nintegration.\nSee\nhttps://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup\nfor more information.", "example": "false", "loc": ["programs", "ghostty", "enableZshIntegration"], "readOnly": false, "title": "programs.ghostty.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>\n<p>This ensures that shell integration works in more scenarios, such as\nswitching shells within Ghostty. But it is not needed to have shell\nintegration.</p>\n<p>See\n<a href=\"https://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup\">https://ghostty.org/docs/features/shell-integration#manual-shell-integration-setup</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "`true` if programs.ghostty.package is not null", "description": "Whether to enable installation of Ghostty configuration syntax for bat.", "example": "true", "loc": ["programs", "ghostty", "installBatSyntax"], "readOnly": false, "title": "programs.ghostty.installBatSyntax", "type": "boolean", "descriptionHTML": "<p>Whether to enable installation of Ghostty configuration syntax for bat.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "false", "description": "Whether to enable installation of Ghostty configuration syntax for Vim.", "example": "true", "loc": ["programs", "ghostty", "installVimSyntax"], "readOnly": false, "title": "programs.ghostty.installVimSyntax", "type": "boolean", "descriptionHTML": "<p>Whether to enable installation of Ghostty configuration syntax for Vim.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "pkgs.ghostty", "description": "The ghostty package to use. Set programs.ghostty.package to null on platforms where ghostty is not available or marked broken", "example": "", "loc": ["programs", "ghostty", "package"], "readOnly": false, "title": "programs.ghostty.package", "type": "null or package", "descriptionHTML": "<p>The ghostty package to use. Set programs.ghostty.package to null on platforms where ghostty is not available or marked broken</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/ghostty/config.\nSee https://ghostty.org/docs/config/reference for more information.", "example": "{\n  theme = \"catppuccin-mocha\";\n  font-size = 10;\n  keybind = [\n    \"ctrl+h=goto_split:left\"\n    \"ctrl+l=goto_split:right\"\n  ];\n}\n", "loc": ["programs", "ghostty", "settings"], "readOnly": false, "title": "programs.ghostty.settings", "type": "attribute set of (atom (null, bool, int, float or string) or a list of them for duplicate keys)", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/ghostty/config</code>.</p>\n<p>See <a href=\"https://ghostty.org/docs/config/reference\">https://ghostty.org/docs/config/reference</a> for more information.</p>"}, {"declarations": [{"name": "<programs/ghostty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ghostty.nix"}], "default": "{ }", "description": "Custom themes written to {file}$XDG_CONFIG_HOME/ghostty/themes.\nSee https://ghostty.org/docs/features/theme#authoring-a-custom-theme for more information.", "example": "{\n  catppuccin-mocha = {\n    background = \"1e1e2e\";\n    cursor-color = \"f5e0dc\";\n    foreground = \"cdd6f4\";\n    palette = [\n      \"0=#45475a\"\n      \"1=#f38ba8\"\n      \"2=#a6e3a1\"\n      \"3=#f9e2af\"\n      \"4=#89b4fa\"\n      \"5=#f5c2e7\"\n      \"6=#94e2d5\"\n      \"7=#bac2de\"\n      \"8=#585b70\"\n      \"9=#f38ba8\"\n      \"10=#a6e3a1\"\n      \"11=#f9e2af\"\n      \"12=#89b4fa\"\n      \"13=#f5c2e7\"\n      \"14=#94e2d5\"\n      \"15=#a6adc8\"\n    ];\n    selection-background = \"353749\";\n    selection-foreground = \"cdd6f4\";\n  };\n}", "loc": ["programs", "ghostty", "themes"], "readOnly": false, "title": "programs.ghostty.themes", "type": "attribute set of attribute set of (atom (null, bool, int, float or string) or a list of them for duplicate keys)", "descriptionHTML": "<p>Custom themes written to {file}<code>$XDG_CONFIG_HOME/ghostty/themes</code>.</p>\n<p>See <a href=\"https://ghostty.org/docs/features/theme#authoring-a-custom-theme\">https://ghostty.org/docs/features/theme#authoring-a-custom-theme</a> for more information.</p>"}, {"declarations": [{"name": "<programs/git-cliff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-cliff.nix"}], "default": "false", "description": "Whether to enable git-cliff changelog generator.", "example": "true", "loc": ["programs", "git-cliff", "enable"], "readOnly": false, "title": "programs.git-cliff.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable git-cliff changelog generator.</p>"}, {"declarations": [{"name": "<programs/git-cliff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-cliff.nix"}], "default": "pkgs.git-cliff", "description": "The git-cliff package to use.", "example": "", "loc": ["programs", "git-cliff", "package"], "readOnly": false, "title": "programs.git-cliff.package", "type": "null or package", "descriptionHTML": "<p>The git-cliff package to use.</p>"}, {"declarations": [{"name": "<programs/git-cliff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-cliff.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/git-cliff/cliff.toml. See\nhttps://git-cliff.org/docs/configuration\nfor the documentation.", "example": "{\n  header = \"Changelog\";\n  trim = true;\n}\n", "loc": ["programs", "git-cliff", "settings"], "readOnly": false, "title": "programs.git-cliff.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/git-cliff/cliff.toml</code>. See\n<a href=\"https://git-cliff.org/docs/configuration\">https://git-cliff.org/docs/configuration</a>\nfor the documentation.</p>"}, {"declarations": [{"name": "<programs/git-credential-oauth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-credential-oauth.nix"}], "default": "false", "description": "Whether to enable Git authentication handler for OAuth.", "example": "true", "loc": ["programs", "git-credential-oauth", "enable"], "readOnly": false, "title": "programs.git-credential-oauth.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Git authentication handler for OAuth.</p>"}, {"declarations": [{"name": "<programs/git-credential-oauth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-credential-oauth.nix"}], "default": "[ ]", "description": "Extra command-line arguments passed to git-credential-oauth.\nFor valid arguments, see {manpage}git-credential-oauth(1).", "example": "[ \"-device\" ]", "loc": ["programs", "git-credential-oauth", "extraFlags"], "readOnly": false, "title": "programs.git-credential-oauth.extraFlags", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments passed to git-credential-oauth.</p>\n<p>For valid arguments, see {manpage}<code>git-credential-oauth(1)</code>.</p>"}, {"declarations": [{"name": "<programs/git-credential-oauth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-credential-oauth.nix"}], "default": "pkgs.git-credential-oauth", "description": "The git-credential-oauth package to use.", "example": "", "loc": ["programs", "git-credential-oauth", "package"], "readOnly": false, "title": "programs.git-credential-oauth.package", "type": "package", "descriptionHTML": "<p>The git-credential-oauth package to use.</p>"}, {"declarations": [{"name": "<programs/git-worktree-switcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-worktree-switcher.nix"}], "default": "false", "description": "Whether to enable git-worktree-switcher.", "example": "true", "loc": ["programs", "git-worktree-switcher", "enable"], "readOnly": false, "title": "programs.git-worktree-switcher.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable git-worktree-switcher.</p>"}, {"declarations": [{"name": "<programs/git-worktree-switcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-worktree-switcher.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "git-worktree-switcher", "enableBashIntegration"], "readOnly": false, "title": "programs.git-worktree-switcher.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/git-worktree-switcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-worktree-switcher.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "git-worktree-switcher", "enableFishIntegration"], "readOnly": false, "title": "programs.git-worktree-switcher.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/git-worktree-switcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-worktree-switcher.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "git-worktree-switcher", "enableZshIntegration"], "readOnly": false, "title": "programs.git-worktree-switcher.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/git-worktree-switcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git-worktree-switcher.nix"}], "default": "pkgs.git-worktree-switcher", "description": "The git-worktree-switcher package to use.", "example": "", "loc": ["programs", "git-worktree-switcher", "package"], "readOnly": false, "title": "programs.git-worktree-switcher.package", "type": "package", "descriptionHTML": "<p>The git-worktree-switcher package to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "{ }", "description": "Git aliases to define.", "example": "{\n  co = \"checkout\";\n}", "loc": ["programs", "git", "aliases"], "readOnly": false, "title": "programs.git.aliases", "type": "attribute set of string", "descriptionHTML": "<p>Git aliases to define.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[ ]", "description": "List of defining attributes set globally.", "example": "[\n  \"*.pdf diff=pdf\"\n]", "loc": ["programs", "git", "attributes"], "readOnly": false, "title": "programs.git.attributes", "type": "list of string", "descriptionHTML": "<p>List of defining attributes set globally.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Whether to enable the {command}delta syntax highlighter.\nSee https://github.com/dandavison/delta.", "example": "true", "loc": ["programs", "git", "delta", "enable"], "readOnly": false, "title": "programs.git.delta.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the {command}<code>delta</code> syntax highlighter.\nSee <a href=\"https://github.com/dandavison/delta\">https://github.com/dandavison/delta</a>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "{ }", "description": "Options to configure delta.", "example": "{\n  decorations = {\n    commit-decoration-style = \"bold yellow box ul\";\n    file-decoration-style = \"none\";\n    file-style = \"bold yellow ul\";\n  };\n  features = \"decorations\";\n  whitespace-error-style = \"22 reverse\";\n}", "loc": ["programs", "git", "delta", "options"], "readOnly": false, "title": "programs.git.delta.options", "type": "attribute set of (string or boolean or signed integer or attribute set of (string or boolean or signed integer))", "descriptionHTML": "<p>Options to configure delta.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "pkgs.delta", "description": "The delta package to use.", "example": "", "loc": ["programs", "git", "delta", "package"], "readOnly": false, "title": "programs.git.delta.package", "type": "package", "descriptionHTML": "<p>The delta package to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Enable the contrib {command}diff-highlight syntax highlighter.\nSee https://github.com/git/git/blob/master/contrib/diff-highlight/README,", "example": "true", "loc": ["programs", "git", "diff-highlight", "enable"], "readOnly": false, "title": "programs.git.diff-highlight.enable", "type": "boolean", "descriptionHTML": "<p>Enable the contrib {command}<code>diff-highlight</code> syntax highlighter.\nSee <a href=\"https://github.com/git/git/blob/master/contrib/diff-highlight/README\">https://github.com/git/git/blob/master/contrib/diff-highlight/README</a>,</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[ ]", "description": "Arguments to be passed to {command}less.", "example": "[\n  \"--tabs=4\"\n  \"-RFX\"\n]", "loc": ["programs", "git", "diff-highlight", "pagerOpts"], "readOnly": false, "title": "programs.git.diff-highlight.pagerOpts", "type": "list of string", "descriptionHTML": "<p>Arguments to be passed to {command}<code>less</code>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "true", "description": "Simplify git header chunks to a more human readable format.", "example": "false", "loc": ["programs", "git", "diff-so-fancy", "changeHunkIndicators"], "readOnly": false, "title": "programs.git.diff-so-fancy.changeHunkIndicators", "type": "boolean", "descriptionHTML": "<p>Simplify git header chunks to a more human readable format.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Enable the {command}diff-so-fancy diff colorizer.\nSee https://github.com/so-fancy/diff-so-fancy.", "example": "true", "loc": ["programs", "git", "diff-so-fancy", "enable"], "readOnly": false, "title": "programs.git.diff-so-fancy.enable", "type": "boolean", "descriptionHTML": "<p>Enable the {command}<code>diff-so-fancy</code> diff colorizer.\nSee <a href=\"https://github.com/so-fancy/diff-so-fancy\">https://github.com/so-fancy/diff-so-fancy</a>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "true", "description": "Whether the first block of an empty line should be colored.", "example": "false", "loc": ["programs", "git", "diff-so-fancy", "markEmptyLines"], "readOnly": false, "title": "programs.git.diff-so-fancy.markEmptyLines", "type": "boolean", "descriptionHTML": "<p>Whether the first block of an empty line should be colored.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[\n  \"--tabs=4\"\n  \"-RFX\"\n]", "description": "Arguments to be passed to {command}less.", "example": "", "loc": ["programs", "git", "diff-so-fancy", "pagerOpts"], "readOnly": false, "title": "programs.git.diff-so-fancy.pagerOpts", "type": "list of string", "descriptionHTML": "<p>Arguments to be passed to {command}<code>less</code>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "null", "description": "By default, the separator for the file header spans the full\nwidth of the terminal. Use this setting to set the width of\nthe file header manually.", "example": "false", "loc": ["programs", "git", "diff-so-fancy", "rulerWidth"], "readOnly": false, "title": "programs.git.diff-so-fancy.rulerWidth", "type": "null or signed integer", "descriptionHTML": "<p>By default, the separator for the file header spans the full\nwidth of the terminal. Use this setting to set the width of\nthe file header manually.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "true", "description": "Whether the + or - at\nline-start should be removed.", "example": "false", "loc": ["programs", "git", "diff-so-fancy", "stripLeadingSymbols"], "readOnly": false, "title": "programs.git.diff-so-fancy.stripLeadingSymbols", "type": "boolean", "descriptionHTML": "<p>Whether the <code>+</code> or <code>-</code> at\nline-start should be removed.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "true", "description": "By default, the separator for the file header uses Unicode\nline-drawing characters. If this is causing output errors on\nyour terminal, set this to false to use ASCII characters instead.", "example": "false", "loc": ["programs", "git", "diff-so-fancy", "useUnicodeRuler"], "readOnly": false, "title": "programs.git.diff-so-fancy.useUnicodeRuler", "type": "boolean", "descriptionHTML": "<p>By default, the separator for the file header uses Unicode\nline-drawing characters. If this is causing output errors on\nyour terminal, set this to false to use ASCII characters instead.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "\"light\"", "description": "Determines whether difftastic should use the lighter or darker colors\nfor syntax highlighting.", "example": "\"dark\"", "loc": ["programs", "git", "difftastic", "background"], "readOnly": false, "title": "programs.git.difftastic.background", "type": "one of \"light\", \"dark\"", "descriptionHTML": "<p>Determines whether difftastic should use the lighter or darker colors\nfor syntax highlighting.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "\"auto\"", "description": "Determines when difftastic should color its output.", "example": "\"always\"", "loc": ["programs", "git", "difftastic", "color"], "readOnly": false, "title": "programs.git.difftastic.color", "type": "one of \"always\", \"auto\", \"never\"", "descriptionHTML": "<p>Determines when difftastic should color its output.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "\"side-by-side\"", "description": "Determines how the output displays - in one column or two columns.", "example": "\"inline\"", "loc": ["programs", "git", "difftastic", "display"], "readOnly": false, "title": "programs.git.difftastic.display", "type": "one of \"side-by-side\", \"side-by-side-show-both\", \"inline\"", "descriptionHTML": "<p>Determines how the output displays - in one column or two columns.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Enable the {command}difftastic syntax highlighter.\nSee https://github.com/Wilfred/difftastic.", "example": "true", "loc": ["programs", "git", "difftastic", "enable"], "readOnly": false, "title": "programs.git.difftastic.enable", "type": "boolean", "descriptionHTML": "<p>Enable the {command}<code>difftastic</code> syntax highlighter.\nSee <a href=\"https://github.com/Wilfred/difftastic\">https://github.com/Wilfred/difftastic</a>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Enable the {command}difftastic syntax highlighter as a git difftool.\nSee https://github.com/Wilfred/difftastic.", "example": "true", "loc": ["programs", "git", "difftastic", "enableAsDifftool"], "readOnly": false, "title": "programs.git.difftastic.enableAsDifftool", "type": "boolean", "descriptionHTML": "<p>Enable the {command}<code>difftastic</code> syntax highlighter as a git difftool.\nSee <a href=\"https://github.com/Wilfred/difftastic\">https://github.com/Wilfred/difftastic</a>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "pkgs.difftastic", "description": "The difftastic package to use.", "example": "", "loc": ["programs", "git", "difftastic", "package"], "readOnly": false, "title": "programs.git.difftastic.package", "type": "package", "descriptionHTML": "<p>The difftastic package to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Whether to enable Git.", "example": "true", "loc": ["programs", "git", "enable"], "readOnly": false, "title": "programs.git.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Git.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "{ }", "description": "Additional configuration to add. The use of string values is\ndeprecated and will be removed in the future.", "example": "{\n  core = {\n    whitespace = \"trailing-space,space-before-tab\";\n  };\n  url = {\n    \"ssh://git@host\" = {\n      insteadOf = \"otherhost\";\n    };\n  };\n}", "loc": ["programs", "git", "extraConfig"], "readOnly": false, "title": "programs.git.extraConfig", "type": "strings concatenated with \"\\n\" or attribute set of attribute set of (string or boolean or signed integer or list of (string or boolean or signed integer) or attribute set of (string or boolean or signed integer or list of (string or boolean or signed integer)))", "descriptionHTML": "<p>Additional configuration to add. The use of string values is\ndeprecated and will be removed in the future.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "{ }", "description": "Configuration helper for Git hooks.\nSee https://git-scm.com/docs/githooks\nfor reference.", "example": "{\n  pre-commit = ./pre-commit-script;\n}\n", "loc": ["programs", "git", "hooks"], "readOnly": false, "title": "programs.git.hooks", "type": "attribute set of absolute path", "descriptionHTML": "<p>Configuration helper for Git hooks.\nSee <a href=\"https://git-scm.com/docs/githooks\">https://git-scm.com/docs/githooks</a>\nfor reference.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[ ]", "description": "List of paths that should be globally ignored.", "example": "[\n  \"*~\"\n  \"*.swp\"\n]", "loc": ["programs", "git", "ignores"], "readOnly": false, "title": "programs.git.ignores", "type": "list of string", "descriptionHTML": "<p>List of paths that should be globally ignored.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[ ]", "description": "List of configuration files to include.", "example": "[\n  { path = \"~/path/to/config.inc\"; }\n  {\n    path = \"~/path/to/conditional.inc\";\n    condition = \"gitdir:~/src/dir\";\n  }\n]\n", "loc": ["programs", "git", "includes"], "readOnly": false, "title": "programs.git.includes", "type": "list of (submodule)", "descriptionHTML": "<p>List of configuration files to include.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "null", "description": "Include this configuration only when {var}condition\nmatches. Allowed conditions are described in\n{manpage}git-config(1).", "example": "", "loc": ["programs", "git", "includes", "*", "condition"], "readOnly": false, "title": "programs.git.includes.*.condition", "type": "null or string", "descriptionHTML": "<p>Include this configuration only when {var}<code>condition</code>\nmatches. Allowed conditions are described in\n{manpage}<code>git-config(1)</code>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "\"gitconfig\"", "description": "Nix store name for the git configuration text file,\nwhen generating the configuration text from nix options.", "example": "", "loc": ["programs", "git", "includes", "*", "contentSuffix"], "readOnly": false, "title": "programs.git.includes.*.contentSuffix", "type": "string", "descriptionHTML": "<p>Nix store name for the git configuration text file,\nwhen generating the configuration text from nix options.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "{ }", "description": "Configuration to include. If empty then a path must be given.\nThis follows the configuration structure as described in\n{manpage}git-config(1).", "example": "{\n  user = {\n    email = \"bob@work.example.com\";\n    name = \"Bob Work\";\n    signingKey = \"1A2B3C4D5E6F7G8H\";\n  };\n  commit = {\n    gpgSign = true;\n  };\n};\n", "loc": ["programs", "git", "includes", "*", "contents"], "readOnly": false, "title": "programs.git.includes.*.contents", "type": "attribute set of anything", "descriptionHTML": "<p>Configuration to include. If empty then a path must be given.</p>\n<p>This follows the configuration structure as described in\n{manpage}<code>git-config(1)</code>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "", "description": "Path of the configuration file to include.", "example": "", "loc": ["programs", "git", "includes", "*", "path"], "readOnly": false, "title": "programs.git.includes.*.path", "type": "string or absolute path", "descriptionHTML": "<p>Path of the configuration file to include.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Whether to enable Git Large File Storage.", "example": "true", "loc": ["programs", "git", "lfs", "enable"], "readOnly": false, "title": "programs.git.lfs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Git Large File Storage.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Skip automatic downloading of objects on clone or pull.\nThis requires a manual {command}git lfs pull\nevery time a new commit is checked out on your repository.", "example": "", "loc": ["programs", "git", "lfs", "skipSmudge"], "readOnly": false, "title": "programs.git.lfs.skipSmudge", "type": "boolean", "descriptionHTML": "<p>Skip automatic downloading of objects on clone or pull.\nThis requires a manual {command}<code>git lfs pull</code>\nevery time a new commit is checked out on your repository.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Enable the automatic {command}git maintenance.\nIf you have SSH remotes, set {option}programs.git.package to a\ngit version with SSH support (eg: pkgs.gitFull).\nSee https://git-scm.com/docs/git-maintenance.", "example": "true", "loc": ["programs", "git", "maintenance", "enable"], "readOnly": false, "title": "programs.git.maintenance.enable", "type": "boolean", "descriptionHTML": "<p>Enable the automatic {command}<code>git maintenance</code>.</p>\n<p>If you have SSH remotes, set {option}<code>programs.git.package</code> to a\ngit version with SSH support (eg: <code>pkgs.gitFull</code>).</p>\n<p>See <a href=\"https://git-scm.com/docs/git-maintenance\">https://git-scm.com/docs/git-maintenance</a>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[ ]", "description": "Repositories on which {command}git maintenance should run.\nShould be a list of absolute paths.", "example": "", "loc": ["programs", "git", "maintenance", "repositories"], "readOnly": false, "title": "programs.git.maintenance.repositories", "type": "list of string", "descriptionHTML": "<p>Repositories on which {command}<code>git maintenance</code> should run.</p>\n<p>Should be a list of absolute paths.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "{\n  daily = \"Tue..Sun *-*-* 0:53:00\";\n  hourly = \"*-*-* 1..23:53:00\";\n  weekly = \"Mon 0:53:00\";\n}", "description": "Systemd timers to create for scheduled {command}git maintenance.\nKey is passed to --schedule argument in {command}git maintenance run\nand value is passed to Timer.OnCalendar in systemd.user.timers.", "example": "", "loc": ["programs", "git", "maintenance", "timers"], "readOnly": false, "title": "programs.git.maintenance.timers", "type": "attribute set of string", "descriptionHTML": "<p>Systemd timers to create for scheduled {command}<code>git maintenance</code>.</p>\n<p>Key is passed to <code>--schedule</code> argument in {command}<code>git maintenance run</code>\nand value is passed to <code>Timer.OnCalendar</code> in <code>systemd.user.timers</code>.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "pkgs.git", "description": "The git package to use. Use {var}pkgs.gitFull\nto gain access to {command}git send-email for instance.", "example": "pkgs.gitFull", "loc": ["programs", "git", "package"], "readOnly": false, "title": "programs.git.package", "type": "package", "descriptionHTML": "<p>The git package to use. Use {var}<code>pkgs.gitFull</code>\nto gain access to {command}<code>git send-email</code> for instance.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Whether to enable the {command}patdiff differ.\nSee https://opensource.janestreet.com/patdiff/", "example": "true", "loc": ["programs", "git", "patdiff", "enable"], "readOnly": false, "title": "programs.git.patdiff.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the {command}<code>patdiff</code> differ.\nSee <a href=\"https://opensource.janestreet.com/patdiff/\">https://opensource.janestreet.com/patdiff/</a></p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "pkgs.patdiff", "description": "The patdiff package to use.", "example": "", "loc": ["programs", "git", "patdiff", "package"], "readOnly": false, "title": "programs.git.patdiff.package", "type": "package", "descriptionHTML": "<p>The patdiff package to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "[ ]", "description": "Command line arguments to include in the <command>RIFF</command> environment variable.\nRun <command>riff --help</command> for a full list of options", "example": "[ \"--no-adds-only-special\" ]", "loc": ["programs", "git", "riff", "commandLineOptions"], "readOnly": false, "title": "programs.git.riff.commandLineOptions", "type": "list of string", "descriptionHTML": "<p>Command line arguments to include in the <command>RIFF</command> environment variable.</p>\n<p>Run <command>riff --help</command> for a full list of options</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "false", "description": "Enable the <command>riff</command> diff highlighter.\nSee <link xlink:href=\"https://github.com/walles/riff\" />.", "example": "true", "loc": ["programs", "git", "riff", "enable"], "readOnly": false, "title": "programs.git.riff.enable", "type": "boolean", "descriptionHTML": "<p>Enable the <command>riff</command> diff highlighter.\nSee <link xlink:href=\"https://github.com/walles/riff\" />.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "pkgs.riffdiff", "description": "The riffdiff package to use.", "example": "", "loc": ["programs", "git", "riff", "package"], "readOnly": false, "title": "programs.git.riff.package", "type": "package", "descriptionHTML": "<p>The riffdiff package to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "\"openpgp\" for state version < 25.05,\nundefined for state version \u2265 25.05\n", "description": "The signing method to use when signing commits and tags.\nValid values are openpgp (OpenPGP/GnuPG), ssh (SSH), and x509 (X.509 certificates).", "example": "", "loc": ["programs", "git", "signing", "format"], "readOnly": false, "title": "programs.git.signing.format", "type": "null or one of \"openpgp\", \"ssh\", \"x509\"", "descriptionHTML": "<p>The signing method to use when signing commits and tags.\nValid values are <code>openpgp</code> (OpenPGP/GnuPG), <code>ssh</code> (SSH), and <code>x509</code> (X.509 certificates).</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "null", "description": "The default signing key fingerprint.\nSet to null to let the signer decide what signing key\nto use depending on commit\u2019s author.", "example": "", "loc": ["programs", "git", "signing", "key"], "readOnly": false, "title": "programs.git.signing.key", "type": "null or string", "descriptionHTML": "<p>The default signing key fingerprint.</p>\n<p>Set to <code>null</code> to let the signer decide what signing key\nto use depending on commit\u2019s author.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "null", "description": "Whether commits and tags should be signed by default.", "example": "", "loc": ["programs", "git", "signing", "signByDefault"], "readOnly": false, "title": "programs.git.signing.signByDefault", "type": "null or boolean", "descriptionHTML": "<p>Whether commits and tags should be signed by default.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "", "description": "Path to signer binary to use.", "example": "", "loc": ["programs", "git", "signing", "signer"], "readOnly": false, "title": "programs.git.signing.signer", "type": "null or string", "descriptionHTML": "<p>Path to signer binary to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "null", "description": "Default user email to use.", "example": "", "loc": ["programs", "git", "userEmail"], "readOnly": false, "title": "programs.git.userEmail", "type": "null or string", "descriptionHTML": "<p>Default user email to use.</p>"}, {"declarations": [{"name": "<programs/git.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/git.nix"}], "default": "null", "description": "Default user name to use.", "example": "", "loc": ["programs", "git", "userName"], "readOnly": false, "title": "programs.git.userName", "type": "null or string", "descriptionHTML": "<p>Default user name to use.</p>"}, {"declarations": [{"name": "<programs/gitui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gitui.nix"}], "default": "false", "description": "Whether to enable gitui, blazing fast terminal-ui for git written in rust.", "example": "true", "loc": ["programs", "gitui", "enable"], "readOnly": false, "title": "programs.gitui.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable gitui, blazing fast terminal-ui for git written in rust.</p>"}, {"declarations": [{"name": "<programs/gitui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gitui.nix"}], "default": "\"\"", "description": "Key config in Ron file format. This is written to\n{file}$XDG_CONFIG_HOME/gitui/key_config.ron.", "example": "''\n  exit: Some(( code: Char('c'), modifiers: ( bits: 2,),)),\n  quit: Some(( code: Char('q'), modifiers: ( bits: 0,),)),\n  exit_popup: Some(( code: Esc, modifiers: ( bits: 0,),)),\n''", "loc": ["programs", "gitui", "keyConfig"], "readOnly": false, "title": "programs.gitui.keyConfig", "type": "absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Key config in Ron file format. This is written to\n{file}<code>$XDG_CONFIG_HOME/gitui/key_config.ron</code>.</p>"}, {"declarations": [{"name": "<programs/gitui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gitui.nix"}], "default": "pkgs.gitui", "description": "The gitui package to use.", "example": "", "loc": ["programs", "gitui", "package"], "readOnly": false, "title": "programs.gitui.package", "type": "package", "descriptionHTML": "<p>The gitui package to use.</p>"}, {"declarations": [{"name": "<programs/gitui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gitui.nix"}], "default": "''\n  (\n    selected_tab: Reset,\n    command_fg: White,\n    selection_bg: Blue,\n    selection_fg: White,\n    cmdbar_bg: Blue,\n    cmdbar_extra_lines_bg: Blue,\n    disabled_fg: DarkGray,\n    diff_line_add: Green,\n    diff_line_delete: Red,\n    diff_file_added: LightGreen,\n    diff_file_removed: LightRed,\n    diff_file_moved: LightMagenta,\n    diff_file_modified: Yellow,\n    commit_hash: Magenta,\n    commit_time: LightCyan,\n    commit_author: Green,\n    danger_fg: Red,\n    push_gauge_bg: Blue,\n    push_gauge_fg: Reset,\n    tag_fg: LightMagenta,\n    branch_fg: LightYellow,\n  )\n''", "description": "Theme in Ron file format. This is written to\n{file}$XDG_CONFIG_HOME/gitui/theme.ron.", "example": "", "loc": ["programs", "gitui", "theme"], "readOnly": false, "title": "programs.gitui.theme", "type": "absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Theme in Ron file format. This is written to\n{file}<code>$XDG_CONFIG_HOME/gitui/theme.ron</code>.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "false", "description": "Whether to enable GNOME Shell customization.", "example": "true", "loc": ["programs", "gnome-shell", "enable"], "readOnly": false, "title": "programs.gnome-shell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GNOME Shell customization.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "[ ]", "description": "List of GNOME Shell extensions.", "example": "[\n  { package = pkgs.gnomeExtensions.dash-to-panel; }\n  {\n    id = \"user-theme@gnome-shell-extensions.gcampax.github.com\";\n    package = pkgs.gnome-shell-extensions;\n  }\n]\n", "loc": ["programs", "gnome-shell", "extensions"], "readOnly": false, "title": "programs.gnome-shell.extensions", "type": "list of (submodule)", "descriptionHTML": "<p>List of GNOME Shell extensions.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "", "description": "ID of the GNOME Shell extension. If not provided, it\nwill be obtained from package.extensionUuid.", "example": "\"user-theme@gnome-shell-extensions.gcampax.github.com\"", "loc": ["programs", "gnome-shell", "extensions", "*", "id"], "readOnly": false, "title": "programs.gnome-shell.extensions.*.id", "type": "string", "descriptionHTML": "<p>ID of the GNOME Shell extension. If not provided, it\nwill be obtained from <code>package.extensionUuid</code>.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "", "description": "Package providing a GNOME Shell extension in\n$out/share/gnome-shell/extensions/${id}.", "example": "\"pkgs.gnome-shell-extensions\"", "loc": ["programs", "gnome-shell", "extensions", "*", "package"], "readOnly": false, "title": "programs.gnome-shell.extensions.*.package", "type": "package", "descriptionHTML": "<p>Package providing a GNOME Shell extension in\n<code>$out/share/gnome-shell/extensions/${id}</code>.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "null", "description": "Theme to use for GNOME Shell.", "example": "{\n  name = \"Plata-Noir\";\n  package = pkgs.plata-theme;\n}\n", "loc": ["programs", "gnome-shell", "theme"], "readOnly": false, "title": "programs.gnome-shell.theme", "type": "null or (submodule)", "descriptionHTML": "<p>Theme to use for GNOME Shell.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "", "description": "Name of the GNOME Shell theme.", "example": "\"Plata-Noir\"", "loc": ["programs", "gnome-shell", "theme", "name"], "readOnly": false, "title": "programs.gnome-shell.theme.name", "type": "string", "descriptionHTML": "<p>Name of the GNOME Shell theme.</p>"}, {"declarations": [{"name": "<programs/gnome-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-shell.nix"}], "default": "null", "description": "Package providing a GNOME Shell theme in\n$out/share/themes/${name}/gnome-shell.", "example": "pkgs.plata-theme", "loc": ["programs", "gnome-shell", "theme", "package"], "readOnly": false, "title": "programs.gnome-shell.theme.package", "type": "null or package", "descriptionHTML": "<p>Package providing a GNOME Shell theme in\n<code>$out/share/themes/${name}/gnome-shell</code>.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "false", "description": "Whether to enable Gnome Terminal.", "example": "true", "loc": ["programs", "gnome-terminal", "enable"], "readOnly": false, "title": "programs.gnome-terminal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Gnome Terminal.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "pkgs.gnome-terminal", "description": "The gnome-terminal package to use.", "example": "", "loc": ["programs", "gnome-terminal", "package"], "readOnly": false, "title": "programs.gnome-terminal.package", "type": "null or package", "descriptionHTML": "<p>The gnome-terminal package to use.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "{ }", "description": "A set of Gnome Terminal profiles. Note, the name of a profile must be\na UUID. You can generate one, for example, using {command}uuidgen\n(from util-linux).", "example": "", "loc": ["programs", "gnome-terminal", "profile"], "readOnly": false, "title": "programs.gnome-terminal.profile", "type": "attribute set of (submodule)", "descriptionHTML": "<p>A set of Gnome Terminal profiles. Note, the name of a profile must be\na UUID. You can generate one, for example, using {command}<code>uuidgen</code>\n(from <code>util-linux</code>).</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "If true, allow applications in the\nterminal to make text boldface.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "allowBold"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.allowBold", "type": "null or boolean", "descriptionHTML": "<p>If <code>true</code>, allow applications in the\nterminal to make text boldface.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "true", "description": "Turn on/off the terminal's bell.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "audibleBell"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.audibleBell", "type": "boolean", "descriptionHTML": "<p>Turn on/off the terminal's bell.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "\"ascii-delete\"", "description": "Which string the terminal should send to an application when the user\npresses the Backspace key.\nauto\n: Attempt to determine the right value from the terminal's IO settings.\nascii-backspace\n: Send an ASCII backspace character (0x08).\nascii-delete\n: Send an ASCII delete character (0x7F).\ndelete-sequence\n: Send the @7 control sequence.\ntty\n: Send terminal's \"erase\" setting.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "backspaceBinding"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.backspaceBinding", "type": "one of \"auto\", \"ascii-backspace\", \"ascii-delete\", \"delete-sequence\", \"tty\"", "descriptionHTML": "<p>Which string the terminal should send to an application when the user\npresses the <em>Backspace</em> key.</p>\n<p><code>auto</code>\n: Attempt to determine the right value from the terminal's IO settings.</p>\n<p><code>ascii-backspace</code>\n: Send an ASCII backspace character (<code>0x08</code>).</p>\n<p><code>ascii-delete</code>\n: Send an ASCII delete character (<code>0x7F</code>).</p>\n<p><code>delete-sequence</code>\n: Send the <code>@7</code> control sequence.</p>\n<p><code>tty</code>\n: Send terminal's \"erase\" setting.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "Whether bold text is shown in bright colors.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "boldIsBright"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.boldIsBright", "type": "null or boolean", "descriptionHTML": "<p>Whether bold text is shown in bright colors.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "The terminal colors, null to use system default.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors", "type": "null or (submodule)", "descriptionHTML": "<p>The terminal colors, null to use system default.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The background color.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "backgroundColor"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.backgroundColor", "type": "string", "descriptionHTML": "<p>The background color.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "The bold color, null to use same as foreground.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "boldColor"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.boldColor", "type": "null or string", "descriptionHTML": "<p>The bold color, null to use same as foreground.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "The color for the terminal cursor.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "cursor"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.cursor", "type": "null or (submodule)", "descriptionHTML": "<p>The color for the terminal cursor.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The background color.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "cursor", "background"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.cursor.background", "type": "string", "descriptionHTML": "<p>The background color.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The foreground color.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "cursor", "foreground"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.cursor.foreground", "type": "string", "descriptionHTML": "<p>The foreground color.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The foreground color.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "foregroundColor"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.foregroundColor", "type": "string", "descriptionHTML": "<p>The foreground color.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "The colors for the terminal\u2019s highlighted area.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "highlight"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.highlight", "type": "null or (submodule)", "descriptionHTML": "<p>The colors for the terminal\u2019s highlighted area.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The background color.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "highlight", "background"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.highlight.background", "type": "string", "descriptionHTML": "<p>The background color.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The foreground color.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "highlight", "foreground"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.highlight.foreground", "type": "string", "descriptionHTML": "<p>The foreground color.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The terminal palette.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "colors", "palette"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.colors.palette", "type": "list of string", "descriptionHTML": "<p>The terminal palette.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "\"system\"", "description": "The cursor blink mode.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "cursorBlinkMode"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.cursorBlinkMode", "type": "one of \"system\", \"on\", \"off\"", "descriptionHTML": "<p>The cursor blink mode.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "\"block\"", "description": "The cursor shape.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "cursorShape"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.cursorShape", "type": "one of \"block\", \"ibeam\", \"underline\"", "descriptionHTML": "<p>The cursor shape.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "The command to use to start the shell, or null for default shell.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "customCommand"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.customCommand", "type": "null or string", "descriptionHTML": "<p>The command to use to start the shell, or null for default shell.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "false", "description": "Whether this should be the default profile.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "default"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.default", "type": "boolean", "descriptionHTML": "<p>Whether this should be the default profile.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "\"delete-sequence\"", "description": "Which string the terminal should send to an application when the user\npresses the Delete key.\nauto\n: Send the @7 control sequence.\nascii-backspace\n: Send an ASCII backspace character (0x08).\nascii-delete\n: Send an ASCII delete character (0x7F).\ndelete-sequence\n: Send the @7 control sequence.\ntty\n: Send terminal's \"erase\" setting.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "deleteBinding"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.deleteBinding", "type": "one of \"auto\", \"ascii-backspace\", \"ascii-delete\", \"delete-sequence\", \"tty\"", "descriptionHTML": "<p>Which string the terminal should send to an application when the user\npresses the <em>Delete</em> key.</p>\n<p><code>auto</code>\n: Send the <code>@7</code> control sequence.</p>\n<p><code>ascii-backspace</code>\n: Send an ASCII backspace character (<code>0x08</code>).</p>\n<p><code>ascii-delete</code>\n: Send an ASCII delete character (<code>0x7F</code>).</p>\n<p><code>delete-sequence</code>\n: Send the <code>@7</code> control sequence.</p>\n<p><code>tty</code>\n: Send terminal's \"erase\" setting.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "The font name, null to use system default.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "font"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.font", "type": "null or string", "descriptionHTML": "<p>The font name, null to use system default.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "false", "description": "Run command as a login shell.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "loginShell"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.loginShell", "type": "boolean", "descriptionHTML": "<p>Run command as a login shell.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "true", "description": "Whether to scroll when output is written.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "scrollOnOutput"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.scrollOnOutput", "type": "boolean", "descriptionHTML": "<p>Whether to scroll when output is written.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "10000", "description": "The number of scrollback lines to keep, null for infinite.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "scrollbackLines"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.scrollbackLines", "type": "null or signed integer", "descriptionHTML": "<p>The number of scrollback lines to keep, null for infinite.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "true", "description": "Whether the scroll bar should be visible.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "showScrollbar"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.showScrollbar", "type": "boolean", "descriptionHTML": "<p>Whether the scroll bar should be visible.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "null", "description": "Background transparency in percent.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "transparencyPercent"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.transparencyPercent", "type": "null or integer between 0 and 100 (both inclusive)", "descriptionHTML": "<p>Background transparency in percent.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "", "description": "The profile name.", "example": "", "loc": ["programs", "gnome-terminal", "profile", "<name>", "visibleName"], "readOnly": false, "title": "programs.gnome-terminal.profile.<name>.visibleName", "type": "string", "descriptionHTML": "<p>The profile name.</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "true", "description": "Whether to show the menubar by default", "example": "", "loc": ["programs", "gnome-terminal", "showMenubar"], "readOnly": false, "title": "programs.gnome-terminal.showMenubar", "type": "boolean", "descriptionHTML": "<p>Whether to show the menubar by default</p>"}, {"declarations": [{"name": "<programs/gnome-terminal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gnome-terminal.nix"}], "default": "\"default\"", "description": "The theme variation to request", "example": "", "loc": ["programs", "gnome-terminal", "themeVariant"], "readOnly": false, "title": "programs.gnome-terminal.themeVariant", "type": "one of \"default\", \"light\", \"dark\", \"system\"", "descriptionHTML": "<p>The theme variation to request</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "false", "description": "Whether to enable Go.", "example": "true", "loc": ["programs", "go", "enable"], "readOnly": false, "title": "programs.go.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Go.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "[ ]", "description": "Extra {env}GOPATHs relative to {env}HOME appended\nafter , if that option is set.", "example": "[\n  \"extraGoPath1\"\n  \"extraGoPath2\"\n]", "loc": ["programs", "go", "extraGoPaths"], "readOnly": false, "title": "programs.go.extraGoPaths", "type": "list of string", "descriptionHTML": "<p>Extra {env}<code>GOPATH</code>s relative to {env}<code>HOME</code> appended\nafter <a href=\"#opt-programs.go.goPath\"></a>, if that option is set.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "null", "description": "GOBIN relative to HOME", "example": "\".local/bin.go\"", "loc": ["programs", "go", "goBin"], "readOnly": false, "title": "programs.go.goBin", "type": "null or string", "descriptionHTML": "<p>GOBIN relative to HOME</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "null", "description": "Primary {env}GOPATH relative to\n{env}HOME. It will be exported first and therefore\nused by default by the Go tooling.", "example": "\"go\"", "loc": ["programs", "go", "goPath"], "readOnly": false, "title": "programs.go.goPath", "type": "null or string", "descriptionHTML": "<p>Primary {env}<code>GOPATH</code> relative to\n{env}<code>HOME</code>. It will be exported first and therefore\nused by default by the Go tooling.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "[ ]", "description": "The {env}GOPRIVATE environment variable controls\nwhich modules the go command considers to be private (not\navailable publicly) and should therefore not use the proxy\nor checksum database.", "example": "[\n  \"*.corp.example.com\"\n  \"rsc.io/private\"\n]", "loc": ["programs", "go", "goPrivate"], "readOnly": false, "title": "programs.go.goPrivate", "type": "list of string", "descriptionHTML": "<p>The {env}<code>GOPRIVATE</code> environment variable controls\nwhich modules the go command considers to be private (not\navailable publicly) and should therefore not use the proxy\nor checksum database.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "pkgs.go", "description": "The go package to use.", "example": "", "loc": ["programs", "go", "package"], "readOnly": false, "title": "programs.go.package", "type": "package", "descriptionHTML": "<p>The go package to use.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "{ }", "description": "Packages to add to GOPATH.", "example": "{\n  \"golang.org/x/text\" = builtins.fetchGit \"https://go.googlesource.com/text\";\n  \"golang.org/x/time\" = builtins.fetchGit \"https://go.googlesource.com/time\";\n}\n", "loc": ["programs", "go", "packages"], "readOnly": false, "title": "programs.go.packages", "type": "attribute set of absolute path", "descriptionHTML": "<p>Packages to add to GOPATH.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "{ }", "description": "Options to configure Go telemetry mode.", "example": "", "loc": ["programs", "go", "telemetry"], "readOnly": false, "title": "programs.go.telemetry", "type": "submodule", "descriptionHTML": "<p>Options to configure Go telemetry mode.</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "\"1970-01-01\"", "description": "The date indicating the date at which the modefile\nwas updated, in YYYY-MM-DD format. It's used to\nreset the timeout before the next telemetry report\nis uploaded when telemetry mode is set to \"on\".", "example": "", "loc": ["programs", "go", "telemetry", "date"], "readOnly": false, "title": "programs.go.telemetry.date", "type": "string", "descriptionHTML": "<p>The date indicating the date at which the modefile\nwas updated, in YYYY-MM-DD format. It's used to\nreset the timeout before the next telemetry report\nis uploaded when telemetry mode is set to \"on\".</p>"}, {"declarations": [{"name": "<programs/go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/go.nix"}], "default": "null", "description": "Go telemetry mode to be set.", "example": "", "loc": ["programs", "go", "telemetry", "mode"], "readOnly": false, "title": "programs.go.telemetry.mode", "type": "null or one of \"off\", \"local\", \"on\"", "descriptionHTML": "<p>Go telemetry mode to be set.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "false", "description": "Whether to enable GnuPG.", "example": "true", "loc": ["programs", "gpg", "enable"], "readOnly": false, "title": "programs.gpg.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GnuPG.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "\"${config.home.homeDirectory}/.gnupg\"", "description": "Directory to store keychains and configuration.", "example": "\"${config.xdg.dataHome}/gnupg\"", "loc": ["programs", "gpg", "homedir"], "readOnly": false, "title": "programs.gpg.homedir", "type": "absolute path", "descriptionHTML": "<p>Directory to store keychains and configuration.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "true", "description": "If set to true, you may manage your keyring as a user\nusing the gpg command. Upon activation, the keyring\nwill have managed keys added without overwriting unmanaged keys.\nIf set to false, the path\n{file}$GNUPGHOME/pubring.kbx will become an immutable\nlink to the Nix store, denying modifications.", "example": "", "loc": ["programs", "gpg", "mutableKeys"], "readOnly": false, "title": "programs.gpg.mutableKeys", "type": "boolean", "descriptionHTML": "<p>If set to <code>true</code>, you may manage your keyring as a user\nusing the <code>gpg</code> command. Upon activation, the keyring\nwill have managed keys added without overwriting unmanaged keys.</p>\n<p>If set to <code>false</code>, the path\n{file}<code>$GNUPGHOME/pubring.kbx</code> will become an immutable\nlink to the Nix store, denying modifications.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "true", "description": "If set to true, you may manage trust as a user using\nthe {command}gpg command. Upon activation, trusted keys have\ntheir trust set without overwriting unmanaged keys.\nIf set to false, the path\n{file}$GNUPGHOME/trustdb.gpg will be\noverwritten on each activation, removing trust for\nany unmanaged keys. Be careful to make a backup of your old\n{file}trustdb.gpg before switching to immutable trust!", "example": "", "loc": ["programs", "gpg", "mutableTrust"], "readOnly": false, "title": "programs.gpg.mutableTrust", "type": "boolean", "descriptionHTML": "<p>If set to <code>true</code>, you may manage trust as a user using\nthe {command}<code>gpg</code> command. Upon activation, trusted keys have\ntheir trust set without overwriting unmanaged keys.</p>\n<p>If set to <code>false</code>, the path\n{file}<code>$GNUPGHOME/trustdb.gpg</code> will be\n<em>overwritten</em> on each activation, removing trust for\nany unmanaged keys. Be careful to make a backup of your old\n{file}<code>trustdb.gpg</code> before switching to immutable trust!</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "pkgs.gnupg", "description": "The gnupg package to use. Also used by the gpg-agent service.", "example": "pkgs.gnupg23", "loc": ["programs", "gpg", "package"], "readOnly": false, "title": "programs.gpg.package", "type": "package", "descriptionHTML": "<p>The gnupg package to use. Also used by the gpg-agent service.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "[ ]", "description": "A list of public keys to be imported into GnuPG. Note, these key files\nwill be copied into the world-readable Nix store.", "example": "[ { source = ./pubkeys.txt; } ]\n", "loc": ["programs", "gpg", "publicKeys"], "readOnly": false, "title": "programs.gpg.publicKeys", "type": "list of (submodule)", "descriptionHTML": "<p>A list of public keys to be imported into GnuPG. Note, these key files\nwill be copied into the world-readable Nix store.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "", "description": "Path of an OpenPGP public key file.", "example": "", "loc": ["programs", "gpg", "publicKeys", "*", "source"], "readOnly": false, "title": "programs.gpg.publicKeys.*.source", "type": "absolute path", "descriptionHTML": "<p>Path of an OpenPGP public key file.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "null", "description": "Text of an OpenPGP public key.", "example": "", "loc": ["programs", "gpg", "publicKeys", "*", "text"], "readOnly": false, "title": "programs.gpg.publicKeys.*.text", "type": "null or string", "descriptionHTML": "<p>Text of an OpenPGP public key.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "null", "description": "The amount of trust you have in the key ownership and the care the\nowner puts into signing other keys. The available levels are\nunknown or 1\n: I don't know or won't say.\nnever or 2\n: I do not trust.\nmarginal or 3\n: I trust marginally.\nfull or 4\n: I trust fully.\nultimate or 5\n: I trust ultimately.\nSee the Key Management chapter\nof the GNU Privacy Handbook for more.", "example": "", "loc": ["programs", "gpg", "publicKeys", "*", "trust"], "readOnly": false, "title": "programs.gpg.publicKeys.*.trust", "type": "null or one of \"unknown\", 1, \"never\", 2, \"marginal\", 3, \"full\", 4, \"ultimate\", 5", "descriptionHTML": "<p>The amount of trust you have in the key ownership and the care the\nowner puts into signing other keys. The available levels are</p>\n<p><code>unknown</code> or <code>1</code>\n: I don't know or won't say.</p>\n<p><code>never</code> or <code>2</code>\n: I do <strong>not</strong> trust.</p>\n<p><code>marginal</code> or <code>3</code>\n: I trust marginally.</p>\n<p><code>full</code> or <code>4</code>\n: I trust fully.</p>\n<p><code>ultimate</code> or <code>5</code>\n: I trust ultimately.</p>\n<p>See the <a href=\"https://www.gnupg.org/gph/en/manual/x334.html\">Key Management chapter</a>\nof the GNU Privacy Handbook for more.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "", "description": "SCdaemon configuration options. Available options are described\nin\n\n  {manpage}scdaemon(1)\n.", "example": "{\n  disable-ccid = true;\n}\n", "loc": ["programs", "gpg", "scdaemonSettings"], "readOnly": false, "title": "programs.gpg.scdaemonSettings", "type": "attribute set of (string or boolean or list of string)", "descriptionHTML": "<p>SCdaemon configuration options. Available options are described\nin\n<a href=\"https://www.gnupg.org/documentation/manuals/gnupg/Scdaemon-Options.html\">\n  {manpage}<code>scdaemon(1)</code>\n</a>.</p>"}, {"declarations": [{"name": "<programs/gpg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gpg.nix"}], "default": "", "description": "GnuPG configuration options. Available options are described\nin\n\n  {manpage}gpg(1)\n.\nNote that lists are converted to duplicate keys.", "example": "{\n  no-comments = false;\n  s2k-cipher-algo = \"AES128\";\n}\n", "loc": ["programs", "gpg", "settings"], "readOnly": false, "title": "programs.gpg.settings", "type": "attribute set of (string or boolean or list of string)", "descriptionHTML": "<p>GnuPG configuration options. Available options are described\nin\n<a href=\"https://gnupg.org/documentation/manpage.html\">\n  {manpage}<code>gpg(1)</code>\n</a>.</p>\n<p>Note that lists are converted to duplicate keys.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "false", "description": "Whether to enable Gradle Build Tool.", "example": "true", "loc": ["programs", "gradle", "enable"], "readOnly": false, "title": "programs.gradle.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Gradle Build Tool.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "\".gradle\"", "description": "The Gradle home directory, relative to .\nIf set, the {env}GRADLE_USER_HOME environment variable will be\nset accordingly. Defaults to {file}.gradle.", "example": "", "loc": ["programs", "gradle", "home"], "readOnly": false, "title": "programs.gradle.home", "type": "string", "descriptionHTML": "<p>The Gradle home directory, relative to <a href=\"#opt-home.homeDirectory\"></a>.</p>\n<p>If set, the {env}<code>GRADLE_USER_HOME</code> environment variable will be\nset accordingly. Defaults to {file}<code>.gradle</code>.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "{ }", "description": "Definition of init scripts to link into the Gradle home directory.\nFor more information about init scripts, including naming conventions\nsee https://docs.gradle.org/current/userguide/init_scripts.html.", "example": "{\n  \"maven-local.gradle\".text = ''\n      allProject {\n        repositories {\n          mavenLocal()\n        }\n      }\n  '';\n  \"another.init.gradle.kts\".source = ./another.init.gradle.kts;\n}\n", "loc": ["programs", "gradle", "initScripts"], "readOnly": false, "title": "programs.gradle.initScripts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Definition of init scripts to link into the Gradle home directory.</p>\n<p>For more information about init scripts, including naming conventions\nsee https://docs.gradle.org/current/userguide/init_scripts.html.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "", "description": "Path of the init script file. If\ntext is non-null then this option will automatically point\nto a file containing that text.", "example": "", "loc": ["programs", "gradle", "initScripts", "<name>", "source"], "readOnly": false, "title": "programs.gradle.initScripts.<name>.source", "type": "absolute path", "descriptionHTML": "<p>Path of the init script file. If\n<code>text</code> is non-null then this option will automatically point\nto a file containing that text.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "null", "description": "Text of the init script file. if this option is null\nthen source must be set.", "example": "", "loc": ["programs", "gradle", "initScripts", "<name>", "text"], "readOnly": false, "title": "programs.gradle.initScripts.<name>.text", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the init script file. if this option is null\nthen <code>source</code> must be set.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "pkgs.gradle", "description": "The gradle package to use.", "example": "pkgs.gradle_7", "loc": ["programs", "gradle", "package"], "readOnly": false, "title": "programs.gradle.package", "type": "null or package", "descriptionHTML": "<p>The gradle package to use.</p>"}, {"declarations": [{"name": "<programs/gradle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gradle.nix"}], "default": "{ }", "description": "Key value pairs to write to {file}gradle.properties in the Gradle\nhome directory.", "example": "{\n  \"org.gradle.caching\" = true;\n  \"org.gradle.parallel\" = true;\n  \"org.gradle.jvmargs\" = \"-XX:MaxMetaspaceSize=384m\";\n  \"org.gradle.home\" = pkgs.jdk17;\n};\n", "loc": ["programs", "gradle", "settings"], "readOnly": false, "title": "programs.gradle.settings", "type": "attribute set of (string, package, bool, int or float)", "descriptionHTML": "<p>Key value pairs to write to {file}<code>gradle.properties</code> in the Gradle\nhome directory.</p>"}, {"declarations": [{"name": "<programs/granted.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/granted.nix"}], "default": "false", "description": "Whether to enable granted.", "example": "true", "loc": ["programs", "granted", "enable"], "readOnly": false, "title": "programs.granted.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable granted.</p>"}, {"declarations": [{"name": "<programs/granted.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/granted.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "granted", "enableFishIntegration"], "readOnly": false, "title": "programs.granted.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/granted.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/granted.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "granted", "enableZshIntegration"], "readOnly": false, "title": "programs.granted.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/granted.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/granted.nix"}], "default": "pkgs.granted", "description": "The granted package to use.", "example": "", "loc": ["programs", "granted", "package"], "readOnly": false, "title": "programs.granted.package", "type": "package", "descriptionHTML": "<p>The granted package to use.</p>"}, {"declarations": [{"name": "<programs/gurk-rs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gurk-rs.nix"}], "default": "false", "description": "Whether to enable gurk-rs.", "example": "true", "loc": ["programs", "gurk-rs", "enable"], "readOnly": false, "title": "programs.gurk-rs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable gurk-rs.</p>"}, {"declarations": [{"name": "<programs/gurk-rs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gurk-rs.nix"}], "default": "pkgs.gurk-rs", "description": "The gurk-rs package to use.", "example": "", "loc": ["programs", "gurk-rs", "package"], "readOnly": false, "title": "programs.gurk-rs.package", "type": "null or package", "descriptionHTML": "<p>The gurk-rs package to use.</p>"}, {"declarations": [{"name": "<programs/gurk-rs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/gurk-rs.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/.config/gurk/gurk.toml\nor {file}Library/Application Support/gurk/gurk.toml. Options are\ndeclared at https://github.com/boxdot/gurk-rs/blob/main/src/config.rs.\nNote that data_path and signal_db_path should be set.", "example": "{\n  data_path = \"/home/USERNAME/.local/share/gurk/gurk.data.json\";\n  signal_db_path = \"/home/USERNAME/.local/share/gurk/signal-db\";\n  first_name_only = false;\n  show_receipts = true;\n  notifications = true;\n  bell = true;\n  colored_messages = false;\n  default_keybindings = true;\n  user = {\n    name = \"MYNAME\";\n    phone_number = \"MYNUMBER\";\n  };\n  keybindings =  { };\n}\n", "loc": ["programs", "gurk-rs", "settings"], "readOnly": false, "title": "programs.gurk-rs.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/.config/gurk/gurk.toml</code>\nor {file}<code>Library/Application Support/gurk/gurk.toml</code>. Options are\ndeclared at <a href=\"https://github.com/boxdot/gurk-rs/blob/main/src/config.rs\">https://github.com/boxdot/gurk-rs/blob/main/src/config.rs</a>.\nNote that <code>data_path</code> and <code>signal_db_path</code> should be set.</p>"}, {"declarations": [{"name": "<programs/halloy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/halloy.nix"}], "default": "false", "description": "Whether to enable halloy.", "example": "true", "loc": ["programs", "halloy", "enable"], "readOnly": false, "title": "programs.halloy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable halloy.</p>"}, {"declarations": [{"name": "<programs/halloy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/halloy.nix"}], "default": "pkgs.halloy", "description": "The halloy package to use.", "example": "", "loc": ["programs", "halloy", "package"], "readOnly": false, "title": "programs.halloy.package", "type": "null or package", "descriptionHTML": "<p>The halloy package to use.</p>"}, {"declarations": [{"name": "<programs/halloy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/halloy.nix"}], "default": "{ }", "description": "Configuration settings for halloy. All available options can be\nfound here: https://halloy.chat/configuration/index.html. Note that\nhalloy requires at least one server to be configured, see example.", "example": "{\n  \"buffer.channel.topic\" = {\n    enabled = true;\n  };\n  \"servers.liberachat\" = {\n    channels = [\n      \"#halloy\"\n    ];\n    nickname = \"halloy-user\";\n    server = \"irc.libera.chat\";\n  };\n}", "loc": ["programs", "halloy", "settings"], "readOnly": false, "title": "programs.halloy.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for halloy. All available options can be\nfound here: <a href=\"https://halloy.chat/configuration/index.html\">https://halloy.chat/configuration/index.html</a>. Note that\nhalloy requires at least one <code>server</code> to be configured, see example.</p>"}, {"declarations": [{"name": "<programs/halloy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/halloy.nix"}], "default": "{ }", "description": "Each theme is written to {file}$XDG_CONFIG_HOME/halloy/themes/NAME.toml.\nSee https://halloy.chat/configuration/themes/index.html for more information.", "example": "{\n  my-theme = {\n    general = {\n      background = \"<string>\";\n      border = \"<string>\";\n      horizontal_rule = \"<string>\";\n      unread_indicator = \"<string>\";\n    };\n    text = {\n      primary = \"<string>\";\n      secondary = \"<string>\";\n      tertiary = \"<string>\";\n      success = \"<string>\";\n      error = \"<string>\";\n    };\n  };\n}\n", "loc": ["programs", "halloy", "themes"], "readOnly": false, "title": "programs.halloy.themes", "type": "attribute set of (TOML value or strings concatenated with \"\\n\" or absolute path)", "descriptionHTML": "<p>Each theme is written to {file}<code>$XDG_CONFIG_HOME/halloy/themes/NAME.toml</code>.\nSee <a href=\"https://halloy.chat/configuration/themes/index.html\">https://halloy.chat/configuration/themes/index.html</a> for more information.</p>"}, {"declarations": [{"name": "<programs/havoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/havoc.nix"}], "default": "false", "description": "Whether to enable Havoc terminal.", "example": "true", "loc": ["programs", "havoc", "enable"], "readOnly": false, "title": "programs.havoc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Havoc terminal.</p>"}, {"declarations": [{"name": "<programs/havoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/havoc.nix"}], "default": "pkgs.havoc", "description": "The havoc package to use.", "example": "", "loc": ["programs", "havoc", "package"], "readOnly": false, "title": "programs.havoc.package", "type": "null or package", "descriptionHTML": "<p>The havoc package to use.</p>"}, {"declarations": [{"name": "<programs/havoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/havoc.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/havoc.cfg. See https://raw.githubusercontent.com/ii8/havoc/master/havoc.cfg\nfor a list of available options.", "example": "{\n  child.program = \"bash\";\n  window.opacity = 240;\n  window.margin = no;\n  terminal = {\n    rows = 80;\n    columns = 24;\n    scrollback = 2000;\n  };\n  bind = {\n    \"C-S-c\" = \"copy\";\n    \"C-S-v\" = \"paste\";\n    \"C-S-r\" = \"reset\";\n    \"C-S-Delete\" = \"hard reset\";\n    \"C-S-j\" = \"scroll down\";\n    \"C-S-k\" = \"scroll up\";\n    \"C-S-Page_Down\" = \"scroll down page\";\n    \"C-S-Page_Up\" = \"scroll up page\";\n    \"C-S-End\" = \"scroll to bottom\";\n    \"C-S-Home\" = \"scroll to top\";\n  };\n}\n", "loc": ["programs", "havoc", "settings"], "readOnly": false, "title": "programs.havoc.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/havoc.cfg</code>. See <a href=\"https://raw.githubusercontent.com/ii8/havoc/master/havoc.cfg\">https://raw.githubusercontent.com/ii8/havoc/master/havoc.cfg</a>\nfor a list of available options.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "false", "description": "Whether to configure {command}hx as the default\neditor using the {env}EDITOR environment variable.", "example": "", "loc": ["programs", "helix", "defaultEditor"], "readOnly": false, "title": "programs.helix.defaultEditor", "type": "boolean", "descriptionHTML": "<p>Whether to configure {command}<code>hx</code> as the default\neditor using the {env}<code>EDITOR</code> environment variable.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "false", "description": "Whether to enable helix text editor.", "example": "true", "loc": ["programs", "helix", "enable"], "readOnly": false, "title": "programs.helix.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable helix text editor.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "\"\"", "description": "Extra lines to be appended to the config file.\nUse this if you would like to maintain order for helix settings (eg. for minor modes)", "example": "[keys.normal.g] # Reverse Alphabetical Order\nG = \"goto_file_end\"\ng = \"goto_file_start\"\n", "loc": ["programs", "helix", "extraConfig"], "readOnly": false, "title": "programs.helix.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines to be appended to the config file.\nUse this if you would like to maintain order for helix settings (eg. for minor modes)</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "[ ]", "description": "Extra packages available to hx.", "example": "[ pkgs.marksman ]", "loc": ["programs", "helix", "extraPackages"], "readOnly": false, "title": "programs.helix.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages available to hx.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "[ ]", "description": "List of paths that should be globally ignored for file picker.\nSupports the usual ignore and negative ignore (unignore) rules used in .gitignore files.", "example": "[\n  \".build/\"\n  \"!.gitignore\"\n]", "loc": ["programs", "helix", "ignores"], "readOnly": false, "title": "programs.helix.ignores", "type": "list of string", "descriptionHTML": "<p>List of paths that should be globally ignored for file picker.\nSupports the usual ignore and negative ignore (unignore) rules used in <code>.gitignore</code> files.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "{ }", "description": "Language specific configuration at\n{file}$XDG_CONFIG_HOME/helix/languages.toml.\nSee https://docs.helix-editor.com/languages.html\nfor more information.", "example": "{\n  language-server.typescript-language-server = with pkgs.nodePackages; {\n    command = \"${typescript-language-server}/bin/typescript-language-server\";\n    args = [ \"--stdio\" \"--tsserver-path=${typescript}/lib/node_modules/typescript/lib\" ];\n  };\n\n  language = [{\n    name = \"rust\";\n    auto-format = false;\n  }];\n}\n", "loc": ["programs", "helix", "languages"], "readOnly": false, "title": "programs.helix.languages", "type": "(TOML value) or (list of (TOML value)) convertible to it", "descriptionHTML": "<p>Language specific configuration at\n{file}<code>$XDG_CONFIG_HOME/helix/languages.toml</code>.</p>\n<p>See <a href=\"https://docs.helix-editor.com/languages.html\">https://docs.helix-editor.com/languages.html</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "pkgs.helix", "description": "The helix package to use.", "example": "pkgs.evil-helix", "loc": ["programs", "helix", "package"], "readOnly": false, "title": "programs.helix.package", "type": "package", "descriptionHTML": "<p>The helix package to use.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/helix/config.toml.\nSee https://docs.helix-editor.com/configuration.html\nfor the full list of options.", "example": "{\n  theme = \"base16\";\n  editor = {\n    line-number = \"relative\";\n    lsp.display-messages = true;\n  };\n  keys.normal = {\n    space.space = \"file_picker\";\n    space.w = \":w\";\n    space.q = \":q\";\n    esc = [ \"collapse_selection\" \"keep_primary_selection\" ];\n  };\n}\n", "loc": ["programs", "helix", "settings"], "readOnly": false, "title": "programs.helix.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/helix/config.toml</code>.</p>\n<p>See <a href=\"https://docs.helix-editor.com/configuration.html\">https://docs.helix-editor.com/configuration.html</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/helix.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/helix.nix"}], "default": "{ }", "description": "Each theme is written to\n{file}$XDG_CONFIG_HOME/helix/themes/theme-name.toml.\nWhere the name of each attribute is the theme-name (in the example \"base16\").\nSee https://docs.helix-editor.com/themes.html\nfor the full list of options.", "example": "{\n  base16 = let\n    transparent = \"none\";\n    gray = \"#665c54\";\n    dark-gray = \"#3c3836\";\n    white = \"#fbf1c7\";\n    black = \"#282828\";\n    red = \"#fb4934\";\n    green = \"#b8bb26\";\n    yellow = \"#fabd2f\";\n    orange = \"#fe8019\";\n    blue = \"#83a598\";\n    magenta = \"#d3869b\";\n    cyan = \"#8ec07c\";\n  in {\n    \"ui.menu\" = transparent;\n    \"ui.menu.selected\" = { modifiers = [ \"reversed\" ]; };\n    \"ui.linenr\" = { fg = gray; bg = dark-gray; };\n    \"ui.popup\" = { modifiers = [ \"reversed\" ]; };\n    \"ui.linenr.selected\" = { fg = white; bg = black; modifiers = [ \"bold\" ]; };\n    \"ui.selection\" = { fg = black; bg = blue; };\n    \"ui.selection.primary\" = { modifiers = [ \"reversed\" ]; };\n    \"comment\" = { fg = gray; };\n    \"ui.statusline\" = { fg = white; bg = dark-gray; };\n    \"ui.statusline.inactive\" = { fg = dark-gray; bg = white; };\n    \"ui.help\" = { fg = dark-gray; bg = white; };\n    \"ui.cursor\" = { modifiers = [ \"reversed\" ]; };\n    \"variable\" = red;\n    \"variable.builtin\" = orange;\n    \"constant.numeric\" = orange;\n    \"constant\" = orange;\n    \"attributes\" = yellow;\n    \"type\" = yellow;\n    \"ui.cursor.match\" = { fg = yellow; modifiers = [ \"underlined\" ]; };\n    \"string\" = green;\n    \"variable.other.member\" = red;\n    \"constant.character.escape\" = cyan;\n    \"function\" = blue;\n    \"constructor\" = blue;\n    \"special\" = blue;\n    \"keyword\" = magenta;\n    \"label\" = magenta;\n    \"namespace\" = blue;\n    \"diff.plus\" = green;\n    \"diff.delta\" = yellow;\n    \"diff.minus\" = red;\n    \"diagnostic\" = { modifiers = [ \"underlined\" ]; };\n    \"ui.gutter\" = { bg = black; };\n    \"info\" = blue;\n    \"hint\" = dark-gray;\n    \"debug\" = dark-gray;\n    \"warning\" = yellow;\n    \"error\" = red;\n  };\n}\n", "loc": ["programs", "helix", "themes"], "readOnly": false, "title": "programs.helix.themes", "type": "attribute set of (TOML value or absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Each theme is written to\n{file}<code>$XDG_CONFIG_HOME/helix/themes/theme-name.toml</code>.\nWhere the name of each attribute is the theme-name (in the example \"base16\").</p>\n<p>See <a href=\"https://docs.helix-editor.com/themes.html\">https://docs.helix-editor.com/themes.html</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "{ }", "description": "Configures {file}$XDG_CONFIG_HOME/hexchat/servlist.conf.", "example": "{\n  oftc = {\n    autojoin = [\n      \"#home-manager\"\n      \"#linux\"\n    ];\n    charset = \"UTF-8 (Unicode)\";\n    commands = [\n      \"ECHO Buzz Lightyear sent you a message: 'To Infinity... and Beyond!'\"\n    ];\n    loginMethod = sasl;\n    nickname = \"my_nickname\";\n    nickname2 = \"my_secondchoice\";\n    options = {\n      acceptInvalidSSLCertificates = false;\n      autoconnect = true;\n      bypassProxy = true;\n      connectToSelectedServerOnly = true;\n      useGlobalUserInformation = false;\n      forceSSL = false;\n    };\n    password = \"my_password\";\n    realName = \"my_realname\";\n    servers = [\n      \"irc.oftc.net\"\n    ];\n    userName = \"my_username\";\n  };\n}", "loc": ["programs", "hexchat", "channels"], "readOnly": false, "title": "programs.hexchat.channels", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Configures {file}<code>$XDG_CONFIG_HOME/hexchat/servlist.conf</code>.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "[ ]", "description": "Channels list to autojoin on connecting to server.", "example": "[\n  \"#home-manager\"\n  \"#linux\"\n  \"#nix\"\n]", "loc": ["programs", "hexchat", "channels", "<name>", "autojoin"], "readOnly": false, "title": "programs.hexchat.channels.<name>.autojoin", "type": "list of string", "descriptionHTML": "<p>Channels list to autojoin on connecting to server.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Character set.", "example": "\"UTF-8 (Unicode)\"", "loc": ["programs", "hexchat", "channels", "<name>", "charset"], "readOnly": false, "title": "programs.hexchat.channels.<name>.charset", "type": "null or string", "descriptionHTML": "<p>Character set.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "[ ]", "description": "Commands to be executed on connecting to server.", "example": "[ \"ECHO Greetings fellow Nixer! ]", "loc": ["programs", "hexchat", "channels", "<name>", "commands"], "readOnly": false, "title": "programs.hexchat.channels.<name>.commands", "type": "list of string", "descriptionHTML": "<p>Commands to be executed on connecting to server.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "The login method. The allowed options are:\nnull\n:  Default\n\"nickServMsg\"\n:  NickServ (/MSG NickServ + password)\n\"nickServ\"\n:  NickServ (/NICKSERV + password)\n\"challengeAuth\"\n:  Challenge Auth (username + password)\n\"sasl\"\n:  SASL (username + password)\n\"serverPassword\"\n:  Server password (/PASS password)\n\"saslExternal\"\n:  SASL EXTERNAL (cert)\n\"customCommands\"\n: Use \"commands\" field for auth. For example\n  nix\n  commands = [ \"/msg NickServ IDENTIFY my_password\" ]", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "loginMethod"], "readOnly": false, "title": "programs.hexchat.channels.<name>.loginMethod", "type": "null or one of \"challengeAuth\", \"customCommands\", \"nickServ\", \"nickServMsg\", \"sasl\", \"saslExternal\", \"serverPassword\"", "descriptionHTML": "<p>The login method. The allowed options are:</p>\n<p><code>null</code>\n:  Default</p>\n<p><code>\"nickServMsg\"</code>\n:  NickServ (<code>/MSG NickServ</code> + password)</p>\n<p><code>\"nickServ\"</code>\n:  NickServ (<code>/NICKSERV</code> + password)</p>\n<p><code>\"challengeAuth\"</code>\n:  Challenge Auth (username + password)</p>\n<p><code>\"sasl\"</code>\n:  SASL (username + password)</p>\n<p><code>\"serverPassword\"</code>\n:  Server password (<code>/PASS</code> password)</p>\n<p><code>\"saslExternal\"</code>\n:  SASL EXTERNAL (cert)</p>\n<p><code>\"customCommands\"</code>\n: Use \"commands\" field for auth. For example\n  <code>nix\n  commands = [ \"/msg NickServ IDENTIFY my_password\" ]</code></p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Primary nickname.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "nickname"], "readOnly": false, "title": "programs.hexchat.channels.<name>.nickname", "type": "null or string", "descriptionHTML": "<p>Primary nickname.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Secondary nickname.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "nickname2"], "readOnly": false, "title": "programs.hexchat.channels.<name>.nickname2", "type": "null or string", "descriptionHTML": "<p>Secondary nickname.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Channel options.", "example": "{\n  autoconnect = true;\n  useGlobalUserInformation = true;\n}", "loc": ["programs", "hexchat", "channels", "<name>", "options"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options", "type": "null or (submodule)", "descriptionHTML": "<p>Channel options.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "false", "description": "Accept invalid SSL certificates.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "options", "acceptInvalidSSLCertificates"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options.acceptInvalidSSLCertificates", "type": "null or boolean", "descriptionHTML": "<p>Accept invalid SSL certificates.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "false", "description": "Autoconnect to network.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "options", "autoconnect"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options.autoconnect", "type": "null or boolean", "descriptionHTML": "<p>Autoconnect to network.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "true", "description": "Bypass proxy.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "options", "bypassProxy"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options.bypassProxy", "type": "null or boolean", "descriptionHTML": "<p>Bypass proxy.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "true", "description": "Connect to selected server only.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "options", "connectToSelectedServerOnly"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options.connectToSelectedServerOnly", "type": "null or boolean", "descriptionHTML": "<p>Connect to selected server only.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "false", "description": "Use SSL for all servers.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "options", "forceSSL"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options.forceSSL", "type": "null or boolean", "descriptionHTML": "<p>Use SSL for all servers.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "false", "description": "Use global user information.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "options", "useGlobalUserInformation"], "readOnly": false, "title": "programs.hexchat.channels.<name>.options.useGlobalUserInformation", "type": "null or boolean", "descriptionHTML": "<p>Use global user information.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Password to use. Note this password will be readable by all user's\nin the Nix store.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "password"], "readOnly": false, "title": "programs.hexchat.channels.<name>.password", "type": "null or string", "descriptionHTML": "<p>Password to use. Note this password will be readable by all user's\nin the Nix store.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Real name. Is used to populate the real name field that appears when\nsomeone uses the WHOIS command on your nick.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "realName"], "readOnly": false, "title": "programs.hexchat.channels.<name>.realName", "type": "null or string", "descriptionHTML": "<p>Real name. Is used to populate the real name field that appears when\nsomeone uses the <code>WHOIS</code> command on your nick.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "[ ]", "description": "IRC Server Address List.", "example": "[\n  \"irc.oftc.net\"\n]", "loc": ["programs", "hexchat", "channels", "<name>", "servers"], "readOnly": false, "title": "programs.hexchat.channels.<name>.servers", "type": "list of string", "descriptionHTML": "<p>IRC Server Address List.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "User name. Part of your user@host hostmask that\nappears to other on IRC.", "example": "", "loc": ["programs", "hexchat", "channels", "<name>", "userName"], "readOnly": false, "title": "programs.hexchat.channels.<name>.userName", "type": "null or string", "descriptionHTML": "<p>User name. Part of your <code>user@host</code> hostmask that\nappears to other on IRC.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "false", "description": "Whether to enable HexChat, a graphical IRC client.", "example": "true", "loc": ["programs", "hexchat", "enable"], "readOnly": false, "title": "programs.hexchat.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable HexChat, a graphical IRC client.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "false", "description": "Enables overwriting HexChat configuration files\n({file}hexchat.conf, {file}servlist.conf).\nAny existing HexChat configuration will be lost. Make sure to back up\nany previous configuration before enabling this.\nEnabling this setting is recommended, because everytime HexChat\napplication is closed it overwrites Nix/Home Manager provided\nconfiguration files, causing:\n\nNix/Home Manager provided configuration to be out of sync with\n   actual active HexChat configuration.\nNix/Home Manager updates to be blocked until configuration files are\n   manually removed.", "example": "", "loc": ["programs", "hexchat", "overwriteConfigFiles"], "readOnly": false, "title": "programs.hexchat.overwriteConfigFiles", "type": "null or boolean", "descriptionHTML": "<p>Enables overwriting HexChat configuration files\n({file}<code>hexchat.conf</code>, {file}<code>servlist.conf</code>).\nAny existing HexChat configuration will be lost. Make sure to back up\nany previous configuration before enabling this.</p>\n<p>Enabling this setting is recommended, because everytime HexChat\napplication is closed it overwrites Nix/Home Manager provided\nconfiguration files, causing:</p>\n<ol>\n<li>Nix/Home Manager provided configuration to be out of sync with\n   actual active HexChat configuration.</li>\n<li>Nix/Home Manager updates to be blocked until configuration files are\n   manually removed.</li>\n</ol>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "pkgs.hexchat", "description": "The hexchat package to use.", "example": "", "loc": ["programs", "hexchat", "package"], "readOnly": false, "title": "programs.hexchat.package", "type": "null or package", "descriptionHTML": "<p>The hexchat package to use.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Configuration for {file}$XDG_CONFIG_HOME/hexchat/hexchat.conf, see\nhttps://hexchat.readthedocs.io/en/latest/settings.html#list-of-settings\nfor supported values.", "example": "{\n  irc_nick1 = \"mynick\";\n  irc_username = \"bob\";\n  irc_realname = \"Bart Simpson\";\n  text_font = \"Monospace 14\";\n};\n", "loc": ["programs", "hexchat", "settings"], "readOnly": false, "title": "programs.hexchat.settings", "type": "null or (attribute set of string)", "descriptionHTML": "<p>Configuration for {file}<code>$XDG_CONFIG_HOME/hexchat/hexchat.conf</code>, see\n<a href=\"https://hexchat.readthedocs.io/en/latest/settings.html#list-of-settings\">https://hexchat.readthedocs.io/en/latest/settings.html#list-of-settings</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/hexchat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hexchat.nix"}], "default": "null", "description": "Theme package for HexChat. Expects a derivation containing decompressed\ntheme files. Note, .hct files are actually ZIP files,\nas seen in example.", "example": "source = pkgs.fetchzip {\n  url = \"https://dl.hexchat.net/themes/Monokai.hct#Monokai.zip\";\n  sha256 = \"sha256-WCdgEr8PwKSZvBMs0fN7E2gOjNM0c2DscZGSKSmdID0=\";\n  stripRoot = false;\n};\n", "loc": ["programs", "hexchat", "theme"], "readOnly": false, "title": "programs.hexchat.theme", "type": "null or package", "descriptionHTML": "<p>Theme package for HexChat. Expects a derivation containing decompressed\ntheme files. Note, <code>.hct</code> files are actually ZIP files,\nas seen in example.</p>"}, {"declarations": [{"name": "<programs/himalaya.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/himalaya.nix"}], "default": "false", "description": "Whether to enable the email client Himalaya CLI.", "example": "true", "loc": ["programs", "himalaya", "enable"], "readOnly": false, "title": "programs.himalaya.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the email client Himalaya CLI.</p>"}, {"declarations": [{"name": "<programs/himalaya.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/himalaya.nix"}], "default": "pkgs.himalaya", "description": "The himalaya package to use.", "example": "", "loc": ["programs", "himalaya", "package"], "readOnly": false, "title": "programs.himalaya.package", "type": "null or package", "descriptionHTML": "<p>The himalaya package to use.</p>"}, {"declarations": [{"name": "<programs/himalaya.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/himalaya.nix"}], "default": "{ }", "description": "Himalaya CLI global configuration.\nSee https://github.com/pimalaya/himalaya/blob/master/config.sample.toml for supported values.", "example": "", "loc": ["programs", "himalaya", "settings"], "readOnly": false, "title": "programs.himalaya.settings", "type": "TOML value", "descriptionHTML": "<p>Himalaya CLI global configuration.\nSee <a href=\"https://github.com/pimalaya/himalaya/blob/master/config.sample.toml\">https://github.com/pimalaya/himalaya/blob/master/config.sample.toml</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/home-manager.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/home-manager.nix"}], "default": "false", "description": "Whether to enable Home Manager.", "example": "true", "loc": ["programs", "home-manager", "enable"], "readOnly": false, "title": "programs.home-manager.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Home Manager.</p>"}, {"declarations": [{"name": "<programs/home-manager.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/home-manager.nix"}], "default": "null", "description": "The default path to use for Home Manager. When\nnull, then the {file}home-manager\nchannel, {file}$HOME/.config/nixpkgs/home-manager, and\n{file}$HOME/.nixpkgs/home-manager will be attempted.", "example": "\"$HOME/devel/home-manager\"", "loc": ["programs", "home-manager", "path"], "readOnly": false, "title": "programs.home-manager.path", "type": "null or string", "descriptionHTML": "<p>The default path to use for Home Manager. When\n<code>null</code>, then the {file}<code>home-manager</code>\nchannel, {file}<code>$HOME/.config/nixpkgs/home-manager</code>, and\n{file}<code>$HOME/.nixpkgs/home-manager</code> will be attempted.</p>"}, {"declarations": [{"name": "<programs/hstr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hstr.nix"}], "default": "false", "description": "Whether to enable Bash And Zsh shell history suggest box - easily view, navigate, search and\nmanage your command history.", "example": "true", "loc": ["programs", "hstr", "enable"], "readOnly": false, "title": "programs.hstr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash And Zsh shell history suggest box - easily view, navigate, search and\nmanage your command history.</p>"}, {"declarations": [{"name": "<programs/hstr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hstr.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "hstr", "enableBashIntegration"], "readOnly": false, "title": "programs.hstr.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/hstr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hstr.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "hstr", "enableZshIntegration"], "readOnly": false, "title": "programs.hstr.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/hstr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hstr.nix"}], "default": "pkgs.hstr", "description": "The hstr package to use.", "example": "", "loc": ["programs", "hstr", "package"], "readOnly": false, "title": "programs.hstr.package", "type": "package", "descriptionHTML": "<p>The hstr package to use.</p>"}, {"declarations": [{"name": "<programs/htop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/htop.nix"}], "default": "false", "description": "Whether to enable htop.", "example": "true", "loc": ["programs", "htop", "enable"], "readOnly": false, "title": "programs.htop.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable htop.</p>"}, {"declarations": [{"name": "<programs/htop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/htop.nix"}], "default": "pkgs.htop", "description": "The htop package to use.", "example": "", "loc": ["programs", "htop", "package"], "readOnly": false, "title": "programs.htop.package", "type": "package", "descriptionHTML": "<p>The htop package to use.</p>"}, {"declarations": [{"name": "<programs/htop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/htop.nix"}], "default": "{ }", "description": "Configuration options to add to\n{file}$XDG_CONFIG_HOME/htop/htoprc.", "example": "{\n  color_scheme = 6;\n  cpu_count_from_one = 0;\n  delay = 15;\n  fields = with config.lib.htop.fields; [\n    PID\n    USER\n    PRIORITY\n    NICE\n    M_SIZE\n    M_RESIDENT\n    M_SHARE\n    STATE\n    PERCENT_CPU\n    PERCENT_MEM\n    TIME\n    COMM\n  ];\n  highlight_base_name = 1;\n  highlight_megabytes = 1;\n  highlight_threads = 1;\n} // (with config.lib.htop; leftMeters [\n  (bar \"AllCPUs2\")\n  (bar \"Memory\")\n  (bar \"Swap\")\n  (text \"Zram\")\n]) // (with config.lib.htop; rightMeters [\n  (text \"Tasks\")\n  (text \"LoadAverage\")\n  (text \"Uptime\")\n  (text \"Systemd\")\n]);\n", "loc": ["programs", "htop", "settings"], "readOnly": false, "title": "programs.htop.settings", "type": "attribute set of (boolean or signed integer or string or list of (signed integer or string))", "descriptionHTML": "<p>Configuration options to add to\n{file}<code>$XDG_CONFIG_HOME/htop/htoprc</code>.</p>"}, {"declarations": [{"name": "<programs/hwatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hwatch.nix"}], "default": "false", "description": "Whether to enable hwatch, a modern alternative to the {command}watch command\n.", "example": "true", "loc": ["programs", "hwatch", "enable"], "readOnly": false, "title": "programs.hwatch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable hwatch, a modern alternative to the {command}<code>watch</code> command\n.</p>"}, {"declarations": [{"name": "<programs/hwatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hwatch.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to {command}hwatch.\nThese will be used to populate the {env}HWATCH environment variable.", "example": "[\n  \"--exec\"\n  \"--precise\"\n]", "loc": ["programs", "hwatch", "extraArgs"], "readOnly": false, "title": "programs.hwatch.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to {command}<code>hwatch</code>.\nThese will be used to populate the {env}<code>HWATCH</code> environment variable.</p>"}, {"declarations": [{"name": "<programs/hwatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hwatch.nix"}], "default": "pkgs.hwatch", "description": "The hwatch package to use.", "example": "", "loc": ["programs", "hwatch", "package"], "readOnly": false, "title": "programs.hwatch.package", "type": "null or package", "descriptionHTML": "<p>The hwatch package to use.</p>"}, {"declarations": [{"name": "<programs/hyfetch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyfetch.nix"}], "default": "false", "description": "Whether to enable hyfetch.", "example": "true", "loc": ["programs", "hyfetch", "enable"], "readOnly": false, "title": "programs.hyfetch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable hyfetch.</p>"}, {"declarations": [{"name": "<programs/hyfetch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyfetch.nix"}], "default": "pkgs.hyfetch", "description": "The hyfetch package to use.", "example": "", "loc": ["programs", "hyfetch", "package"], "readOnly": false, "title": "programs.hyfetch.package", "type": "package", "descriptionHTML": "<p>The hyfetch package to use.</p>"}, {"declarations": [{"name": "<programs/hyfetch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyfetch.nix"}], "default": "{ }", "description": "JSON config for HyFetch", "example": "{\n  preset = \"rainbow\";\n  mode = \"rgb\";\n  color_align = {\n    mode = \"horizontal\";\n  };\n}\n", "loc": ["programs", "hyfetch", "settings"], "readOnly": false, "title": "programs.hyfetch.settings", "type": "JSON value", "descriptionHTML": "<p>JSON config for HyFetch</p>"}, {"declarations": [{"name": "<programs/hyprlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprlock.nix"}], "default": "false", "description": "Whether to enable Hyprlock, Hyprland's GPU-accelerated lock screen\nutility.\nNote that PAM must be configured to enable hyprlock to perform\nauthentication. The package installed through home-manager will not be\nable to unlock the session without this configuration.\nOn NixOS, it can be enabled using:\nnix\nsecurity.pam.services.hyprlock = {};", "example": "true", "loc": ["programs", "hyprlock", "enable"], "readOnly": false, "title": "programs.hyprlock.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Hyprlock, Hyprland's GPU-accelerated lock screen\nutility.</p>\n<p>Note that PAM must be configured to enable hyprlock to perform\nauthentication. The package installed through home-manager will <em>not</em> be\nable to unlock the session without this configuration.</p>\n<p>On NixOS, it can be enabled using:</p>\n<p><code>nix\nsecurity.pam.services.hyprlock = {};</code></p>"}, {"declarations": [{"name": "<programs/hyprlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprlock.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to ~/.config/hypr/hyprlock.conf.", "example": "", "loc": ["programs", "hyprlock", "extraConfig"], "readOnly": false, "title": "programs.hyprlock.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to <code>~/.config/hypr/hyprlock.conf</code>.</p>"}, {"declarations": [{"name": "<programs/hyprlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprlock.nix"}], "default": "[\n  \"$\"\n  \"bezier\"\n  \"monitor\"\n  \"size\"\n  \"source\"\n]", "description": "List of prefix of attributes to source at the top of the config.", "example": "[\n  \"$\"\n  \"bezier\"\n  \"monitor\"\n  \"size\"\n]", "loc": ["programs", "hyprlock", "importantPrefixes"], "readOnly": false, "title": "programs.hyprlock.importantPrefixes", "type": "list of string", "descriptionHTML": "<p>List of prefix of attributes to source at the top of the config.</p>"}, {"declarations": [{"name": "<programs/hyprlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprlock.nix"}], "default": "pkgs.hyprlock", "description": "The hyprlock package to use.", "example": "", "loc": ["programs", "hyprlock", "package"], "readOnly": false, "title": "programs.hyprlock.package", "type": "null or package", "descriptionHTML": "<p>The hyprlock package to use.</p>"}, {"declarations": [{"name": "<programs/hyprlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprlock.nix"}], "default": "{ }", "description": "Hyprlock configuration written in Nix. Entries with the same key should\nbe written as lists. Variables' and colors' names should be quoted. See\nhttps://wiki.hypr.land/Hypr-Ecosystem/hyprlock/ for more examples.", "example": "{\n  general = {\n    disable_loading_bar = true;\n    grace = 300;\n    hide_cursor = true;\n    no_fade_in = false;\n  };\n\n  background = [\n    {\n      path = \"screenshot\";\n      blur_passes = 3;\n      blur_size = 8;\n    }\n  ];\n\n  input-field = [\n    {\n      size = \"200, 50\";\n      position = \"0, -80\";\n      monitor = \"\";\n      dots_center = true;\n      fade_on_empty = false;\n      font_color = \"rgb(202, 211, 245)\";\n      inner_color = \"rgb(91, 96, 120)\";\n      outer_color = \"rgb(24, 25, 38)\";\n      outline_thickness = 5;\n      placeholder_text = '\\'<span foreground=\"##cad3f5\">Password...</span>'\\';\n      shadow_passes = 2;\n    }\n  ];\n}\n", "loc": ["programs", "hyprlock", "settings"], "readOnly": false, "title": "programs.hyprlock.settings", "type": "Hyprlock configuration value", "descriptionHTML": "<p>Hyprlock configuration written in Nix. Entries with the same key should\nbe written as lists. Variables' and colors' names should be quoted. See\n<a href=\"https://wiki.hypr.land/Hypr-Ecosystem/hyprlock/\">https://wiki.hypr.land/Hypr-Ecosystem/hyprlock/</a> for more examples.</p>"}, {"declarations": [{"name": "<programs/hyprlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprlock.nix"}], "default": "true", "description": "Whether to enable putting source entries at the top of the configuration\n.", "example": "true", "loc": ["programs", "hyprlock", "sourceFirst"], "readOnly": false, "title": "programs.hyprlock.sourceFirst", "type": "boolean", "descriptionHTML": "<p>Whether to enable putting source entries at the top of the configuration\n.</p>"}, {"declarations": [{"name": "<programs/hyprpanel/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprpanel/default.nix"}], "default": "true", "description": "Whether to check for other notification daemons.\nYou might want to set this to false, because hyprpanel's notification\ndaemon is buggy and you may prefer something else.", "example": "false", "loc": ["programs", "hyprpanel", "dontAssertNotificationDaemons"], "readOnly": false, "title": "programs.hyprpanel.dontAssertNotificationDaemons", "type": "boolean", "descriptionHTML": "<p>Whether to check for other notification daemons.</p>\n<p>You might want to set this to false, because hyprpanel's notification\ndaemon is buggy and you may prefer something else.</p>"}, {"declarations": [{"name": "<programs/hyprpanel/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprpanel/default.nix"}], "default": "false", "description": "Whether to enable HyprPanel.", "example": "true", "loc": ["programs", "hyprpanel", "enable"], "readOnly": false, "title": "programs.hyprpanel.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable HyprPanel.</p>"}, {"declarations": [{"name": "<programs/hyprpanel/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprpanel/default.nix"}], "default": "pkgs.hyprpanel", "description": "The hyprpanel package to use.", "example": "", "loc": ["programs", "hyprpanel", "package"], "readOnly": false, "title": "programs.hyprpanel.package", "type": "package", "descriptionHTML": "<p>The hyprpanel package to use.</p>"}, {"declarations": [{"name": "<programs/hyprpanel/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprpanel/default.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/hyprpanel/config.json.\nSee https://hyprpanel.com/configuration/settings.html#home-manager-module\nfor the full list of options.", "example": "bar.battery.label = true;\nbar.bluetooth.label = false;\nbar.clock.format = \"%H:%M:%S\";\nbar.layouts = {\n  \"*\" = {\n    left = [\n      \"dashboard\"\n      \"workspaces\"\n      \"media\"\n    ];\n    middle = [ \"windowtitle\" ];\n    right = [\n      \"volume\"\n      \"network\"\n      \"bluetooth\"\n      \"notifications\"\n    ];\n  };\n};\n", "loc": ["programs", "hyprpanel", "settings"], "readOnly": false, "title": "programs.hyprpanel.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/hyprpanel/config.json</code>.</p>\n<p>See <a href=\"https://hyprpanel.com/configuration/settings.html#home-manager-module\">https://hyprpanel.com/configuration/settings.html#home-manager-module</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/hyprpanel/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/hyprpanel/default.nix"}], "default": "true", "description": "Whether to enable HyprPanel systemd integration.", "example": "true", "loc": ["programs", "hyprpanel", "systemd", "enable"], "readOnly": false, "title": "programs.hyprpanel.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable HyprPanel systemd integration.</p>"}, {"declarations": [{"name": "<programs/i3bar-river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3bar-river.nix"}], "default": "false", "description": "Whether to enable i3bar-river.", "example": "true", "loc": ["programs", "i3bar-river", "enable"], "readOnly": false, "title": "programs.i3bar-river.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable i3bar-river.</p>"}, {"declarations": [{"name": "<programs/i3bar-river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3bar-river.nix"}], "default": "pkgs.i3bar-river", "description": "The i3bar-river package to use.", "example": "", "loc": ["programs", "i3bar-river", "package"], "readOnly": false, "title": "programs.i3bar-river.package", "type": "null or package", "descriptionHTML": "<p>The i3bar-river package to use.</p>"}, {"declarations": [{"name": "<programs/i3bar-river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3bar-river.nix"}], "default": "{ }", "description": "Configuration settings for i3bar-river. All available options can be\nfound here: https://github.com/MaxVerevkin/i3bar-river?tab=readme-ov-file#configuration.", "example": "{\n  background = \"#282828ff\";\n  color = \"#ffffffff\";\n  font = \"monospace 10\";\n  height = 24;\n  margin_bottom = 0;\n  margin_left = 0;\n  margin_top = 0;\n  separator = \"#9a8a62ff\";\n  \"wm.river\" = {\n    max_tag = 0;\n  };\n}", "loc": ["programs", "i3bar-river", "settings"], "readOnly": false, "title": "programs.i3bar-river.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for i3bar-river. All available options can be\nfound here: <a href=\"https://github.com/MaxVerevkin/i3bar-river?tab=readme-ov-file#configuration\">https://github.com/MaxVerevkin/i3bar-river?tab=readme-ov-file#configuration</a>.</p>"}, {"declarations": [{"name": "<programs/i3blocks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3blocks.nix"}], "default": "", "description": "Configuration written to i3blocks config", "example": "{\n  top = {\n    # The title block\n    title = {\n      interval = \"persist\";\n      command = \"xtitle -s\";\n    };\n  };\n  bottom = {\n    time = {\n      command = \"date +%r\";\n      interval = 1;\n    };\n    # Make sure this block comes after the time block\n    date = lib.hm.dag.entryAfter [ \"time\" ] {\n      command = \"date +%d\";\n      interval = 5;\n    };\n    # And this block after the example block\n    example = lib.hm.dag.entryAfter [ \"date\" ] {\n      command = \"echo hi $(date +%s)\";\n      interval = 3;\n    };\n  };\n}", "loc": ["programs", "i3blocks", "bars"], "readOnly": false, "title": "programs.i3blocks.bars", "type": "attribute set of (DAG of attribute set of (INI atom (null, int, bool, string, or float)))", "descriptionHTML": "<p>Configuration written to i3blocks config</p>"}, {"declarations": [{"name": "<programs/i3blocks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3blocks.nix"}], "default": "false", "description": "Whether to enable i3blocks i3 status command scheduler.", "example": "true", "loc": ["programs", "i3blocks", "enable"], "readOnly": false, "title": "programs.i3blocks.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable i3blocks i3 status command scheduler.</p>"}, {"declarations": [{"name": "<programs/i3blocks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3blocks.nix"}], "default": "pkgs.i3blocks", "description": "The i3blocks package to use.", "example": "", "loc": ["programs", "i3blocks", "package"], "readOnly": false, "title": "programs.i3blocks.package", "type": "package", "descriptionHTML": "<p>The i3blocks package to use.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "{\n  default = {\n    blocks = [\n      {\n        alert = 10.0;\n        block = \"disk_space\";\n        info_type = \"available\";\n        interval = 60;\n        path = \"/\";\n        warning = 20.0;\n      }\n      {\n        block = \"memory\";\n        format = \" $icon mem_used_percents \";\n        format_alt = \" $icon $swap_used_percents \";\n      }\n      {\n        block = \"cpu\";\n        interval = 1;\n      }\n      {\n        block = \"load\";\n        format = \" $icon $1m \";\n        interval = 1;\n      }\n      {\n        block = \"sound\";\n      }\n      {\n        block = \"time\";\n        format = \" $timestamp.datetime(f:'%a %d/%m %R') \";\n        interval = 60;\n      }\n    ];\n  };\n}", "description": "Attribute set of i3status-rust bars, each with their own configuration.\nEach bar {var}name generates a config file suffixed with\nthe bar's {var}name from the attribute set, like so:\n{file}config-${name}.toml.\nThis way, multiple config files can be generated, such as for having a\ntop and a bottom bar.\nSee\n{manpage}i3status-rust(1)\nfor options.", "example": "bottom = {\n  blocks = [\n    {\n       block = \"disk_space\";\n       path = \"/\";\n       info_type = \"available\";\n       interval = 60;\n       warning = 20.0;\n       alert = 10.0;\n     }\n     {\n       block = \"memory\";\n       format_mem = \" $icon $mem_used_percents \";\n       format_swap = \" $icon $swap_used_percents \";\n     }\n     {\n       block = \"cpu\";\n       interval = 1;\n     }\n     {\n       block = \"load\";\n       interval = 1;\n       format = \" $icon $1m \";\n     }\n     { block = \"sound\"; }\n     {\n       block = \"time\";\n       interval = 60;\n       format = \" $timestamp.datetime(f:'%a %d/%m %R') \";\n     }\n  ];\n  settings = {\n    theme =  {\n      theme = \"solarized-dark\";\n      overrides = {\n        idle_bg = \"#123456\";\n        idle_fg = \"#abcdef\";\n      };\n    };\n  };\n  icons = \"awesome5\";\n  theme = \"gruvbox-dark\";\n};\n", "loc": ["programs", "i3status-rust", "bars"], "readOnly": false, "title": "programs.i3status-rust.bars", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of i3status-rust bars, each with their own configuration.\nEach bar {var}<code>name</code> generates a config file suffixed with\nthe bar's {var}<code>name</code> from the attribute set, like so:\n{file}<code>config-${name}.toml</code>.</p>\n<p>This way, multiple config files can be generated, such as for having a\ntop and a bottom bar.</p>\n<p>See\n{manpage}<code>i3status-rust(1)</code>\nfor options.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "[\n  {\n    block = \"cpu\";\n  }\n  {\n    alert = 10.0;\n    block = \"disk_space\";\n    format = \" $icon root: $available.eng(w:2) \";\n    info_type = \"available\";\n    interval = 20;\n    path = \"/\";\n    warning = 20.0;\n  }\n  {\n    block = \"memory\";\n    format = \" $icon $mem_total_used_percents.eng(w:2) \";\n    format_alt = \" $icon_swap $swap_used_percents.eng(w:2) \";\n  }\n  {\n    block = \"sound\";\n    click = [\n      {\n        button = \"left\";\n        cmd = \"pavucontrol\";\n      }\n    ];\n  }\n  {\n    block = \"time\";\n    format = \" $timestamp.datetime(f:'%a %d/%m %R') \";\n    interval = 5;\n  }\n]", "description": "Configuration blocks to add to i3status-rust\n{file}config. See\nhttps://github.com/greshake/i3status-rust/blob/master/blocks.md\nfor block options.", "example": "[\n  {\n    block = \"disk_space\";\n    path = \"/\";\n    info_type = \"available\";\n    interval = 60;\n    warning = 20.0;\n    alert = 10.0;\n  }\n  {\n    block = \"sound\";\n    format = \" $icon $output_name {$volume.eng(w:2) |}\";\n    click = [\n      {\n        button = \"left\";\n        cmd = \"pavucontrol --tab=3\";\n      }\n    ];\n    mappings = {\n      \"alsa_output.pci-0000_00_1f.3.analog-stereo\" = \"\uf109\";\n      \"bluez_sink.70_26_05_DA_27_A4.a2dp_sink\" = \"\uf025\";\n    };\n  }\n];\n", "loc": ["programs", "i3status-rust", "bars", "<name>", "blocks"], "readOnly": false, "title": "programs.i3status-rust.bars.<name>.blocks", "type": "TOML value", "descriptionHTML": "<p>Configuration blocks to add to i3status-rust\n{file}<code>config</code>. See\n<a href=\"https://github.com/greshake/i3status-rust/blob/master/blocks.md\">https://github.com/greshake/i3status-rust/blob/master/blocks.md</a>\nfor block options.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "\"none\"", "description": "The icons set to use. See\nhttps://github.com/greshake/i3status-rust/blob/master/doc/themes.md\nfor a list of available icon sets.", "example": "\"awesome6\"", "loc": ["programs", "i3status-rust", "bars", "<name>", "icons"], "readOnly": false, "title": "programs.i3status-rust.bars.<name>.icons", "type": "string", "descriptionHTML": "<p>The icons set to use. See\n<a href=\"https://github.com/greshake/i3status-rust/blob/master/doc/themes.md\">https://github.com/greshake/i3status-rust/blob/master/doc/themes.md</a>\nfor a list of available icon sets.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "{ }", "description": "Any extra options to add to i3status-rust\n{file}config.", "example": "{\n  theme =  {\n    theme = \"solarized-dark\";\n    overrides = {\n      idle_bg = \"#123456\";\n      idle_fg = \"#abcdef\";\n    };\n  };\n}\n", "loc": ["programs", "i3status-rust", "bars", "<name>", "settings"], "readOnly": false, "title": "programs.i3status-rust.bars.<name>.settings", "type": "TOML value", "descriptionHTML": "<p>Any extra options to add to i3status-rust\n{file}<code>config</code>.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "\"plain\"", "description": "The theme to use. See\nhttps://github.com/greshake/i3status-rust/blob/master/doc/themes.md\nfor a list of available themes.", "example": "\"gruvbox-dark\"", "loc": ["programs", "i3status-rust", "bars", "<name>", "theme"], "readOnly": false, "title": "programs.i3status-rust.bars.<name>.theme", "type": "string", "descriptionHTML": "<p>The theme to use. See\n<a href=\"https://github.com/greshake/i3status-rust/blob/master/doc/themes.md\">https://github.com/greshake/i3status-rust/blob/master/doc/themes.md</a>\nfor a list of available themes.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "false", "description": "Whether to enable a replacement for i3-status written in Rust.", "example": "true", "loc": ["programs", "i3status-rust", "enable"], "readOnly": false, "title": "programs.i3status-rust.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable a replacement for i3-status written in Rust.</p>"}, {"declarations": [{"name": "<programs/i3status-rust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status-rust.nix"}], "default": "pkgs.i3status-rust", "description": "The i3status-rust package to use.", "example": "", "loc": ["programs", "i3status-rust", "package"], "readOnly": false, "title": "programs.i3status-rust.package", "type": "package", "descriptionHTML": "<p>The i3status-rust package to use.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "false", "description": "Whether to enable i3status.", "example": "true", "loc": ["programs", "i3status", "enable"], "readOnly": false, "title": "programs.i3status.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable i3status.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "true", "description": "Whether or not to enable\nthe default configuration.", "example": "", "loc": ["programs", "i3status", "enableDefault"], "readOnly": false, "title": "programs.i3status.enableDefault", "type": "boolean", "descriptionHTML": "<p>Whether or not to enable\nthe default configuration.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "{ }", "description": "Configuration to add to i3status {file}config\ngeneral section.\nSee\n{manpage}i3status(1)\nfor options.", "example": "{\n  colors = true;\n  color_good = \"#e0e0e0\";\n  color_degraded = \"#d7ae00\";\n  color_bad = \"#f69d6a\";\n  interval = 1;\n}\n", "loc": ["programs", "i3status", "general"], "readOnly": false, "title": "programs.i3status.general", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Configuration to add to i3status {file}<code>config</code>\n<code>general</code> section.\nSee\n{manpage}<code>i3status(1)</code>\nfor options.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "{ }", "description": "Modules to add to i3status {file}config file.\nSee\n{manpage}i3status(1)\nfor options.", "example": "{\n  \"volume master\" = {\n    position = 1;\n    settings = {\n      format = \"\u266a %volume\";\n      format_muted = \"\u266a muted (%volume)\";\n      device = \"pulse:1\";\n    };\n  };\n  \"disk /\" = {\n    position = 2;\n    settings = {\n      format = \"/ %avail\";\n    };\n  };\n}\n", "loc": ["programs", "i3status", "modules"], "readOnly": false, "title": "programs.i3status.modules", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Modules to add to i3status {file}<code>config</code> file.\nSee\n{manpage}<code>i3status(1)</code>\nfor options.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "true", "description": "Whether or not to enable this module.", "example": "", "loc": ["programs", "i3status", "modules", "<name>", "enable"], "readOnly": false, "title": "programs.i3status.modules.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether or not to enable this module.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "", "description": "Position of this module in i3status order.", "example": "", "loc": ["programs", "i3status", "modules", "<name>", "position"], "readOnly": false, "title": "programs.i3status.modules.<name>.position", "type": "signed integer or floating point number", "descriptionHTML": "<p>Position of this module in i3status <code>order</code>.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "{ }", "description": "Configuration to add to this i3status module.\nSee\n{manpage}i3status(1)\nfor options.", "example": "{\n  format = \"\u266a %volume\";\n  format_muted = \"\u266a muted (%volume)\";\n  device = \"pulse:1\";\n}\n", "loc": ["programs", "i3status", "modules", "<name>", "settings"], "readOnly": false, "title": "programs.i3status.modules.<name>.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Configuration to add to this i3status module.\nSee\n{manpage}<code>i3status(1)</code>\nfor options.</p>"}, {"declarations": [{"name": "<programs/i3status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/i3status.nix"}], "default": "pkgs.i3status", "description": "The i3status package to use.", "example": "", "loc": ["programs", "i3status", "package"], "readOnly": false, "title": "programs.i3status.package", "type": "null or package", "descriptionHTML": "<p>The i3status package to use.</p>"}, {"declarations": [{"name": "<programs/iamb.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/iamb.nix"}], "default": "false", "description": "Whether to enable iamb.", "example": "true", "loc": ["programs", "iamb", "enable"], "readOnly": false, "title": "programs.iamb.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable iamb.</p>"}, {"declarations": [{"name": "<programs/iamb.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/iamb.nix"}], "default": "pkgs.iamb", "description": "The iamb package to use.", "example": "", "loc": ["programs", "iamb", "package"], "readOnly": false, "title": "programs.iamb.package", "type": "null or package", "descriptionHTML": "<p>The iamb package to use.</p>"}, {"declarations": [{"name": "<programs/iamb.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/iamb.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/iamb/config.toml.\nSee https://iamb.chat/configure.html for the full list\nof options.", "example": "{\n  default_profile = \"personal\";\n  settings = {\n    notifications.enabled = true;\n    image_preview.protocol = {\n      type = \"kitty\";\n      size = {\n        height = 10;\n        width = 66;\n      };\n    };\n  };\n}\n", "loc": ["programs", "iamb", "settings"], "readOnly": false, "title": "programs.iamb.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/iamb/config.toml</code>.</p>\n<p>See <a href=\"https://iamb.chat/configure.html\">https://iamb.chat/configure.html</a> for the full list\nof options.</p>"}, {"declarations": [{"name": "<programs/imv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/imv.nix"}], "default": "false", "description": "Whether to enable imv: a command line image viewer intended for use with tiling window managers.", "example": "true", "loc": ["programs", "imv", "enable"], "readOnly": false, "title": "programs.imv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable imv: a command line image viewer intended for use with tiling window managers.</p>"}, {"declarations": [{"name": "<programs/imv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/imv.nix"}], "default": "pkgs.imv", "description": "The imv package to use.", "example": "", "loc": ["programs", "imv", "package"], "readOnly": false, "title": "programs.imv.package", "type": "null or package", "descriptionHTML": "<p>The imv package to use.</p>"}, {"declarations": [{"name": "<programs/imv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/imv.nix"}], "default": "{ }", "description": "Configuration options for imv. See\n{manpage}imv(5).", "example": "{\n  options.background = \"ffffff\";\n  aliases.x = \"close\";\n}\n", "loc": ["programs", "imv", "settings"], "readOnly": false, "title": "programs.imv.settings", "type": "attribute set of attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Configuration options for imv. See\n{manpage}<code>imv(5)</code>.</p>"}, {"declarations": [{"name": "<programs/info.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/info.nix"}], "default": "false", "description": "Whether to enable GNU Info.", "example": "true", "loc": ["programs", "info", "enable"], "readOnly": false, "title": "programs.info.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GNU Info.</p>"}, {"declarations": [{"name": "<programs/inori.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/inori.nix"}], "default": "false", "description": "Whether to enable inori.", "example": "true", "loc": ["programs", "inori", "enable"], "readOnly": false, "title": "programs.inori.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable inori.</p>"}, {"declarations": [{"name": "<programs/inori.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/inori.nix"}], "default": "pkgs.inori", "description": "The inori package to use.", "example": "", "loc": ["programs", "inori", "package"], "readOnly": false, "title": "programs.inori.package", "type": "null or package", "descriptionHTML": "<p>The inori package to use.</p>"}, {"declarations": [{"name": "<programs/inori.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/inori.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/inori/config.toml.\nSee https://github.com/eshrh/inori/blob/master/CONFIGURATION.md for available options.", "example": "{\n  seek_seconds = 10;\n  dvorak_keybindings = true;\n}\n", "loc": ["programs", "inori", "settings"], "readOnly": false, "title": "programs.inori.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/inori/config.toml</code>.</p>\n<p>See <a href=\"https://github.com/eshrh/inori/blob/master/CONFIGURATION.md\">https://github.com/eshrh/inori/blob/master/CONFIGURATION.md</a> for available options.</p>"}, {"declarations": [{"name": "<programs/ion.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ion.nix"}], "default": "false", "description": "Whether to enable the Ion Shell. Compatible with Redox and Linux.", "example": "true", "loc": ["programs", "ion", "enable"], "readOnly": false, "title": "programs.ion.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Ion Shell. Compatible with Redox and Linux.</p>"}, {"declarations": [{"name": "<programs/ion.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ion.nix"}], "default": "\"\"", "description": "Ion script which is called during ion initialization.", "example": "", "loc": ["programs", "ion", "initExtra"], "readOnly": false, "title": "programs.ion.initExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Ion script which is called during ion initialization.</p>"}, {"declarations": [{"name": "<programs/ion.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ion.nix"}], "default": "pkgs.ion", "description": "The ion package to use.", "example": "", "loc": ["programs", "ion", "package"], "readOnly": false, "title": "programs.ion.package", "type": "package", "descriptionHTML": "<p>The ion package to use.</p>"}, {"declarations": [{"name": "<programs/ion.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ion.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names\nin this option) to command strings or directly to build outputs.", "example": "{\n  g = \"git\";\n}\n", "loc": ["programs", "ion", "shellAliases"], "readOnly": false, "title": "programs.ion.shellAliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names\nin this option) to command strings or directly to build outputs.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "{ }", "description": "An attribute set that maps aliases to commands.", "example": "{\n  BYE = \"quit\";\n  J = \"join\";\n}", "loc": ["programs", "irssi", "aliases"], "readOnly": false, "title": "programs.irssi.aliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases to commands.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "false", "description": "Whether to enable the Irssi chat client.", "example": "true", "loc": ["programs", "irssi", "enable"], "readOnly": false, "title": "programs.irssi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Irssi chat client.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "\"\"", "description": "These lines are appended to the Irssi configuration.", "example": "", "loc": ["programs", "irssi", "extraConfig"], "readOnly": false, "title": "programs.irssi.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>These lines are appended to the Irssi configuration.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "{ }", "description": "An attribute set of chat networks.", "example": "{\n  liberachat = {\n    nick = \"hmuser\";\n    server = {\n      address = \"irc.libera.chat\";\n      port = 6697;\n      autoConnect = true;\n    };\n    channels = {\n      nixos.autoJoin = true;\n    };\n  };\n}\n", "loc": ["programs", "irssi", "networks"], "readOnly": false, "title": "programs.irssi.networks", "type": "attribute set of (submodule)", "descriptionHTML": "<p>An attribute set of chat networks.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "[ ]", "description": "List of commands to execute on connect.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "autoCommands"], "readOnly": false, "title": "programs.irssi.networks.<name>.autoCommands", "type": "list of string", "descriptionHTML": "<p>List of commands to execute on connect.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "{ }", "description": "Channels for the given network.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "channels"], "readOnly": false, "title": "programs.irssi.networks.<name>.channels", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Channels for the given network.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "false", "description": "Whether to join this channel on connect.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "channels", "<name>", "autoJoin"], "readOnly": false, "title": "programs.irssi.networks.<name>.channels.<name>.autoJoin", "type": "boolean", "descriptionHTML": "<p>Whether to join this channel on connect.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "", "description": "Nickname in that network.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "nick"], "readOnly": false, "title": "programs.irssi.networks.<name>.nick", "type": "string", "descriptionHTML": "<p>Nickname in that network.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "false", "description": "Enable SASL external authentication. This requires setting a path in\n.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "saslExternal"], "readOnly": false, "title": "programs.irssi.networks.<name>.saslExternal", "type": "boolean", "descriptionHTML": "<p>Enable SASL external authentication. This requires setting a path in\n<a href=\"#opt-programs.irssi.networks._name_.server.ssl.certificateFile\"></a>.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "", "description": "Address of the chat server.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "server", "address"], "readOnly": false, "title": "programs.irssi.networks.<name>.server.address", "type": "string", "descriptionHTML": "<p>Address of the chat server.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "false", "description": "Whether Irssi connects to the server on launch.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "server", "autoConnect"], "readOnly": false, "title": "programs.irssi.networks.<name>.server.autoConnect", "type": "boolean", "descriptionHTML": "<p>Whether Irssi connects to the server on launch.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "6667", "description": "Port of the chat server.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "server", "port"], "readOnly": false, "title": "programs.irssi.networks.<name>.server.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Port of the chat server.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "null", "description": "Path to a file containing the certificate used for\nclient authentication to the server.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "server", "ssl", "certificateFile"], "readOnly": false, "title": "programs.irssi.networks.<name>.server.ssl.certificateFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to a file containing the certificate used for\nclient authentication to the server.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "true", "description": "Whether SSL should be used.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "server", "ssl", "enable"], "readOnly": false, "title": "programs.irssi.networks.<name>.server.ssl.enable", "type": "boolean", "descriptionHTML": "<p>Whether SSL should be used.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "true", "description": "Whether the SSL certificate should be verified.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "server", "ssl", "verify"], "readOnly": false, "title": "programs.irssi.networks.<name>.server.ssl.verify", "type": "boolean", "descriptionHTML": "<p>Whether the SSL certificate should be verified.</p>"}, {"declarations": [{"name": "<programs/irssi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/irssi.nix"}], "default": "\"IRC\"", "description": "Type of the network.", "example": "", "loc": ["programs", "irssi", "networks", "<name>", "type"], "readOnly": false, "title": "programs.irssi.networks.<name>.type", "type": "string", "descriptionHTML": "<p>Type of the network.</p>"}, {"declarations": [{"name": "<programs/java.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/java.nix"}], "default": "false", "description": "Install the Java development kit and set the\n{env}JAVA_HOME variable.", "example": "true", "loc": ["programs", "java", "enable"], "readOnly": false, "title": "programs.java.enable", "type": "boolean", "descriptionHTML": "<p>Install the Java development kit and set the\n{env}<code>JAVA_HOME</code> variable.</p>"}, {"declarations": [{"name": "<programs/java.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/java.nix"}], "default": "pkgs.jdk", "description": "The java package to use.", "example": "pkgs.jre", "loc": ["programs", "java", "package"], "readOnly": false, "title": "programs.java.package", "type": "package", "descriptionHTML": "<p>The java package to use.</p>"}, {"declarations": [{"name": "<programs/jetbrains-remote.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jetbrains-remote.nix"}], "default": "false", "description": "Whether to enable JetBrains remote development system.", "example": "true", "loc": ["programs", "jetbrains-remote", "enable"], "readOnly": false, "title": "programs.jetbrains-remote.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable JetBrains remote development system.</p>"}, {"declarations": [{"name": "<programs/jetbrains-remote.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jetbrains-remote.nix"}], "default": "[ ]", "description": "IDEs accessible to the JetBrains remote development system.", "example": "with pkgs.jetbrains; [ clion pycharm-professional ];\n", "loc": ["programs", "jetbrains-remote", "ides"], "readOnly": false, "title": "programs.jetbrains-remote.ides", "type": "list of package", "descriptionHTML": "<p>IDEs accessible to the JetBrains remote development system.</p>"}, {"declarations": [{"name": "<programs/joplin-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joplin-desktop.nix"}], "default": "false", "description": "Whether to enable joplin-desktop.", "example": "true", "loc": ["programs", "joplin-desktop", "enable"], "readOnly": false, "title": "programs.joplin-desktop.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable joplin-desktop.</p>"}, {"declarations": [{"name": "<programs/joplin-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joplin-desktop.nix"}], "default": "{ }", "description": "Use this to add other options to the Joplin config file. Settings are\nwritten in JSON, so \"sync.interval\": 600 would be written as\n\"sync.interval\" = 600.", "example": "{\n  \"markdown.plugin.mark\" = true;\n  newNoteFocus = \"title\";\n}", "loc": ["programs", "joplin-desktop", "extraConfig"], "readOnly": false, "title": "programs.joplin-desktop.extraConfig", "type": "attribute set", "descriptionHTML": "<p>Use this to add other options to the Joplin config file. Settings are\nwritten in JSON, so <code>\"sync.interval\": 600</code> would be written as\n<code>\"sync.interval\" = 600</code>.</p>"}, {"declarations": [{"name": "<programs/joplin-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joplin-desktop.nix"}], "default": "null", "description": "The editor command (may include arguments) that will be used to open a\nnote. If none is provided Joplin will try to auto-detect the default\neditor.", "example": "\"kate\"", "loc": ["programs", "joplin-desktop", "general", "editor"], "readOnly": false, "title": "programs.joplin-desktop.general.editor", "type": "null or string", "descriptionHTML": "<p>The editor command (may include arguments) that will be used to open a\nnote. If none is provided Joplin will try to auto-detect the default\neditor.</p>"}, {"declarations": [{"name": "<programs/joplin-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joplin-desktop.nix"}], "default": "pkgs.joplin-desktop", "description": "The joplin-desktop package to use.", "example": "", "loc": ["programs", "joplin-desktop", "package"], "readOnly": false, "title": "programs.joplin-desktop.package", "type": "package", "descriptionHTML": "<p>The joplin-desktop package to use.</p>"}, {"declarations": [{"name": "<programs/joplin-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joplin-desktop.nix"}], "default": "\"undefined\"", "description": "Set the synchronisation interval.", "example": "\"10m\"", "loc": ["programs", "joplin-desktop", "sync", "interval"], "readOnly": false, "title": "programs.joplin-desktop.sync.interval", "type": "one of \"undefined\", \"disabled\", \"5m\", \"10m\", \"30m\", \"1h\", \"12h\", \"1d\"", "descriptionHTML": "<p>Set the synchronisation interval.</p>"}, {"declarations": [{"name": "<programs/joplin-desktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joplin-desktop.nix"}], "default": "\"undefined\"", "description": "What is the type of sync target.", "example": "\"dropbox\"", "loc": ["programs", "joplin-desktop", "sync", "target"], "readOnly": false, "title": "programs.joplin-desktop.sync.target", "type": "one of \"undefined\", \"none\", \"file-system\", \"onedrive\", \"nextcloud\", \"webdav\", \"dropbox\", \"s3\", \"joplin-server\", \"joplin-cloud\"", "descriptionHTML": "<p>What is the type of sync target.</p>"}, {"declarations": [{"name": "<programs/joshuto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joshuto.nix"}], "default": "false", "description": "Whether to enable joshuto file manager.", "example": "true", "loc": ["programs", "joshuto", "enable"], "readOnly": false, "title": "programs.joshuto.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable joshuto file manager.</p>"}, {"declarations": [{"name": "<programs/joshuto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joshuto.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/joshuto/keymap.toml.\nSee https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/keymap.toml.md\nfor the full list of options. Note that this option will overwrite any existing keybinds.", "example": "", "loc": ["programs", "joshuto", "keymap"], "readOnly": false, "title": "programs.joshuto.keymap", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/joshuto/keymap.toml</code>.</p>\n<p>See <a href=\"https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/keymap.toml.md\">https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/keymap.toml.md</a>\nfor the full list of options. Note that this option will overwrite any existing keybinds.</p>"}, {"declarations": [{"name": "<programs/joshuto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joshuto.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/joshuto/mimetype.toml.\nSee https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/mimetype.toml.md\nfor the full list of options", "example": "", "loc": ["programs", "joshuto", "mimetype"], "readOnly": false, "title": "programs.joshuto.mimetype", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/joshuto/mimetype.toml</code>.</p>\n<p>See <a href=\"https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/mimetype.toml.md\">https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/mimetype.toml.md</a>\nfor the full list of options</p>"}, {"declarations": [{"name": "<programs/joshuto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joshuto.nix"}], "default": "pkgs.joshuto", "description": "The joshuto package to use.", "example": "", "loc": ["programs", "joshuto", "package"], "readOnly": false, "title": "programs.joshuto.package", "type": "package", "descriptionHTML": "<p>The joshuto package to use.</p>"}, {"declarations": [{"name": "<programs/joshuto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joshuto.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/joshuto/joshuto.toml.\nSee https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/joshuto.toml.md\nfor the full list of options.", "example": "", "loc": ["programs", "joshuto", "settings"], "readOnly": false, "title": "programs.joshuto.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/joshuto/joshuto.toml</code>.</p>\n<p>See <a href=\"https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/joshuto.toml.md\">https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/joshuto.toml.md</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/joshuto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/joshuto.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/joshuto/theme.toml.\nSee https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/theme.toml.md\nfor the full list of options", "example": "", "loc": ["programs", "joshuto", "theme"], "readOnly": false, "title": "programs.joshuto.theme", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/joshuto/theme.toml</code>.</p>\n<p>See <a href=\"https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/theme.toml.md\">https://github.com/kamiyaa/joshuto/blob/main/docs/configuration/theme.toml.md</a>\nfor the full list of options</p>"}, {"declarations": [{"name": "<programs/jq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jq.nix"}], "default": "{\n  arrays = \"1;37\";\n  false = \"0;37\";\n  null = \"1;30\";\n  numbers = \"0;37\";\n  objectKeys = \"1;34\";\n  objects = \"1;37\";\n  strings = \"0;32\";\n  true = \"0;37\";\n}", "description": "The colors used in colored JSON output.\nSee the Colors section\nof the jq manual.", "example": "{\n  null       = \"1;30\";\n  false      = \"0;31\";\n  true       = \"0;32\";\n  numbers    = \"0;36\";\n  strings    = \"0;33\";\n  arrays     = \"1;35\";\n  objects    = \"1;37\";\n  objectKeys = \"1;34\";\n}\n", "loc": ["programs", "jq", "colors"], "readOnly": false, "title": "programs.jq.colors", "type": "submodule", "descriptionHTML": "<p>The colors used in colored JSON output.</p>\n<p>See the <a href=\"https://jqlang.github.io/jq/manual/#Colors\">Colors section</a>\nof the jq manual.</p>"}, {"declarations": [{"name": "<programs/jq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jq.nix"}], "default": "false", "description": "Whether to enable the jq command-line JSON processor.", "example": "true", "loc": ["programs", "jq", "enable"], "readOnly": false, "title": "programs.jq.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the jq command-line JSON processor.</p>"}, {"declarations": [{"name": "<programs/jq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jq.nix"}], "default": "pkgs.jq", "description": "The jq package to use.", "example": "", "loc": ["programs", "jq", "package"], "readOnly": false, "title": "programs.jq.package", "type": "package", "descriptionHTML": "<p>The jq package to use.</p>"}, {"declarations": [{"name": "<programs/jqp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jqp.nix"}], "default": "false", "description": "Whether to enable jqp, jq playground.", "example": "true", "loc": ["programs", "jqp", "enable"], "readOnly": false, "title": "programs.jqp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable jqp, jq playground.</p>"}, {"declarations": [{"name": "<programs/jqp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jqp.nix"}], "default": "pkgs.jqp", "description": "The jqp package to use.", "example": "", "loc": ["programs", "jqp", "package"], "readOnly": false, "title": "programs.jqp.package", "type": "null or package", "descriptionHTML": "<p>The jqp package to use.</p>"}, {"declarations": [{"name": "<programs/jqp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jqp.nix"}], "default": "{ }", "description": "Jqp configuration", "example": "{\n  theme = {\n    chromaStyleOverrides = {\n      kc = \"#009900 underline\";\n    };\n    name = \"monokai\";\n  };\n}", "loc": ["programs", "jqp", "settings"], "readOnly": false, "title": "programs.jqp.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Jqp configuration</p>"}, {"declarations": [{"name": "<programs/jujutsu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jujutsu.nix"}], "default": "config.programs.emacs.enable", "description": "Enable ediff as a merge tool", "example": "", "loc": ["programs", "jujutsu", "ediff"], "readOnly": false, "title": "programs.jujutsu.ediff", "type": "boolean", "descriptionHTML": "<p>Enable ediff as a merge tool</p>"}, {"declarations": [{"name": "<programs/jujutsu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jujutsu.nix"}], "default": "false", "description": "Whether to enable a Git-compatible DVCS that is both simple and powerful.", "example": "true", "loc": ["programs", "jujutsu", "enable"], "readOnly": false, "title": "programs.jujutsu.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable a Git-compatible DVCS that is both simple and powerful.</p>"}, {"declarations": [{"name": "<programs/jujutsu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jujutsu.nix"}], "default": "pkgs.jujutsu", "description": "The jujutsu package to use.", "example": "", "loc": ["programs", "jujutsu", "package"], "readOnly": false, "title": "programs.jujutsu.package", "type": "null or package", "descriptionHTML": "<p>The jujutsu package to use.</p>"}, {"declarations": [{"name": "<programs/jujutsu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/jujutsu.nix"}], "default": "{ }", "description": "Options to add to the {file}config.toml file. See\nhttps://github.com/martinvonz/jj/blob/main/docs/config.md\nfor options.", "example": "{\n  user = {\n    email = \"jdoe@example.org\";\n    name = \"John Doe\";\n  };\n}", "loc": ["programs", "jujutsu", "settings"], "readOnly": false, "title": "programs.jujutsu.settings", "type": "TOML value", "descriptionHTML": "<p>Options to add to the {file}<code>config.toml</code> file. See\n<a href=\"https://github.com/martinvonz/jj/blob/main/docs/config.md\">https://github.com/martinvonz/jj/blob/main/docs/config.md</a>\nfor options.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "{ }", "description": "Aliases written to {file}$XDG_CONFIG_HOME/k9s/aliases.yaml (linux)\nor {file}Library/Application Support/k9s/aliases.yaml (darwin). See\nhttps://k9scli.io/topics/aliases/ for supported values.", "example": "{\n  # Use pp as an alias for Pod\n  pp = \"v1/pods\";\n}\n", "loc": ["programs", "k9s", "aliases"], "readOnly": false, "title": "programs.k9s.aliases", "type": "YAML 1.1 value", "descriptionHTML": "<p>Aliases written to {file}<code>$XDG_CONFIG_HOME/k9s/aliases.yaml</code> (linux)\nor {file}<code>Library/Application Support/k9s/aliases.yaml</code> (darwin). See\n<a href=\"https://k9scli.io/topics/aliases/\">https://k9scli.io/topics/aliases/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "false", "description": "Whether to enable k9s - Kubernetes CLI To Manage Your Clusters In Style.", "example": "true", "loc": ["programs", "k9s", "enable"], "readOnly": false, "title": "programs.k9s.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable k9s - Kubernetes CLI To Manage Your Clusters In Style.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "{ }", "description": "Hotkeys written to {file}$XDG_CONFIG_HOME/k9s/hotkeys.yaml (linux)\nor {file}Library/Application Support/k9s/hotkeys.yaml (darwin). See\nhttps://k9scli.io/topics/hotkeys/ for supported values.", "example": "{\n  shift-0 = {\n    shortCut = \"Shift-0\";\n    description = \"Viewing pods\";\n    command = \"pods\";\n  };\n}\n", "loc": ["programs", "k9s", "hotKeys"], "readOnly": false, "title": "programs.k9s.hotKeys", "type": "YAML 1.1 value", "descriptionHTML": "<p>Hotkeys written to {file}<code>$XDG_CONFIG_HOME/k9s/hotkeys.yaml</code> (linux)\nor {file}<code>Library/Application Support/k9s/hotkeys.yaml</code> (darwin). See\n<a href=\"https://k9scli.io/topics/hotkeys/\">https://k9scli.io/topics/hotkeys/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "pkgs.k9s", "description": "The k9s package to use.", "example": "", "loc": ["programs", "k9s", "package"], "readOnly": false, "title": "programs.k9s.package", "type": "null or package", "descriptionHTML": "<p>The k9s package to use.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "{ }", "description": "Plugins written to {file}$XDG_CONFIG_HOME/k9s/plugins.yaml (linux)\nor {file}Library/Application Support/k9s/plugins.yaml (darwin). See\nhttps://k9scli.io/topics/plugins/ for supported values.", "example": "{\n  # Defines a plugin to provide a `ctrl-l` shortcut to\n  # tail the logs while in pod view.\n  fred = {\n    shortCut = \"Ctrl-L\";\n    description = \"Pod logs\";\n    scopes = [ \"po\" ];\n    command = \"kubectl\";\n    background = false;\n    args = [\n      \"logs\"\n      \"-f\"\n      \"$NAME\"\n      \"-n\"\n      \"$NAMESPACE\"\n      \"--context\"\n      \"$CLUSTER\"\n    ];\n  };\n}\n", "loc": ["programs", "k9s", "plugins"], "readOnly": false, "title": "programs.k9s.plugins", "type": "YAML 1.1 value", "descriptionHTML": "<p>Plugins written to {file}<code>$XDG_CONFIG_HOME/k9s/plugins.yaml (linux)</code>\nor {file}<code>Library/Application Support/k9s/plugins.yaml</code> (darwin). See\n<a href=\"https://k9scli.io/topics/plugins/\">https://k9scli.io/topics/plugins/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/k9s/config.yaml (linux)\nor {file}Library/Application Support/k9s/config.yaml (darwin), See\nhttps://k9scli.io/topics/config/ for supported values.", "example": "k9s = {\n  refreshRate = 2;\n};\n", "loc": ["programs", "k9s", "settings"], "readOnly": false, "title": "programs.k9s.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/k9s/config.yaml</code> (linux)\nor {file}<code>Library/Application Support/k9s/config.yaml</code> (darwin), See\n<a href=\"https://k9scli.io/topics/config/\">https://k9scli.io/topics/config/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "{ }", "description": "Skin files written to {file}$XDG_CONFIG_HOME/k9s/skins/ (linux)\nor {file}Library/Application Support/k9s/skins/ (darwin). See\nhttps://k9scli.io/topics/skins/ for supported values.", "example": "{\n  my_blue_skin = {\n    k9s = {\n      body = {\n        fgColor = \"dodgerblue\";\n      };\n    };\n  };\n  my_red_skin = ./red_skin.yaml;\n}\n", "loc": ["programs", "k9s", "skins"], "readOnly": false, "title": "programs.k9s.skins", "type": "attribute set of (YAML 1.1 value or absolute path)", "descriptionHTML": "<p>Skin files written to {file}<code>$XDG_CONFIG_HOME/k9s/skins/</code> (linux)\nor {file}<code>Library/Application Support/k9s/skins/</code> (darwin). See\n<a href=\"https://k9scli.io/topics/skins/\">https://k9scli.io/topics/skins/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/k9s.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/k9s.nix"}], "default": "{ }", "description": "Resource column views written to\n{file}$XDG_CONFIG_HOME/k9s/views.yaml (linux)\nor {file}Library/Application Support/k9s/views.yaml (darwin).\nSee https://k9scli.io/topics/columns/ for supported values.", "example": "{\n  \"v1/pods\" = {\n    columns = [\n      \"AGE\"\n      \"NAMESPACE\"\n      \"NAME\"\n      \"IP\"\n      \"NODE\"\n      \"STATUS\"\n      \"READY\"\n    ];\n  };\n}\n", "loc": ["programs", "k9s", "views"], "readOnly": false, "title": "programs.k9s.views", "type": "YAML 1.1 value", "descriptionHTML": "<p>Resource column views written to\n{file}<code>$XDG_CONFIG_HOME/k9s/views.yaml (linux)</code>\nor {file}<code>Library/Application Support/k9s/views.yaml</code> (darwin).\nSee <a href=\"https://k9scli.io/topics/columns/\">https://k9scli.io/topics/columns/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "A kakoune color schemes to add to your colors folder. This works\nbecause kakoune recursively checks\n{file}$XDG_CONFIG_HOME/kak/colors/. To apply the color scheme use\nprograms.kakoune.config.colorScheme = \"theme\".", "example": "pkgs.kakounePlugins.kakoune-catppuccin", "loc": ["programs", "kakoune", "colorSchemePackage"], "readOnly": false, "title": "programs.kakoune.colorSchemePackage", "type": "null or package", "descriptionHTML": "<p>A kakoune color schemes to add to your colors folder. This works\nbecause kakoune recursively checks\n{file}<code>$XDG_CONFIG_HOME/kak/colors/</code>. To apply the color scheme use\n<code>programs.kakoune.config.colorScheme = \"theme\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "{ }", "description": "kakoune configuration options.", "example": "", "loc": ["programs", "kakoune", "config"], "readOnly": false, "title": "programs.kakoune.config", "type": "null or (submodule)", "descriptionHTML": "<p>kakoune configuration options.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Use tabs for the align command.", "example": "", "loc": ["programs", "kakoune", "config", "alignWithTabs"], "readOnly": false, "title": "programs.kakoune.config.alignWithTabs", "type": "boolean", "descriptionHTML": "<p>Use tabs for the align command.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Modes in which to display possible completions.\nThe kakoune default is [ \"insert\" \"prompt\" ].", "example": "", "loc": ["programs", "kakoune", "config", "autoComplete"], "readOnly": false, "title": "programs.kakoune.config.autoComplete", "type": "null or (list of (one of \"insert\", \"prompt\"))", "descriptionHTML": "<p>Modes in which to display possible completions.\nThe kakoune default is <code>[ \"insert\" \"prompt\" ]</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Contexts in which to display automatic information box.\nThe kakoune default is [ \"command\" \"onkey\" ].", "example": "[\n  \"command\"\n  \"normal\"\n]", "loc": ["programs", "kakoune", "config", "autoInfo"], "readOnly": false, "title": "programs.kakoune.config.autoInfo", "type": "null or (list of (one of \"command\", \"onkey\", \"normal\"))", "descriptionHTML": "<p>Contexts in which to display automatic information box.\nThe kakoune default is <code>[ \"command\" \"onkey\" ]</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Reload buffers when an external modification is detected.\nThe kakoune default is \"ask\".", "example": "", "loc": ["programs", "kakoune", "config", "autoReload"], "readOnly": false, "title": "programs.kakoune.config.autoReload", "type": "null or one of \"yes\", \"no\", \"ask\"", "descriptionHTML": "<p>Reload buffers when an external modification is detected.\nThe kakoune default is <code>\"ask\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Set the color scheme. To see available schemes, enter\n{command}colorscheme at the kakoune prompt.", "example": "", "loc": ["programs", "kakoune", "config", "colorScheme"], "readOnly": false, "title": "programs.kakoune.config.colorScheme", "type": "null or string", "descriptionHTML": "<p>Set the color scheme. To see available schemes, enter\n{command}<code>colorscheme</code> at the kakoune prompt.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "[ ]", "description": "Global hooks. For documentation, see\nhttps://github.com/mawww/kakoune/blob/master/doc/pages/hooks.asciidoc.", "example": "", "loc": ["programs", "kakoune", "config", "hooks"], "readOnly": false, "title": "programs.kakoune.config.hooks", "type": "list of (submodule)", "descriptionHTML": "<p>Global hooks. For documentation, see\n<a href=\"https://github.com/mawww/kakoune/blob/master/doc/pages/hooks.asciidoc\">https://github.com/mawww/kakoune/blob/master/doc/pages/hooks.asciidoc</a>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "\"\"", "description": "Commands to run when the hook is activated.", "example": "\"set-option window indentwidth 2\"", "loc": ["programs", "kakoune", "config", "hooks", "*", "commands"], "readOnly": false, "title": "programs.kakoune.config.hooks.*.commands", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Commands to run when the hook is activated.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Add the hook to the named group.", "example": "", "loc": ["programs", "kakoune", "config", "hooks", "*", "group"], "readOnly": false, "title": "programs.kakoune.config.hooks.*.group", "type": "null or string", "descriptionHTML": "<p>Add the hook to the named group.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "", "description": "The name of the hook. For a description, see\nhttps://github.com/mawww/kakoune/blob/master/doc/pages/hooks.asciidoc#default-hooks.", "example": "\"SetOption\"", "loc": ["programs", "kakoune", "config", "hooks", "*", "name"], "readOnly": false, "title": "programs.kakoune.config.hooks.*.name", "type": "one of \"NormalIdle\", \"NormalKey\", \"InsertIdle\", \"InsertKey\", \"InsertChar\", \"InsertDelete\", \"InsertMove\", \"WinCreate\", \"WinClose\", \"WinResize\", \"WinDisplay\", \"WinSetOption\", \"BufSetOption\", \"BufNewFile\", \"BufOpenFile\", \"BufCreate\", \"BufWritePre\", \"BufWritePost\", \"BufReload\", \"BufClose\", \"BufOpenFifo\", \"BufReadFifo\", \"BufCloseFifo\", \"RuntimeError\", \"ModeChange\", \"PromptIdle\", \"GlobalSetOption\", \"KakBegin\", \"KakEnd\", \"FocusIn\", \"FocusOut\", \"RawKey\", \"InsertCompletionShow\", \"InsertCompletionHide\", \"ModuleLoaded\", \"ClientCreate\", \"ClientClose\", \"RegisterModified\", \"User\"", "descriptionHTML": "<p>The name of the hook. For a description, see\n<a href=\"https://github.com/mawww/kakoune/blob/master/doc/pages/hooks.asciidoc#default-hooks\">https://github.com/mawww/kakoune/blob/master/doc/pages/hooks.asciidoc#default-hooks</a>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Remove the hook after running it once.", "example": "", "loc": ["programs", "kakoune", "config", "hooks", "*", "once"], "readOnly": false, "title": "programs.kakoune.config.hooks.*.once", "type": "boolean", "descriptionHTML": "<p>Remove the hook after running it once.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Additional option to pass to the hook.", "example": "\"filetype=latex\"", "loc": ["programs", "kakoune", "config", "hooks", "*", "option"], "readOnly": false, "title": "programs.kakoune.config.hooks.*.option", "type": "null or string", "descriptionHTML": "<p>Additional option to pass to the hook.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "true", "description": "Execute a search as it is being typed.", "example": "", "loc": ["programs", "kakoune", "config", "incrementalSearch"], "readOnly": false, "title": "programs.kakoune.config.incrementalSearch", "type": "boolean", "descriptionHTML": "<p>Execute a search as it is being typed.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The width of an indentation in spaces.\nThe kakoune default is 4.\nIf 0, a tab will be used instead.", "example": "", "loc": ["programs", "kakoune", "config", "indentWidth"], "readOnly": false, "title": "programs.kakoune.config.indentWidth", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>The width of an indentation in spaces.\nThe kakoune default is <code>4</code>.\nIf <code>0</code>, a tab will be used instead.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "[ ]", "description": "User-defined key mappings. For documentation, see\nhttps://github.com/mawww/kakoune/blob/master/doc/pages/mapping.asciidoc.", "example": "", "loc": ["programs", "kakoune", "config", "keyMappings"], "readOnly": false, "title": "programs.kakoune.config.keyMappings", "type": "list of (submodule)", "descriptionHTML": "<p>User-defined key mappings. For documentation, see\n<a href=\"https://github.com/mawww/kakoune/blob/master/doc/pages/mapping.asciidoc\">https://github.com/mawww/kakoune/blob/master/doc/pages/mapping.asciidoc</a>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Optional documentation text to display in info boxes.", "example": "", "loc": ["programs", "kakoune", "config", "keyMappings", "*", "docstring"], "readOnly": false, "title": "programs.kakoune.config.keyMappings.*.docstring", "type": "null or string", "descriptionHTML": "<p>Optional documentation text to display in info boxes.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "", "description": "The sequence of keys to be mapped.", "example": "\":wq<ret>\"", "loc": ["programs", "kakoune", "config", "keyMappings", "*", "effect"], "readOnly": false, "title": "programs.kakoune.config.keyMappings.*.effect", "type": "string", "descriptionHTML": "<p>The sequence of keys to be mapped.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "", "description": "The key to be mapped. See\nhttps://github.com/mawww/kakoune/blob/master/doc/pages/mapping.asciidoc#mappable-keys\nfor possible values.", "example": "\"<a-x>\"", "loc": ["programs", "kakoune", "config", "keyMappings", "*", "key"], "readOnly": false, "title": "programs.kakoune.config.keyMappings.*.key", "type": "string", "descriptionHTML": "<p>The key to be mapped. See\n<a href=\"https://github.com/mawww/kakoune/blob/master/doc/pages/mapping.asciidoc#mappable-keys\">https://github.com/mawww/kakoune/blob/master/doc/pages/mapping.asciidoc#mappable-keys</a>\nfor possible values.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "", "description": "The mode in which the mapping takes effect.", "example": "\"user\"", "loc": ["programs", "kakoune", "config", "keyMappings", "*", "mode"], "readOnly": false, "title": "programs.kakoune.config.keyMappings.*.mode", "type": "string", "descriptionHTML": "<p>The mode in which the mapping takes effect.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Settings for the number lines highlighter.", "example": "", "loc": ["programs", "kakoune", "config", "numberLines"], "readOnly": false, "title": "programs.kakoune.config.numberLines", "type": "null or (submodule)", "descriptionHTML": "<p>Settings for the number lines highlighter.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Whether to enable the number lines highlighter.", "example": "true", "loc": ["programs", "kakoune", "config", "numberLines", "enable"], "readOnly": false, "title": "programs.kakoune.config.numberLines.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the number lines highlighter.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Highlight the cursor line with a separate face.", "example": "", "loc": ["programs", "kakoune", "config", "numberLines", "highlightCursor"], "readOnly": false, "title": "programs.kakoune.config.numberLines.highlightCursor", "type": "boolean", "descriptionHTML": "<p>Highlight the cursor line with a separate face.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Show line numbers relative to the main cursor line.", "example": "", "loc": ["programs", "kakoune", "config", "numberLines", "relative"], "readOnly": false, "title": "programs.kakoune.config.numberLines.relative", "type": "boolean", "descriptionHTML": "<p>Show line numbers relative to the main cursor line.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "String that separates the line number column from the\nbuffer contents. The kakoune default is\n\"|\".", "example": "", "loc": ["programs", "kakoune", "config", "numberLines", "separator"], "readOnly": false, "title": "programs.kakoune.config.numberLines.separator", "type": "null or string", "descriptionHTML": "<p>String that separates the line number column from the\nbuffer contents. The kakoune default is\n<code>\"|\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "How many lines and columns to keep visible around the cursor.", "example": "", "loc": ["programs", "kakoune", "config", "scrollOff"], "readOnly": false, "title": "programs.kakoune.config.scrollOff", "type": "null or (submodule)", "descriptionHTML": "<p>How many lines and columns to keep visible around the cursor.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "0", "description": "The number of columns to keep visible around the cursor.", "example": "", "loc": ["programs", "kakoune", "config", "scrollOff", "columns"], "readOnly": false, "title": "programs.kakoune.config.scrollOff.columns", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The number of columns to keep visible around the cursor.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "0", "description": "The number of lines to keep visible around the cursor.", "example": "", "loc": ["programs", "kakoune", "config", "scrollOff", "lines"], "readOnly": false, "title": "programs.kakoune.config.scrollOff.lines", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The number of lines to keep visible around the cursor.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Highlight the matching char of the character under the\nselections' cursor using the MatchingChar\nface.", "example": "", "loc": ["programs", "kakoune", "config", "showMatching"], "readOnly": false, "title": "programs.kakoune.config.showMatching", "type": "boolean", "descriptionHTML": "<p>Highlight the matching char of the character under the\nselections' cursor using the <code>MatchingChar</code>\nface.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Settings for the show whitespaces highlighter.", "example": "", "loc": ["programs", "kakoune", "config", "showWhitespace"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace", "type": "null or (submodule)", "descriptionHTML": "<p>Settings for the show whitespaces highlighter.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Whether to enable the show whitespace highlighter.", "example": "true", "loc": ["programs", "kakoune", "config", "showWhitespace", "enable"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the show whitespace highlighter.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The character to display for line feeds.\nThe kakoune default is \"\u00ac\".", "example": "", "loc": ["programs", "kakoune", "config", "showWhitespace", "lineFeed"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace.lineFeed", "type": "null or string", "descriptionHTML": "<p>The character to display for line feeds.\nThe kakoune default is <code>\"\u00ac\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The character to display for non-breaking spaces.\nThe kakoune default is \"\u237d\".", "example": "", "loc": ["programs", "kakoune", "config", "showWhitespace", "nonBreakingSpace"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace.nonBreakingSpace", "type": "null or string", "descriptionHTML": "<p>The character to display for non-breaking spaces.\nThe kakoune default is <code>\"\u237d\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The character to display for spaces.\nThe kakoune default is \"\u00b7\".", "example": "", "loc": ["programs", "kakoune", "config", "showWhitespace", "space"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace.space", "type": "null or string", "descriptionHTML": "<p>The character to display for spaces.\nThe kakoune default is <code>\"\u00b7\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The character to display for tabs.\nThe kakoune default is \"\u2192\".", "example": "", "loc": ["programs", "kakoune", "config", "showWhitespace", "tab"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace.tab", "type": "null or string", "descriptionHTML": "<p>The character to display for tabs.\nThe kakoune default is <code>\"\u2192\"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The character to append to tabs to reach the width of a tabstop.\nThe kakoune default is \" \".", "example": "", "loc": ["programs", "kakoune", "config", "showWhitespace", "tabStop"], "readOnly": false, "title": "programs.kakoune.config.showWhitespace.tabStop", "type": "null or string", "descriptionHTML": "<p>The character to append to tabs to reach the width of a tabstop.\nThe kakoune default is <code>\" \"</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "The width of a tab in spaces. The kakoune default is\n6.", "example": "", "loc": ["programs", "kakoune", "config", "tabStop"], "readOnly": false, "title": "programs.kakoune.config.tabStop", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>The width of a tab in spaces. The kakoune default is\n<code>6</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Settings for the ncurses interface.", "example": "", "loc": ["programs", "kakoune", "config", "ui"], "readOnly": false, "title": "programs.kakoune.config.ui", "type": "null or (submodule)", "descriptionHTML": "<p>Settings for the ncurses interface.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "\"clippy\"", "description": "The assistant displayed in info boxes.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "assistant"], "readOnly": false, "title": "programs.kakoune.config.ui.assistant", "type": "one of \"clippy\", \"cat\", \"dilbert\", \"none\"", "descriptionHTML": "<p>The assistant displayed in info boxes.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "true", "description": "Change color palette.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "changeColors"], "readOnly": false, "title": "programs.kakoune.config.ui.changeColors", "type": "boolean", "descriptionHTML": "<p>Change color palette.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Whether to enable mouse support.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "enableMouse"], "readOnly": false, "title": "programs.kakoune.config.ui.enableMouse", "type": "boolean", "descriptionHTML": "<p>Whether to enable mouse support.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Change the title of the terminal emulator.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "setTitle"], "readOnly": false, "title": "programs.kakoune.config.ui.setTitle", "type": "boolean", "descriptionHTML": "<p>Change the title of the terminal emulator.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Amount by which shifted function keys are offset. That\nis, if the terminal sends F13 for Shift-F1, this\nshould be 12.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "shiftFunctionKeys"], "readOnly": false, "title": "programs.kakoune.config.ui.shiftFunctionKeys", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>Amount by which shifted function keys are offset. That\nis, if the terminal sends F13 for Shift-F1, this\nshould be <code>12</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "\"bottom\"", "description": "Where to display the status line.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "statusLine"], "readOnly": false, "title": "programs.kakoune.config.ui.statusLine", "type": "one of \"top\", \"bottom\"", "descriptionHTML": "<p>Where to display the status line.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Bypass ncurses key parser and use an internal one.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "useBuiltinKeyParser"], "readOnly": false, "title": "programs.kakoune.config.ui.useBuiltinKeyParser", "type": "boolean", "descriptionHTML": "<p>Bypass ncurses key parser and use an internal one.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Button to send for wheel down events.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "wheelDownButton"], "readOnly": false, "title": "programs.kakoune.config.ui.wheelDownButton", "type": "null or string", "descriptionHTML": "<p>Button to send for wheel down events.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Button to send for wheel up events.", "example": "", "loc": ["programs", "kakoune", "config", "ui", "wheelUpButton"], "readOnly": false, "title": "programs.kakoune.config.ui.wheelUpButton", "type": "null or string", "descriptionHTML": "<p>Button to send for wheel up events.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Settings for the wrap lines highlighter.", "example": "", "loc": ["programs", "kakoune", "config", "wrapLines"], "readOnly": false, "title": "programs.kakoune.config.wrapLines", "type": "null or (submodule)", "descriptionHTML": "<p>Settings for the wrap lines highlighter.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Whether to enable the wrap lines highlighter.", "example": "true", "loc": ["programs", "kakoune", "config", "wrapLines", "enable"], "readOnly": false, "title": "programs.kakoune.config.wrapLines.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the wrap lines highlighter.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Preserve line indentation when wrapping.", "example": "", "loc": ["programs", "kakoune", "config", "wrapLines", "indent"], "readOnly": false, "title": "programs.kakoune.config.wrapLines.indent", "type": "boolean", "descriptionHTML": "<p>Preserve line indentation when wrapping.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Prefix wrapped lines with marker text.\nIf not null,\nthe marker text will be displayed in the indentation if possible.", "example": "\"\u23ce\"", "loc": ["programs", "kakoune", "config", "wrapLines", "marker"], "readOnly": false, "title": "programs.kakoune.config.wrapLines.marker", "type": "null or string", "descriptionHTML": "<p>Prefix wrapped lines with marker text.\nIf not <code>null</code>,\nthe marker text will be displayed in the indentation if possible.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "null", "description": "Wrap text at maxWidth, even if the window is wider.", "example": "", "loc": ["programs", "kakoune", "config", "wrapLines", "maxWidth"], "readOnly": false, "title": "programs.kakoune.config.wrapLines.maxWidth", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>Wrap text at maxWidth, even if the window is wider.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Wrap at word boundaries instead of codepoint boundaries.", "example": "", "loc": ["programs", "kakoune", "config", "wrapLines", "word"], "readOnly": false, "title": "programs.kakoune.config.wrapLines.word", "type": "boolean", "descriptionHTML": "<p>Wrap at word boundaries instead of codepoint boundaries.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Whether to configure {command}kak as the default\neditor using the {env}EDITOR environment variable.", "example": "", "loc": ["programs", "kakoune", "defaultEditor"], "readOnly": false, "title": "programs.kakoune.defaultEditor", "type": "boolean", "descriptionHTML": "<p>Whether to configure {command}<code>kak</code> as the default\neditor using the {env}<code>EDITOR</code> environment variable.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "false", "description": "Whether to enable the kakoune text editor.", "example": "true", "loc": ["programs", "kakoune", "enable"], "readOnly": false, "title": "programs.kakoune.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the kakoune text editor.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to\n{file}$XDG_CONFIG_HOME/kak/kakrc.", "example": "", "loc": ["programs", "kakoune", "extraConfig"], "readOnly": false, "title": "programs.kakoune.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to\n{file}<code>$XDG_CONFIG_HOME/kak/kakrc</code>.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "", "description": "Resulting customized kakoune package.", "example": "", "loc": ["programs", "kakoune", "finalPackage"], "readOnly": true, "title": "programs.kakoune.finalPackage", "type": "null or package", "descriptionHTML": "<p>Resulting customized kakoune package.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "pkgs.kakoune-unwrapped", "description": "The kakoune-unwrapped package to use.", "example": "", "loc": ["programs", "kakoune", "package"], "readOnly": false, "title": "programs.kakoune.package", "type": "null or package", "descriptionHTML": "<p>The kakoune-unwrapped package to use.</p>"}, {"declarations": [{"name": "<programs/kakoune.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kakoune.nix"}], "default": "[ ]", "description": "List of kakoune plugins to install. To get a list of\nsupported plugins run:\n{command}nix-env -f '&lt;nixpkgs&gt;' -qaP -A kakounePlugins.\nRequires package to not be set to have effect.", "example": "[ pkgs.kakounePlugins.kak-fzf ]", "loc": ["programs", "kakoune", "plugins"], "readOnly": false, "title": "programs.kakoune.plugins", "type": "list of package", "descriptionHTML": "<p>List of kakoune plugins to install. To get a list of\nsupported plugins run:\n{command}<code>nix-env -f '&lt;nixpkgs&gt;' -qaP -A kakounePlugins</code>.</p>\n<p>Requires <code>package</code> to not be set to have effect.</p>"}, {"declarations": [{"name": "<programs/keepassxc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keepassxc.nix"}], "default": "false", "description": "Whether to enable keepassxc.", "example": "true", "loc": ["programs", "keepassxc", "enable"], "readOnly": false, "title": "programs.keepassxc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable keepassxc.</p>"}, {"declarations": [{"name": "<programs/keepassxc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keepassxc.nix"}], "default": "pkgs.keepassxc", "description": "The keepassxc package to use.", "example": "", "loc": ["programs", "keepassxc", "package"], "readOnly": false, "title": "programs.keepassxc.package", "type": "null or package", "descriptionHTML": "<p>The keepassxc package to use.</p>"}, {"declarations": [{"name": "<programs/keepassxc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keepassxc.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/keepassxc/keepassxc.ini.\nSee https://github.com/keepassxreboot/keepassxc/blob/647272e9c5542297d3fcf6502e6173c96f12a9a0/src/core/Config.cpp#L49-L223\nfor the full list of options.", "example": "{\n  Browser.Enabled = true;\n\n  GUI = {\n    AdvancedSettings = true;\n    ApplicationTheme = \"dark\";\n    CompactMode = true;\n    HidePasswords = true;\n  };\n\n  SSHAgent.Enabled = true;\n}\n", "loc": ["programs", "keepassxc", "settings"], "readOnly": false, "title": "programs.keepassxc.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/keepassxc/keepassxc.ini</code>.</p>\n<p>See <a href=\"https://github.com/keepassxreboot/keepassxc/blob/647272e9c5542297d3fcf6502e6173c96f12a9a0/src/core/Config.cpp#L49-L223\">https://github.com/keepassxreboot/keepassxc/blob/647272e9c5542297d3fcf6502e6173c96f12a9a0/src/core/Config.cpp#L49-L223</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[ ]", "description": "Agents to add.", "example": "", "loc": ["programs", "keychain", "agents"], "readOnly": false, "title": "programs.keychain.agents", "type": "list of string", "descriptionHTML": "<p>Agents to add.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "false", "description": "Whether to enable keychain.", "example": "true", "loc": ["programs", "keychain", "enable"], "readOnly": false, "title": "programs.keychain.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable keychain.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "keychain", "enableBashIntegration"], "readOnly": false, "title": "programs.keychain.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "keychain", "enableFishIntegration"], "readOnly": false, "title": "programs.keychain.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "keychain", "enableNushellIntegration"], "readOnly": false, "title": "programs.keychain.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "true", "description": "Whether to run keychain from your {file}~/.xsession.", "example": "", "loc": ["programs", "keychain", "enableXsessionIntegration"], "readOnly": false, "title": "programs.keychain.enableXsessionIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to run keychain from your {file}<code>~/.xsession</code>.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "keychain", "enableZshIntegration"], "readOnly": false, "title": "programs.keychain.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[\n  \"--quiet\"\n]", "description": "Extra flags to pass to keychain.", "example": "", "loc": ["programs", "keychain", "extraFlags"], "readOnly": false, "title": "programs.keychain.extraFlags", "type": "list of string", "descriptionHTML": "<p>Extra flags to pass to keychain.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "null", "description": "Inherit type to attempt from agent variables from the environment.", "example": "", "loc": ["programs", "keychain", "inheritType"], "readOnly": false, "title": "programs.keychain.inheritType", "type": "null or one of \"local\", \"any\", \"local-once\", \"any-once\"", "descriptionHTML": "<p>Inherit type to attempt from agent variables from the environment.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "[\n  \"id_rsa\"\n]", "description": "Keys to add to keychain.", "example": "", "loc": ["programs", "keychain", "keys"], "readOnly": false, "title": "programs.keychain.keys", "type": "list of string", "descriptionHTML": "<p>Keys to add to keychain.</p>"}, {"declarations": [{"name": "<programs/keychain.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/keychain.nix"}], "default": "pkgs.keychain", "description": "The keychain package to use.", "example": "", "loc": ["programs", "keychain", "package"], "readOnly": false, "title": "programs.keychain.package", "type": "package", "descriptionHTML": "<p>The keychain package to use.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "false", "description": "Whether to enable khal, a CLI calendar application.", "example": "true", "loc": ["programs", "khal", "enable"], "readOnly": false, "title": "programs.khal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable khal, a CLI calendar application.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "{ }", "description": "khal locale settings.", "example": "", "loc": ["programs", "khal", "locale"], "readOnly": false, "title": "programs.khal.locale", "type": "submodule", "descriptionHTML": "<p>khal locale settings.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "\"%x\"", "description": "khal will display and understand all dates in this format.\nFormat strings are for Python strftime, similarly to\n{manpage}strftime(3).", "example": "", "loc": ["programs", "khal", "locale", "dateformat"], "readOnly": false, "title": "programs.khal.locale.dateformat", "type": "string", "descriptionHTML": "<p>khal will display and understand all dates in this format.</p>\n<p>Format strings are for Python <code>strftime</code>, similarly to\n{manpage}<code>strftime(3)</code>.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "\"%c\"", "description": "khal will display and understand all datetimes in this format.\nFormat strings are for Python strftime, similarly to\n{manpage}strftime(3).", "example": "", "loc": ["programs", "khal", "locale", "datetimeformat"], "readOnly": false, "title": "programs.khal.locale.datetimeformat", "type": "string", "descriptionHTML": "<p>khal will display and understand all datetimes in this format.</p>\n<p>Format strings are for Python <code>strftime</code>, similarly to\n{manpage}<code>strftime(3)</code>.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "null", "description": "Default for new events or if khal does not understand the timezone\nin an ical file.\nIf null, the timezone of your computer will be used.", "example": "", "loc": ["programs", "khal", "locale", "default_timezone"], "readOnly": false, "title": "programs.khal.locale.default_timezone", "type": "null or string", "descriptionHTML": "<p>Default for new events or if khal does not understand the timezone\nin an ical file.\nIf <code>null</code>, the timezone of your computer will be used.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "0", "description": "The first day of the week, where Monday is 0 and Sunday is 6.", "example": "", "loc": ["programs", "khal", "locale", "firstweekday"], "readOnly": false, "title": "programs.khal.locale.firstweekday", "type": "integer between 0 and 6 (both inclusive)", "descriptionHTML": "<p>The first day of the week, where Monday is 0 and Sunday is 6.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "null", "description": "khal will show all times in this timezone.\nIf null, the timezone of your computer will be used.", "example": "", "loc": ["programs", "khal", "locale", "local_timezone"], "readOnly": false, "title": "programs.khal.locale.local_timezone", "type": "null or string", "descriptionHTML": "<p>khal will show all times in this timezone.\nIf <code>null</code>, the timezone of your computer will be used.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "\"%x\"", "description": "khal will display and understand all dates in this format.\nIt should contain a year (e.g. %Y).\nFormat strings are for Python strftime, similarly to\n{manpage}strftime(3).", "example": "", "loc": ["programs", "khal", "locale", "longdateformat"], "readOnly": false, "title": "programs.khal.locale.longdateformat", "type": "string", "descriptionHTML": "<p>khal will display and understand all dates in this format.\nIt should contain a year (e.g. <code>%Y</code>).</p>\n<p>Format strings are for Python <code>strftime</code>, similarly to\n{manpage}<code>strftime(3)</code>.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "\"%c\"", "description": "khal will display and understand all datetimes in this format.\nIt should contain a year (e.g. %Y).\nFormat strings are for Python strftime, similarly to\n{manpage}strftime(3).", "example": "", "loc": ["programs", "khal", "locale", "longdatetimeformat"], "readOnly": false, "title": "programs.khal.locale.longdatetimeformat", "type": "string", "descriptionHTML": "<p>khal will display and understand all datetimes in this format.\nIt should contain a year (e.g. <code>%Y</code>).</p>\n<p>Format strings are for Python <code>strftime</code>, similarly to\n{manpage}<code>strftime(3)</code>.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "\"%X\"", "description": "khal will display and understand all times in this format.\nFormat strings are for Python strftime, similarly to\n{manpage}strftime(3).", "example": "", "loc": ["programs", "khal", "locale", "timeformat"], "readOnly": false, "title": "programs.khal.locale.timeformat", "type": "string", "descriptionHTML": "<p>khal will display and understand all times in this format.</p>\n<p>Format strings are for Python <code>strftime</code>, similarly to\n{manpage}<code>strftime(3)</code>.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "true", "description": "By default khal uses some Unicode symbols (as in \"non-ASCII\") as\nindicators for things like repeating events.\nIf your font, encoding etc. does not support those symbols, set this\nto false (this will enable ASCII-based replacements).", "example": "", "loc": ["programs", "khal", "locale", "unicode_symbols"], "readOnly": false, "title": "programs.khal.locale.unicode_symbols", "type": "boolean", "descriptionHTML": "<p>By default khal uses some Unicode symbols (as in \"non-ASCII\") as\nindicators for things like repeating events.\nIf your font, encoding etc. does not support those symbols, set this\nto false (this will enable ASCII-based replacements).</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "\"off\"", "description": "Enable week numbers in calendar and interactive (ikhal) mode.\nAs those are ISO week numbers, they only work properly if\n{option}firstweekday is set to 0.", "example": "", "loc": ["programs", "khal", "locale", "weeknumbers"], "readOnly": false, "title": "programs.khal.locale.weeknumbers", "type": "one of \"off\", \"left\", \"right\"", "descriptionHTML": "<p>Enable week numbers in calendar and interactive (ikhal) mode.\nAs those are ISO week numbers, they only work properly if\n{option}<code>firstweekday</code> is set to 0.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "pkgs.khal", "description": "The khal package to use.", "example": "", "loc": ["programs", "khal", "package"], "readOnly": false, "title": "programs.khal.package", "type": "null or package", "descriptionHTML": "<p>The khal package to use.</p>"}, {"declarations": [{"name": "<programs/khal/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khal/default.nix"}], "default": "{ }", "description": "Configuration options to add to the various sections in the configuration file.", "example": "{\n  default = {\n    default_calendar = \"Calendar\";\n    timedelta = \"5d\";\n  };\n  view = {\n    agenda_event_format =\n      \"{calendar-color}{cancelled}{start-end-time-style} {title}{repeat-symbol}{reset}\";\n  };\n}", "loc": ["programs", "khal", "settings"], "readOnly": false, "title": "programs.khal.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration options to add to the various sections in the configuration file.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}], "default": "false", "description": "Whether to enable Khard: an address book for the Unix console.", "example": "true", "loc": ["programs", "khard", "enable"], "readOnly": false, "title": "programs.khard.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Khard: an address book for the Unix console.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}], "default": "pkgs.khard", "description": "The khard package to use.", "example": "", "loc": ["programs", "khard", "package"], "readOnly": false, "title": "programs.khard.package", "type": "package", "descriptionHTML": "<p>The khard package to use.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}], "default": "{ }", "description": "Khard settings. See\nhttps://khard.readthedocs.io/en/latest/#configuration\nfor more information.", "example": "{\n  general = {\n    default_action = \"list\";\n    editor = [\"vim\" \"-i\" \"NONE\"];\n  };\n\n  \"contact table\" = {\n    display = \"formatted_name\";\n    preferred_phone_number_type = [\"pref\" \"cell\" \"home\"];\n    preferred_email_address_type = [\"pref\" \"work\" \"home\"];\n  };\n\n  vcard = {\n    private_objects = [\"Jabber\" \"Skype\" \"Twitter\"];\n  };\n}\n", "loc": ["programs", "khard", "settings"], "readOnly": false, "title": "programs.khard.settings", "type": "attribute set of attribute set of (boolean or string or list of string)", "descriptionHTML": "<p>Khard settings. See\n<a href=\"https://khard.readthedocs.io/en/latest/#configuration\">https://khard.readthedocs.io/en/latest/#configuration</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/khard.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/khard.nix"}], "default": "\"list\"", "description": "The default action to execute.", "example": "", "loc": ["programs", "khard", "settings", "general", "default_action"], "readOnly": false, "title": "programs.khard.settings.general.default_action", "type": "string", "descriptionHTML": "<p>The default action to execute.</p>"}, {"declarations": [{"name": "<programs/kickoff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kickoff.nix"}], "default": "false", "description": "Whether to enable kickoff.", "example": "true", "loc": ["programs", "kickoff", "enable"], "readOnly": false, "title": "programs.kickoff.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable kickoff.</p>"}, {"declarations": [{"name": "<programs/kickoff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kickoff.nix"}], "default": "pkgs.kickoff", "description": "The kickoff package to use.", "example": "", "loc": ["programs", "kickoff", "package"], "readOnly": false, "title": "programs.kickoff.package", "type": "null or package", "descriptionHTML": "<p>The kickoff package to use.</p>"}, {"declarations": [{"name": "<programs/kickoff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kickoff.nix"}], "default": "{ }", "description": "Configuration settings for kickoff. All the available options can be found\nhere: https://github.com/j0ru/kickoff/blob/main/assets/default_config.toml.", "example": "''\n  padding = 100;\n  font_size = 32;\n  search.show_hidden_files = false;\n  history.decrease_interval = 48;\n  \n  keybinding = {\n    paste = [ \"ctrl+v\" ];\n    execute = [ \"KP_Enter\" \"Return\" ];\n    complete = [ \"Tab\" ];\n  };\n''", "loc": ["programs", "kickoff", "settings"], "readOnly": false, "title": "programs.kickoff.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for kickoff. All the available options can be found\nhere: <a href=\"https://github.com/j0ru/kickoff/blob/main/assets/default_config.toml\">https://github.com/j0ru/kickoff/blob/main/assets/default_config.toml</a>.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "{ }", "description": "Define action aliases.", "example": "{\n  \"launch_tab\" = \"launch --cwd=current --type=tab\";\n  \"launch_window\" = \"launch --cwd=current --type=os-window\";\n}\n", "loc": ["programs", "kitty", "actionAliases"], "readOnly": false, "title": "programs.kitty.actionAliases", "type": "attribute set of string", "descriptionHTML": "<p>Define action aliases.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "null", "description": "Command-line options to use when launched by Mac OS GUI", "example": "[\n  \"--single-instance\"\n  \"--directory=/tmp/my-dir\"\n  \"--listen-on=unix:/tmp/my-socket\"\n]\n", "loc": ["programs", "kitty", "darwinLaunchOptions"], "readOnly": false, "title": "programs.kitty.darwinLaunchOptions", "type": "null or (list of string)", "descriptionHTML": "<p>Command-line options to use when launched by Mac OS GUI</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "false", "description": "Whether to enable Kitty terminal emulator.", "example": "true", "loc": ["programs", "kitty", "enable"], "readOnly": false, "title": "programs.kitty.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Kitty terminal emulator.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "false", "description": "Whether to enable git integration.", "example": "true", "loc": ["programs", "kitty", "enableGitIntegration"], "readOnly": false, "title": "programs.kitty.enableGitIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable git integration.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "{ }", "description": "Environment variables to set or override.", "example": "{\n  \"LS_COLORS\" = \"1\";\n}\n", "loc": ["programs", "kitty", "environment"], "readOnly": false, "title": "programs.kitty.environment", "type": "attribute set of string", "descriptionHTML": "<p>Environment variables to set or override.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "\"\"", "description": "Additional configuration to add.", "example": "", "loc": ["programs", "kitty", "extraConfig"], "readOnly": false, "title": "programs.kitty.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "null", "description": "The font to use.", "example": "", "loc": ["programs", "kitty", "font"], "readOnly": false, "title": "programs.kitty.font", "type": "null or (submodule)", "descriptionHTML": "<p>The font to use.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "", "description": "The family name of the font within the package.", "example": "\"DejaVu Sans\"", "loc": ["programs", "kitty", "font", "name"], "readOnly": false, "title": "programs.kitty.font.name", "type": "string", "descriptionHTML": "<p>The family name of the font within the package.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "null", "description": "Package providing the font. This package will be installed\nto your profile. If null then the font\nis assumed to already be available in your profile.", "example": "pkgs.dejavu_fonts", "loc": ["programs", "kitty", "font", "package"], "readOnly": false, "title": "programs.kitty.font.package", "type": "null or package", "descriptionHTML": "<p>Package providing the font. This package will be installed\nto your profile. If <code>null</code> then the font\nis assumed to already be available in your profile.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "null", "description": "The size of the font.", "example": "\"8\"", "loc": ["programs", "kitty", "font", "size"], "readOnly": false, "title": "programs.kitty.font.size", "type": "null or signed integer or floating point number", "descriptionHTML": "<p>The size of the font.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "{ }", "description": "Mapping of keybindings to actions.", "example": "{\n  \"ctrl+c\" = \"copy_or_interrupt\";\n  \"ctrl+f>2\" = \"set_font_size 20\";\n}\n", "loc": ["programs", "kitty", "keybindings"], "readOnly": false, "title": "programs.kitty.keybindings", "type": "attribute set of string", "descriptionHTML": "<p>Mapping of keybindings to actions.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "pkgs.kitty", "description": "The kitty package to use.", "example": "", "loc": ["programs", "kitty", "package"], "readOnly": false, "title": "programs.kitty.package", "type": "package", "descriptionHTML": "<p>The kitty package to use.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/kitty/kitty.conf. See\nhttps://sw.kovidgoyal.net/kitty/conf.html\nfor the documentation.", "example": "{\n  scrollback_lines = 10000;\n  enable_audio_bell = false;\n  update_check_interval = 0;\n}\n", "loc": ["programs", "kitty", "settings"], "readOnly": false, "title": "programs.kitty.settings", "type": "attribute set of (string or boolean or signed integer or floating point number)", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/kitty/kitty.conf</code>. See\n<a href=\"https://sw.kovidgoyal.net/kitty/conf.html\">https://sw.kovidgoyal.net/kitty/conf.html</a>\nfor the documentation.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "(cfg.shellIntegration.mode != null)\n&& !(elem \"disabled\" (splitString \" \" config.programs.kitty.shellIntegration.mode))\n", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "kitty", "shellIntegration", "enableBashIntegration"], "readOnly": false, "title": "programs.kitty.shellIntegration.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "(cfg.shellIntegration.mode != null)\n&& !(elem \"disabled\" (splitString \" \" config.programs.kitty.shellIntegration.mode))\n", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "kitty", "shellIntegration", "enableFishIntegration"], "readOnly": false, "title": "programs.kitty.shellIntegration.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "(cfg.shellIntegration.mode != null)\n&& !(elem \"disabled\" (splitString \" \" config.programs.kitty.shellIntegration.mode))\n", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "kitty", "shellIntegration", "enableZshIntegration"], "readOnly": false, "title": "programs.kitty.shellIntegration.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "\"no-rc\"", "description": "Set the mode of the shell integration. This accepts the same options\nas the shell_integration option of Kitty. Note that\nno-rc is always implied, unless this set to null. See\nhttps://sw.kovidgoyal.net/kitty/shell-integration\nfor more details.", "example": "\"no-cursor\"", "loc": ["programs", "kitty", "shellIntegration", "mode"], "readOnly": false, "title": "programs.kitty.shellIntegration.mode", "type": "null or string", "descriptionHTML": "<p>Set the mode of the shell integration. This accepts the same options\nas the <code>shell_integration</code> option of Kitty. Note that\n<code>no-rc</code> is always implied, unless this set to <code>null</code>. See\n<a href=\"https://sw.kovidgoyal.net/kitty/shell-integration\">https://sw.kovidgoyal.net/kitty/shell-integration</a>\nfor more details.</p>"}, {"declarations": [{"name": "<programs/kitty.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kitty.nix"}], "default": "null", "description": "Apply a Kitty color theme. This option takes the file name of a theme\nin kitty-themes, without the .conf suffix. See\nhttps://github.com/kovidgoyal/kitty-themes/tree/master/themes for a\nlist of themes.", "example": "\"SpaceGray_Eighties\"", "loc": ["programs", "kitty", "themeFile"], "readOnly": false, "title": "programs.kitty.themeFile", "type": "null or string", "descriptionHTML": "<p>Apply a Kitty color theme. This option takes the file name of a theme\nin <code>kitty-themes</code>, without the <code>.conf</code> suffix. See\n<a href=\"https://github.com/kovidgoyal/kitty-themes/tree/master/themes\">https://github.com/kovidgoyal/kitty-themes/tree/master/themes</a> for a\nlist of themes.</p>"}, {"declarations": [{"name": "<programs/kodi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kodi.nix"}], "default": "null", "description": "Attribute set with the plugin namespace as toplevel key and the plugins\nsettings as lower level key/value pairs.\nKodi will still show the settings of plugins configured via this\nmechanism in the GUI and they appear to be mutable. This however is\nnot the case and the settings will stay as specified via Home Manager.", "example": "{ \"service.xbmc.versioncheck\".versioncheck_enable = \"false\"; }\n", "loc": ["programs", "kodi", "addonSettings"], "readOnly": false, "title": "programs.kodi.addonSettings", "type": "null or (attribute set of attribute set of string)", "descriptionHTML": "<p>Attribute set with the plugin namespace as toplevel key and the plugins\nsettings as lower level key/value pairs.</p>\n<p>Kodi will still show the settings of plugins configured via this\nmechanism in the GUI and they appear to be mutable. This however is\nnot the case and the settings will stay as specified via Home Manager.</p>"}, {"declarations": [{"name": "<programs/kodi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kodi.nix"}], "default": "\"${config.home.homeDirectory}/.kodi\"", "description": "Directory to store configuration and metadata.", "example": "\"${config.xdg.dataHome}/kodi\"", "loc": ["programs", "kodi", "datadir"], "readOnly": false, "title": "programs.kodi.datadir", "type": "absolute path", "descriptionHTML": "<p>Directory to store configuration and metadata.</p>"}, {"declarations": [{"name": "<programs/kodi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kodi.nix"}], "default": "false", "description": "Whether to enable Kodi.", "example": "true", "loc": ["programs", "kodi", "enable"], "readOnly": false, "title": "programs.kodi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Kodi.</p>"}, {"declarations": [{"name": "<programs/kodi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kodi.nix"}], "default": "pkgs.kodi", "description": "The kodi package to use. Can be used to specify extensions.", "example": "pkgs.kodi.withPackages (exts: [ exts.pvr-iptvsimple ])", "loc": ["programs", "kodi", "package"], "readOnly": false, "title": "programs.kodi.package", "type": "package", "descriptionHTML": "<p>The kodi package to use. Can be used to specify extensions.</p>"}, {"declarations": [{"name": "<programs/kodi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kodi.nix"}], "default": "null", "description": "Configuration to write to the advancedsettings.xml\nfile in kodis userdata directory. Settings specified here will be\nimmutable from inside kodi and be hidden from the GUI settings dialog.\nSee https://kodi.wiki/view/Advancedsettings.xml as\nreference for how settings need to be specified.\nThe innermost attributes must be of type str.", "example": "{ videolibrary.showemptytvshows = \"true\"; }\n", "loc": ["programs", "kodi", "settings"], "readOnly": false, "title": "programs.kodi.settings", "type": "null or attribute sets or lists of strings", "descriptionHTML": "<p>Configuration to write to the <code>advancedsettings.xml</code>\nfile in kodis userdata directory. Settings specified here will be\nimmutable from inside kodi and be hidden from the GUI settings dialog.</p>\n<p>See <a href=\"https://kodi.wiki/view/Advancedsettings.xml\">https://kodi.wiki/view/Advancedsettings.xml</a> as\nreference for how settings need to be specified.</p>\n<p>The innermost attributes must be of type str.</p>"}, {"declarations": [{"name": "<programs/kodi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kodi.nix"}], "default": "null", "description": "Contents to populate the file sources.xml in kodis\nuserdata directory.\nSee https://kodi.wiki/view/Sources.xml as\nreference for how sources need to be specified.\nKodi will still show the dialogs to modify sources in the GUI and they\nappear to be mutable. This however is not the case and the sources will\nstay as specified via Home Manager.\nThe innermost attributes must be of type str.", "example": "{\n  video = {\n    default = \"movies\";\n    source = [\n      { name = \"videos\"; path = \"/path/to/videos\"; allowsharing = \"true\"; }\n      { name = \"movies\"; path = \"/path/to/movies\"; allowsharing = \"true\"; }\n    ];\n  };\n}\n", "loc": ["programs", "kodi", "sources"], "readOnly": false, "title": "programs.kodi.sources", "type": "null or attribute sets or lists of strings", "descriptionHTML": "<p>Contents to populate the file <code>sources.xml</code> in kodis\nuserdata directory.</p>\n<p>See <a href=\"https://kodi.wiki/view/Sources.xml\">https://kodi.wiki/view/Sources.xml</a> as\nreference for how sources need to be specified.</p>\n<p>Kodi will still show the dialogs to modify sources in the GUI and they\nappear to be mutable. This however is not the case and the sources will\nstay as specified via Home Manager.</p>\n<p>The innermost attributes must be of type str.</p>"}, {"declarations": [{"name": "<programs/kubecolor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubecolor.nix"}], "default": "false", "description": "Whether to enable kubecolor - Colorize your kubectl output.", "example": "true", "loc": ["programs", "kubecolor", "enable"], "readOnly": false, "title": "programs.kubecolor.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable kubecolor - Colorize your kubectl output.</p>"}, {"declarations": [{"name": "<programs/kubecolor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubecolor.nix"}], "default": "false", "description": "When set to true, it will create an alias for kubectl pointing to\nkubecolor, thus making kubecolor the default kubectl client.", "example": "", "loc": ["programs", "kubecolor", "enableAlias"], "readOnly": false, "title": "programs.kubecolor.enableAlias", "type": "boolean", "descriptionHTML": "<p>When set to true, it will create an alias for kubectl pointing to\nkubecolor, thus making kubecolor the default kubectl client.</p>"}, {"declarations": [{"name": "<programs/kubecolor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubecolor.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "kubecolor", "enableZshIntegration"], "readOnly": false, "title": "programs.kubecolor.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/kubecolor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubecolor.nix"}], "default": "pkgs.kubecolor", "description": "The kubecolor package to use.", "example": "", "loc": ["programs", "kubecolor", "package"], "readOnly": false, "title": "programs.kubecolor.package", "type": "package", "descriptionHTML": "<p>The kubecolor package to use.</p>"}, {"declarations": [{"name": "<programs/kubecolor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubecolor.nix"}], "default": "{ }", "description": "Configuration written to {file}~/.kube/color.yaml (Linux)\nor {file}Library/Application Support/kube/color.yaml (Darwin).\nSee https://kubecolor.github.io/reference/config/ for supported\nvalues.", "example": "kubectl = lib.getExe pkgs.kubectl\npreset = \"dark\";\npaging = \"auto\";\n", "loc": ["programs", "kubecolor", "settings"], "readOnly": false, "title": "programs.kubecolor.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>~/.kube/color.yaml</code> (Linux)\nor {file}<code>Library/Application Support/kube/color.yaml</code> (Darwin).\nSee <a href=\"https://kubecolor.github.io/reference/config/\">https://kubecolor.github.io/reference/config/</a> for supported\nvalues.</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "\"kswitch\"", "description": "The name of the command to use", "example": "", "loc": ["programs", "kubeswitch", "commandName"], "readOnly": false, "title": "programs.kubeswitch.commandName", "type": "string", "descriptionHTML": "<p>The name of the command to use</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "false", "description": "Whether to enable the kubectx for operators.", "example": "true", "loc": ["programs", "kubeswitch", "enable"], "readOnly": false, "title": "programs.kubeswitch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the kubectx for operators.</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "kubeswitch", "enableBashIntegration"], "readOnly": false, "title": "programs.kubeswitch.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "kubeswitch", "enableFishIntegration"], "readOnly": false, "title": "programs.kubeswitch.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "kubeswitch", "enableZshIntegration"], "readOnly": false, "title": "programs.kubeswitch.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "pkgs.kubeswitch", "description": "The kubeswitch package to use.", "example": "", "loc": ["programs", "kubeswitch", "package"], "readOnly": false, "title": "programs.kubeswitch.package", "type": "package", "descriptionHTML": "<p>The kubeswitch package to use.</p>"}, {"declarations": [{"name": "<programs/kubeswitch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/kubeswitch.nix"}], "default": "{ }", "description": "Configuration written to\n{file}~/.kube/switch-config.yaml.", "example": "{\n  kind = \"SwitchConfig\";\n  kubeconfigName = \"*.myconfig\";\n  kubeconfigStores = [\n    {\n      kind = \"filesystem\";\n      kubeconfigName = \"*.myconfig\";\n      paths = [\n        \"~/.kube/my-other-kubeconfigs/\"\n      ];\n    }\n  ];\n  version = \"v1alpha1\";\n}", "loc": ["programs", "kubeswitch", "settings"], "readOnly": false, "title": "programs.kubeswitch.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>~/.kube/switch-config.yaml</code>.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "\"stable\"", "description": "Lapce channel to configure.\nShould correspond to the package channel.\nThis is used to determine the correct configuration and data directories.", "example": "", "loc": ["programs", "lapce", "channel"], "readOnly": false, "title": "programs.lapce.channel", "type": "one of \"stable\", \"nightly\"", "descriptionHTML": "<p>Lapce channel to configure.\nShould correspond to the package channel.\nThis is used to determine the correct configuration and data directories.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "false", "description": "Whether to enable lapce.", "example": "true", "loc": ["programs", "lapce", "enable"], "readOnly": false, "title": "programs.lapce.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lapce.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "[ ]", "description": "Keymaps written to {file}$XDG_CONFIG_HOME/lapce/keymaps.toml.\nSee https://github.com/lapce/lapce/blob/master/defaults/keymaps-common.toml for examples.", "example": "[\n  {\n    command = \"open_log_file\";\n    key = \"Ctrl+Shift+L\";\n  }\n]\n", "loc": ["programs", "lapce", "keymaps"], "readOnly": false, "title": "programs.lapce.keymaps", "type": "TOML value", "descriptionHTML": "<p>Keymaps written to {file}<code>$XDG_CONFIG_HOME/lapce/keymaps.toml</code>.\nSee <a href=\"https://github.com/lapce/lapce/blob/master/defaults/keymaps-common.toml\">https://github.com/lapce/lapce/blob/master/defaults/keymaps-common.toml</a> for examples.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "pkgs.lapce", "description": "The lapce package to use.", "example": "", "loc": ["programs", "lapce", "package"], "readOnly": false, "title": "programs.lapce.package", "type": "null or package", "descriptionHTML": "<p>The lapce package to use.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "[ ]", "description": "Plugins to install.", "example": "[\n  {\n    author = \"MrFoxPro\";\n    name = \"lapce-nix\";\n    version = \"0.0.1\";\n    hash = \"sha256-...\";\n  }\n  {\n    author = \"dzhou121\";\n    name = \"lapce-rust\";\n    version = \"0.3.1932\";\n    hash = \"sha256-...\";\n  }\n]\n", "loc": ["programs", "lapce", "plugins"], "readOnly": false, "title": "programs.lapce.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>Plugins to install.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "", "description": "Author of the plugin.", "example": "", "loc": ["programs", "lapce", "plugins", "*", "author"], "readOnly": false, "title": "programs.lapce.plugins.*.author", "type": "string", "descriptionHTML": "<p>Author of the plugin.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "\"\"", "description": "Hash of the plugin tarball.\nTo find the hash leave this empty, rebuild and copy the hash from the error message.", "example": "", "loc": ["programs", "lapce", "plugins", "*", "hash"], "readOnly": false, "title": "programs.lapce.plugins.*.hash", "type": "string", "descriptionHTML": "<p>Hash of the plugin tarball.\nTo find the hash leave this empty, rebuild and copy the hash from the error message.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "", "description": "Name of the plugin.", "example": "", "loc": ["programs", "lapce", "plugins", "*", "name"], "readOnly": false, "title": "programs.lapce.plugins.*.name", "type": "string", "descriptionHTML": "<p>Name of the plugin.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "", "description": "Version of the plugin.", "example": "", "loc": ["programs", "lapce", "plugins", "*", "version"], "readOnly": false, "title": "programs.lapce.plugins.*.version", "type": "string", "descriptionHTML": "<p>Version of the plugin.</p>"}, {"declarations": [{"name": "<programs/lapce.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lapce.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/lapce/settings.toml.\nSee https://github.com/lapce/lapce/blob/master/extra/schemas/settings.json for schema.", "example": "{\n  core = {\n    custom-titlebar = false;\n    color-theme = \"Custom\";\n    icon-theme = \"Material Icons\";\n  };\n  editor = {\n    font-family = \"FiraCode Nerd Bold Font, monospace\";\n    font-size = 22;\n    tab-width = 2;\n    cursor-surrounding-lines = 4;\n    render-whitespace = \"all\";\n    bracket-pair-colorization = true;\n    highlight-matching-brackets = true;\n  };\n  ui = {\n    font-size = 20;\n    open-editors-visible = false;\n  };\n  lapce-nix.lsp-path = \"$\\{pkgs.nil\\}/bin/nil\";\n}\n", "loc": ["programs", "lapce", "settings"], "readOnly": false, "title": "programs.lapce.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/lapce/settings.toml</code>.\nSee <a href=\"https://github.com/lapce/lapce/blob/master/extra/schemas/settings.json\">https://github.com/lapce/lapce/blob/master/extra/schemas/settings.json</a> for schema.</p>"}, {"declarations": [{"name": "<programs/lazydocker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazydocker.nix"}], "default": "false", "description": "Whether to enable lazydocker, a simple terminal UI for both docker and docker compose.", "example": "true", "loc": ["programs", "lazydocker", "enable"], "readOnly": false, "title": "programs.lazydocker.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lazydocker, a simple terminal UI for both docker and docker compose.</p>"}, {"declarations": [{"name": "<programs/lazydocker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazydocker.nix"}], "default": "pkgs.lazydocker", "description": "The lazydocker package to use.", "example": "", "loc": ["programs", "lazydocker", "package"], "readOnly": false, "title": "programs.lazydocker.package", "type": "null or package", "descriptionHTML": "<p>The lazydocker package to use.</p>"}, {"declarations": [{"name": "<programs/lazydocker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazydocker.nix"}], "default": "{\n  commandTemplates = {\n    dockerCompose = \"docker compose\";\n  };\n}", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/lazydocker/config.yml\non Linux or on Darwin if  is set, otherwise\n{file}~/Library/Application Support/jesseduffield/lazydocker/config.yml.\nSee\nhttps://github.com/jesseduffield/lazydocker/blob/master/docs/Config.md\nfor supported values.", "example": "{\n  gui.theme = {\n    activeBorderColor = [\"red\" \"bold\"];\n    inactiveBorderColor = [\"blue\"];\n  };\n  commandTemplates.dockerCompose = \"docker compose compose -f docker-compose.yml\";\n}\n", "loc": ["programs", "lazydocker", "settings"], "readOnly": false, "title": "programs.lazydocker.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/lazydocker/config.yml</code>\non Linux or on Darwin if <a href=\"#opt-xdg.enable\"></a> is set, otherwise\n{file}<code>~/Library/Application Support/jesseduffield/lazydocker/config.yml</code>.\nSee\n<a href=\"https://github.com/jesseduffield/lazydocker/blob/master/docs/Config.md\">https://github.com/jesseduffield/lazydocker/blob/master/docs/Config.md</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/lazygit.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazygit.nix"}], "default": "false", "description": "Whether to enable lazygit, a simple terminal UI for git commands.", "example": "true", "loc": ["programs", "lazygit", "enable"], "readOnly": false, "title": "programs.lazygit.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lazygit, a simple terminal UI for git commands.</p>"}, {"declarations": [{"name": "<programs/lazygit.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazygit.nix"}], "default": "pkgs.lazygit", "description": "The lazygit package to use.", "example": "", "loc": ["programs", "lazygit", "package"], "readOnly": false, "title": "programs.lazygit.package", "type": "null or package", "descriptionHTML": "<p>The lazygit package to use.</p>"}, {"declarations": [{"name": "<programs/lazygit.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazygit.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/lazygit/config.yml\non Linux or on Darwin if  is set, otherwise\n{file}~/Library/Application Support/lazygit/config.yml.\nSee\nhttps://github.com/jesseduffield/lazygit/blob/master/docs/Config.md\nfor supported values.", "example": "{\n  gui.theme = {\n    lightTheme = true;\n    activeBorderColor = [ \"blue\" \"bold\" ];\n    inactiveBorderColor = [ \"black\" ];\n    selectedLineBgColor = [ \"default\" ];\n  };\n}\n", "loc": ["programs", "lazygit", "settings"], "readOnly": false, "title": "programs.lazygit.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/lazygit/config.yml</code>\non Linux or on Darwin if <a href=\"#opt-xdg.enable\"></a> is set, otherwise\n{file}<code>~/Library/Application Support/lazygit/config.yml</code>.\nSee\n<a href=\"https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md\">https://github.com/jesseduffield/lazygit/blob/master/docs/Config.md</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/lazysql.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazysql.nix"}], "default": "false", "description": "Whether to enable lazysql.", "example": "true", "loc": ["programs", "lazysql", "enable"], "readOnly": false, "title": "programs.lazysql.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lazysql.</p>"}, {"declarations": [{"name": "<programs/lazysql.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazysql.nix"}], "default": "pkgs.lazysql", "description": "The lazysql package to use.", "example": "", "loc": ["programs", "lazysql", "package"], "readOnly": false, "title": "programs.lazysql.package", "type": "null or package", "descriptionHTML": "<p>The lazysql package to use.</p>"}, {"declarations": [{"name": "<programs/lazysql.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lazysql.nix"}], "default": "{ }", "description": "Configuration settings for lazysql.", "example": "{ }", "loc": ["programs", "lazysql", "settings"], "readOnly": false, "title": "programs.lazysql.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for lazysql.</p>"}, {"declarations": [{"name": "<programs/ledger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ledger.nix"}], "default": "false", "description": "Whether to enable ledger, a double-entry accounting system.", "example": "true", "loc": ["programs", "ledger", "enable"], "readOnly": false, "title": "programs.ledger.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ledger, a double-entry accounting system.</p>"}, {"declarations": [{"name": "<programs/ledger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ledger.nix"}], "default": "\"\"", "description": "Extra configuration to add to\n{file}$XDG_CONFIG_HOME/ledger/ledgerrc.", "example": "--sort date\n--effective\n--date-format %Y-%m-%d\n", "loc": ["programs", "ledger", "extraConfig"], "readOnly": false, "title": "programs.ledger.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration to add to\n{file}<code>$XDG_CONFIG_HOME/ledger/ledgerrc</code>.</p>"}, {"declarations": [{"name": "<programs/ledger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ledger.nix"}], "default": "pkgs.ledger", "description": "The ledger package to use.", "example": "", "loc": ["programs", "ledger", "package"], "readOnly": false, "title": "programs.ledger.package", "type": "null or package", "descriptionHTML": "<p>The ledger package to use.</p>"}, {"declarations": [{"name": "<programs/ledger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ledger.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/ledger/ledgerrc.\nSee https://www.ledger-cli.org/3.0/doc/ledger3.html#Detailed-Option-Description\nfor explanation about possible values.", "example": "{\n  date-format = \"%Y-%m-%d\";\n  file = [\n    \"~/finances/journal.ledger\"\n    \"~/finances/assets.ledger\"\n    \"~/finances/income.ledger\"\n  ];\n  sort = \"date\";\n  strict = true;\n}", "loc": ["programs", "ledger", "settings"], "readOnly": false, "title": "programs.ledger.settings", "type": "attribute set of (boolean or signed integer or string or list of string)", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/ledger/ledgerrc</code>.\nSee <a href=\"https://www.ledger-cli.org/3.0/doc/ledger3.html#Detailed-Option-Description\">https://www.ledger-cli.org/3.0/doc/ledger3.html#Detailed-Option-Description</a>\nfor explanation about possible values.</p>"}, {"declarations": [{"name": "<programs/less.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/less.nix"}], "default": "false", "description": "Whether to enable less, opposite of more.", "example": "true", "loc": ["programs", "less", "enable"], "readOnly": false, "title": "programs.less.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable less, opposite of more.</p>"}, {"declarations": [{"name": "<programs/less.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/less.nix"}], "default": "\"\"", "description": "Extra configuration for {command}less written to\n{file}$XDG_CONFIG_HOME/lesskey.", "example": "''\n  s        back-line\n  t        forw-line\n''", "loc": ["programs", "less", "keys"], "readOnly": false, "title": "programs.less.keys", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration for {command}<code>less</code> written to\n{file}<code>$XDG_CONFIG_HOME/lesskey</code>.</p>"}, {"declarations": [{"name": "<programs/less.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/less.nix"}], "default": "pkgs.less", "description": "The less package to use.", "example": "", "loc": ["programs", "less", "package"], "readOnly": false, "title": "programs.less.package", "type": "null or package", "descriptionHTML": "<p>The less package to use.</p>"}, {"declarations": [{"name": "<programs/lesspipe.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lesspipe.nix"}], "default": "false", "description": "Whether to enable lesspipe preprocessor for less.", "example": "true", "loc": ["programs", "lesspipe", "enable"], "readOnly": false, "title": "programs.lesspipe.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lesspipe preprocessor for less.</p>"}, {"declarations": [{"name": "<programs/lesspipe.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lesspipe.nix"}], "default": "pkgs.lesspipe", "description": "The lesspipe package to use.", "example": "", "loc": ["programs", "lesspipe", "package"], "readOnly": false, "title": "programs.lesspipe.package", "type": "package", "descriptionHTML": "<p>The lesspipe package to use.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "{ }", "description": "Keys to bind to command line commands which can only be one of the\nbuiltin commands. Keys set to null or an empty string are deleted.", "example": "{ \"<c-g>\" = \"cmd-escape\"; }", "loc": ["programs", "lf", "cmdKeybindings"], "readOnly": false, "title": "programs.lf.cmdKeybindings", "type": "attribute set of (null or string)", "descriptionHTML": "<p>Keys to bind to command line commands which can only be one of the\nbuiltin commands. Keys set to null or an empty string are deleted.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "{ }", "description": "Commands to declare. Commands set to null or an empty string are\ndeleted.", "example": "{\n  get-mime-type = \"%xdg-mime query filetype \\\"$f\\\"\";\n  open = \"$$OPENER $f\";\n}", "loc": ["programs", "lf", "commands"], "readOnly": false, "title": "programs.lf.commands", "type": "attribute set of (null or string)", "descriptionHTML": "<p>Commands to declare. Commands set to null or an empty string are\ndeleted.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "false", "description": "Whether to enable lf.", "example": "true", "loc": ["programs", "lf", "enable"], "readOnly": false, "title": "programs.lf.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lf.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "\"\"", "description": "Custom lfrc lines.", "example": "''\n  $mkdir -p ~/.trash\n''", "loc": ["programs", "lf", "extraConfig"], "readOnly": false, "title": "programs.lf.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom lfrc lines.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "{ }", "description": "Keys to bind. Keys set to null or an empty string are deleted.", "example": "{\n  D = \"trash\";\n  U = \"!du -sh\";\n  gg = null;\n  gh = \"cd ~\";\n  i = \"$less $f\";\n}", "loc": ["programs", "lf", "keybindings"], "readOnly": false, "title": "programs.lf.keybindings", "type": "attribute set of (null or string)", "descriptionHTML": "<p>Keys to bind. Keys set to null or an empty string are deleted.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "pkgs.lf", "description": "The lf package to use.", "example": "", "loc": ["programs", "lf", "package"], "readOnly": false, "title": "programs.lf.package", "type": "package", "descriptionHTML": "<p>The lf package to use.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "null", "description": "Key to bind to the script at {var}previewer.source and\npipe through less. Setting to null will not bind any key.", "example": "\"i\"", "loc": ["programs", "lf", "previewer", "keybinding"], "readOnly": false, "title": "programs.lf.previewer.keybinding", "type": "null or string", "descriptionHTML": "<p>Key to bind to the script at {var}<code>previewer.source</code> and\npipe through less. Setting to null will not bind any key.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "null", "description": "Script or executable to use to preview files. Sets lf's\n{var}previewer option.", "example": "pkgs.writeShellScript \"pv.sh\" ''\n  #!/bin/sh\n\n  case \"$1\" in\n      *.tar*) tar tf \"$1\";;\n      *.zip) unzip -l \"$1\";;\n      *.rar) unrar l \"$1\";;\n      *.7z) 7z l \"$1\";;\n      *.pdf) pdftotext \"$1\" -;;\n      *) highlight -O ansi \"$1\" || cat \"$1\";;\n  esac\n''\n", "loc": ["programs", "lf", "previewer", "source"], "readOnly": false, "title": "programs.lf.previewer.source", "type": "null or absolute path", "descriptionHTML": "<p>Script or executable to use to preview files. Sets lf's\n{var}<code>previewer</code> option.</p>"}, {"declarations": [{"name": "<programs/lf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lf.nix"}], "default": "{ }", "description": "An attribute set of lf settings. See the lf documentation for\ndetailed descriptions of these options. Prefer\n{option}programs.lf.previewer.* for setting lf's {var}previewer\noption. All string options are quoted with double quotes.", "example": "{\n  number = true;\n  ratios = [\n    1\n    1\n    2\n  ];\n  tabstop = 4;\n}", "loc": ["programs", "lf", "settings"], "readOnly": false, "title": "programs.lf.settings", "type": "attribute set of (string or signed integer or list of (string or signed integer) or boolean)", "descriptionHTML": "<p>An attribute set of lf settings. See the lf documentation for\ndetailed descriptions of these options. Prefer\n{option}<code>programs.lf.previewer.*</code> for setting lf's {var}<code>previewer</code>\noption. All string options are quoted with double quotes.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Whether to enable LibreWolf. LibreWolf is a privacy enhanced Firefox fork.", "example": "true", "loc": ["programs", "librewolf", "enable"], "readOnly": false, "title": "programs.librewolf.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable LibreWolf. LibreWolf is a privacy enhanced Firefox fork.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Whether to enable the GNOME Shell native host connector. Note, you\nalso need to set the NixOS option\nservices.gnome.gnome-browser-connector.enable to\ntrue.", "example": "", "loc": ["programs", "librewolf", "enableGnomeExtensions"], "readOnly": false, "title": "programs.librewolf.enableGnomeExtensions", "type": "boolean", "descriptionHTML": "<p>Whether to enable the GNOME Shell native host connector. Note, you\nalso need to set the NixOS option\n<code>services.gnome.gnome-browser-connector.enable</code> to\n<code>true</code>.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "", "description": "Resulting LibreWolf package.", "example": "", "loc": ["programs", "librewolf", "finalPackage"], "readOnly": true, "title": "programs.librewolf.finalPackage", "type": "null or package", "descriptionHTML": "<p>Resulting LibreWolf package.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "[ ]", "description": "The language packs to install. Available language codes can be found\non the releases page:\nhttps://releases.mozilla.org/pub/firefox/releases/${version}/linux-x86_64/xpi/,\nreplacing ${version} with the version of LibreWolf you have. If\nthe version string of your Firefox derivative diverts from the upstream\nversion, try setting the release option.", "example": "[\n  \"en-GB\"\n  \"de\"\n]", "loc": ["programs", "librewolf", "languagePacks"], "readOnly": false, "title": "programs.librewolf.languagePacks", "type": "list of string", "descriptionHTML": "<p>The language packs to install. Available language codes can be found\non the releases page:\n<code>https://releases.mozilla.org/pub/firefox/releases/${version}/linux-x86_64/xpi/</code>,\nreplacing <code>${version}</code> with the version of LibreWolf you have. If\nthe version string of your Firefox derivative diverts from the upstream\nversion, try setting the <code>release</code> option.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "[ ]", "description": "Additional packages containing native messaging hosts that should be\nmade available to LibreWolf extensions.", "example": "", "loc": ["programs", "librewolf", "nativeMessagingHosts"], "readOnly": false, "title": "programs.librewolf.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>Additional packages containing native messaging hosts that should be\nmade available to LibreWolf extensions.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "pkgs.librewolf", "description": "The LibreWolf package to use. If state version \u2265 19.09 then\nthis should be a wrapped LibreWolf package. For earlier state\nversions it should be an unwrapped LibreWolf package.\nSet to null to disable installing LibreWolf.", "example": "pkgs.librewolf.override {\n  # See nixpkgs' firefox/wrapper.nix to check which options you can use\n  nativeMessagingHosts = [\n    # Gnome shell native connector\n    pkgs.gnome-browser-connector\n    # Tridactyl native connector\n    pkgs.tridactyl-native\n  ];\n}\n", "loc": ["programs", "librewolf", "package"], "readOnly": false, "title": "programs.librewolf.package", "type": "null or package", "descriptionHTML": "<p>The LibreWolf package to use. If state version \u2265 19.09 then\nthis should be a wrapped LibreWolf package. For earlier state\nversions it should be an unwrapped LibreWolf package.\nSet to <code>null</code> to disable installing LibreWolf.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "[ ]", "description": "Additional packages to be loaded as PKCS #11 modules in Firefox.", "example": "", "loc": ["programs", "librewolf", "pkcs11Modules"], "readOnly": false, "title": "programs.librewolf.pkcs11Modules", "type": "list of package", "descriptionHTML": "<p>Additional packages to be loaded as PKCS #11 modules in Firefox.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "See list of policies.", "example": "{\n  BlockAboutConfig = true;\n  DefaultDownloadDirectory = \"\\${home}/Downloads\";\n  ExtensionSettings = {\n    \"uBlock0@raymondhill.net\" = {\n      default_area = \"menupanel\";\n      install_url = \"https://addons.mozilla.org/firefox/downloads/latest/ublock-origin/latest.xpi\";\n      installation_mode = \"force_installed\";\n      private_browsing = true;\n    };\n  };\n}", "loc": ["programs", "librewolf", "policies"], "readOnly": false, "title": "programs.librewolf.policies", "type": "attribute set of (JSON value)", "descriptionHTML": "<p><a href=\"https://mozilla.github.io/policy-templates/\">See list of policies</a>.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Attribute set of LibreWolf profiles.", "example": "", "loc": ["programs", "librewolf", "profiles"], "readOnly": false, "title": "programs.librewolf.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of LibreWolf profiles.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Declarative bookmarks.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "bookmarks"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.bookmarks", "type": "(submodule) or ((list of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) or (attribute set of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) convertible to it) convertible to it", "descriptionHTML": "<p>Declarative bookmarks.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "null", "description": "Configuration file to define custom bookmarks.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "bookmarks", "configFile"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.bookmarks.configFile", "type": "null or absolute path", "descriptionHTML": "<p>Configuration file to define custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Whether to force override existing custom bookmarks.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "bookmarks", "force"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.bookmarks.force", "type": "boolean", "descriptionHTML": "<p>Whether to force override existing custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "[ ]", "description": "Custom bookmarks.", "example": "[\n  {\n    name = \"wikipedia\";\n    tags = [ \"wiki\" ];\n    keyword = \"wiki\";\n    url = \"https://en.wikipedia.org/wiki/Special:Search?search=%s&go=Go\";\n  }\n  {\n    name = \"kernel.org\";\n    url = \"https://www.kernel.org\";\n  }\n  \"separator\"\n  {\n    name = \"Nix sites\";\n    toolbar = true;\n    bookmarks = [\n      {\n        name = \"homepage\";\n        url = \"https://nixos.org/\";\n      }\n      {\n        name = \"wiki\";\n        tags = [ \"wiki\" \"nix\" ];\n        url = \"https://wiki.nixos.org/\";\n      }\n    ];\n  }\n]\n", "loc": ["programs", "librewolf", "profiles", "<name>", "bookmarks", "settings"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.bookmarks.settings", "type": "(list of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) or (attribute set of ((bookmark submodule) or (directory submodule) or value \"separator\" (singular enum))) convertible to it", "descriptionHTML": "<p>Custom bookmarks.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Attribute set of container configurations. See\nMulti-Account\nContainers\nfor more information.", "example": "{\n  dangerous = {\n    color = \"red\";\n    icon = \"fruit\";\n    id = 2;\n  };\n  shopping = {\n    color = \"blue\";\n    icon = \"cart\";\n    id = 1;\n  };\n}", "loc": ["programs", "librewolf", "profiles", "<name>", "containers"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.containers", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of container configurations. See\n<a href=\"https://support.mozilla.org/en-US/kb/containers\">Multi-Account\nContainers</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"pink\"", "description": "Container color.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "containers", "<name>", "color"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.containers.<name>.color", "type": "one of \"blue\", \"turquoise\", \"green\", \"yellow\", \"orange\", \"red\", \"pink\", \"purple\", \"toolbar\"", "descriptionHTML": "<p>Container color.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"fruit\"", "description": "Container icon.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "containers", "<name>", "icon"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.containers.<name>.icon", "type": "one of \"briefcase\", \"cart\", \"circle\", \"dollar\", \"fence\", \"fingerprint\", \"gift\", \"vacation\", \"food\", \"fruit\", \"pet\", \"tree\", \"chill\"", "descriptionHTML": "<p>Container icon.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "0", "description": "Container ID. This should be set to a unique number per container in this profile.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "containers", "<name>", "id"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.containers.<name>.id", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Container ID. This should be set to a unique number per container in this profile.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\u2039name\u203a\"", "description": "Container name, e.g., shopping.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "containers", "<name>", "name"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.containers.<name>.name", "type": "string", "descriptionHTML": "<p>Container name, e.g., shopping.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Whether to force replace the existing containers configuration.\nThis is recommended since LibreWolf will replace the symlink on\nevery launch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "containersForce"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.containersForce", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing containers configuration.\nThis is recommended since LibreWolf will replace the symlink on\nevery launch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Submodule for installing and configuring extensions.", "example": "{\n  packages = with pkgs.nur.repos.rycee.firefox-addons; [\n    ublock-origin\n  ];\n  settings.\"uBlock0@raymondhill.net\".settings = {\n    selectedFilterLists = [\n      \"ublock-filters\"\n      \"ublock-badware\"\n      \"ublock-privacy\"\n      \"ublock-unbreak\"\n      \"ublock-quick-fixes\"\n    ];\n  };\n}\n", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions", "type": "(submodule) or (list of package) convertible to it", "descriptionHTML": "<p>Submodule for installing and configuring extensions.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Whether to override all previous firefox settings.\nThis is required when using settings.", "example": "true", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions", "force"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions.force", "type": "boolean", "descriptionHTML": "<p>Whether to override all previous firefox settings.</p>\n<p>This is required when using <code>settings</code>.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "[ ]", "description": "List of \u2039name\u203a add-on packages to install for this profile.\nSome pre-packaged add-ons are accessible from the Nix User Repository.\nOnce you have NUR installed run\nconsole\n$ nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.rycee.firefox-addons\nto list the available \u2039name\u203a add-ons.\nNote that it is necessary to manually enable these extensions\ninside \u2039name\u203a after the first installation.\nTo automatically enable extensions add\n\"extensions.autoDisableScopes\" = 0;\nto\n{option}programs.librewolf.profiles.&lt;profile&gt;.settings", "example": "with pkgs.nur.repos.rycee.firefox-addons; [\n  privacy-badger\n]\n", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions", "packages"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions.packages", "type": "list of package", "descriptionHTML": "<p>List of \u2039name\u203a add-on packages to install for this profile.\nSome pre-packaged add-ons are accessible from the Nix User Repository.\nOnce you have NUR installed run</p>\n<p><code>console\n$ nix-env -f '&lt;nixpkgs&gt;' -qaP -A nur.repos.rycee.firefox-addons</code></p>\n<p>to list the available \u2039name\u203a add-ons.</p>\n<p>Note that it is necessary to manually enable these extensions\ninside \u2039name\u203a after the first installation.</p>\n<p>To automatically enable extensions add\n<code>\"extensions.autoDisableScopes\" = 0;</code>\nto\n<a href=\"#opt-programs.librewolf.profiles._name_.settings\">{option}<code>programs.librewolf.profiles.&lt;profile&gt;.settings</code></a></p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Attribute set of options for each extension.\nThe keys of the attribute set consist of the ID of the extension\nor its UUID wrapped in curly braces.", "example": "{\n  # Example with uBlock origin's extensionID\n  \"uBlock0@raymondhill.net\".settings = {\n    selectedFilterLists = [\n      \"ublock-filters\"\n      \"ublock-badware\"\n      \"ublock-privacy\"\n      \"ublock-unbreak\"\n      \"ublock-quick-fixes\"\n    ];\n  };\n\n  # Example with Stylus' UUID-form extensionID\n  \"{7a7a4a92-a2a0-41d1-9fd7-1e92480d612d}\".settings = {\n    dbInChromeStorage = true; # required for Stylus\n  }\n}\n", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions", "settings"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions.settings", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of options for each extension.\nThe keys of the attribute set consist of the ID of the extension\nor its UUID wrapped in curly braces.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Forcibly override any existing configuration for\nthis extension.", "example": "true", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions", "settings", "<name>", "force"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions.settings.<name>.force", "type": "boolean", "descriptionHTML": "<p>Forcibly override any existing configuration for\nthis extension.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"Any permissions\"", "description": "Allowed permissions for this extension. See\nhttps://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions\nfor a list of relevant permissions.", "example": "[\n  \"activeTab\"\n]", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions", "settings", "<name>", "permissions"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions.settings.<name>.permissions", "type": "null or (list of string)", "descriptionHTML": "<p>Allowed permissions for this extension. See\n<a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions\">https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/permissions</a>\nfor a list of relevant permissions.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Json formatted options for this extension.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "extensions", "settings", "<name>", "settings"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extensions.settings.<name>.settings", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>Json formatted options for this extension.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "extraConfig"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "0", "description": "Profile ID. This should be set to a unique number per profile.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "id"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.id", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Profile ID. This should be set to a unique number per profile.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"true if profile ID is 0\"", "description": "Whether this is a default profile.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "isDefault"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.isDefault", "type": "boolean", "descriptionHTML": "<p>Whether this is a default profile.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\u2039name\u203a\"", "description": "Profile name.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "name"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.name", "type": "string", "descriptionHTML": "<p>Profile name.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\u2039name\u203a\"", "description": "Profile path.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "path"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.path", "type": "string", "descriptionHTML": "<p>Profile path.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js, before\n.\nUse , unless\nyou want to overwrite in\n, then use this\noption.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "preConfig"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.preConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>, before\n<a href=\"#opt-programs.firefox.profiles._name_.settings\"></a>.</p>\n<p>Use <a href=\"#opt-programs.firefox.profiles._name_.extraConfig\"></a>, unless\nyou want to overwrite in\n<a href=\"#opt-programs.firefox.profiles._name_.settings\"></a>, then use this\noption.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Declarative search engine configuration.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "search"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.search", "type": "submodule", "descriptionHTML": "<p>Declarative search engine configuration.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "null", "description": "The default search engine used in the address bar and search\nbar.", "example": "\"ddg\"", "loc": ["programs", "librewolf", "profiles", "<name>", "search", "default"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.search.default", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the address bar and search\nbar.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Attribute set of search engine configurations. Engines that\nonly have {var}metaData specified will be treated as builtin\nto LibreWolf.\nSee SearchEngine.jsm\nin LibreWolf's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.\nNote, {var}icon is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.", "example": "{\n  nix-packages = {\n    name = \"Nix Packages\";\n    urls = [{\n      template = \"https://search.nixos.org/packages\";\n      params = [\n        { name = \"type\"; value = \"packages\"; }\n        { name = \"query\"; value = \"{searchTerms}\"; }\n      ];\n    }];\n\n    icon = \"${pkgs.nixos-icons}/share/icons/hicolor/scalable/apps/nix-snowflake.svg\";\n    definedAliases = [ \"@np\" ];\n  };\n\n  nixos-wiki = {\n    name = \"NixOS Wiki\";\n    urls = [{ template = \"https://wiki.nixos.org/w/index.php?search={searchTerms}\"; }];\n    iconMapObj.\"16\" = \"https://wiki.nixos.org/favicon.ico\";\n    definedAliases = [ \"@nw\" ];\n  };\n\n  bing.metaData.hidden = true;\n  google.metaData.alias = \"@g\"; # builtin engines only support specifying one additional alias\n}\n", "loc": ["programs", "librewolf", "profiles", "<name>", "search", "engines"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.search.engines", "type": "attribute set of attribute set of (JSON value)", "descriptionHTML": "<p>Attribute set of search engine configurations. Engines that\nonly have {var}<code>metaData</code> specified will be treated as builtin\nto LibreWolf.</p>\n<p>See <a href=\"https://searchfox.org/mozilla-central/rev/e3f42ec9320748b2aab3d474d1e47075def9000c/toolkit/components/search/SearchEngine.sys.mjs#890-923\">SearchEngine.jsm</a>\nin LibreWolf's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.</p>\n<p>Note, {var}<code>icon</code> is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "false", "description": "Whether to force replace the existing search\nconfiguration. This is recommended since LibreWolf will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "librewolf", "profiles", "<name>", "search", "force"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.search.force", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing search\nconfiguration. This is recommended since LibreWolf will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "[ ]", "description": "The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.", "example": "[\n  \"ddg\"\n  \"google\"\n]", "loc": ["programs", "librewolf", "profiles", "<name>", "search", "order"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.search.order", "type": "list of string", "descriptionHTML": "<p>The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "null", "description": "The default search engine used in the Private Browsing.", "example": "\"ddg\"", "loc": ["programs", "librewolf", "profiles", "<name>", "search", "privateDefault"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.search.privateDefault", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the Private Browsing.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Attribute set of LibreWolf preferences.\nLibreWolf only supports int, bool, and string types for\npreferences, but home-manager will automatically\nconvert all other JSON-compatible values into strings.", "example": "{\n  \"browser.startup.homepage\" = \"https://nixos.org\";\n  \"browser.search.region\" = \"GB\";\n  \"browser.search.isUS\" = false;\n  \"distribution.searchplugins.defaultLocale\" = \"en-GB\";\n  \"general.useragent.locale\" = \"en-GB\";\n  \"browser.bookmarks.showMobileBookmarks\" = true;\n  \"browser.newtabpage.pinned\" = [{\n    title = \"NixOS\";\n    url = \"https://nixos.org\";\n  }];\n}\n", "loc": ["programs", "librewolf", "profiles", "<name>", "settings"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.settings", "type": "attribute set of (LibreWolf preference (int, bool, string, and also attrs, list, float as a JSON string))", "descriptionHTML": "<p>Attribute set of LibreWolf preferences.</p>\n<p>LibreWolf only supports int, bool, and string types for\npreferences, but home-manager will automatically\nconvert all other JSON-compatible values into strings.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\"", "description": "Custom LibreWolf user chrome CSS.", "example": "''\n  /* Hide tab bar in FF Quantum */\n  @-moz-document url(chrome://browser/content/browser.xul), url(chrome://browser/content/browser.xhtml) {\n    #TabsToolbar {\n      visibility: collapse !important;\n      margin-bottom: 21px !important;\n    }\n  \n    #sidebar-box[sidebarcommand=\"treestyletab_piro_sakura_ne_jp-sidebar-action\"] #sidebar-header {\n      visibility: collapse !important;\n    }\n  }\n''", "loc": ["programs", "librewolf", "profiles", "<name>", "userChrome"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.userChrome", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Custom LibreWolf user chrome CSS.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "\"\"", "description": "Custom LibreWolf user content CSS.", "example": "''\n  /* Hide scrollbar in FF Quantum */\n  *{scrollbar-width:none !important}\n''", "loc": ["programs", "librewolf", "profiles", "<name>", "userContent"], "readOnly": false, "title": "programs.librewolf.profiles.<name>.userContent", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Custom LibreWolf user content CSS.</p>"}, {"declarations": [{"name": "<programs/librewolf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/librewolf.nix"}], "default": "{ }", "description": "Attribute set of global LibreWolf settings and overrides. Refer to\nhttps://librewolf.net/docs/settings/\nfor details on supported values.", "example": "{\n  \"webgl.disabled\" = false;\n  \"privacy.resistFingerprinting\" = false;\n}\n", "loc": ["programs", "librewolf", "settings"], "readOnly": false, "title": "programs.librewolf.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Attribute set of global LibreWolf settings and overrides. Refer to\n<a href=\"https://librewolf.net/docs/settings/\">https://librewolf.net/docs/settings/</a>\nfor details on supported values.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "false", "description": "Whether to enable lieer Gmail synchronization for notmuch.", "example": "true", "loc": ["programs", "lieer", "enable"], "readOnly": false, "title": "programs.lieer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lieer Gmail synchronization for notmuch.</p>"}, {"declarations": [{"name": "<programs/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lieer.nix"}], "default": "pkgs.lieer", "description": "The lieer package to use.", "example": "", "loc": ["programs", "lieer", "package"], "readOnly": false, "title": "programs.lieer.package", "type": "package", "descriptionHTML": "<p>The lieer package to use.</p>"}, {"declarations": [{"name": "<programs/looking-glass-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/looking-glass-client.nix"}], "default": "false", "description": "Whether to enable looking-glass-client.", "example": "true", "loc": ["programs", "looking-glass-client", "enable"], "readOnly": false, "title": "programs.looking-glass-client.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable looking-glass-client.</p>"}, {"declarations": [{"name": "<programs/looking-glass-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/looking-glass-client.nix"}], "default": "pkgs.looking-glass-client", "description": "The looking-glass-client package to use.", "example": "", "loc": ["programs", "looking-glass-client", "package"], "readOnly": false, "title": "programs.looking-glass-client.package", "type": "null or package", "descriptionHTML": "<p>The looking-glass-client package to use.</p>"}, {"declarations": [{"name": "<programs/looking-glass-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/looking-glass-client.nix"}], "default": "{ }", "description": "looking-glass-client settings.", "example": "{\n  app = {\n    allowDMA = true;\n    shmFile = \"/dev/kvmfr0\";\n  };\n\n  win = {\n    fullScreen = true;\n    showFPS = false;\n    jitRender = true;\n  };\n\n  spice = {\n    enable = true;\n    audio = true;\n  };\n\n  input = {\n    rawMouse = true;\n    escapeKey = 62;\n  };\n}\n", "loc": ["programs", "looking-glass-client", "settings"], "readOnly": false, "title": "programs.looking-glass-client.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>looking-glass-client settings.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/lsd/colors.yaml. See\nhttps://github.com/lsd-rs/lsd/tree/v1.0.0#color-theme-file-content for\nsupported colors.\nIf this option is non-empty then the color.theme option is\nautomatically set to \"custom\".", "example": "{\n  size = {\n    large = \"dark_yellow\";\n    none = \"grey\";\n    small = \"yellow\";\n  };\n}", "loc": ["programs", "lsd", "colors"], "readOnly": false, "title": "programs.lsd.colors", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/lsd/colors.yaml</code>. See\n<a href=\"https://github.com/lsd-rs/lsd/tree/v1.0.0#color-theme-file-content\">https://github.com/lsd-rs/lsd/tree/v1.0.0#color-theme-file-content</a> for\nsupported colors.</p>\n<p>If this option is non-empty then the <code>color.theme</code> option is\nautomatically set to <code>\"custom\"</code>.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "false", "description": "Whether to enable lsd.", "example": "true", "loc": ["programs", "lsd", "enable"], "readOnly": false, "title": "programs.lsd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lsd.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "lsd", "enableBashIntegration"], "readOnly": false, "title": "programs.lsd.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "lsd", "enableFishIntegration"], "readOnly": false, "title": "programs.lsd.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "lsd", "enableZshIntegration"], "readOnly": false, "title": "programs.lsd.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/lsd/icons.yaml. See\nhttps://github.com/lsd-rs/lsd?tab=readme-ov-file#icon-theme-file-content for\ndetails.", "example": "{\n  extension = {\n    go = \"\ue627\";\n    hs = \"\ue777\";\n  };\n  filetype = {\n    dir = \"\ud83d\udcc2\";\n    file = \"\ud83d\udcc4\";\n  };\n  name = {\n    \".cargo\" = \"\ue7a8\";\n    \".trash\" = \"\uf1f8\";\n  };\n}", "loc": ["programs", "lsd", "icons"], "readOnly": false, "title": "programs.lsd.icons", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/lsd/icons.yaml</code>. See\n<a href=\"https://github.com/lsd-rs/lsd?tab=readme-ov-file#icon-theme-file-content\">https://github.com/lsd-rs/lsd?tab=readme-ov-file#icon-theme-file-content</a> for\ndetails.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "pkgs.lsd", "description": "The lsd package to use.", "example": "", "loc": ["programs", "lsd", "package"], "readOnly": false, "title": "programs.lsd.package", "type": "null or package", "descriptionHTML": "<p>The lsd package to use.</p>"}, {"declarations": [{"name": "<programs/lsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lsd.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/lsd/config.yaml. See\nhttps://github.com/Peltoche/lsd#config-file-content\nfor supported values.", "example": "{\n  date = \"relative\";\n  ignore-globs = [\n    \".git\"\n    \".hg\"\n  ];\n}", "loc": ["programs", "lsd", "settings"], "readOnly": false, "title": "programs.lsd.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/lsd/config.yaml</code>. See\n<a href=\"https://github.com/Peltoche/lsd#config-file-content\">https://github.com/Peltoche/lsd#config-file-content</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "false", "description": "Whether to enable lutris..", "example": "true", "loc": ["programs", "lutris", "enable"], "readOnly": false, "title": "programs.lutris.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lutris..</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "[ ]", "description": "List of packages to pass as extraPkgs to lutris.\nPlease note runners are not detected properly this way, use a proper option for those.", "example": "\"with pkgs; [mangohud winetricks gamescope gamemode umu-launcher]\"", "loc": ["programs", "lutris", "extraPackages"], "readOnly": false, "title": "programs.lutris.extraPackages", "type": "list of package", "descriptionHTML": "<p>List of packages to pass as extraPkgs to lutris.\nPlease note runners are not detected properly this way, use a proper option for those.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "pkgs.lutris", "description": "The lutris package to use.", "example": "", "loc": ["programs", "lutris", "package"], "readOnly": false, "title": "programs.lutris.package", "type": "package", "descriptionHTML": "<p>The lutris package to use.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "[ ]", "description": "List of proton packages to be added for lutris to use with umu-launcher.", "example": "\"[ pkgs.proton-ge-bin ]\"", "loc": ["programs", "lutris", "protonPackages"], "readOnly": false, "title": "programs.lutris.protonPackages", "type": "list of package", "descriptionHTML": "<p>List of proton packages to be added for lutris to use with umu-launcher.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "{ }", "description": "Attribute set of Lutris runners along with their configurations.\nEach runner must be named exactly as lutris expects on lutris --list-runners.\nNote that runners added here won't be configurable through Lutris using the GUI.", "example": "''\n  runners = {\n    cemu.package = pkgs.cemu;\n    pcsx2.config = {\n      system.disable_screen_saver = true;\n      runner.runner_executable = \"$\\{pkgs.pcsx2}/bin/pcsx2-qt\";\n    };\n  };\n''", "loc": ["programs", "lutris", "runners"], "readOnly": false, "title": "programs.lutris.runners", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of Lutris runners along with their configurations.\nEach runner must be named exactly as lutris expects on <code>lutris --list-runners</code>.\nNote that runners added here won't be configurable through Lutris using the GUI.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "null", "description": "The package to use for this runner, nix will try to find the executable for this package.\nA more specific path can be set by using settings.runner.runner_executable instead.", "example": "\"pkgs.cemu\"", "loc": ["programs", "lutris", "runners", "<name>", "package"], "readOnly": false, "title": "programs.lutris.runners.<name>.package", "type": "null or package", "descriptionHTML": "<p>The package to use for this runner, nix will try to find the executable for this package.\nA more specific path can be set by using settings.runner.runner_executable instead.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "{ }", "description": "Settings passed directly to lutris for this runner's config at XDG_CONFIG/lutris/runners.", "example": "", "loc": ["programs", "lutris", "runners", "<name>", "settings"], "readOnly": false, "title": "programs.lutris.runners.<name>.settings", "type": "submodule", "descriptionHTML": "<p>Settings passed directly to lutris for this runner's config at XDG_CONFIG/lutris/runners.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "{ }", "description": "Runner specific options.\nFor references, you must look for the file of said runner on lutris' source code.", "example": "", "loc": ["programs", "lutris", "runners", "<name>", "settings", "runner"], "readOnly": false, "title": "programs.lutris.runners.<name>.settings.runner", "type": "YAML 1.1 value", "descriptionHTML": "<p>Runner specific options.\nFor references, you must look for the file of said runner on lutris' source code.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "\"\"", "description": "Specific option to point to a runner executable directly, don't set runner.package if you set this.", "example": "", "loc": ["programs", "lutris", "runners", "<name>", "settings", "runner", "runner_executable"], "readOnly": false, "title": "programs.lutris.runners.<name>.settings.runner.runner_executable", "type": "string or absolute path", "descriptionHTML": "<p>Specific option to point to a runner executable directly, don't set runner.package if you set this.</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "{ }", "description": "Lutris system options for this runner.\nReference for system options:\nhttps://github.com/lutris/lutris/blob/master/lutris/sysoptions.py#L78", "example": "", "loc": ["programs", "lutris", "runners", "<name>", "settings", "system"], "readOnly": false, "title": "programs.lutris.runners.<name>.settings.system", "type": "YAML 1.1 value", "descriptionHTML": "<p>Lutris system options for this runner.\nReference for system options:\nhttps://github.com/lutris/lutris/blob/master/lutris/sysoptions.py#L78</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "null", "description": "This must be the same you use for your system, or two instances will conflict,\nfor example, if you configure steam through the nixos module, a good value is \"osConfig.programs.steam.package\"", "example": "\"pkgs.steam or osConfig.programs.steam.package\"", "loc": ["programs", "lutris", "steamPackage"], "readOnly": false, "title": "programs.lutris.steamPackage", "type": "null or package", "descriptionHTML": "<p>This must be the same you use for your system, or two instances will conflict,\nfor example, if you configure steam through the nixos module, a good value is \"osConfig.programs.steam.package\"</p>"}, {"declarations": [{"name": "<programs/lutris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/lutris.nix"}], "default": "[ ]", "description": "List of wine packages to be added for lutris to use.", "example": "\"[ pkgs.wineWow64Packages.full ]\"", "loc": ["programs", "lutris", "winePackages"], "readOnly": false, "title": "programs.lutris.winePackages", "type": "list of package", "descriptionHTML": "<p>List of wine packages to be added for lutris to use.</p>"}, {"declarations": [{"name": "<programs/man.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/man.nix"}], "default": "true", "description": "Whether to enable manual pages and the {command}man\ncommand. This also includes \"man\" outputs of all\nhome.packages.", "example": "", "loc": ["programs", "man", "enable"], "readOnly": false, "title": "programs.man.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable manual pages and the {command}<code>man</code>\ncommand. This also includes \"man\" outputs of all\n<code>home.packages</code>.</p>"}, {"declarations": [{"name": "<programs/man.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/man.nix"}], "default": "false", "description": "Whether to generate the manual page index caches using\n{manpage}mandb(8). This allows searching for a page or\nkeyword using utilities like {manpage}apropos(1).\nThis feature is disabled by default because it slows down\nbuilding. If you don't mind waiting a few more seconds when\nHome Manager builds a new generation, you may safely enable\nthis option.", "example": "", "loc": ["programs", "man", "generateCaches"], "readOnly": false, "title": "programs.man.generateCaches", "type": "boolean", "descriptionHTML": "<p>Whether to generate the manual page index caches using\n{manpage}<code>mandb(8)</code>. This allows searching for a page or\nkeyword using utilities like {manpage}<code>apropos(1)</code>.</p>\n<p>This feature is disabled by default because it slows down\nbuilding. If you don't mind waiting a few more seconds when\nHome Manager builds a new generation, you may safely enable\nthis option.</p>"}, {"declarations": [{"name": "<programs/man.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/man.nix"}], "default": "pkgs.man", "description": "The man package to use.", "example": "", "loc": ["programs", "man", "package"], "readOnly": false, "title": "programs.man.package", "type": "package", "descriptionHTML": "<p>The man package to use.</p>"}, {"declarations": [{"name": "<programs/mangohud.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mangohud.nix"}], "default": "false", "description": "Whether to enable Mangohud.", "example": "true", "loc": ["programs", "mangohud", "enable"], "readOnly": false, "title": "programs.mangohud.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Mangohud.</p>"}, {"declarations": [{"name": "<programs/mangohud.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mangohud.nix"}], "default": "false", "description": "Sets environment variables so that\nMangoHud is started on any application that supports it.", "example": "", "loc": ["programs", "mangohud", "enableSessionWide"], "readOnly": false, "title": "programs.mangohud.enableSessionWide", "type": "boolean", "descriptionHTML": "<p>Sets environment variables so that\nMangoHud is started on any application that supports it.</p>"}, {"declarations": [{"name": "<programs/mangohud.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mangohud.nix"}], "default": "pkgs.mangohud", "description": "The mangohud package to use.", "example": "", "loc": ["programs", "mangohud", "package"], "readOnly": false, "title": "programs.mangohud.package", "type": "package", "descriptionHTML": "<p>The mangohud package to use.</p>"}, {"declarations": [{"name": "<programs/mangohud.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mangohud.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/MangoHud/MangoHud.conf. See\nhttps://github.com/flightlessmango/MangoHud/blob/master/data/MangoHud.conf\nfor the default configuration.", "example": "{\n  output_folder = ~/Documents/mangohud/;\n  full = true;\n}\n", "loc": ["programs", "mangohud", "settings"], "readOnly": false, "title": "programs.mangohud.settings", "type": "attribute set of (boolean or signed integer or floating point number or string or absolute path or list of (signed integer or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/MangoHud/MangoHud.conf</code>. See\n<a href=\"https://github.com/flightlessmango/MangoHud/blob/master/data/MangoHud.conf\">https://github.com/flightlessmango/MangoHud/blob/master/data/MangoHud.conf</a>\nfor the default configuration.</p>"}, {"declarations": [{"name": "<programs/mangohud.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mangohud.nix"}], "default": "{ }", "description": "Sets MangoHud settings per application.\nConfiguration written to\n{file}$XDG_CONFIG_HOME/MangoHud/{application_name}.conf. See\nhttps://github.com/flightlessmango/MangoHud/blob/master/data/MangoHud.conf\nfor the default configuration.", "example": "{\n  mpv = {\n    no_display = true;\n  };\n}\n", "loc": ["programs", "mangohud", "settingsPerApplication"], "readOnly": false, "title": "programs.mangohud.settingsPerApplication", "type": "attribute set of attribute set of (boolean or signed integer or floating point number or string or absolute path or list of (signed integer or string))", "descriptionHTML": "<p>Sets MangoHud settings per application.\nConfiguration written to\n{file}<code>$XDG_CONFIG_HOME/MangoHud/{application_name}.conf</code>. See\n<a href=\"https://github.com/flightlessmango/MangoHud/blob/master/data/MangoHud.conf\">https://github.com/flightlessmango/MangoHud/blob/master/data/MangoHud.conf</a>\nfor the default configuration.</p>"}, {"declarations": [{"name": "<programs/matplotlib.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/matplotlib.nix"}], "default": "{ }", "description": "Add terms to the {file}matplotlibrc file to\ncontrol the default matplotlib behavior.", "example": "{\n  backend = \"Qt5Agg\";\n  axes = {\n    grid = true;\n    facecolor = \"black\";\n    edgecolor = \"FF9900\";\n  };\n  grid.color = \"FF9900\";\n}\n", "loc": ["programs", "matplotlib", "config"], "readOnly": false, "title": "programs.matplotlib.config", "type": "attribute set of anything", "descriptionHTML": "<p>Add terms to the {file}<code>matplotlibrc</code> file to\ncontrol the default matplotlib behavior.</p>"}, {"declarations": [{"name": "<programs/matplotlib.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/matplotlib.nix"}], "default": "false", "description": "Whether to enable matplotlib, a plotting library for python.", "example": "true", "loc": ["programs", "matplotlib", "enable"], "readOnly": false, "title": "programs.matplotlib.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable matplotlib, a plotting library for python.</p>"}, {"declarations": [{"name": "<programs/matplotlib.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/matplotlib.nix"}], "default": "\"\"", "description": "Additional commands for matplotlib that will be added to the\n{file}matplotlibrc file.", "example": "", "loc": ["programs", "matplotlib", "extraConfig"], "readOnly": false, "title": "programs.matplotlib.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional commands for matplotlib that will be added to the\n{file}<code>matplotlibrc</code> file.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "false", "description": "Whether to enable mbsync IMAP4 and Maildir mailbox synchronizer.", "example": "true", "loc": ["programs", "mbsync", "enable"], "readOnly": false, "title": "programs.mbsync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mbsync IMAP4 and Maildir mailbox synchronizer.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to the mbsync configuration.", "example": "", "loc": ["programs", "mbsync", "extraConfig"], "readOnly": false, "title": "programs.mbsync.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to the mbsync configuration.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "{ }", "description": "Definition of groups.", "example": "{\n  inboxes = {\n    account1 = [ \"Inbox\" ];\n    account2 = [ \"Inbox\" ];\n  };\n}\n", "loc": ["programs", "mbsync", "groups"], "readOnly": false, "title": "programs.mbsync.groups", "type": "attribute set of attribute set of list of string", "descriptionHTML": "<p>Definition of groups.</p>"}, {"declarations": [{"name": "<programs/mbsync/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mbsync/default.nix"}], "default": "pkgs.isync", "description": "The isync package to use.", "example": "", "loc": ["programs", "mbsync", "package"], "readOnly": false, "title": "programs.mbsync.package", "type": "package", "descriptionHTML": "<p>The isync package to use.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "false", "description": "Whether to enable Midnight Commander.", "example": "true", "loc": ["programs", "mc", "enable"], "readOnly": false, "title": "programs.mc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Midnight Commander.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "{ }", "description": "Settings for mc/mc.ext.ini file. This setting completely replaces the default /etc/mc/mc.ext.ini.\nMidnight Commander does not merge this file with the system default,\nso you should copy the original if you want to preserve default behavior and add your changes there.", "example": "{\n  EPUB = {\n    Open = \"fbreader %f &\";\n    Shell = \".epub\";\n  };\n}", "loc": ["programs", "mc", "extensionSettings"], "readOnly": false, "title": "programs.mc.extensionSettings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings for <code>mc/mc.ext.ini</code> file. This setting completely replaces the default <code>/etc/mc/mc.ext.ini</code>.</p>\n<p>Midnight Commander does not merge this file with the system default,\nso you should copy the original if you want to preserve default behavior and add your changes there.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "{ }", "description": "Settings for mc/filehighlight.ini file. This setting completely replaces the default /etc/mc/filehighlight.ini.\nMidnight Commander does not merge this file with the system default, so you should copy the original if you want to preserve default behavior\nand add your changes there.", "example": "{\n  lua = {\n    extensions = \"lua;luac\";\n  };\n}", "loc": ["programs", "mc", "fileHighlightSettings"], "readOnly": false, "title": "programs.mc.fileHighlightSettings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings for <code>mc/filehighlight.ini</code> file. This setting completely replaces the default <code>/etc/mc/filehighlight.ini</code>.</p>\n<p>Midnight Commander does not merge this file with the system default, so you should copy the original if you want to preserve default behavior\nand add your changes there.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "{ }", "description": "Settings for mc/mc.keymap file.\nAny missing settings will fall back to the system default.", "example": "{\n  panel = {\n    Up = \"up;ctrl-k\";\n  };\n}", "loc": ["programs", "mc", "keymapSettings"], "readOnly": false, "title": "programs.mc.keymapSettings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings for <code>mc/mc.keymap</code> file.</p>\n<p>Any missing settings will fall back to the system default.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "pkgs.mc", "description": "The mc package to use.", "example": "", "loc": ["programs", "mc", "package"], "readOnly": false, "title": "programs.mc.package", "type": "null or package", "descriptionHTML": "<p>The mc package to use.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "{ }", "description": "Settings for mc/panels file.\nAny missing settings will fall back to the system default.", "example": "{\n  Dirs = {\n    current_is_left = false;\n    other_dir = \"/home\";\n  };\n}", "loc": ["programs", "mc", "panelsSettings"], "readOnly": false, "title": "programs.mc.panelsSettings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings for <code>mc/panels</code> file.</p>\n<p>Any missing settings will fall back to the system default.</p>"}, {"declarations": [{"name": "<programs/mc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mc.nix"}], "default": "{ }", "description": "Settings for mc/ini file.\nAny missing settings will fall back to the system default.", "example": "{\n  Panels = {\n    show_dot_files = false;\n  };\n}", "loc": ["programs", "mc", "settings"], "readOnly": false, "title": "programs.mc.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Settings for <code>mc/ini</code> file.</p>\n<p>Any missing settings will fall back to the system default.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "false", "description": "Whether to enable mcfly.", "example": "true", "loc": ["programs", "mcfly", "enable"], "readOnly": false, "title": "programs.mcfly.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mcfly.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "mcfly", "enableBashIntegration"], "readOnly": false, "title": "programs.mcfly.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "mcfly", "enableFishIntegration"], "readOnly": false, "title": "programs.mcfly.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "false", "description": "Whether to enable light mode theme.", "example": "", "loc": ["programs", "mcfly", "enableLightTheme"], "readOnly": false, "title": "programs.mcfly.enableLightTheme", "type": "boolean", "descriptionHTML": "<p>Whether to enable light mode theme.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "mcfly", "enableZshIntegration"], "readOnly": false, "title": "programs.mcfly.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "0", "description": "Whether to enable fuzzy searching.\n0 is off; higher numbers weight toward shorter matches.\nValues in the 2-5 range get good results so far.", "example": "", "loc": ["programs", "mcfly", "fuzzySearchFactor"], "readOnly": false, "title": "programs.mcfly.fuzzySearchFactor", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Whether to enable fuzzy searching.\n0 is off; higher numbers weight toward shorter matches.\nValues in the 2-5 range get good results so far.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "false", "description": "Whether to enable McFly fzf integration.", "example": "true", "loc": ["programs", "mcfly", "fzf", "enable"], "readOnly": false, "title": "programs.mcfly.fzf.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable McFly fzf integration.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "\"TOP\"", "description": "Interface view to use.", "example": "", "loc": ["programs", "mcfly", "interfaceView"], "readOnly": false, "title": "programs.mcfly.interfaceView", "type": "one of \"TOP\", \"BOTTOM\"", "descriptionHTML": "<p>Interface view to use.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "\"emacs\"", "description": "Key scheme to use.", "example": "", "loc": ["programs", "mcfly", "keyScheme"], "readOnly": false, "title": "programs.mcfly.keyScheme", "type": "one of \"emacs\", \"vim\"", "descriptionHTML": "<p>Key scheme to use.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "pkgs.mcfly-fzf", "description": "The mcfly-fzf package to use.", "example": "", "loc": ["programs", "mcfly", "mcflyFzfPackage"], "readOnly": false, "title": "programs.mcfly.mcflyFzfPackage", "type": "package", "descriptionHTML": "<p>The mcfly-fzf package to use.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "pkgs.mcfly", "description": "The mcfly package to use.", "example": "", "loc": ["programs", "mcfly", "package"], "readOnly": false, "title": "programs.mcfly.package", "type": "package", "descriptionHTML": "<p>The mcfly package to use.</p>"}, {"declarations": [{"name": "<programs/mcfly.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mcfly.nix"}], "default": "{ }", "description": "Settings written to {file}~/.config/mcfly/config.toml.\nNote, if your McFly database is currently in {file}~/.mcfly,\nthen this option has no effect.\nMove the database to {file}$XDG_DATA_DIR/mcfly/history.db and\nremove {file}~/.mcfly to make the settings take effect. See\nhttps://github.com/cantino/mcfly#database-location.", "example": "{\n  colors = {\n    menubar = {\n      bg = \"black\";\n      fg = \"red\";\n    };\n    darkmode = {\n      prompt = \"cyan\";\n      timing = \"yellow\";\n      results_selection_fg = \"cyan\";\n      results_selection_bg = \"black\";\n      results_selection_hl = \"red\";\n    };\n  };\n}\n", "loc": ["programs", "mcfly", "settings"], "readOnly": false, "title": "programs.mcfly.settings", "type": "TOML value", "descriptionHTML": "<p>Settings written to {file}<code>~/.config/mcfly/config.toml</code>.</p>\n<p>Note, if your McFly database is currently in {file}<code>~/.mcfly</code>,\nthen this option has no effect.\nMove the database to {file}<code>$XDG_DATA_DIR/mcfly/history.db</code> and\nremove {file}<code>~/.mcfly</code> to make the settings take effect. See\n<a href=\"https://github.com/cantino/mcfly#database-location\">https://github.com/cantino/mcfly#database-location</a>.</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "false", "description": "Whether to enable meli email client.", "example": "true", "loc": ["programs", "meli", "enable"], "readOnly": false, "title": "programs.meli.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable meli email client.</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "[ ]", "description": "Paths of the various meli configuration files to include.", "example": "", "loc": ["programs", "meli", "includes"], "readOnly": false, "title": "programs.meli.includes", "type": "list of string", "descriptionHTML": "<p>Paths of the various meli configuration files to include.</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "<derivation meli-0.8.12>", "description": "meli package to use", "example": "", "loc": ["programs", "meli", "package"], "readOnly": false, "title": "programs.meli.package", "type": "package", "descriptionHTML": "<p>meli package to use</p>"}, {"declarations": [{"name": "<programs/meli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/meli.nix"}], "default": "{ }", "description": "Meli Configuration", "example": "{\nshortcuts = {\ncontact-list = {\n            create_contact = \"c\";\n            edit_contact = \"m\";\n          };\ngeneral = {\n  edit = \"m\";\n  scroll_up = \"e\";\n  scroll_down = \"n\";\n};\ncomposing = {\n  edit = \"m\";\n  scroll_up = \"e\";\n  scroll_down = \"n\";\n};\nlisting = {\n  new_mail = \"t\";\n  set_seen = \"s\";\n};\npager = {\n            scroll_up = \"e\";\n            scroll_down = \"n\";\n};\n\n}\n}", "loc": ["programs", "meli", "settings"], "readOnly": false, "title": "programs.meli.settings", "type": "TOML value", "descriptionHTML": "<p>Meli Configuration</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "{ }", "description": "Mercurial aliases to define.", "example": "", "loc": ["programs", "mercurial", "aliases"], "readOnly": false, "title": "programs.mercurial.aliases", "type": "attribute set of anything", "descriptionHTML": "<p>Mercurial aliases to define.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "false", "description": "Whether to enable Mercurial.", "example": "true", "loc": ["programs", "mercurial", "enable"], "readOnly": false, "title": "programs.mercurial.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Mercurial.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "{ }", "description": "Additional configuration to add.", "example": "", "loc": ["programs", "mercurial", "extraConfig"], "readOnly": false, "title": "programs.mercurial.extraConfig", "type": "(attribute set of anything) or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "[ ]", "description": "List of globs for files to be globally ignored.", "example": "[\n  \"*~\"\n  \"*.swp\"\n]", "loc": ["programs", "mercurial", "ignores"], "readOnly": false, "title": "programs.mercurial.ignores", "type": "list of string", "descriptionHTML": "<p>List of globs for files to be globally ignored.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "[ ]", "description": "List of regular expressions for files to be globally ignored.", "example": "[\n  \"^.*~$\"\n  \"^.*\\\\.swp$\"\n]", "loc": ["programs", "mercurial", "ignoresRegexp"], "readOnly": false, "title": "programs.mercurial.ignoresRegexp", "type": "list of string", "descriptionHTML": "<p>List of regular expressions for files to be globally ignored.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "pkgs.mercurial", "description": "The mercurial package to use.", "example": "", "loc": ["programs", "mercurial", "package"], "readOnly": false, "title": "programs.mercurial.package", "type": "package", "descriptionHTML": "<p>The mercurial package to use.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "", "description": "Default user email to use.", "example": "", "loc": ["programs", "mercurial", "userEmail"], "readOnly": false, "title": "programs.mercurial.userEmail", "type": "string", "descriptionHTML": "<p>Default user email to use.</p>"}, {"declarations": [{"name": "<programs/mercurial.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mercurial.nix"}], "default": "", "description": "Default user name to use.", "example": "", "loc": ["programs", "mercurial", "userName"], "readOnly": false, "title": "programs.mercurial.userName", "type": "string", "descriptionHTML": "<p>Default user name to use.</p>"}, {"declarations": [{"name": "<programs/mergiraf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mergiraf.nix"}], "default": "false", "description": "Whether to enable mergiraf.", "example": "true", "loc": ["programs", "mergiraf", "enable"], "readOnly": false, "title": "programs.mergiraf.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mergiraf.</p>"}, {"declarations": [{"name": "<programs/mergiraf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mergiraf.nix"}], "default": "pkgs.mergiraf", "description": "The mergiraf package to use.", "example": "", "loc": ["programs", "mergiraf", "package"], "readOnly": false, "title": "programs.mergiraf.package", "type": "package", "descriptionHTML": "<p>The mergiraf package to use.</p>"}, {"declarations": [{"name": "<programs/micro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/micro.nix"}], "default": "false", "description": "Whether to enable micro, a terminal-based text editor.", "example": "true", "loc": ["programs", "micro", "enable"], "readOnly": false, "title": "programs.micro.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable micro, a terminal-based text editor.</p>"}, {"declarations": [{"name": "<programs/micro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/micro.nix"}], "default": "pkgs.micro", "description": "The micro package to use.", "example": "", "loc": ["programs", "micro", "package"], "readOnly": false, "title": "programs.micro.package", "type": "null or package", "descriptionHTML": "<p>The micro package to use.</p>"}, {"declarations": [{"name": "<programs/micro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/micro.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/micro/settings.json. See\nhttps://github.com/zyedidia/micro/blob/master/runtime/help/options.md\nfor supported values.", "example": "{\n  autosu = false;\n  cursorline = false;\n}\n", "loc": ["programs", "micro", "settings"], "readOnly": false, "title": "programs.micro.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/micro/settings.json</code>. See\n<a href=\"https://github.com/zyedidia/micro/blob/master/runtime/help/options.md\">https://github.com/zyedidia/micro/blob/master/runtime/help/options.md</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "false", "description": "Whether to enable mise.", "example": "true", "loc": ["programs", "mise", "enable"], "readOnly": false, "title": "programs.mise.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mise.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "mise", "enableBashIntegration"], "readOnly": false, "title": "programs.mise.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "mise", "enableFishIntegration"], "readOnly": false, "title": "programs.mise.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "mise", "enableNushellIntegration"], "readOnly": false, "title": "programs.mise.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "mise", "enableZshIntegration"], "readOnly": false, "title": "programs.mise.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "{ }", "description": "Config written to {file}$XDG_CONFIG_HOME/mise/config.toml.\nSee https://mise.jdx.dev/configuration.html#global-config-config-mise-config-toml\nfor details on supported values.", "example": "tools = {\n  node = \"lts\";\n  python = [\"3.10\" \"3.11\"];\n};\n\naliases = {\n  my_custom_node = \"20\";\n};\n", "loc": ["programs", "mise", "globalConfig"], "readOnly": false, "title": "programs.mise.globalConfig", "type": "TOML value", "descriptionHTML": "<p>Config written to {file}<code>$XDG_CONFIG_HOME/mise/config.toml</code>.</p>\n<p>See <a href=\"https://mise.jdx.dev/configuration.html#global-config-config-mise-config-toml\">https://mise.jdx.dev/configuration.html#global-config-config-mise-config-toml</a>\nfor details on supported values.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "pkgs.mise", "description": "The mise package to use.", "example": "", "loc": ["programs", "mise", "package"], "readOnly": false, "title": "programs.mise.package", "type": "null or package", "descriptionHTML": "<p>The mise package to use.</p>"}, {"declarations": [{"name": "<programs/mise.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mise.nix"}], "default": "{ }", "description": "Settings written to {file}$XDG_CONFIG_HOME/mise/settings.toml.\nSee https://mise.jdx.dev/configuration.html#settings-file-config-mise-settings-toml\nfor details on supported values.", "example": "verbose = false;\nexperimental = false;\ndisable_tools = [\"node\"];\n", "loc": ["programs", "mise", "settings"], "readOnly": false, "title": "programs.mise.settings", "type": "TOML value", "descriptionHTML": "<p>Settings written to {file}<code>$XDG_CONFIG_HOME/mise/settings.toml</code>.</p>\n<p>See <a href=\"https://mise.jdx.dev/configuration.html#settings-file-config-mise-settings-toml\">https://mise.jdx.dev/configuration.html#settings-file-config-mise-settings-toml</a>\nfor details on supported values.</p>"}, {"declarations": [{"name": "<programs/mods.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mods.nix"}], "default": "false", "description": "Whether to enable mods.", "example": "true", "loc": ["programs", "mods", "enable"], "readOnly": false, "title": "programs.mods.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mods.</p>"}, {"declarations": [{"name": "<programs/mods.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mods.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "mods", "enableBashIntegration"], "readOnly": false, "title": "programs.mods.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/mods.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mods.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "mods", "enableFishIntegration"], "readOnly": false, "title": "programs.mods.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/mods.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mods.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "mods", "enableZshIntegration"], "readOnly": false, "title": "programs.mods.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/mods.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mods.nix"}], "default": "pkgs.mods", "description": "The mods package to use.", "example": "", "loc": ["programs", "mods", "package"], "readOnly": false, "title": "programs.mods.package", "type": "package", "descriptionHTML": "<p>The mods package to use.</p>"}, {"declarations": [{"name": "<programs/mods.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mods.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/mods/mods.yml.\nSee https://github.com/charmbracelet/mods/blob/main/config_template.yml for the full\nlist of options.", "example": "''\n  {\n    default-model = \"llama3.2\";\n    apis = {\n      ollama = {\n        base-url = \"http://localhost:11434/api\";\n        models = {\n          \"llama3.2\" = {\n            max-input-chars = 650000;\n          };\n        };\n      };\n    };\n  }\n''", "loc": ["programs", "mods", "settings"], "readOnly": false, "title": "programs.mods.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/mods/mods.yml</code>.</p>\n<p>See <a href=\"https://github.com/charmbracelet/mods/blob/main/config_template.yml\">https://github.com/charmbracelet/mods/blob/main/config_template.yml</a> for the full\nlist of options.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "{ }", "description": "Input configuration written to\n{file}$XDG_CONFIG_HOME/mpv/input.conf. See\n{manpage}mpv(1)\nfor the full list of options.", "example": "{\n  WHEEL_UP = \"seek 10\";\n  WHEEL_DOWN = \"seek -10\";\n  \"Alt+0\" = \"set window-scale 0.5\";\n}\n", "loc": ["programs", "mpv", "bindings"], "readOnly": false, "title": "programs.mpv.bindings", "type": "attribute set of string", "descriptionHTML": "<p>Input configuration written to\n{file}<code>$XDG_CONFIG_HOME/mpv/input.conf</code>. See\n{manpage}<code>mpv(1)</code>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/mpv/mpv.conf. See\n{manpage}mpv(1)\nfor the full list of options.", "example": "{\n  profile = \"gpu-hq\";\n  force-window = true;\n  ytdl-format = \"bestvideo+bestaudio\";\n  cache-default = 4000000;\n}\n", "loc": ["programs", "mpv", "config"], "readOnly": false, "title": "programs.mpv.config", "type": "attribute set of (string or signed integer or boolean or floating point number or list of (string or signed integer or boolean or floating point number))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/mpv/mpv.conf</code>. See\n{manpage}<code>mpv(1)</code>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "[ ]", "description": "Profiles to be applied by default. Options set by them are overridden\nby options set in .", "example": "[\n  \"gpu-hq\"\n]", "loc": ["programs", "mpv", "defaultProfiles"], "readOnly": false, "title": "programs.mpv.defaultProfiles", "type": "list of string", "descriptionHTML": "<p>Profiles to be applied by default. Options set by them are overridden\nby options set in <a href=\"#opt-programs.mpv.config\"></a>.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "false", "description": "Whether to enable mpv.", "example": "true", "loc": ["programs", "mpv", "enable"], "readOnly": false, "title": "programs.mpv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpv.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "\"\"", "description": "Additional lines that are appended to {file}$XDG_CONFIG_HOME/mpv/input.conf.\n See {manpage}mpv(1) for the full list of options.", "example": "''\n  esc         quit                        #! Quit\n  #           script-binding uosc/video   #! Video tracks\n  # additional comments\n''", "loc": ["programs", "mpv", "extraInput"], "readOnly": false, "title": "programs.mpv.extraInput", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional lines that are appended to {file}<code>$XDG_CONFIG_HOME/mpv/input.conf</code>.\n See {manpage}<code>mpv(1)</code> for the full list of options.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "[ ]", "description": "List of configuration files to include at the end of mpv.conf.", "example": "[\n  \"~/path/to/config.inc\";\n  \"~/path/to/conditional.inc\";\n]\n", "loc": ["programs", "mpv", "includes"], "readOnly": false, "title": "programs.mpv.includes", "type": "list of string", "descriptionHTML": "<p>List of configuration files to include at the end of mpv.conf.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "pkgs.mpv", "description": "The mpv package to use.", "example": "pkgs.mpv-unwrapped.wrapper { mpv = pkgs.mpv-unwrapped.override { vapoursynthSupport = true; }; youtubeSupport = true; }", "loc": ["programs", "mpv", "package"], "readOnly": false, "title": "programs.mpv.package", "type": "package", "descriptionHTML": "<p>The mpv package to use.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "{ }", "description": "Sub-configuration options for specific profiles written to\n{file}$XDG_CONFIG_HOME/mpv/mpv.conf. See\n{option}programs.mpv.config for more information.", "example": "{\n  fast = {\n    vo = \"vdpau\";\n  };\n  \"protocol.dvd\" = {\n    profile-desc = \"profile for dvd:// streams\";\n    alang = \"en\";\n  };\n}\n", "loc": ["programs", "mpv", "profiles"], "readOnly": false, "title": "programs.mpv.profiles", "type": "attribute set of attribute set of (string or signed integer or boolean or floating point number or list of (string or signed integer or boolean or floating point number))", "descriptionHTML": "<p>Sub-configuration options for specific profiles written to\n{file}<code>$XDG_CONFIG_HOME/mpv/mpv.conf</code>. See\n{option}<code>programs.mpv.config</code> for more information.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "{ }", "description": "Script options added to\n{file}$XDG_CONFIG_HOME/mpv/script-opts/. See\n{manpage}mpv(1)\nfor the full list of options of builtin scripts.", "example": "{\n  osc = {\n    scalewindowed = 2.0;\n    vidscale = false;\n    visibility = \"always\";\n  };\n}", "loc": ["programs", "mpv", "scriptOpts"], "readOnly": false, "title": "programs.mpv.scriptOpts", "type": "attribute set of attribute set of (string or signed integer or boolean or floating point number or list of (string or signed integer or boolean or floating point number))", "descriptionHTML": "<p>Script options added to\n{file}<code>$XDG_CONFIG_HOME/mpv/script-opts/</code>. See\n{manpage}<code>mpv(1)</code>\nfor the full list of options of builtin scripts.</p>"}, {"declarations": [{"name": "<programs/mpv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpv.nix"}], "default": "[ ]", "description": "List of scripts to use with mpv.", "example": "[ pkgs.mpvScripts.mpris ]", "loc": ["programs", "mpv", "scripts"], "readOnly": false, "title": "programs.mpv.scripts", "type": "list of package", "descriptionHTML": "<p>List of scripts to use with mpv.</p>"}, {"declarations": [{"name": "<programs/mpvpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpvpaper.nix"}], "default": "false", "description": "Whether to enable mpvpaper.", "example": "true", "loc": ["programs", "mpvpaper", "enable"], "readOnly": false, "title": "programs.mpvpaper.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpvpaper.</p>"}, {"declarations": [{"name": "<programs/mpvpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpvpaper.nix"}], "default": "pkgs.mpvpaper", "description": "The mpvpaper package to use.", "example": "", "loc": ["programs", "mpvpaper", "package"], "readOnly": false, "title": "programs.mpvpaper.package", "type": "null or package", "descriptionHTML": "<p>The mpvpaper package to use.</p>"}, {"declarations": [{"name": "<programs/mpvpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpvpaper.nix"}], "default": "\"\"", "description": "List of program names that will cause mpvpaper to pause.\nPrograms must be separed by spaces or newlines.", "example": "''\n  firefox\n  steam\n  obs\n''", "loc": ["programs", "mpvpaper", "pauseList"], "readOnly": false, "title": "programs.mpvpaper.pauseList", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>List of program names that will cause mpvpaper to pause.\nPrograms must be separed by spaces or newlines.</p>"}, {"declarations": [{"name": "<programs/mpvpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mpvpaper.nix"}], "default": "\"\"", "description": "List of program names that will cause mpvpaper to stop.\nPrograms must be separed by spaces or newlines.", "example": "''\n  firefox\n  steam\n  obs\n''", "loc": ["programs", "mpvpaper", "stopList"], "readOnly": false, "title": "programs.mpvpaper.stopList", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>List of program names that will cause mpvpaper to stop.\nPrograms must be separed by spaces or newlines.</p>"}, {"declarations": [{"name": "<programs/mr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mr.nix"}], "default": "false", "description": "Whether to enable mr, a tool to manage all your version control repositories.", "example": "true", "loc": ["programs", "mr", "enable"], "readOnly": false, "title": "programs.mr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mr, a tool to manage all your version control repositories.</p>"}, {"declarations": [{"name": "<programs/mr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mr.nix"}], "default": "pkgs.mr", "description": "The mr package to use.", "example": "", "loc": ["programs", "mr", "package"], "readOnly": false, "title": "programs.mr.package", "type": "null or package", "descriptionHTML": "<p>The mr package to use.</p>"}, {"declarations": [{"name": "<programs/mr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mr.nix"}], "default": "{ }", "description": "Configuration written to {file}$HOME/.mrconfig\nSee https://myrepos.branchable.com/\nfor an example configuration.", "example": "{\n  foo = {\n    checkout = \"git clone git@github.com:joeyh/foo.git\";\n    update = \"git pull --rebase\";\n  };\n  \".local/share/password-store\" = {\n    checkout = \"git clone git@github.com:myuser/password-store.git\";\n  };\n}\n", "loc": ["programs", "mr", "settings"], "readOnly": false, "title": "programs.mr.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a non-empty list of them)", "descriptionHTML": "<p>Configuration written to {file}<code>$HOME/.mrconfig</code>\nSee <a href=\"https://myrepos.branchable.com/\">https://myrepos.branchable.com/</a>\nfor an example configuration.</p>"}, {"declarations": [{"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}], "default": "\"\"", "description": "Content added to msmtp config.\nSee https://marlam.de/msmtp/msmtprc.txt for examples.\nNote, if running msmtp fails with the error message \"account default\nwas already defined\" then you probably have an account command here.\nAccount commands should be placed in\n.", "example": "lib.mkOrder 1200 '''\n  set syslog\n''';\n", "loc": ["programs", "msmtp", "configContent"], "readOnly": false, "title": "programs.msmtp.configContent", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Content added to msmtp config.\nSee <a href=\"https://marlam.de/msmtp/msmtprc.txt\">https://marlam.de/msmtp/msmtprc.txt</a> for examples.</p>\n<p>Note, if running msmtp fails with the error message \"account default\nwas already defined\" then you probably have an account command here.\nAccount commands should be placed in\n<a href=\"#opt-accounts.email.accounts._name_.msmtp.extraConfig\"></a>.</p>"}, {"declarations": [{"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}], "default": "false", "description": "Whether to enable msmtp.", "example": "true", "loc": ["programs", "msmtp", "enable"], "readOnly": false, "title": "programs.msmtp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable msmtp.</p>"}, {"declarations": [{"name": "<programs/msmtp/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/msmtp/default.nix"}], "default": "pkgs.msmtp", "description": "The msmtp package to use.", "example": "", "loc": ["programs", "msmtp", "package"], "readOnly": false, "title": "programs.msmtp.package", "type": "package", "descriptionHTML": "<p>The msmtp package to use.</p>"}, {"declarations": [{"name": "<programs/mu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mu.nix"}], "default": "false", "description": "Whether to enable mu, a maildir indexer and searcher.", "example": "true", "loc": ["programs", "mu", "enable"], "readOnly": false, "title": "programs.mu.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mu, a maildir indexer and searcher.</p>"}, {"declarations": [{"name": "<programs/mu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mu.nix"}], "default": "config.xdg.cacheHome + \"/mu\"", "description": "Directory to store Mu's database.", "example": "\"\\${config.home.homeDirectory}/Maildir/.mu\"", "loc": ["programs", "mu", "home"], "readOnly": false, "title": "programs.mu.home", "type": "absolute path", "descriptionHTML": "<p>Directory to store Mu's database.</p>"}, {"declarations": [{"name": "<programs/mu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mu.nix"}], "default": "pkgs.mu", "description": "The mu package to use.", "example": "", "loc": ["programs", "mu", "package"], "readOnly": false, "title": "programs.mu.package", "type": "package", "descriptionHTML": "<p>The mu package to use.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "false", "description": "Whether to enable mujmap Gmail synchronization for notmuch.", "example": "true", "loc": ["programs", "mujmap", "enable"], "readOnly": false, "title": "programs.mujmap.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mujmap Gmail synchronization for notmuch.</p>"}, {"declarations": [{"name": "<programs/mujmap.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/mujmap.nix"}], "default": "pkgs.mujmap", "description": "The mujmap package to use.", "example": "", "loc": ["programs", "mujmap", "package"], "readOnly": false, "title": "programs.mujmap.package", "type": "package", "descriptionHTML": "<p>The mujmap package to use.</p>"}, {"declarations": [{"name": "<programs/navi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/navi.nix"}], "default": "false", "description": "Whether to enable Navi.", "example": "true", "loc": ["programs", "navi", "enable"], "readOnly": false, "title": "programs.navi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Navi.</p>"}, {"declarations": [{"name": "<programs/navi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/navi.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "navi", "enableBashIntegration"], "readOnly": false, "title": "programs.navi.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/navi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/navi.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "navi", "enableFishIntegration"], "readOnly": false, "title": "programs.navi.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/navi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/navi.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "navi", "enableZshIntegration"], "readOnly": false, "title": "programs.navi.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/navi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/navi.nix"}], "default": "pkgs.navi", "description": "The navi package to use.", "example": "", "loc": ["programs", "navi", "package"], "readOnly": false, "title": "programs.navi.package", "type": "package", "descriptionHTML": "<p>The navi package to use.</p>"}, {"declarations": [{"name": "<programs/navi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/navi.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/navi/config.yaml on Linux or\n{file}$HOME/Library/Application Support/navi/config.yaml\non Darwin. See\nhttps://github.com/denisidoro/navi/blob/master/docs/config_file.md\nfor more information.", "example": "{\n  cheats = {\n    paths = [\n      \"~/cheats/\"\n    ];\n  };\n}\n", "loc": ["programs", "navi", "settings"], "readOnly": false, "title": "programs.navi.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/navi/config.yaml</code> on Linux or\n{file}<code>$HOME/Library/Application Support/navi/config.yaml</code>\non Darwin. See\n<a href=\"https://github.com/denisidoro/navi/blob/master/docs/config_file.md\">https://github.com/denisidoro/navi/blob/master/docs/config_file.md</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "[ ]", "description": "List of keybindings.", "example": "[\n  { key = \"j\"; command = \"scroll_down\"; }\n  { key = \"k\"; command = \"scroll_up\"; }\n  { key = \"J\"; command = [ \"select_item\" \"scroll_down\" ]; }\n  { key = \"K\"; command = [ \"select_item\" \"scroll_up\" ]; }\n]\n", "loc": ["programs", "ncmpcpp", "bindings"], "readOnly": false, "title": "programs.ncmpcpp.bindings", "type": "list of (submodule)", "descriptionHTML": "<p>List of keybindings.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "", "description": "Command or sequence of commands to be executed.", "example": "\"scroll_down\"", "loc": ["programs", "ncmpcpp", "bindings", "*", "command"], "readOnly": false, "title": "programs.ncmpcpp.bindings.*.command", "type": "string or list of string", "descriptionHTML": "<p>Command or sequence of commands to be executed.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "", "description": "Key to bind.", "example": "\"j\"", "loc": ["programs", "ncmpcpp", "bindings", "*", "key"], "readOnly": false, "title": "programs.ncmpcpp.bindings.*.key", "type": "string", "descriptionHTML": "<p>Key to bind.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "false", "description": "Whether to enable ncmpcpp - an ncurses Music Player Daemon (MPD) client.", "example": "true", "loc": ["programs", "ncmpcpp", "enable"], "readOnly": false, "title": "programs.ncmpcpp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ncmpcpp - an ncurses Music Player Daemon (MPD) client.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "if pkgs.stdenv.hostPlatform.isLinux && config.services.mpd.enable then\n  config.services.mpd.musicDirectory\nelse\n  null\n", "description": "Value of the mpd_music_dir setting. On Linux platforms the\nvalue of {var}services.mpd.musicDirectory is used as the\ndefault if {var}services.mpd.enable is\ntrue.", "example": "\"~/music\"", "loc": ["programs", "ncmpcpp", "mpdMusicDir"], "readOnly": false, "title": "programs.ncmpcpp.mpdMusicDir", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>Value of the <code>mpd_music_dir</code> setting. On Linux platforms the\nvalue of {var}<code>services.mpd.musicDirectory</code> is used as the\ndefault if {var}<code>services.mpd.enable</code> is\n<code>true</code>.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "pkgs.ncmpcpp", "description": "The ncmpcpp package to use.", "example": "pkgs.ncmpcpp.override { visualizerSupport = true; }", "loc": ["programs", "ncmpcpp", "package"], "readOnly": false, "title": "programs.ncmpcpp.package", "type": "package", "descriptionHTML": "<p>The ncmpcpp package to use.</p>"}, {"declarations": [{"name": "<programs/ncmpcpp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncmpcpp.nix"}], "default": "{ }", "description": "Attribute set from name of a setting to its value. For available options\nsee\n{manpage}ncmpcpp(1).", "example": "{\n  ncmpcpp_directory = \"~/.local/share/ncmpcpp\";\n}", "loc": ["programs", "ncmpcpp", "settings"], "readOnly": false, "title": "programs.ncmpcpp.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Attribute set from name of a setting to its value. For available options\nsee\n{manpage}<code>ncmpcpp(1)</code>.</p>"}, {"declarations": [{"name": "<programs/ncspot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncspot.nix"}], "default": "false", "description": "Whether to enable ncspot.", "example": "true", "loc": ["programs", "ncspot", "enable"], "readOnly": false, "title": "programs.ncspot.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ncspot.</p>"}, {"declarations": [{"name": "<programs/ncspot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncspot.nix"}], "default": "pkgs.ncspot", "description": "The ncspot package to use.", "example": "", "loc": ["programs", "ncspot", "package"], "readOnly": false, "title": "programs.ncspot.package", "type": "null or package", "descriptionHTML": "<p>The ncspot package to use.</p>"}, {"declarations": [{"name": "<programs/ncspot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ncspot.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/ncspot/config.toml.\nSee https://github.com/hrkfdn/ncspot#configuration\nfor the full list of options.", "example": "{\n  shuffle = true;\n  gapless = true;\n}\n", "loc": ["programs", "ncspot", "settings"], "readOnly": false, "title": "programs.ncspot.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/ncspot/config.toml</code>.</p>\n<p>See <a href=\"https://github.com/hrkfdn/ncspot#configuration\">https://github.com/hrkfdn/ncspot#configuration</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "{ }", "description": "Automatic preferences files for ne.", "example": "{\n  nix = ''\n    TAB 0\n    TS 2\n  '';\n  js = ''\n    TS 4\n  '';\n}\n", "loc": ["programs", "ne", "automaticPreferences"], "readOnly": false, "title": "programs.ne.automaticPreferences", "type": "attribute set of strings concatenated with \"\\n\"", "descriptionHTML": "<p>Automatic preferences files for ne.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "\"\"", "description": "Default preferences for ne.\nEquivalent to programs.ne.automaticPreferences.\".default\".", "example": "", "loc": ["programs", "ne", "defaultPreferences"], "readOnly": false, "title": "programs.ne.defaultPreferences", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Default preferences for ne.</p>\n<p>Equivalent to <code>programs.ne.automaticPreferences.\".default\"</code>.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "false", "description": "Whether to enable ne.", "example": "true", "loc": ["programs", "ne", "enable"], "readOnly": false, "title": "programs.ne.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ne.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "\"\"", "description": "Keybinding file for ne.", "example": "''\n  KEY 7f BS\n  SEQ \"\\x1b[1;5D\" 7f\n''", "loc": ["programs", "ne", "keybindings"], "readOnly": false, "title": "programs.ne.keybindings", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Keybinding file for ne.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "\"\"", "description": "Menu configuration file for ne.", "example": "", "loc": ["programs", "ne", "menus"], "readOnly": false, "title": "programs.ne.menus", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Menu configuration file for ne.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "pkgs.ne", "description": "The ne package to use.", "example": "", "loc": ["programs", "ne", "package"], "readOnly": false, "title": "programs.ne.package", "type": "null or package", "descriptionHTML": "<p>The ne package to use.</p>"}, {"declarations": [{"name": "<programs/ne.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ne.nix"}], "default": "\"\"", "description": "Virtual extensions configuration file for ne.", "example": "''\n  sh   1  ^#!\\s*/.*\\b(bash|sh|ksh|zsh)\\s*\n  csh  1  ^#!\\s*/.*\\b(csh|tcsh)\\s*\n''", "loc": ["programs", "ne", "virtualExtensions"], "readOnly": false, "title": "programs.ne.virtualExtensions", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Virtual extensions configuration file for ne.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "[ ]", "description": "List of keybindings.", "example": "", "loc": ["programs", "neomutt", "binds"], "readOnly": false, "title": "programs.neomutt.binds", "type": "list of (submodule)", "descriptionHTML": "<p>List of keybindings.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "", "description": "Specify the action to take.", "example": "\"<enter-command>toggle sidebar_visible<enter><refresh>\"", "loc": ["programs", "neomutt", "binds", "*", "action"], "readOnly": false, "title": "programs.neomutt.binds.*.action", "type": "string", "descriptionHTML": "<p>Specify the action to take.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "", "description": "The key to bind.\nIf you want to bind '\\Cp' for example, which would be Ctrl + 'p', you need to escape twice: '\\Cp'!", "example": "\"<left>\"", "loc": ["programs", "neomutt", "binds", "*", "key"], "readOnly": false, "title": "programs.neomutt.binds.*.key", "type": "string", "descriptionHTML": "<p>The key to bind.</p>\n<p>If you want to bind '\\Cp' for example, which would be Ctrl + 'p', you need to escape twice: '\\Cp'!</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "[\n  \"index\"\n]", "description": "Select the menu to bind the command to.", "example": "", "loc": ["programs", "neomutt", "binds", "*", "map"], "readOnly": false, "title": "programs.neomutt.binds.*.map", "type": "one of \"alias\", \"attach\", \"browser\", \"compose\", \"editor\", \"generic\", \"index\", \"mix\", \"pager\", \"pgp\", \"postpone\", \"query\", \"smime\" or list of (one of \"alias\", \"attach\", \"browser\", \"compose\", \"editor\", \"generic\", \"index\", \"mix\", \"pager\", \"pgp\", \"postpone\", \"query\", \"smime\")", "descriptionHTML": "<p>Select the menu to bind the command to.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "true", "description": "Whether to enable changing the folder when sourcing an account.", "example": "true", "loc": ["programs", "neomutt", "changeFolderWhenSourcingAccount"], "readOnly": false, "title": "programs.neomutt.changeFolderWhenSourcingAccount", "type": "boolean", "descriptionHTML": "<p>Whether to enable changing the folder when sourcing an account.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "null", "description": "Enable and set the interval of automatic mail check.", "example": "60", "loc": ["programs", "neomutt", "checkStatsInterval"], "readOnly": false, "title": "programs.neomutt.checkStatsInterval", "type": "null or signed integer", "descriptionHTML": "<p>Enable and set the interval of automatic mail check.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "\"$EDITOR\"", "description": "Select the editor used for writing mail.", "example": "", "loc": ["programs", "neomutt", "editor"], "readOnly": false, "title": "programs.neomutt.editor", "type": "string", "descriptionHTML": "<p>Select the editor used for writing mail.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "false", "description": "Whether to enable the NeoMutt mail client.", "example": "true", "loc": ["programs", "neomutt", "enable"], "readOnly": false, "title": "programs.neomutt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the NeoMutt mail client.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "\"\"", "description": "Extra configuration appended to the end.", "example": "", "loc": ["programs", "neomutt", "extraConfig"], "readOnly": false, "title": "programs.neomutt.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration appended to the end.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "[ ]", "description": "List of macros.", "example": "", "loc": ["programs", "neomutt", "macros"], "readOnly": false, "title": "programs.neomutt.macros", "type": "list of (submodule)", "descriptionHTML": "<p>List of macros.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "", "description": "Specify the action to take.", "example": "\"<enter-command>toggle sidebar_visible<enter><refresh>\"", "loc": ["programs", "neomutt", "macros", "*", "action"], "readOnly": false, "title": "programs.neomutt.macros.*.action", "type": "string", "descriptionHTML": "<p>Specify the action to take.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "", "description": "The key to bind.\nIf you want to bind '\\Cp' for example, which would be Ctrl + 'p', you need to escape twice: '\\Cp'!", "example": "\"<left>\"", "loc": ["programs", "neomutt", "macros", "*", "key"], "readOnly": false, "title": "programs.neomutt.macros.*.key", "type": "string", "descriptionHTML": "<p>The key to bind.</p>\n<p>If you want to bind '\\Cp' for example, which would be Ctrl + 'p', you need to escape twice: '\\Cp'!</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "[\n  \"index\"\n]", "description": "Select the menu to bind the command to.", "example": "", "loc": ["programs", "neomutt", "macros", "*", "map"], "readOnly": false, "title": "programs.neomutt.macros.*.map", "type": "one of \"alias\", \"attach\", \"browser\", \"compose\", \"editor\", \"generic\", \"index\", \"mix\", \"pager\", \"pgp\", \"postpone\", \"query\", \"smime\" or list of (one of \"alias\", \"attach\", \"browser\", \"compose\", \"editor\", \"generic\", \"index\", \"mix\", \"pager\", \"pgp\", \"postpone\", \"query\", \"smime\")", "descriptionHTML": "<p>Select the menu to bind the command to.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "pkgs.neomutt", "description": "The neomutt package to use.", "example": "", "loc": ["programs", "neomutt", "package"], "readOnly": false, "title": "programs.neomutt.package", "type": "package", "descriptionHTML": "<p>The neomutt package to use.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "{ }", "description": "Extra configuration appended to the end.", "example": "", "loc": ["programs", "neomutt", "settings"], "readOnly": false, "title": "programs.neomutt.settings", "type": "attribute set of string", "descriptionHTML": "<p>Extra configuration appended to the end.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "{ }", "description": "Options related to the sidebar.", "example": "", "loc": ["programs", "neomutt", "sidebar"], "readOnly": false, "title": "programs.neomutt.sidebar", "type": "submodule", "descriptionHTML": "<p>Options related to the sidebar.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "false", "description": "Whether to enable sidebar support.", "example": "true", "loc": ["programs", "neomutt", "sidebar", "enable"], "readOnly": false, "title": "programs.neomutt.sidebar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sidebar support.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "\"%D%?F? [%F]?%* %?N?%N/?%S\"", "description": "Sidebar format. Check neomutt documentation for details.", "example": "", "loc": ["programs", "neomutt", "sidebar", "format"], "readOnly": false, "title": "programs.neomutt.sidebar.format", "type": "string", "descriptionHTML": "<p>Sidebar format. Check neomutt documentation for details.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "true", "description": "By default sidebar shows the full path of the mailbox, but\nwith this enabled only the relative name is shown.", "example": "", "loc": ["programs", "neomutt", "sidebar", "shortPath"], "readOnly": false, "title": "programs.neomutt.sidebar.shortPath", "type": "boolean", "descriptionHTML": "<p>By default sidebar shows the full path of the mailbox, but\nwith this enabled only the relative name is shown.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "22", "description": "Width of the sidebar", "example": "", "loc": ["programs", "neomutt", "sidebar", "width"], "readOnly": false, "title": "programs.neomutt.sidebar.width", "type": "signed integer", "descriptionHTML": "<p>Width of the sidebar</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "\"threads\"", "description": "Sorting method on messages.", "example": "", "loc": ["programs", "neomutt", "sort"], "readOnly": false, "title": "programs.neomutt.sort", "type": "one of \"date\", \"date-received\", \"from\", \"mailbox-order\", \"score\", \"size\", \"spam\", \"subject\", \"threads\", \"to\", \"reverse-date\", \"reverse-date-received\", \"reverse-from\", \"reverse-mailbox-order\", \"reverse-score\", \"reverse-size\", \"reverse-spam\", \"reverse-subject\", \"reverse-threads\", \"reverse-to\", \"last-date\", \"last-date-received\", \"last-from\", \"last-mailbox-order\", \"last-score\", \"last-size\", \"last-spam\", \"last-subject\", \"last-threads\", \"last-to\", \"reverse-last-date\", \"reverse-last-date-received\", \"reverse-last-from\", \"reverse-last-mailbox-order\", \"reverse-last-score\", \"reverse-last-size\", \"reverse-last-spam\", \"reverse-last-subject\", \"reverse-last-threads\", \"reverse-last-to\"", "descriptionHTML": "<p>Sorting method on messages.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "true", "description": "Whether to enable source the primary account by default.", "example": "true", "loc": ["programs", "neomutt", "sourcePrimaryAccount"], "readOnly": false, "title": "programs.neomutt.sourcePrimaryAccount", "type": "boolean", "descriptionHTML": "<p>Whether to enable source the primary account by default.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "false", "description": "Set unmailboxes * at the start of account configurations.\nIt removes previous sidebar mailboxes when sourcing an account configuration.\nSee http://www.mutt.org/doc/manual/#mailboxes for more information.", "example": "", "loc": ["programs", "neomutt", "unmailboxes"], "readOnly": false, "title": "programs.neomutt.unmailboxes", "type": "boolean", "descriptionHTML": "<p>Set <code>unmailboxes *</code> at the start of account configurations.\nIt removes previous sidebar mailboxes when sourcing an account configuration.</p>\n<p>See <a href=\"http://www.mutt.org/doc/manual/#mailboxes\">http://www.mutt.org/doc/manual/#mailboxes</a> for more information.</p>"}, {"declarations": [{"name": "<programs/neomutt/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neomutt/default.nix"}], "default": "false", "description": "Enable vim-like bindings.", "example": "", "loc": ["programs", "neomutt", "vimKeys"], "readOnly": false, "title": "programs.neomutt.vimKeys", "type": "boolean", "descriptionHTML": "<p>Enable vim-like bindings.</p>"}, {"declarations": [{"name": "<programs/neovide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovide.nix"}], "default": "false", "description": "Whether to enable Neovide, No Nonsense Neovim Client in Rust.", "example": "true", "loc": ["programs", "neovide", "enable"], "readOnly": false, "title": "programs.neovide.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Neovide, No Nonsense Neovim Client in Rust.</p>"}, {"declarations": [{"name": "<programs/neovide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovide.nix"}], "default": "pkgs.neovide", "description": "The neovide package to use.", "example": "", "loc": ["programs", "neovide", "package"], "readOnly": false, "title": "programs.neovide.package", "type": "null or package", "descriptionHTML": "<p>The neovide package to use.</p>"}, {"declarations": [{"name": "<programs/neovide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovide.nix"}], "default": "{ }", "description": "Neovide configuration.\nFor available settings see https://neovide.dev/config-file.html.\nFor any option not found will need to be done in your neovim's config instead.", "example": "{\n  fork = false;\n  frame = \"full\";\n  idle = true;\n  maximized = false;\n  neovim-bin = \"/usr/bin/nvim\";\n  no-multigrid = false;\n  srgb = false;\n  tabs = true;\n  theme = \"auto\";\n  title-hidden = true;\n  vsync = true;\n  wsl = false;\n\n  font = {\n    normal = [];\n    size = 14.0;\n  };\n}\n", "loc": ["programs", "neovide", "settings"], "readOnly": false, "title": "programs.neovide.settings", "type": "TOML value", "descriptionHTML": "<p>Neovide configuration.\nFor available settings see <a href=\"https://neovide.dev/config-file.html\">https://neovide.dev/config-file.html</a>.\nFor any option not found will need to be done in your neovim's config instead.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Whether to enable Coc.", "example": "true", "loc": ["programs", "neovim", "coc", "enable"], "readOnly": false, "title": "programs.neovim.coc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Coc.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "pkgs.vimPlugins.coc-nvim", "description": "The coc-nvim package to use.", "example": "", "loc": ["programs", "neovim", "coc", "package"], "readOnly": false, "title": "programs.neovim.coc.package", "type": "package", "descriptionHTML": "<p>The coc-nvim package to use.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "\"\"", "description": "Script to configure CoC. Must be viml.", "example": "", "loc": ["programs", "neovim", "coc", "pluginConfig"], "readOnly": false, "title": "programs.neovim.coc.pluginConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Script to configure CoC. Must be viml.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "{ }", "description": "Extra configuration lines to add to\n{file}$XDG_CONFIG_HOME/nvim/coc-settings.json\nSee\nhttps://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file\nfor options.", "example": "{\n  \"suggest.noselect\" = true;\n  \"suggest.enablePreview\" = true;\n  \"suggest.enablePreselect\" = false;\n  \"suggest.disableKind\" = true;\n  languageserver = {\n    haskell = {\n      command = \"haskell-language-server-wrapper\";\n      args = [ \"--lsp\" ];\n      rootPatterns = [\n        \"*.cabal\"\n        \"stack.yaml\"\n        \"cabal.project\"\n        \"package.yaml\"\n        \"hie.yaml\"\n      ];\n      filetypes = [ \"haskell\" \"lhaskell\" ];\n    };\n  };\n};\n", "loc": ["programs", "neovim", "coc", "settings"], "readOnly": false, "title": "programs.neovim.coc.settings", "type": "JSON value", "descriptionHTML": "<p>Extra configuration lines to add to\n{file}<code>$XDG_CONFIG_HOME/nvim/coc-settings.json</code>\nSee\n<a href=\"https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file\">https://github.com/neoclide/coc.nvim/wiki/Using-the-configuration-file</a>\nfor options.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Whether to configure {command}nvim as the default\neditor using the {env}EDITOR environment variable.", "example": "", "loc": ["programs", "neovim", "defaultEditor"], "readOnly": false, "title": "programs.neovim.defaultEditor", "type": "boolean", "descriptionHTML": "<p>Whether to configure {command}<code>nvim</code> as the default\neditor using the {env}<code>EDITOR</code> environment variable.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Whether to enable Neovim.", "example": "true", "loc": ["programs", "neovim", "enable"], "readOnly": false, "title": "programs.neovim.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Neovim.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "\"\"", "description": "Custom vimrc lines.", "example": "''\n  set nobackup\n''", "loc": ["programs", "neovim", "extraConfig"], "readOnly": false, "title": "programs.neovim.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom vimrc lines.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "\"\"", "description": "Custom lua lines.", "example": "''\n  vim.opt.nobackup = true\n''", "loc": ["programs", "neovim", "extraLuaConfig"], "readOnly": false, "title": "programs.neovim.extraLuaConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom lua lines.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "ps: [ ]", "description": "The extra Lua packages required for your plugins to work.\nThis option accepts a function that takes a Lua package set as an argument,\nand selects the required Lua packages from this package set.\nSee the example for more info.", "example": "luaPkgs: with luaPkgs; [ luautf8 ]", "loc": ["programs", "neovim", "extraLuaPackages"], "readOnly": false, "title": "programs.neovim.extraLuaPackages", "type": "(function that evaluates to a(n) list of package) or (list of package) convertible to it", "descriptionHTML": "<p>The extra Lua packages required for your plugins to work.\nThis option accepts a function that takes a Lua package set as an argument,\nand selects the required Lua packages from this package set.\nSee the example for more info.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "[ ]", "description": "Extra packages available to nvim.", "example": "[ pkgs.shfmt ]", "loc": ["programs", "neovim", "extraPackages"], "readOnly": false, "title": "programs.neovim.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages available to nvim.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "ps: [ ]", "description": "The extra Python 3 packages required for your plugins to work.\nThis option accepts a function that takes a Python 3 package set as an argument,\nand selects the required Python 3 packages from this package set.\nSee the example for more info.", "example": "pyPkgs: with pyPkgs; [ python-language-server ]", "loc": ["programs", "neovim", "extraPython3Packages"], "readOnly": false, "title": "programs.neovim.extraPython3Packages", "type": "(function that evaluates to a(n) list of package) or (list of package) convertible to it", "descriptionHTML": "<p>The extra Python 3 packages required for your plugins to work.\nThis option accepts a function that takes a Python 3 package set as an argument,\nand selects the required Python 3 packages from this package set.\nSee the example for more info.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "[ ]", "description": "Extra arguments to be passed to the neovim wrapper.\nThis option sets environment variables required for building and running binaries\nwith external package managers like mason.nvim.", "example": "[\n  \"--suffix\"\n  \"LIBRARY_PATH\"\n  \":\"\n  \"${lib.makeLibraryPath [ pkgs.stdenv.cc.cc pkgs.zlib ]}\"\n  \"--suffix\"\n  \"PKG_CONFIG_PATH\"\n  \":\"\n  \"${lib.makeSearchPathOutput \"dev\" \"lib/pkgconfig\" [ pkgs.stdenv.cc.cc pkgs.zlib ]}\"\n]\n", "loc": ["programs", "neovim", "extraWrapperArgs"], "readOnly": false, "title": "programs.neovim.extraWrapperArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to be passed to the neovim wrapper.\nThis option sets environment variables required for building and running binaries\nwith external package managers like mason.nvim.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "", "description": "Resulting customized neovim package.", "example": "", "loc": ["programs", "neovim", "finalPackage"], "readOnly": true, "title": "programs.neovim.finalPackage", "type": "package", "descriptionHTML": "<p>Resulting customized neovim package.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "", "description": "Generated vimscript config.", "example": "", "loc": ["programs", "neovim", "generatedConfigViml"], "readOnly": true, "title": "programs.neovim.generatedConfigViml", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Generated vimscript config.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "", "description": "Generated configurations with as key their language (set via type).", "example": "{\n  viml = ''\n    \" Generated by home-manager\n    map <leader> ,\n  '';\n\n  lua = ''\n    -- Generated by home-manager\n    vim.opt.background = \"dark\"\n  '';\n}", "loc": ["programs", "neovim", "generatedConfigs"], "readOnly": true, "title": "programs.neovim.generatedConfigs", "type": "attribute set of strings concatenated with \"\\n\"", "descriptionHTML": "<p>Generated configurations with as key their language (set via type).</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "pkgs.neovim-unwrapped", "description": "The neovim package to use.", "example": "", "loc": ["programs", "neovim", "package"], "readOnly": false, "title": "programs.neovim.package", "type": "package", "descriptionHTML": "<p>The neovim package to use.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "[ ]", "description": "List of vim plugins to install optionally associated with\nconfiguration to be placed in init.vim.\nThis option is mutually exclusive with {var}configure.", "example": "with pkgs.vimPlugins; [\n  yankring\n  vim-nix\n  { plugin = vim-startify;\n    config = \"let g:startify_change_to_vcs_root = 0\";\n  }\n]\n", "loc": ["programs", "neovim", "plugins"], "readOnly": false, "title": "programs.neovim.plugins", "type": "list of (package or (submodule))", "descriptionHTML": "<p>List of vim plugins to install optionally associated with\nconfiguration to be placed in init.vim.</p>\n<p>This option is mutually exclusive with {var}<code>configure</code>.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Symlink {command}vi to {command}nvim binary.", "example": "", "loc": ["programs", "neovim", "viAlias"], "readOnly": false, "title": "programs.neovim.viAlias", "type": "boolean", "descriptionHTML": "<p>Symlink {command}<code>vi</code> to {command}<code>nvim</code> binary.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Symlink {command}vim to {command}nvim binary.", "example": "", "loc": ["programs", "neovim", "vimAlias"], "readOnly": false, "title": "programs.neovim.vimAlias", "type": "boolean", "descriptionHTML": "<p>Symlink {command}<code>vim</code> to {command}<code>nvim</code> binary.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Alias {command}vimdiff to {command}nvim -d.", "example": "", "loc": ["programs", "neovim", "vimdiffAlias"], "readOnly": false, "title": "programs.neovim.vimdiffAlias", "type": "boolean", "descriptionHTML": "<p>Alias {command}<code>vimdiff</code> to {command}<code>nvim -d</code>.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "false", "description": "Enable node provider. Set to true to\nuse Node plugins.", "example": "", "loc": ["programs", "neovim", "withNodeJs"], "readOnly": false, "title": "programs.neovim.withNodeJs", "type": "boolean", "descriptionHTML": "<p>Enable node provider. Set to <code>true</code> to\nuse Node plugins.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "true", "description": "Enable Python 3 provider. Set to true to\nuse Python 3 plugins.", "example": "", "loc": ["programs", "neovim", "withPython3"], "readOnly": false, "title": "programs.neovim.withPython3", "type": "boolean", "descriptionHTML": "<p>Enable Python 3 provider. Set to <code>true</code> to\nuse Python 3 plugins.</p>"}, {"declarations": [{"name": "<programs/neovim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/neovim.nix"}], "default": "true", "description": "Enable ruby provider.", "example": "", "loc": ["programs", "neovim", "withRuby"], "readOnly": false, "title": "programs.neovim.withRuby", "type": "null or boolean", "descriptionHTML": "<p>Enable ruby provider.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "false", "description": "Whether to enable automatic reloading while newsboat is running.", "example": "", "loc": ["programs", "newsboat", "autoReload"], "readOnly": false, "title": "programs.newsboat.autoReload", "type": "boolean", "descriptionHTML": "<p>Whether to enable automatic reloading while newsboat is running.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "${pkgs.xdg-utils}/bin/xdg-open", "description": "External browser to use.", "example": "", "loc": ["programs", "newsboat", "browser"], "readOnly": false, "title": "programs.newsboat.browser", "type": "string", "descriptionHTML": "<p>External browser to use.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "false", "description": "Whether to enable the Newsboat feed reader.", "example": "true", "loc": ["programs", "newsboat", "enable"], "readOnly": false, "title": "programs.newsboat.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Newsboat feed reader.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "\"\"", "description": "Extra configuration values that will be appended to the end.", "example": "", "loc": ["programs", "newsboat", "extraConfig"], "readOnly": false, "title": "programs.newsboat.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration values that will be appended to the end.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "0", "description": "Maximum number of items per feed, 0 for infinite.", "example": "", "loc": ["programs", "newsboat", "maxItems"], "readOnly": false, "title": "programs.newsboat.maxItems", "type": "signed integer", "descriptionHTML": "<p>Maximum number of items per feed, 0 for infinite.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "pkgs.newsboat", "description": "The newsboat package to use.", "example": "", "loc": ["programs", "newsboat", "package"], "readOnly": false, "title": "programs.newsboat.package", "type": "null or package", "descriptionHTML": "<p>The newsboat package to use.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "{ }", "description": "A list of queries to use.", "example": "{\n  foo = \"rssurl =~ \\\"example.com\\\"\";\n}", "loc": ["programs", "newsboat", "queries"], "readOnly": false, "title": "programs.newsboat.queries", "type": "attribute set of string", "descriptionHTML": "<p>A list of queries to use.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "5", "description": "How many threads to use for updating the feeds.", "example": "", "loc": ["programs", "newsboat", "reloadThreads"], "readOnly": false, "title": "programs.newsboat.reloadThreads", "type": "signed integer", "descriptionHTML": "<p>How many threads to use for updating the feeds.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "60", "description": "Time in minutes between reloads.", "example": "", "loc": ["programs", "newsboat", "reloadTime"], "readOnly": false, "title": "programs.newsboat.reloadTime", "type": "null or signed integer", "descriptionHTML": "<p>Time in minutes between reloads.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "[ ]", "description": "List of news feeds. Leave it empty if you want to manage feeds\nimperatively, for example, using Syncthing.", "example": "[\n  {\n    tags = [\n      \"foo\"\n      \"bar\"\n    ];\n    url = \"http://example.com\";\n  }\n]", "loc": ["programs", "newsboat", "urls"], "readOnly": false, "title": "programs.newsboat.urls", "type": "list of (submodule)", "descriptionHTML": "<p>List of news feeds. Leave it empty if you want to manage feeds\nimperatively, for example, using Syncthing.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "[ ]", "description": "Feed tags.", "example": "[\n  \"foo\"\n  \"bar\"\n]", "loc": ["programs", "newsboat", "urls", "*", "tags"], "readOnly": false, "title": "programs.newsboat.urls.*.tags", "type": "list of string", "descriptionHTML": "<p>Feed tags.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "null", "description": "Feed title.", "example": "\"ORF News\"", "loc": ["programs", "newsboat", "urls", "*", "title"], "readOnly": false, "title": "programs.newsboat.urls.*.title", "type": "null or string", "descriptionHTML": "<p>Feed title.</p>"}, {"declarations": [{"name": "<programs/newsboat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/newsboat.nix"}], "default": "", "description": "Feed URL.", "example": "\"http://example.com\"", "loc": ["programs", "newsboat", "urls", "*", "url"], "readOnly": false, "title": "programs.newsboat.urls.*.url", "type": "string", "descriptionHTML": "<p>Feed URL.</p>"}, {"declarations": [{"name": "<programs/nh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nh.nix"}], "default": "\"weekly\"", "description": "How often cleanup is performed.\nOn linux the format is described in {manpage}systemd.time(7).\nOn Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}systemd.time(7).", "example": "", "loc": ["programs", "nh", "clean", "dates"], "readOnly": false, "title": "programs.nh.clean.dates", "type": "(optionally newline-terminated) single-line string", "descriptionHTML": "<p>How often cleanup is performed.</p>\n<p>On linux the format is described in {manpage}<code>systemd.time(7)</code>.</p>\n<p>On Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<programs/nh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nh.nix"}], "default": "false", "description": "Whether to enable periodic garbage collection for user profile and nix store with nh clean\nuser.", "example": "true", "loc": ["programs", "nh", "clean", "enable"], "readOnly": false, "title": "programs.nh.clean.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable periodic garbage collection for user profile and nix store with nh clean\nuser.</p>"}, {"declarations": [{"name": "<programs/nh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nh.nix"}], "default": "\"\"", "description": "Options given to nh clean when the service is run automatically.\nSee nh clean all --help for more information.", "example": "\"--keep 5 --keep-since 3d\"", "loc": ["programs", "nh", "clean", "extraArgs"], "readOnly": false, "title": "programs.nh.clean.extraArgs", "type": "(optionally newline-terminated) single-line string", "descriptionHTML": "<p>Options given to nh clean when the service is run automatically.</p>\n<p>See <code>nh clean all --help</code> for more information.</p>"}, {"declarations": [{"name": "<programs/nh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nh.nix"}], "default": "false", "description": "Whether to enable nh, yet another Nix CLI helper.", "example": "true", "loc": ["programs", "nh", "enable"], "readOnly": false, "title": "programs.nh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable nh, yet another Nix CLI helper.</p>"}, {"declarations": [{"name": "<programs/nh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nh.nix"}], "default": "null", "description": "The path that will be used for the {env}FLAKE environment variable.\n{env}FLAKE is used by nh as the default flake for performing actions,\nlike {command}nh os switch.", "example": "", "loc": ["programs", "nh", "flake"], "readOnly": false, "title": "programs.nh.flake", "type": "null or (optionally newline-terminated) single-line string or absolute path", "descriptionHTML": "<p>The path that will be used for the {env}<code>FLAKE</code> environment variable.</p>\n<p>{env}<code>FLAKE</code> is used by nh as the default flake for performing actions,\nlike {command}<code>nh os switch</code>.</p>"}, {"declarations": [{"name": "<programs/nh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nh.nix"}], "default": "pkgs.nh", "description": "The nh package to use.", "example": "", "loc": ["programs", "nh", "package"], "readOnly": false, "title": "programs.nh.package", "type": "package", "descriptionHTML": "<p>The nh package to use.</p>"}, {"declarations": [{"name": "<programs/nheko.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nheko.nix"}], "default": "false", "description": "Whether to enable Qt desktop client for Matrix.", "example": "true", "loc": ["programs", "nheko", "enable"], "readOnly": false, "title": "programs.nheko.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Qt desktop client for Matrix.</p>"}, {"declarations": [{"name": "<programs/nheko.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nheko.nix"}], "default": "pkgs.nheko", "description": "The nheko package to use.", "example": "", "loc": ["programs", "nheko", "package"], "readOnly": false, "title": "programs.nheko.package", "type": "null or package", "descriptionHTML": "<p>The nheko package to use.</p>"}, {"declarations": [{"name": "<programs/nheko.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nheko.nix"}], "default": "{ }", "description": "Attribute set of Nheko preferences (converted to an INI file).\nFor now, it is recommended to run nheko and sign-in before filling in\nthe configuration settings in this module, as nheko writes the access\ntoken to {file}$XDG_CONFIG_HOME/nheko/nheko.conf the\nfirst time we sign in, and we need that data into these settings for the\ncorrect functionality of the application.\nThis a temporary inconvenience, however, as nheko has plans to move the\nauthentication stuff into the local database they currently use. Once\nthis happens, this will no longer be an issue.", "example": "{\n  general.disableCertificateValidation = false;\n  auth = {\n    accessToken = \"SECRET\";\n    deviceId = \"MY_DEVICE\";\n    homeServer = \"https://matrix-client.matrix.org:443\";\n    userId = \"@@user:matrix.org\";\n  };\n  settings.scaleFactor = 1.0;\n  sidebar.width = 416;\n  user = {\n    alertOnNotification = true;\n    animateImagesOnHover = false;\n    \"sidebar\\\\roomListWidth\" = 308;\n  };\n}\n", "loc": ["programs", "nheko", "settings"], "readOnly": false, "title": "programs.nheko.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Attribute set of Nheko preferences (converted to an INI file).</p>\n<p>For now, it is recommended to run nheko and sign-in before filling in\nthe configuration settings in this module, as nheko writes the access\ntoken to {file}<code>$XDG_CONFIG_HOME/nheko/nheko.conf</code> the\nfirst time we sign in, and we need that data into these settings for the\ncorrect functionality of the application.</p>\n<p>This a temporary inconvenience, however, as nheko has plans to move the\nauthentication stuff into the local database they currently use. Once\nthis happens, this will no longer be an issue.</p>"}, {"declarations": [{"name": "<programs/niriswitcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/niriswitcher.nix"}], "default": "false", "description": "Whether to enable niriswitcher, an application switcher for niri.", "example": "true", "loc": ["programs", "niriswitcher", "enable"], "readOnly": false, "title": "programs.niriswitcher.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable niriswitcher, an application switcher for niri.</p>"}, {"declarations": [{"name": "<programs/niriswitcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/niriswitcher.nix"}], "default": "pkgs.niriswitcher", "description": "The niriswitcher package to use.", "example": "", "loc": ["programs", "niriswitcher", "package"], "readOnly": false, "title": "programs.niriswitcher.package", "type": "null or package", "descriptionHTML": "<p>The niriswitcher package to use.</p>"}, {"declarations": [{"name": "<programs/niriswitcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/niriswitcher.nix"}], "default": "null", "description": "niriswitcher configuration.\nFor available settings see https://github.com/isaksamsten/niriswitcher/?tab=readme-ov-file#options.", "example": "{\n  keys = {\n    modifier = \"Super\";\n    switch = {\n      next = \"Tab\";\n      prev = \"Shift+Tab\";\n    };\n  };\n  center_on_focus = true;\n  appearance = {\n    system_theme = \"dark\";\n    icon_size = 64;\n  };\n}\n", "loc": ["programs", "niriswitcher", "settings"], "readOnly": false, "title": "programs.niriswitcher.settings", "type": "null or TOML value", "descriptionHTML": "<p>niriswitcher configuration.\nFor available settings see <a href=\"https://github.com/isaksamsten/niriswitcher/?tab=readme-ov-file#options\">https://github.com/isaksamsten/niriswitcher/?tab=readme-ov-file#options</a>.</p>"}, {"declarations": [{"name": "<programs/niriswitcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/niriswitcher.nix"}], "default": "null", "description": "CSS style of the switcher.\nhttps://github.com/isaksamsten/niriswitcher/?tab=readme-ov-file#themes\nfor the documentation.\nIf the value is set to a path literal, then the path will be used as the CSS file.", "example": "''\n  .application-name {\n    opacity: 1;\n    color: rgba(255, 255, 255, 0.6);\n  }\n  .application.selected .application-name {\n    color: rgba(255, 255, 255, 1);\n  }\n''", "loc": ["programs", "niriswitcher", "style"], "readOnly": false, "title": "programs.niriswitcher.style", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>CSS style of the switcher.\n<a href=\"https://github.com/isaksamsten/niriswitcher/?tab=readme-ov-file#themes\">https://github.com/isaksamsten/niriswitcher/?tab=readme-ov-file#themes</a>\nfor the documentation.</p>\n<p>If the value is set to a path literal, then the path will be used as the CSS file.</p>"}, {"declarations": [{"name": "<programs/nix-index.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-index.nix"}], "default": "false", "description": "Whether to enable nix-index, a file database for nixpkgs.", "example": "true", "loc": ["programs", "nix-index", "enable"], "readOnly": false, "title": "programs.nix-index.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable nix-index, a file database for nixpkgs.</p>"}, {"declarations": [{"name": "<programs/nix-index.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-index.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "nix-index", "enableBashIntegration"], "readOnly": false, "title": "programs.nix-index.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/nix-index.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-index.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "nix-index", "enableFishIntegration"], "readOnly": false, "title": "programs.nix-index.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/nix-index.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-index.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "nix-index", "enableZshIntegration"], "readOnly": false, "title": "programs.nix-index.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/nix-index.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-index.nix"}], "default": "pkgs.nix-index", "description": "The nix-index package to use.", "example": "", "loc": ["programs", "nix-index", "package"], "readOnly": false, "title": "programs.nix-index.package", "type": "package", "descriptionHTML": "<p>The nix-index package to use.</p>"}, {"declarations": [{"name": "<programs/nix-init.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-init.nix"}], "default": "false", "description": "Whether to enable nix-init.", "example": "true", "loc": ["programs", "nix-init", "enable"], "readOnly": false, "title": "programs.nix-init.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable nix-init.</p>"}, {"declarations": [{"name": "<programs/nix-init.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-init.nix"}], "default": "pkgs.nix-init", "description": "The nix-init package to use.", "example": "", "loc": ["programs", "nix-init", "package"], "readOnly": false, "title": "programs.nix-init.package", "type": "null or package", "descriptionHTML": "<p>The nix-init package to use.</p>"}, {"declarations": [{"name": "<programs/nix-init.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-init.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/nix-init/config.toml.\nSee https://github.com/nix-community/nix-init#configuration for the full list\nof options.", "example": "{\n  maintainers = [\n    \"figsoda\"\n  ];\n  nixpkgs = \"<nixpkgs>\";\n  commit = true;\n  access-tokens = {\n    github.com = \"ghp_blahblahblah...\";\n    gitlab.com = {\n      command = [\n        \"secret-tool\"\n        \"or\"\n        \"whatever\"\n        \"you\"\n        \"use\"\n      ];\n    };\n    gitlab.gnome.org = {\n      file = \"/path/to/api/token\";\n    };\n  };\n}\n", "loc": ["programs", "nix-init", "settings"], "readOnly": false, "title": "programs.nix-init.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/nix-init/config.toml</code>.\nSee <a href=\"https://github.com/nix-community/nix-init#configuration\">https://github.com/nix-community/nix-init#configuration</a> for the full list\nof options.</p>"}, {"declarations": [{"name": "<programs/nix-your-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-your-shell.nix"}], "default": "false", "description": "Whether to enable {command}nix-your-shell, a wrapper for nix develop or nix-shell\nto retain the same shell inside the new environment.", "example": "true", "loc": ["programs", "nix-your-shell", "enable"], "readOnly": false, "title": "programs.nix-your-shell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable {command}<code>nix-your-shell</code>, a wrapper for <code>nix develop</code> or <code>nix-shell</code>\nto retain the same shell inside the new environment.</p>"}, {"declarations": [{"name": "<programs/nix-your-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-your-shell.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "nix-your-shell", "enableFishIntegration"], "readOnly": false, "title": "programs.nix-your-shell.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/nix-your-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-your-shell.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "nix-your-shell", "enableNushellIntegration"], "readOnly": false, "title": "programs.nix-your-shell.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/nix-your-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-your-shell.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "nix-your-shell", "enableZshIntegration"], "readOnly": false, "title": "programs.nix-your-shell.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/nix-your-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nix-your-shell.nix"}], "default": "pkgs.nix-your-shell", "description": "The nix-your-shell package to use.", "example": "", "loc": ["programs", "nix-your-shell", "package"], "readOnly": false, "title": "programs.nix-your-shell.package", "type": "package", "descriptionHTML": "<p>The nix-your-shell package to use.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "{ }", "description": "Directory bookmarks.", "example": "{\n  d = \"~/Documents\";\n  D = \"~/Downloads\";\n  p = \"~/Pictures\";\n  v = \"~/Videos\";\n};\n", "loc": ["programs", "nnn", "bookmarks"], "readOnly": false, "title": "programs.nnn.bookmarks", "type": "attribute set of string", "descriptionHTML": "<p>Directory bookmarks.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "false", "description": "Whether to enable nnn.", "example": "true", "loc": ["programs", "nnn", "enable"], "readOnly": false, "title": "programs.nnn.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable nnn.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "[ ]", "description": "Extra packages available to nnn.", "example": "with pkgs; [ ffmpegthumbnailer mediainfo sxiv ]", "loc": ["programs", "nnn", "extraPackages"], "readOnly": false, "title": "programs.nnn.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages available to nnn.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "pkgs.nnn", "description": "The nnn package to use.", "example": "pkgs.nnn.override { withNerdIcons = true; }", "loc": ["programs", "nnn", "package"], "readOnly": false, "title": "programs.nnn.package", "type": "package", "descriptionHTML": "<p>The nnn package to use.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "{ }", "description": "Manage nnn plugins.", "example": "", "loc": ["programs", "nnn", "plugins"], "readOnly": false, "title": "programs.nnn.plugins", "type": "submodule", "descriptionHTML": "<p>Manage nnn plugins.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "{ }", "description": "Key mappings to the plugins.", "example": "{\n  c = \"fzcd\";\n  f = \"finder\";\n  v = \"imgview\";\n};\n", "loc": ["programs", "nnn", "plugins", "mappings"], "readOnly": false, "title": "programs.nnn.plugins.mappings", "type": "attribute set of string", "descriptionHTML": "<p>Key mappings to the plugins.</p>"}, {"declarations": [{"name": "<programs/nnn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nnn.nix"}], "default": "null", "description": "Path to the plugin folder.", "example": "(pkgs.fetchFromGitHub {\n  owner = \"jarun\";\n  repo = \"nnn\";\n  rev = \"v4.0\";\n  sha256 = \"sha256-Hpc8YaJeAzJoEi7aJ6DntH2VLkoR6ToP6tPYn3llR7k=\";\n}) + \"/plugins\";\n", "loc": ["programs", "nnn", "plugins", "src"], "readOnly": false, "title": "programs.nnn.plugins.src", "type": "null or absolute path", "descriptionHTML": "<p>Path to the plugin folder.</p>"}, {"declarations": [{"name": "<programs/noti.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/noti.nix"}], "default": "false", "description": "Whether to enable Noti.", "example": "true", "loc": ["programs", "noti", "enable"], "readOnly": false, "title": "programs.noti.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Noti.</p>"}, {"declarations": [{"name": "<programs/noti.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/noti.nix"}], "default": "pkgs.noti", "description": "The noti package to use.", "example": "", "loc": ["programs", "noti", "package"], "readOnly": false, "title": "programs.noti.package", "type": "null or package", "descriptionHTML": "<p>The noti package to use.</p>"}, {"declarations": [{"name": "<programs/noti.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/noti.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/noti/noti.yaml.\nSee\n{manpage}noti.yaml(5).\nfor the full list of options.", "example": "{\n  say = {\n    voice = \"Alex\";\n  };\n  slack = {\n    token = \"1234567890abcdefg\";\n    channel = \"@jaime\";\n  };\n}\n", "loc": ["programs", "noti", "settings"], "readOnly": false, "title": "programs.noti.settings", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/noti/noti.yaml</code>.</p>\n<p>See\n{manpage}<code>noti.yaml(5)</code>.\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "false", "description": "Whether to enable Notmuch mail indexer.", "example": "true", "loc": ["programs", "notmuch", "enable"], "readOnly": false, "title": "programs.notmuch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Notmuch mail indexer.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "{ }", "description": "Options that should be appended to the notmuch configuration file.", "example": "", "loc": ["programs", "notmuch", "extraConfig"], "readOnly": false, "title": "programs.notmuch.extraConfig", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>Options that should be appended to the notmuch configuration file.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "\"\"", "description": "Bash statements run after a message has been inserted\ninto the database and initial tags have been applied.", "example": "", "loc": ["programs", "notmuch", "hooks", "postInsert"], "readOnly": false, "title": "programs.notmuch.hooks.postInsert", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Bash statements run after a message has been inserted\ninto the database and initial tags have been applied.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "\"\"", "description": "Bash statements run after new messages have been imported\ninto the database and initial tags have been applied.", "example": "''\n  notmuch tag +nixos -- tag:new and from:nixos1@discoursemail.com\n''", "loc": ["programs", "notmuch", "hooks", "postNew"], "readOnly": false, "title": "programs.notmuch.hooks.postNew", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Bash statements run after new messages have been imported\ninto the database and initial tags have been applied.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "\"\"", "description": "Bash statements run before scanning or importing new\nmessages into the database.", "example": "\"mbsync --all\"", "loc": ["programs", "notmuch", "hooks", "preNew"], "readOnly": false, "title": "programs.notmuch.hooks.preNew", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Bash statements run before scanning or importing new\nmessages into the database.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "true", "description": "Whether to synchronize Maildir flags.", "example": "", "loc": ["programs", "notmuch", "maildir", "synchronizeFlags"], "readOnly": false, "title": "programs.notmuch.maildir.synchronizeFlags", "type": "boolean", "descriptionHTML": "<p>Whether to synchronize Maildir flags.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "{ }", "description": "Options related to email processing performed by\n{command}notmuch new.", "example": "", "loc": ["programs", "notmuch", "new"], "readOnly": false, "title": "programs.notmuch.new", "type": "submodule", "descriptionHTML": "<p>Options related to email processing performed by\n{command}<code>notmuch new</code>.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "[ ]", "description": "A list to specify files and directories that will not be\nsearched for messages by {command}notmuch new.", "example": "", "loc": ["programs", "notmuch", "new", "ignore"], "readOnly": false, "title": "programs.notmuch.new.ignore", "type": "list of string", "descriptionHTML": "<p>A list to specify files and directories that will not be\nsearched for messages by {command}<code>notmuch new</code>.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "[\n  \"unread\"\n  \"inbox\"\n]", "description": "A list of tags that will be added to all messages\nincorporated by {command}notmuch new.", "example": "[\n  \"new\"\n]", "loc": ["programs", "notmuch", "new", "tags"], "readOnly": false, "title": "programs.notmuch.new.tags", "type": "list of string", "descriptionHTML": "<p>A list of tags that will be added to all messages\nincorporated by {command}<code>notmuch new</code>.</p>"}, {"declarations": [{"name": "<programs/notmuch/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/notmuch/default.nix"}], "default": "[\n  \"deleted\"\n  \"spam\"\n]", "description": "A  list  of  tags  that  will be excluded from search results by\ndefault. Using an excluded tag in a  query  will  override  that\nexclusion.", "example": "[\n  \"trash\"\n  \"spam\"\n]", "loc": ["programs", "notmuch", "search", "excludeTags"], "readOnly": false, "title": "programs.notmuch.search.excludeTags", "type": "list of string", "descriptionHTML": "<p>A  list  of  tags  that  will be excluded from search results by\ndefault. Using an excluded tag in a  query  will  override  that\nexclusion.</p>"}, {"declarations": [{"name": "<programs/numbat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/numbat.nix"}], "default": "false", "description": "Whether to enable Numbat.", "example": "true", "loc": ["programs", "numbat", "enable"], "readOnly": false, "title": "programs.numbat.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Numbat.</p>"}, {"declarations": [{"name": "<programs/numbat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/numbat.nix"}], "default": "null", "description": "User initialization file ({file}init.nbt) contents. May be specified\ninline or as a path to a source file.", "example": "''\n  unit kohm: ElectricResistance = kV/A\n''", "loc": ["programs", "numbat", "initFile"], "readOnly": false, "title": "programs.numbat.initFile", "type": "null or strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>User initialization file ({file}<code>init.nbt</code>) contents. May be specified\ninline or as a path to a source file.</p>"}, {"declarations": [{"name": "<programs/numbat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/numbat.nix"}], "default": "pkgs.numbat", "description": "The numbat package to use.", "example": "", "loc": ["programs", "numbat", "package"], "readOnly": false, "title": "programs.numbat.package", "type": "null or package", "descriptionHTML": "<p>The numbat package to use.</p>"}, {"declarations": [{"name": "<programs/numbat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/numbat.nix"}], "default": "{ }", "description": "Options to add to {file}config.toml. See\nhttps://numbat.dev/doc/cli-customization.html#configuration for options.", "example": "{\n  exchange-rates = {\n    fetching-policy = \"on-first-use\";\n  };\n  intro-banner = \"short\";\n  prompt = \"> \";\n}", "loc": ["programs", "numbat", "settings"], "readOnly": false, "title": "programs.numbat.settings", "type": "TOML value", "descriptionHTML": "<p>Options to add to {file}<code>config.toml</code>. See\n<a href=\"https://numbat.dev/doc/cli-customization.html#configuration\">https://numbat.dev/doc/cli-customization.html#configuration</a> for options.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "null", "description": "The configuration file to be used for nushell.\nSee https://www.nushell.sh/book/configuration.html#configuration for more information.", "example": "{\n  text = ''\n    const NU_LIB_DIRS = $NU_LIB_DIRS ++ ${\n      lib.hm.nushell.toNushell (lib.concatStringsSep \":\" [ ./scripts ])\n    }\n    $env.config.filesize_metric = false\n    $env.config.table_mode = 'rounded'\n    $env.config.use_ls_colors = true\n  '';\n}\n", "loc": ["programs", "nushell", "configFile"], "readOnly": false, "title": "programs.nushell.configFile", "type": "null or (submodule)", "descriptionHTML": "<p>The configuration file to be used for nushell.</p>\n<p>See <a href=\"https://www.nushell.sh/book/configuration.html#configuration\">https://www.nushell.sh/book/configuration.html#configuration</a> for more information.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "null", "description": "Path of the nushell {file}config.nu file to use.\nIf the text option is set, it will be preferred.", "example": "", "loc": ["programs", "nushell", "configFile", "source"], "readOnly": false, "title": "programs.nushell.configFile.source", "type": "null or absolute path", "descriptionHTML": "<p>Path of the nushell {file}<code>config.nu</code> file to use.\nIf the text option is set, it will be preferred.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "if source is defined, the content of source, otherwise empty", "description": "Text of the nushell {file}config.nu file.\nIf unset then the source option will be preferred.", "example": "", "loc": ["programs", "nushell", "configFile", "text"], "readOnly": false, "title": "programs.nushell.configFile.text", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the nushell {file}<code>config.nu</code> file.\nIf unset then the source option will be preferred.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "false", "description": "Whether to enable nushell.", "example": "true", "loc": ["programs", "nushell", "enable"], "readOnly": false, "title": "programs.nushell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable nushell.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "null", "description": "The environment variables file to be used for nushell.\nSee https://www.nushell.sh/book/configuration.html#configuration for more information.", "example": "''\n  $env.FOO = 'BAR'\n''", "loc": ["programs", "nushell", "envFile"], "readOnly": false, "title": "programs.nushell.envFile", "type": "null or (submodule)", "descriptionHTML": "<p>The environment variables file to be used for nushell.</p>\n<p>See <a href=\"https://www.nushell.sh/book/configuration.html#configuration\">https://www.nushell.sh/book/configuration.html#configuration</a> for more information.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "null", "description": "Path of the nushell {file}env.nu file to use.\nIf the text option is set, it will be preferred.", "example": "", "loc": ["programs", "nushell", "envFile", "source"], "readOnly": false, "title": "programs.nushell.envFile.source", "type": "null or absolute path", "descriptionHTML": "<p>Path of the nushell {file}<code>env.nu</code> file to use.\nIf the text option is set, it will be preferred.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "if source is defined, the content of source, otherwise empty", "description": "Text of the nushell {file}env.nu file.\nIf unset then the source option will be preferred.", "example": "", "loc": ["programs", "nushell", "envFile", "text"], "readOnly": false, "title": "programs.nushell.envFile.text", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the nushell {file}<code>env.nu</code> file.\nIf unset then the source option will be preferred.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "{ }", "description": "Environment variables to be set.\nInline values can be set with lib.hm.nushell.mkNushellInline.", "example": "{\n  FOO = \"BAR\";\n  LIST_VALUE = [ \"foo\" \"bar\" ];\n  PROMPT_COMMAND = lib.hm.nushell.mkNushellInline ''{|| \"> \"}'';\n  ENV_CONVERSIONS.PATH = {\n    from_string = lib.hm.nushell.mkNushellInline \"{|s| $s | split row (char esep) }\";\n    to_string = lib.hm.nushell.mkNushellInline \"{|v| $v | str join (char esep) }\";\n  };\n}\n", "loc": ["programs", "nushell", "environmentVariables"], "readOnly": false, "title": "programs.nushell.environmentVariables", "type": "attribute set of (null or (Nushell inline value) or boolean or signed integer or floating point number or string or absolute path or (attribute set of Nushell values) or (list of Nushell values))", "descriptionHTML": "<p>Environment variables to be set.</p>\n<p>Inline values can be set with <code>lib.hm.nushell.mkNushellInline</code>.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "\"\"", "description": "Additional configuration to add to the nushell configuration file.", "example": "", "loc": ["programs", "nushell", "extraConfig"], "readOnly": false, "title": "programs.nushell.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add to the nushell configuration file.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "\"\"", "description": "Additional configuration to add to the nushell environment variables file.", "example": "", "loc": ["programs", "nushell", "extraEnv"], "readOnly": false, "title": "programs.nushell.extraEnv", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add to the nushell environment variables file.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "\"\"", "description": "Additional configuration to add to the nushell login file.", "example": "", "loc": ["programs", "nushell", "extraLogin"], "readOnly": false, "title": "programs.nushell.extraLogin", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add to the nushell login file.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "null", "description": "The login file to be used for nushell upon logging in.\nSee https://www.nushell.sh/book/configuration.html#configuring-nu-as-a-login-shell for more information.", "example": "''\n  # Prints \"Hello, World\" upon logging into tty1\n  if (tty) == \"/dev/tty1\" {\n    echo \"Hello, World\"\n  }\n''", "loc": ["programs", "nushell", "loginFile"], "readOnly": false, "title": "programs.nushell.loginFile", "type": "null or (submodule)", "descriptionHTML": "<p>The login file to be used for nushell upon logging in.</p>\n<p>See <a href=\"https://www.nushell.sh/book/configuration.html#configuring-nu-as-a-login-shell\">https://www.nushell.sh/book/configuration.html#configuring-nu-as-a-login-shell</a> for more information.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "null", "description": "Path of the nushell {file}login.nu file to use.\nIf the text option is set, it will be preferred.", "example": "", "loc": ["programs", "nushell", "loginFile", "source"], "readOnly": false, "title": "programs.nushell.loginFile.source", "type": "null or absolute path", "descriptionHTML": "<p>Path of the nushell {file}<code>login.nu</code> file to use.\nIf the text option is set, it will be preferred.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "if source is defined, the content of source, otherwise empty", "description": "Text of the nushell {file}login.nu file.\nIf unset then the source option will be preferred.", "example": "", "loc": ["programs", "nushell", "loginFile", "text"], "readOnly": false, "title": "programs.nushell.loginFile.text", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the nushell {file}<code>login.nu</code> file.\nIf unset then the source option will be preferred.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "pkgs.nushell", "description": "The nushell package to use.", "example": "", "loc": ["programs", "nushell", "package"], "readOnly": false, "title": "programs.nushell.package", "type": "null or package", "descriptionHTML": "<p>The nushell package to use.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "[ ]", "description": "A list of nushell plugins to write to the plugin registry file.", "example": "[ pkgs.nushellPlugins.formats ]", "loc": ["programs", "nushell", "plugins"], "readOnly": false, "title": "programs.nushell.plugins", "type": "list of package", "descriptionHTML": "<p>A list of nushell plugins to write to the plugin registry file.</p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "{ }", "description": "Nushell settings. These will be flattened and assigned one by one to $env.config to avoid overwriting the default or existing options.\nFor example:\nnix\n{\n  show_banner = false;\n  completions.external = {\n    enable = true;\n    max_results = 200;\n  };\n}\nbecomes:\nnushell\n$env.config.completions.external.enable = true\n$env.config.completions.external.max_results = 200\n$env.config.show_banner = false", "example": "{\n  history = {\n    format = \"sqlite\";\n  };\n  show_banner = false;\n}", "loc": ["programs", "nushell", "settings"], "readOnly": false, "title": "programs.nushell.settings", "type": "attribute set of (null or (Nushell inline value) or boolean or signed integer or floating point number or string or absolute path or (attribute set of Nushell values) or (list of Nushell values))", "descriptionHTML": "<p>Nushell settings. These will be flattened and assigned one by one to <code>$env.config</code> to avoid overwriting the default or existing options.</p>\n<p>For example:\n<code>nix\n{\n  show_banner = false;\n  completions.external = {\n    enable = true;\n    max_results = 200;\n  };\n}</code>\nbecomes:\n<code>nushell\n$env.config.completions.external.enable = true\n$env.config.completions.external.max_results = 200\n$env.config.show_banner = false</code></p>"}, {"declarations": [{"name": "<programs/nushell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nushell.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs.", "example": "{\n  g = \"git\";\n  ll = \"ls -l\";\n}", "loc": ["programs", "nushell", "shellAliases"], "readOnly": false, "title": "programs.nushell.shellAliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs.</p>"}, {"declarations": [{"name": "<programs/nyxt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nyxt.nix"}], "default": "\"\"", "description": "Configuration file for Nyxt, written in the Common Lisp\nprogramming language.", "example": "''\n  (in-package #:nyxt-user)\n  \n  (defvar *my-search-engines*\n    (list\n     (make-instance 'search-engine\n                    :name \"Google\"\n                    :shortcut \"goo\"\n                    #+nyxt-4 :control-url #+nyxt-3 :search-url\n                    \"https://duckduckgo.com/?q=~a\")\n     (make-instance 'search-engine\n                    :name \"MDN\"\n                    :shortcut \"mdn\"\n                    #+nyxt-4 :control-url #+nyxt-3 :search-url\n                    \"https://developer.mozilla.org/en-US/search?q=~a\")))\n  \n  (define-configuration browser\n    ((restore-session-on-startup-p nil)\n     (default-new-buffer-url (quri:uri \"https://github.com/atlas-engineer/nyxt\"))\n     (external-editor-program (if (member :flatpak *features*)\n                                  \"flatpak-spawn --host emacsclient -r\"\n                                  \"emacsclient -r\"))\n     #+nyxt-4\n     (search-engine-suggestions-p nil)\n     #+nyxt-4\n     (search-engines (append %slot-default% *my-search-engines*))\n     ;; Sets the font for the Nyxt UI (not for webpages).\n     (theme (make-instance 'theme:theme\n                           :font-family \"Iosevka\"\n                           :monospace-font-family \"Iosevka\"))\n     ;; Whether code sent to the socket gets executed.  You must understand the\n     ;; risks before enabling this: a privileged user with access to your system\n     ;; can then take control of the browser and execute arbitrary code under your\n     ;; user profile.\n     ;; (remote-execution-p t)\n     ))\n''", "loc": ["programs", "nyxt", "config"], "readOnly": false, "title": "programs.nyxt.config", "type": "strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>Configuration file for Nyxt, written in the Common Lisp\nprogramming language.</p>"}, {"declarations": [{"name": "<programs/nyxt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nyxt.nix"}], "default": "false", "description": "Whether to enable Nyxt.", "example": "true", "loc": ["programs", "nyxt", "enable"], "readOnly": false, "title": "programs.nyxt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nyxt.</p>"}, {"declarations": [{"name": "<programs/nyxt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/nyxt.nix"}], "default": "pkgs.nyxt", "description": "The nyxt package to use.", "example": "", "loc": ["programs", "nyxt", "package"], "readOnly": false, "title": "programs.nyxt.package", "type": "null or package", "descriptionHTML": "<p>The nyxt package to use.</p>"}, {"declarations": [{"name": "<programs/obs-studio.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obs-studio.nix"}], "default": "false", "description": "Whether to enable obs-studio.", "example": "true", "loc": ["programs", "obs-studio", "enable"], "readOnly": false, "title": "programs.obs-studio.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable obs-studio.</p>"}, {"declarations": [{"name": "<programs/obs-studio.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obs-studio.nix"}], "default": "pkgs.obs-studio", "description": "The obs-studio package to use.", "example": "", "loc": ["programs", "obs-studio", "package"], "readOnly": false, "title": "programs.obs-studio.package", "type": "package", "descriptionHTML": "<p>The obs-studio package to use.</p>"}, {"declarations": [{"name": "<programs/obs-studio.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obs-studio.nix"}], "default": "[ ]", "description": "Optional OBS plugins.", "example": "[ pkgs.obs-studio-plugins.wlrobs ]", "loc": ["programs", "obs-studio", "plugins"], "readOnly": false, "title": "programs.obs-studio.plugins", "type": "list of package", "descriptionHTML": "<p>Optional OBS plugins.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Settings to write to app.json.\nVault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "app"], "readOnly": false, "title": "programs.obsidian.defaultSettings.app", "type": "raw value", "descriptionHTML": "<p>Settings to write to <code>app.json</code>.</p>\n<p>Vault-specific settings take priority and will override these, if set.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Settings to write to appearance.json.\nVault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "appearance"], "readOnly": false, "title": "programs.obsidian.defaultSettings.appearance", "type": "raw value", "descriptionHTML": "<p>Settings to write to <code>appearance.json</code>.</p>\n<p>Vault-specific settings take priority and will override these, if set.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "Community plugins to install and activate.\n\n      Vault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "communityPlugins"], "readOnly": false, "title": "programs.obsidian.defaultSettings.communityPlugins", "type": "raw value", "descriptionHTML": "<pre><code>      Community plugins to install and activate.\n\n      Vault-specific settings take priority and will override these, if set.\n</code></pre>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[\n  \"backlink\"\n  \"bookmarks\"\n  \"canvas\"\n  \"command-palette\"\n  \"daily-notes\"\n  \"editor-status\"\n  \"file-explorer\"\n  \"file-recovery\"\n  \"global-search\"\n  \"graph\"\n  \"note-composer\"\n  \"outgoing-link\"\n  \"outline\"\n  \"page-preview\"\n  \"switcher\"\n  \"tag-pane\"\n  \"templates\"\n  \"word-count\"\n]", "description": "Core plugins to activate.\nVault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "corePlugins"], "readOnly": false, "title": "programs.obsidian.defaultSettings.corePlugins", "type": "raw value", "descriptionHTML": "<p>Core plugins to activate.</p>\n<p>Vault-specific settings take priority and will override these, if set.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "CSS snippets to install.\n\n      Vault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "cssSnippets"], "readOnly": false, "title": "programs.obsidian.defaultSettings.cssSnippets", "type": "raw value", "descriptionHTML": "<pre><code>      CSS snippets to install.\n\n      Vault-specific settings take priority and will override these, if set.\n</code></pre>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Extra files to link to the vault directory.\n\n      Vault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "extraFiles"], "readOnly": false, "title": "programs.obsidian.defaultSettings.extraFiles", "type": "raw value", "descriptionHTML": "<pre><code>      Extra files to link to the vault directory.\n\n      Vault-specific settings take priority and will override these, if set.\n</code></pre>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Hotkeys to configure.\n\n      Vault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "hotkeys"], "readOnly": false, "title": "programs.obsidian.defaultSettings.hotkeys", "type": "raw value", "descriptionHTML": "<pre><code>      Hotkeys to configure.\n\n      Vault-specific settings take priority and will override these, if set.\n</code></pre>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "Themes to install.\n\n      Vault-specific settings take priority and will override these, if set.", "example": "", "loc": ["programs", "obsidian", "defaultSettings", "themes"], "readOnly": false, "title": "programs.obsidian.defaultSettings.themes", "type": "raw value", "descriptionHTML": "<pre><code>      Themes to install.\n\n      Vault-specific settings take priority and will override these, if set.\n</code></pre>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "false", "description": "Whether to enable obsidian.", "example": "true", "loc": ["programs", "obsidian", "enable"], "readOnly": false, "title": "programs.obsidian.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable obsidian.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "pkgs.obsidian", "description": "The obsidian package to use.", "example": "", "loc": ["programs", "obsidian", "package"], "readOnly": false, "title": "programs.obsidian.package", "type": "package", "descriptionHTML": "<p>The obsidian package to use.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "List of vaults to create.", "example": "", "loc": ["programs", "obsidian", "vaults"], "readOnly": false, "title": "programs.obsidian.vaults", "type": "attribute set of (submodule)", "descriptionHTML": "<p>List of vaults to create.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "true", "description": "Whether this vault should be generated.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "enable"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether this vault should be generated.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Settings to write to app.json.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "app"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.app", "type": "attribute set of anything", "descriptionHTML": "<p>Settings to write to app.json.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Settings to write to appearance.json.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "appearance"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.appearance", "type": "attribute set of anything", "descriptionHTML": "<p>Settings to write to appearance.json.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "Community plugins to install and activate.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "communityPlugins"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.communityPlugins", "type": "list of ((submodule) or package convertible to it)", "descriptionHTML": "<p>Community plugins to install and activate.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "true", "description": "Whether to enable the plugin.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "communityPlugins", "*", "enable"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.communityPlugins.*.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the plugin.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "", "description": "The plugin package.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "communityPlugins", "*", "pkg"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.communityPlugins.*.pkg", "type": "package", "descriptionHTML": "<p>The plugin package.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Settings to include in the plugin's data.json.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "communityPlugins", "*", "settings"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.communityPlugins.*.settings", "type": "attribute set of anything", "descriptionHTML": "<p>Settings to include in the plugin's <code>data.json</code>.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[\n  \"backlink\"\n  \"bookmarks\"\n  \"canvas\"\n  \"command-palette\"\n  \"daily-notes\"\n  \"editor-status\"\n  \"file-explorer\"\n  \"file-recovery\"\n  \"global-search\"\n  \"graph\"\n  \"note-composer\"\n  \"outgoing-link\"\n  \"outline\"\n  \"page-preview\"\n  \"switcher\"\n  \"tag-pane\"\n  \"templates\"\n  \"word-count\"\n]", "description": "Core plugins to activate.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "corePlugins"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.corePlugins", "type": "list of ((submodule) or (one of \"audio-recorder\", \"backlink\", \"bookmarks\", \"canvas\", \"command-palette\", \"daily-notes\", \"editor-status\", \"file-explorer\", \"file-recovery\", \"global-search\", \"graph\", \"markdown-importer\", \"note-composer\", \"outgoing-link\", \"outline\", \"page-preview\", \"properties\", \"publish\", \"random-note\", \"slash-command\", \"slides\", \"switcher\", \"sync\", \"tag-pane\", \"templates\", \"word-count\", \"workspaces\", \"zk-prefixer\") convertible to it)", "descriptionHTML": "<p>Core plugins to activate.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "true", "description": "Whether to enable the plugin.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "corePlugins", "*", "enable"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.corePlugins.*.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the plugin.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "", "description": "The plugin.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "corePlugins", "*", "name"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.corePlugins.*.name", "type": "one of \"audio-recorder\", \"backlink\", \"bookmarks\", \"canvas\", \"command-palette\", \"daily-notes\", \"editor-status\", \"file-explorer\", \"file-recovery\", \"global-search\", \"graph\", \"markdown-importer\", \"note-composer\", \"outgoing-link\", \"outline\", \"page-preview\", \"properties\", \"publish\", \"random-note\", \"slash-command\", \"slides\", \"switcher\", \"sync\", \"tag-pane\", \"templates\", \"word-count\", \"workspaces\", \"zk-prefixer\"", "descriptionHTML": "<p>The plugin.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Plugin settings to include.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "corePlugins", "*", "settings"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.corePlugins.*.settings", "type": "attribute set of anything", "descriptionHTML": "<p>Plugin settings to include.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "CSS snippets to install.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "cssSnippets"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.cssSnippets", "type": "list of ((submodule) or absolute path convertible to it)", "descriptionHTML": "<p>CSS snippets to install.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "true", "description": "Whether to enable the snippet.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "cssSnippets", "*", "enable"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.cssSnippets.*.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the snippet.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "lib.strings.removeSuffix \".css\" (builtins.baseNameOf source)", "description": "Name of the snippet.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "cssSnippets", "*", "name"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.cssSnippets.*.name", "type": "string", "descriptionHTML": "<p>Name of the snippet.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "null", "description": "Path of the source file.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "cssSnippets", "*", "source"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.cssSnippets.*.source", "type": "null or absolute path", "descriptionHTML": "<p>Path of the source file.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "null", "description": "Text of the file.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "cssSnippets", "*", "text"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.cssSnippets.*.text", "type": "null or string", "descriptionHTML": "<p>Text of the file.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Extra files to link to the vault directory.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "extraFiles"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.extraFiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Extra files to link to the vault directory.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "null", "description": "Path of the source file or directory.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "extraFiles", "<name>", "source"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.extraFiles.<name>.source", "type": "null or absolute path", "descriptionHTML": "<p>Path of the source file or directory.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "name", "description": "Path to target relative to the vault's directory.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "extraFiles", "<name>", "target"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.extraFiles.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target relative to the vault's directory.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "null", "description": "Text of the file.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "extraFiles", "<name>", "text"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.extraFiles.<name>.text", "type": "null or string", "descriptionHTML": "<p>Text of the file.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "{ }", "description": "Hotkeys to configure.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "hotkeys"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.hotkeys", "type": "attribute set of list of (submodule)", "descriptionHTML": "<p>Hotkeys to configure.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "", "description": "The hotkey.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "hotkeys", "<name>", "*", "key"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.hotkeys.<name>.*.key", "type": "string", "descriptionHTML": "<p>The hotkey.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "The hotkey modifiers.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "hotkeys", "<name>", "*", "modifiers"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.hotkeys.<name>.*.modifiers", "type": "list of string", "descriptionHTML": "<p>The hotkey modifiers.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "[ ]", "description": "Themes to install.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "themes"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.themes", "type": "list of ((submodule) or package convertible to it)", "descriptionHTML": "<p>Themes to install.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "true", "description": "Whether to set the theme as active.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "themes", "*", "enable"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.themes.*.enable", "type": "boolean", "descriptionHTML": "<p>Whether to set the theme as active.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "", "description": "The theme package.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "settings", "themes", "*", "pkg"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.settings.themes.*.pkg", "type": "package", "descriptionHTML": "<p>The theme package.</p>"}, {"declarations": [{"name": "<programs/obsidian.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/obsidian.nix"}], "default": "name", "description": "Path to target vault relative to the user's {env}HOME.", "example": "", "loc": ["programs", "obsidian", "vaults", "<name>", "target"], "readOnly": false, "title": "programs.obsidian.vaults.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target vault relative to the user's {env}<code>HOME</code>.</p>"}, {"declarations": [{"name": "<programs/octant.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/octant.nix"}], "default": "false", "description": "Whether to enable octant.", "example": "true", "loc": ["programs", "octant", "enable"], "readOnly": false, "title": "programs.octant.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable octant.</p>"}, {"declarations": [{"name": "<programs/octant.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/octant.nix"}], "default": "pkgs.octant", "description": "The octant package to use.", "example": "pkgs.octant-other", "loc": ["programs", "octant", "package"], "readOnly": false, "title": "programs.octant.package", "type": "package", "descriptionHTML": "<p>The octant package to use.</p>"}, {"declarations": [{"name": "<programs/octant.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/octant.nix"}], "default": "[ ]", "description": "Optional Octant plugins.", "example": "[ pkgs.starboard-octant-plugin ]", "loc": ["programs", "octant", "plugins"], "readOnly": false, "title": "programs.octant.plugins", "type": "list of package", "descriptionHTML": "<p>Optional Octant plugins.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "false", "description": "Whether to enable OfflineIMAP.", "example": "true", "loc": ["programs", "offlineimap", "enable"], "readOnly": false, "title": "programs.offlineimap.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable OfflineIMAP.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "{ }", "description": "Extra configuration options added to the\n{option}DEFAULT section.", "example": "{\n  gmailtrashfolder = \"[Gmail]/Papierkorb\";\n}", "loc": ["programs", "offlineimap", "extraConfig", "default"], "readOnly": false, "title": "programs.offlineimap.extraConfig.default", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Extra configuration options added to the\n{option}<code>DEFAULT</code> section.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "{ }", "description": "Extra configuration options added to the\n{option}general section.", "example": "{\n  maxage = 30;\n  ui = \"blinkenlights\";\n}", "loc": ["programs", "offlineimap", "extraConfig", "general"], "readOnly": false, "title": "programs.offlineimap.extraConfig.general", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Extra configuration options added to the\n{option}<code>general</code> section.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "{ }", "description": "Extra configuration options added to the\nmbnames section.", "example": "{\n  filename = \"~/.config/mutt/mailboxes\";\n  header = \"'mailboxes '\";\n  peritem = \"'+%(accountname)s/%(foldername)s'\";\n  sep = \"' '\";\n  footer = \"'\\\\n'\";\n}\n", "loc": ["programs", "offlineimap", "extraConfig", "mbnames"], "readOnly": false, "title": "programs.offlineimap.extraConfig.mbnames", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Extra configuration options added to the\n<code>mbnames</code> section.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "pkgs.offlineimap", "description": "The offlineimap package to use. Can be used to specify extensions.", "example": "pkgs.offlineimap.overridePythonAttrs ( old: {\n  propagatedBuildInputs = old.propagatedBuildInputs\n    ++ (with pkgs.python3Packages; [\n      requests_oauthlib xdg gpgme]);\n})", "loc": ["programs", "offlineimap", "package"], "readOnly": false, "title": "programs.offlineimap.package", "type": "package", "descriptionHTML": "<p>The offlineimap package to use. Can be used to specify extensions.</p>"}, {"declarations": [{"name": "<programs/offlineimap/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/offlineimap/default.nix"}], "default": "''\n  import subprocess\n  \n  def get_pass(service, cmd):\n      return subprocess.check_output(cmd, )\n''", "description": "Python code that can then be used in other parts of the\nconfiguration.", "example": "", "loc": ["programs", "offlineimap", "pythonFile"], "readOnly": false, "title": "programs.offlineimap.pythonFile", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Python code that can then be used in other parts of the\nconfiguration.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "false", "description": "Whether to enable oh-my-posh, a prompt theme engine for any shell.", "example": "true", "loc": ["programs", "oh-my-posh", "enable"], "readOnly": false, "title": "programs.oh-my-posh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable oh-my-posh, a prompt theme engine for any shell.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "oh-my-posh", "enableBashIntegration"], "readOnly": false, "title": "programs.oh-my-posh.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "oh-my-posh", "enableFishIntegration"], "readOnly": false, "title": "programs.oh-my-posh.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "oh-my-posh", "enableNushellIntegration"], "readOnly": false, "title": "programs.oh-my-posh.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "oh-my-posh", "enableZshIntegration"], "readOnly": false, "title": "programs.oh-my-posh.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "pkgs.oh-my-posh", "description": "The oh-my-posh package to use.", "example": "", "loc": ["programs", "oh-my-posh", "package"], "readOnly": false, "title": "programs.oh-my-posh.package", "type": "package", "descriptionHTML": "<p>The oh-my-posh package to use.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/oh-my-posh/config.json. See\nhttps://ohmyposh.dev/docs/configuration/overview\nfor details. The useTheme option is ignored when this\noption is used.", "example": "builtins.fromJSON (builtins.unsafeDiscardStringContext (builtins.readFile \"${pkgs.oh-my-posh}/share/oh-my-posh/themes/space.omp.json\"))", "loc": ["programs", "oh-my-posh", "settings"], "readOnly": false, "title": "programs.oh-my-posh.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/oh-my-posh/config.json</code>. See\n<a href=\"https://ohmyposh.dev/docs/configuration/overview\">https://ohmyposh.dev/docs/configuration/overview</a>\nfor details. The <code>useTheme</code> option is ignored when this\noption is used.</p>"}, {"declarations": [{"name": "<programs/oh-my-posh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/oh-my-posh.nix"}], "default": "null", "description": "Use one of the official themes. This should be a name from this list:\nhttps://ohmyposh.dev/docs/themes. Because a theme\nis essentially a configuration file, this option is not used when a\nconfigFile is set.", "example": "", "loc": ["programs", "oh-my-posh", "useTheme"], "readOnly": false, "title": "programs.oh-my-posh.useTheme", "type": "null or string", "descriptionHTML": "<p>Use one of the official themes. This should be a name from this list:\n<a href=\"https://ohmyposh.dev/docs/themes\">https://ohmyposh.dev/docs/themes</a>. Because a theme\nis essentially a configuration file, this option is not used when a\n<code>configFile</code> is set.</p>"}, {"declarations": [{"name": "<programs/onagre.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onagre.nix"}], "default": "false", "description": "Whether to enable onagre.", "example": "true", "loc": ["programs", "onagre", "enable"], "readOnly": false, "title": "programs.onagre.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable onagre.</p>"}, {"declarations": [{"name": "<programs/onagre.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onagre.nix"}], "default": "pkgs.onagre", "description": "The onagre package to use.", "example": "", "loc": ["programs", "onagre", "package"], "readOnly": false, "title": "programs.onagre.package", "type": "null or package", "descriptionHTML": "<p>The onagre package to use.</p>"}, {"declarations": [{"name": "<programs/onagre.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onagre.nix"}], "default": "\"\"", "description": "Configuration file to be written to theme.scss for setting\nOnagre's theme. The documentation can be found here:\nhttps://github.com/onagre-launcher/onagre/wiki/Theming", "example": "''\n  .onagre {\n    --exit-unfocused: false;\n    height: 250px;\n    width: 400px;\n    --font-family: \"Iosevka,Iosevka Nerd Font\";\n    font-size: 18px;\n    background: #151515;\n    color: #414141;\n    padding: 10px;\n  \n    .container {\n      .rows {\n        --height: fill-portion 6;\n        .row-selected {\n          color: #ffffff;\n          --spacing: 3px;\n        }\n      }\n  \n      .scrollable {\n        background: #151515;\n        width: 0;\n        .scroller {\n          width: 0;\n          color: #151515;\n        }\n      }\n    }\n  }\n''", "loc": ["programs", "onagre", "style"], "readOnly": false, "title": "programs.onagre.style", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration file to be written to theme.scss for setting\nOnagre's theme. The documentation can be found here:\n<a href=\"https://github.com/onagre-launcher/onagre/wiki/Theming\">https://github.com/onagre-launcher/onagre/wiki/Theming</a></p>"}, {"declarations": [{"name": "<programs/onedrive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onedrive.nix"}], "default": "false", "description": "Whether to enable onedrive.", "example": "true", "loc": ["programs", "onedrive", "enable"], "readOnly": false, "title": "programs.onedrive.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable onedrive.</p>"}, {"declarations": [{"name": "<programs/onedrive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onedrive.nix"}], "default": "pkgs.onedrive", "description": "The onedrive package to use.", "example": "", "loc": ["programs", "onedrive", "package"], "readOnly": false, "title": "programs.onedrive.package", "type": "null or package", "descriptionHTML": "<p>The onedrive package to use.</p>"}, {"declarations": [{"name": "<programs/onedrive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onedrive.nix"}], "default": "{ }", "description": "Configuration settings for Onedrive. All available options can be\nfound at https://github.com/abraunegg/onedrive/blob/master/config.", "example": "''\n  {\n    check_nomount = \"false\";\n    check_nosync = \"false\";\n    classify_as_big_delete = \"1000\";\n    cleanup_local_files = \"false\";\n    disable_notifications = \"false\";\n    no_remote_delete = \"false\";\n    rate_limit = \"0\";\n    resync = \"false\";\n    skip_dotfiles = \"false\";\n  }\n''", "loc": ["programs", "onedrive", "settings"], "readOnly": false, "title": "programs.onedrive.settings", "type": "attribute set of string", "descriptionHTML": "<p>Configuration settings for Onedrive. All available options can be\nfound at <a href=\"https://github.com/abraunegg/onedrive/blob/master/config\">https://github.com/abraunegg/onedrive/blob/master/config</a>.</p>"}, {"declarations": [{"name": "<programs/onlyoffice.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onlyoffice.nix"}], "default": "false", "description": "Whether to enable onlyoffice.", "example": "true", "loc": ["programs", "onlyoffice", "enable"], "readOnly": false, "title": "programs.onlyoffice.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable onlyoffice.</p>"}, {"declarations": [{"name": "<programs/onlyoffice.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onlyoffice.nix"}], "default": "pkgs.onlyoffice-desktopeditors", "description": "The onlyoffice-desktopeditors package to use.", "example": "", "loc": ["programs", "onlyoffice", "package"], "readOnly": false, "title": "programs.onlyoffice.package", "type": "null or package", "descriptionHTML": "<p>The onlyoffice-desktopeditors package to use.</p>"}, {"declarations": [{"name": "<programs/onlyoffice.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/onlyoffice.nix"}], "default": "{ }", "description": "Configuration settings for Onlyoffice.\nAll configurable options can be deduced by enabling them through the\nGUI and observing the changes in ~/.config/onlyoffice/DesktopEditors.conf.", "example": "''\n  UITheme = \"theme-contrast-dark\";\n  editorWindowMode = false;\n  forcedRtl = false;\n  maximized = true;\n  titlebar = \"custom\";\n''", "loc": ["programs", "onlyoffice", "settings"], "readOnly": false, "title": "programs.onlyoffice.settings", "type": "attribute set of (atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration settings for Onlyoffice.</p>\n<p>All configurable options can be deduced by enabling them through the\nGUI and observing the changes in ~/.config/onlyoffice/DesktopEditors.conf.</p>"}, {"declarations": [{"name": "<programs/opam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opam.nix"}], "default": "false", "description": "Whether to enable Opam.", "example": "true", "loc": ["programs", "opam", "enable"], "readOnly": false, "title": "programs.opam.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Opam.</p>"}, {"declarations": [{"name": "<programs/opam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opam.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "opam", "enableBashIntegration"], "readOnly": false, "title": "programs.opam.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/opam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opam.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "opam", "enableFishIntegration"], "readOnly": false, "title": "programs.opam.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/opam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opam.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "opam", "enableZshIntegration"], "readOnly": false, "title": "programs.opam.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/opam.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opam.nix"}], "default": "pkgs.opam", "description": "The opam package to use.", "example": "", "loc": ["programs", "opam", "package"], "readOnly": false, "title": "programs.opam.package", "type": "package", "descriptionHTML": "<p>The opam package to use.</p>"}, {"declarations": [{"name": "<programs/opencode.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opencode.nix"}], "default": "false", "description": "Whether to enable opencode.", "example": "true", "loc": ["programs", "opencode", "enable"], "readOnly": false, "title": "programs.opencode.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable opencode.</p>"}, {"declarations": [{"name": "<programs/opencode.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opencode.nix"}], "default": "pkgs.opencode", "description": "The opencode package to use.", "example": "", "loc": ["programs", "opencode", "package"], "readOnly": false, "title": "programs.opencode.package", "type": "null or package", "descriptionHTML": "<p>The opencode package to use.</p>"}, {"declarations": [{"name": "<programs/opencode.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/opencode.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/opencode/config.json.\nSee https://opencode.ai/docs/config/ for the documentation.", "example": "{\n  theme = \"opencode\";\n  model = \"anthropic/claude-sonnet-4-20250514\";\n  autoshare = false;\n  autoupdate = true;\n}\n", "loc": ["programs", "opencode", "settings"], "readOnly": false, "title": "programs.opencode.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/opencode/config.json</code>.\nSee <a href=\"https://opencode.ai/docs/config/\">https://opencode.ai/docs/config/</a> for the documentation.</p>"}, {"declarations": [{"name": "<programs/openstackclient.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/openstackclient.nix"}], "default": "{ }", "description": "Configuration needed to connect to one or more clouds.\nDo not include passwords here as they will be publicly readable in the Nix store.\nConfiguration written to {file}$XDG_CONFIG_HOME/openstack/clouds.yaml.\nSee https://docs.openstack.org/python-openstackclient/latest/configuration/index.html#clouds-yaml.", "example": "{\n  my-infra = {\n    cloud = \"example-cloud\";\n    auth = {\n      project_id = \"0123456789abcdef0123456789abcdef\";\n      username = \"openstack\";\n    };\n    region_name = \"XXX\";\n    interface = \"internal\";\n  };\n}\n", "loc": ["programs", "openstackclient", "clouds"], "readOnly": false, "title": "programs.openstackclient.clouds", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration needed to connect to one or more clouds.</p>\n<p>Do not include passwords here as they will be publicly readable in the Nix store.\nConfiguration written to {file}<code>$XDG_CONFIG_HOME/openstack/clouds.yaml</code>.\nSee <a href=\"https://docs.openstack.org/python-openstackclient/latest/configuration/index.html#clouds-yaml\">https://docs.openstack.org/python-openstackclient/latest/configuration/index.html#clouds-yaml</a>.</p>"}, {"declarations": [{"name": "<programs/openstackclient.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/openstackclient.nix"}], "default": "false", "description": "Whether to enable OpenStack command-line client.", "example": "true", "loc": ["programs", "openstackclient", "enable"], "readOnly": false, "title": "programs.openstackclient.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable OpenStack command-line client.</p>"}, {"declarations": [{"name": "<programs/openstackclient.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/openstackclient.nix"}], "default": "pkgs.openstackclient", "description": "The openstackclient package to use.", "example": "", "loc": ["programs", "openstackclient", "package"], "readOnly": false, "title": "programs.openstackclient.package", "type": "null or package", "descriptionHTML": "<p>The openstackclient package to use.</p>"}, {"declarations": [{"name": "<programs/openstackclient.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/openstackclient.nix"}], "default": "{ }", "description": "Public information about clouds.\nConfiguration written to {file}$XDG_CONFIG_HOME/openstack/clouds-public.yaml.\nSee https://docs.openstack.org/python-openstackclient/latest/configuration/index.html#clouds-public-yaml.", "example": "{\n  example-cloud = {\n    auth = {\n      auth_url = \"https://identity.cloud.example.com/v2.0\";\n    };\n  };\n};\n", "loc": ["programs", "openstackclient", "publicClouds"], "readOnly": false, "title": "programs.openstackclient.publicClouds", "type": "YAML 1.1 value", "descriptionHTML": "<p>Public information about clouds.</p>\n<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/openstack/clouds-public.yaml</code>.\nSee <a href=\"https://docs.openstack.org/python-openstackclient/latest/configuration/index.html#clouds-public-yaml\">https://docs.openstack.org/python-openstackclient/latest/configuration/index.html#clouds-public-yaml</a>.</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "[ ]", "description": "List of .csl files to install.", "example": "[ path/to/file.csl ]", "loc": ["programs", "pandoc", "citationStyles"], "readOnly": false, "title": "programs.pandoc.citationStyles", "type": "list of absolute path", "descriptionHTML": "<p>List of .csl files to install.</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "{ }", "description": "Options to set by default.\nThese will be converted to JSON and written to a defaults\nfile (see Default files in pandoc documentation).", "example": "{\n  metadata = {\n    author = \"John Doe\";\n  };\n  pdf-engine = \"xelatex\";\n  citeproc = true;\n}\n", "loc": ["programs", "pandoc", "defaults"], "readOnly": false, "title": "programs.pandoc.defaults", "type": "JSON value", "descriptionHTML": "<p>Options to set by default.\nThese will be converted to JSON and written to a defaults\nfile (see Default files in pandoc documentation).</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "", "description": "Resulting defaults file.", "example": "", "loc": ["programs", "pandoc", "defaultsFile"], "readOnly": true, "title": "programs.pandoc.defaultsFile", "type": "absolute path", "descriptionHTML": "<p>Resulting defaults file.</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "false", "description": "Whether to enable pandoc.", "example": "true", "loc": ["programs", "pandoc", "enable"], "readOnly": false, "title": "programs.pandoc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pandoc.</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "", "description": "Resulting package.", "example": "", "loc": ["programs", "pandoc", "finalPackage"], "readOnly": true, "title": "programs.pandoc.finalPackage", "type": "package", "descriptionHTML": "<p>Resulting package.</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "pkgs.pandoc", "description": "The pandoc package to use.", "example": "", "loc": ["programs", "pandoc", "package"], "readOnly": false, "title": "programs.pandoc.package", "type": "package", "descriptionHTML": "<p>The pandoc package to use.</p>"}, {"declarations": [{"name": "<programs/pandoc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pandoc.nix"}], "default": "{ }", "description": "Custom templates.", "example": "{\n  \"default.latex\" = path/to/your/template;\n}\n", "loc": ["programs", "pandoc", "templates"], "readOnly": false, "title": "programs.pandoc.templates", "type": "attribute set of absolute path", "descriptionHTML": "<p>Custom templates.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "false", "description": "Whether to enable papis.", "example": "true", "loc": ["programs", "papis", "enable"], "readOnly": false, "title": "programs.papis.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable papis.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "{ }", "description": "Attribute set of papis libraries.", "example": "", "loc": ["programs", "papis", "libraries"], "readOnly": false, "title": "programs.papis.libraries", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of papis libraries.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "false", "description": "Whether this is a default library.\nFor papis to function without explicit library selection\n(i.e. without -l &lt;library&gt; or --pick-lib flags) there\nmust be a default library defined.\nNote this can be also defined (or overridden) on a local\n$(pwd)/.papis.config or via python\n$XDG_CONFIG_HOME/papis/config.py config file.", "example": "true", "loc": ["programs", "papis", "libraries", "<name>", "isDefault"], "readOnly": false, "title": "programs.papis.libraries.<name>.isDefault", "type": "boolean", "descriptionHTML": "<p>Whether this is a default library.</p>\n<p>For papis to function without explicit library selection\n(i.e. without <code>-l &lt;library&gt;</code> or <code>--pick-lib</code> flags) there\nmust be a default library defined.</p>\n<p>Note this can be also defined (or overridden) on a local\n<code>$(pwd)/.papis.config</code> or via python\n<code>$XDG_CONFIG_HOME/papis/config.py</code> config file.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "\"\u2039name\u203a\"", "description": "This library's name.", "example": "", "loc": ["programs", "papis", "libraries", "<name>", "name"], "readOnly": true, "title": "programs.papis.libraries.<name>.name", "type": "string", "descriptionHTML": "<p>This library's name.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "{ }", "description": "Configuration for this library.", "example": "{\n  dir = \"~/papers/\";\n}\n", "loc": ["programs", "papis", "libraries", "<name>", "settings"], "readOnly": false, "title": "programs.papis.libraries.<name>.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Configuration for this library.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "pkgs.papis", "description": "The papis package to use.", "example": "", "loc": ["programs", "papis", "package"], "readOnly": false, "title": "programs.papis.package", "type": "null or package", "descriptionHTML": "<p>The papis package to use.</p>"}, {"declarations": [{"name": "<programs/papis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/papis.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/papis/config. See\nhttps://papis.readthedocs.io/en/latest/configuration.html\nfor supported values.", "example": "{\n  editor = \"nvim\";\n  file-browser = \"ranger\"\n  add-edit = true;\n}\n", "loc": ["programs", "papis", "settings"], "readOnly": false, "title": "programs.papis.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/papis/config</code>. See\n<a href=\"https://papis.readthedocs.io/en/latest/configuration.html\">https://papis.readthedocs.io/en/latest/configuration.html</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/password-store.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/password-store.nix"}], "default": "false", "description": "Whether to enable Password store.", "example": "true", "loc": ["programs", "password-store", "enable"], "readOnly": false, "title": "programs.password-store.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Password store.</p>"}, {"declarations": [{"name": "<programs/password-store.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/password-store.nix"}], "default": "pkgs.pass", "description": "The pass package to use. Can be used to specify extensions.", "example": "pkgs.pass.withExtensions (exts: [ exts.pass-otp ])", "loc": ["programs", "password-store", "package"], "readOnly": false, "title": "programs.password-store.package", "type": "package", "descriptionHTML": "<p>The pass package to use. Can be used to specify extensions.</p>"}, {"declarations": [{"name": "<programs/password-store.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/password-store.nix"}], "default": "{ PASSWORD_STORE_DIR = \"$XDG_DATA_HOME/password-store\"; }\n", "description": "The pass environment variables dictionary.\nSee the \"Environment variables\" section of\n{manpage}pass(1)\nand the extension man pages for more information about the\navailable keys.", "example": "{\n  PASSWORD_STORE_DIR = \"/some/directory\";\n  PASSWORD_STORE_KEY = \"12345678\";\n  PASSWORD_STORE_CLIP_TIME = \"60\";\n}\n", "loc": ["programs", "password-store", "settings"], "readOnly": false, "title": "programs.password-store.settings", "type": "attribute set of string", "descriptionHTML": "<p>The <code>pass</code> environment variables dictionary.</p>\n<p>See the \"Environment variables\" section of\n{manpage}<code>pass(1)</code>\nand the extension man pages for more information about the\navailable keys.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "false", "description": "Whether to enable pay-respects.", "example": "true", "loc": ["programs", "pay-respects", "enable"], "readOnly": false, "title": "programs.pay-respects.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pay-respects.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "pay-respects", "enableBashIntegration"], "readOnly": false, "title": "programs.pay-respects.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "pay-respects", "enableFishIntegration"], "readOnly": false, "title": "programs.pay-respects.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "pay-respects", "enableNushellIntegration"], "readOnly": false, "title": "programs.pay-respects.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "pay-respects", "enableZshIntegration"], "readOnly": false, "title": "programs.pay-respects.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "[\n  \"--alias\"\n]", "description": "List of options to pass to pay-respects <shell>.", "example": "[\n  \"--alias\"\n  \"f\"\n]", "loc": ["programs", "pay-respects", "options"], "readOnly": false, "title": "programs.pay-respects.options", "type": "list of string", "descriptionHTML": "<p>List of options to pass to pay-respects <shell>.</p>"}, {"declarations": [{"name": "<programs/pay-respects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pay-respects.nix"}], "default": "pkgs.pay-respects", "description": "The pay-respects package to use.", "example": "", "loc": ["programs", "pay-respects", "package"], "readOnly": false, "title": "programs.pay-respects.package", "type": "package", "descriptionHTML": "<p>The pay-respects package to use.</p>"}, {"declarations": [{"name": "<programs/pazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pazi.nix"}], "default": "false", "description": "Whether to enable pazi.", "example": "true", "loc": ["programs", "pazi", "enable"], "readOnly": false, "title": "programs.pazi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pazi.</p>"}, {"declarations": [{"name": "<programs/pazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pazi.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "pazi", "enableBashIntegration"], "readOnly": false, "title": "programs.pazi.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/pazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pazi.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "pazi", "enableFishIntegration"], "readOnly": false, "title": "programs.pazi.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/pazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pazi.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "pazi", "enableZshIntegration"], "readOnly": false, "title": "programs.pazi.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/pazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pazi.nix"}], "default": "pkgs.pazi", "description": "The pazi package to use.", "example": "", "loc": ["programs", "pazi", "package"], "readOnly": false, "title": "programs.pazi.package", "type": "package", "descriptionHTML": "<p>The pazi package to use.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "false", "description": "Whether to enable pet.", "example": "true", "loc": ["programs", "pet", "enable"], "readOnly": false, "title": "programs.pet.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pet.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "pkgs.pet", "description": "The pet package to use.", "example": "", "loc": ["programs", "pet", "package"], "readOnly": false, "title": "programs.pet.package", "type": "null or package", "descriptionHTML": "<p>The pet package to use.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "pkgs.fzf", "description": "The fzf package to use. The package needed for the {var}settings.selectcmd.", "example": "", "loc": ["programs", "pet", "selectcmdPackage"], "readOnly": false, "title": "programs.pet.selectcmdPackage", "type": "null or package", "descriptionHTML": "<p>The fzf package to use. The package needed for the {var}<code>settings.selectcmd</code>.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "{ }", "description": "Settings written to {file}config.toml. See the pet\ndocumentation for details.", "example": "", "loc": ["programs", "pet", "settings"], "readOnly": false, "title": "programs.pet.settings", "type": "TOML value", "descriptionHTML": "<p>Settings written to {file}<code>config.toml</code>. See the pet\ndocumentation for details.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "[ ]", "description": "The snippets.", "example": "", "loc": ["programs", "pet", "snippets"], "readOnly": false, "title": "programs.pet.snippets", "type": "list of (submodule)", "descriptionHTML": "<p>The snippets.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "\"\"", "description": "The command.", "example": "\"git rev-list --count HEAD\"", "loc": ["programs", "pet", "snippets", "*", "command"], "readOnly": false, "title": "programs.pet.snippets.*.command", "type": "string", "descriptionHTML": "<p>The command.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "\"\"", "description": "Description of the snippet.", "example": "\"Count the number of commits in the current branch\"", "loc": ["programs", "pet", "snippets", "*", "description"], "readOnly": false, "title": "programs.pet.snippets.*.description", "type": "string", "descriptionHTML": "<p>Description of the snippet.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "\"\"", "description": "Example output of the command.", "example": "\"473\"", "loc": ["programs", "pet", "snippets", "*", "output"], "readOnly": false, "title": "programs.pet.snippets.*.output", "type": "string", "descriptionHTML": "<p>Example output of the command.</p>"}, {"declarations": [{"name": "<programs/pet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pet.nix"}], "default": "[ ]", "description": "List of tags attached to the command.", "example": "[\"git\" \"nixpkgs\"]", "loc": ["programs", "pet", "snippets", "*", "tag"], "readOnly": false, "title": "programs.pet.snippets.*.tag", "type": "list of string", "descriptionHTML": "<p>List of tags attached to the command.</p>"}, {"declarations": [{"name": "<programs/pgcli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pgcli.nix"}], "default": "false", "description": "Whether to enable pgcli.", "example": "true", "loc": ["programs", "pgcli", "enable"], "readOnly": false, "title": "programs.pgcli.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pgcli.</p>"}, {"declarations": [{"name": "<programs/pgcli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pgcli.nix"}], "default": "pkgs.pgcli", "description": "The pgcli package to use.", "example": "", "loc": ["programs", "pgcli", "package"], "readOnly": false, "title": "programs.pgcli.package", "type": "null or package", "descriptionHTML": "<p>The pgcli package to use.</p>"}, {"declarations": [{"name": "<programs/pgcli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pgcli.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/pgcli/config.\nSee https://www.pgcli.com/config\nfor more information.", "example": "{\n  main = {\n    smart_completion = true;\n    vi = true;\n  };\n\n  \"named queries\".simple = \"select * from abc where a is not Null\";\n}\n", "loc": ["programs", "pgcli", "settings"], "readOnly": false, "title": "programs.pgcli.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/pgcli/config</code>.\nSee <a href=\"https://www.pgcli.com/config\">https://www.pgcli.com/config</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/pidgin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pidgin.nix"}], "default": "false", "description": "Whether to enable Pidgin messaging client.", "example": "true", "loc": ["programs", "pidgin", "enable"], "readOnly": false, "title": "programs.pidgin.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Pidgin messaging client.</p>"}, {"declarations": [{"name": "<programs/pidgin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pidgin.nix"}], "default": "pkgs.pidgin", "description": "The pidgin package to use.", "example": "", "loc": ["programs", "pidgin", "package"], "readOnly": false, "title": "programs.pidgin.package", "type": "package", "descriptionHTML": "<p>The pidgin package to use.</p>"}, {"declarations": [{"name": "<programs/pidgin.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pidgin.nix"}], "default": "[ ]", "description": "Plugins that should be available to Pidgin.", "example": "[ pkgs.pidgin-otr pkgs.pidgin-osd ]", "loc": ["programs", "pidgin", "plugins"], "readOnly": false, "title": "programs.pidgin.plugins", "type": "unspecified value", "descriptionHTML": "<p>Plugins that should be available to Pidgin.</p>"}, {"declarations": [{"name": "<programs/pistol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pistol.nix"}], "default": "[ ]", "description": "Associations written to the Pistol configuration at\n{file}$XDG_CONFIG_HOME/pistol/pistol.conf.", "example": "[\n  { mime = \"application/json\"; command = \"bat %pistol-filename%\"; }\n  { mime = \"application/*\"; command = \"hexyl %pistol-filename%\"; }\n  { fpath = \".*.md$\"; command = \"sh: bat --paging=never --color=always %pistol-filename% | head -8\"; }\n]\n", "loc": ["programs", "pistol", "associations"], "readOnly": false, "title": "programs.pistol.associations", "type": "list of (submodule)", "descriptionHTML": "<p>Associations written to the Pistol configuration at\n{file}<code>$XDG_CONFIG_HOME/pistol/pistol.conf</code>.</p>"}, {"declarations": [{"name": "<programs/pistol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pistol.nix"}], "default": "", "description": "Preview command for files matched by this association.", "example": "", "loc": ["programs", "pistol", "associations", "*", "command"], "readOnly": false, "title": "programs.pistol.associations.*.command", "type": "string", "descriptionHTML": "<p>Preview command for files matched by this association.</p>"}, {"declarations": [{"name": "<programs/pistol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pistol.nix"}], "default": "\"\"", "description": "File path regex that this association should match.", "example": "", "loc": ["programs", "pistol", "associations", "*", "fpath"], "readOnly": false, "title": "programs.pistol.associations.*.fpath", "type": "string", "descriptionHTML": "<p>File path regex that this association should match.</p>"}, {"declarations": [{"name": "<programs/pistol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pistol.nix"}], "default": "\"\"", "description": "Mime type regex that this association should match.", "example": "", "loc": ["programs", "pistol", "associations", "*", "mime"], "readOnly": false, "title": "programs.pistol.associations.*.mime", "type": "string", "descriptionHTML": "<p>Mime type regex that this association should match.</p>"}, {"declarations": [{"name": "<programs/pistol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pistol.nix"}], "default": "false", "description": "Whether to enable file previewer for terminal file managers.", "example": "true", "loc": ["programs", "pistol", "enable"], "readOnly": false, "title": "programs.pistol.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable file previewer for terminal file managers.</p>"}, {"declarations": [{"name": "<programs/pistol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pistol.nix"}], "default": "pkgs.pistol", "description": "The pistol package to use.", "example": "", "loc": ["programs", "pistol", "package"], "readOnly": false, "title": "programs.pistol.package", "type": "null or package", "descriptionHTML": "<p>The pistol package to use.</p>"}, {"declarations": [{"name": "<programs/piston-cli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/piston-cli.nix"}], "default": "false", "description": "Whether to enable piston-cli, code runner.", "example": "true", "loc": ["programs", "piston-cli", "enable"], "readOnly": false, "title": "programs.piston-cli.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable piston-cli, code runner.</p>"}, {"declarations": [{"name": "<programs/piston-cli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/piston-cli.nix"}], "default": "pkgs.piston-cli", "description": "The piston-cli package to use.", "example": "", "loc": ["programs", "piston-cli", "package"], "readOnly": false, "title": "programs.piston-cli.package", "type": "package", "descriptionHTML": "<p>The piston-cli package to use.</p>"}, {"declarations": [{"name": "<programs/piston-cli.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/piston-cli.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/piston-cli/config.yml.", "example": "{\n  theme = \"emacs\";\n  box_style = \"MINIMAL_DOUBLE_HEAD\";\n  prompt_continuation = \"...\";\n  prompt_start = \">>>\";\n}\n", "loc": ["programs", "piston-cli", "settings"], "readOnly": false, "title": "programs.piston-cli.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/piston-cli/config.yml</code>.</p>"}, {"declarations": [{"name": "<programs/pls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pls.nix"}], "default": "false", "description": "Whether to enable pls, a modern replacement for {command}ls.", "example": "true", "loc": ["programs", "pls", "enable"], "readOnly": false, "title": "programs.pls.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pls, a modern replacement for {command}<code>ls</code>.</p>"}, {"declarations": [{"name": "<programs/pls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pls.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "pls", "enableBashIntegration"], "readOnly": false, "title": "programs.pls.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/pls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pls.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "pls", "enableFishIntegration"], "readOnly": false, "title": "programs.pls.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/pls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pls.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "pls", "enableZshIntegration"], "readOnly": false, "title": "programs.pls.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/pls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pls.nix"}], "default": "pkgs.pls", "description": "The pls package to use.", "example": "", "loc": ["programs", "pls", "package"], "readOnly": false, "title": "programs.pls.package", "type": "package", "descriptionHTML": "<p>The pls package to use.</p>"}, {"declarations": [{"name": "<programs/poetry.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/poetry.nix"}], "default": "false", "description": "Whether to enable poetry.", "example": "true", "loc": ["programs", "poetry", "enable"], "readOnly": false, "title": "programs.poetry.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable poetry.</p>"}, {"declarations": [{"name": "<programs/poetry.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/poetry.nix"}], "default": "pkgs.poetry", "description": "The poetry package to use. May be used to install custom poetry plugins.", "example": "pkgs.poetry.withPlugins (ps: with ps; [ poetry-plugin-up ])", "loc": ["programs", "poetry", "package"], "readOnly": false, "title": "programs.poetry.package", "type": "null or package", "descriptionHTML": "<p>The poetry package to use. May be used to install custom poetry plugins.</p>"}, {"declarations": [{"name": "<programs/poetry.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/poetry.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/pypoetry/config.toml on Linux or\n{file}$HOME/Library/Application Support/pypoetry/config.toml on Darwin.\nSee\nhttps://python-poetry.org/docs/configuration/\nfor more information.", "example": "{\n  virtualenvs.create = true;\n  virtualenvs.in-project = true;\n}\n", "loc": ["programs", "poetry", "settings"], "readOnly": false, "title": "programs.poetry.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/pypoetry/config.toml</code> on Linux or\n{file}<code>$HOME/Library/Application Support/pypoetry/config.toml</code> on Darwin.\nSee\n<a href=\"https://python-poetry.org/docs/configuration/\">https://python-poetry.org/docs/configuration/</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "false", "description": "Whether to enable Powerline-go, a beautiful and useful low-latency prompt for your shell.", "example": "true", "loc": ["programs", "powerline-go", "enable"], "readOnly": false, "title": "programs.powerline-go.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Powerline-go, a beautiful and useful low-latency prompt for your shell.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "\"\"", "description": "Shell code to execute after the prompt is set.", "example": "''\n  PS1=$PS1\"NixOS> \";\n''", "loc": ["programs", "powerline-go", "extraUpdatePS1"], "readOnly": false, "title": "programs.powerline-go.extraUpdatePS1", "type": "string", "descriptionHTML": "<p>Shell code to execute after the prompt is set.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "null", "description": "List of module names to load. The list of all available\nmodules as well as the choice of default ones are at\nhttps://github.com/justjanne/powerline-go.", "example": "[\n  \"host\"\n  \"ssh\"\n  \"cwd\"\n  \"gitlite\"\n  \"jobs\"\n  \"exit\"\n]", "loc": ["programs", "powerline-go", "modules"], "readOnly": false, "title": "programs.powerline-go.modules", "type": "null or (list of string)", "descriptionHTML": "<p>List of module names to load. The list of all available\nmodules as well as the choice of default ones are at\n<a href=\"https://github.com/justjanne/powerline-go\">https://github.com/justjanne/powerline-go</a>.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "null", "description": "List of module names to load to be displayed on the right side.\nCurrently not supported by bash. Specifying a value for this\noption will force powerline-go to use the eval format to set\nthe prompt.", "example": "[\n  \"host\"\n  \"venv\"\n  \"git\"\n]", "loc": ["programs", "powerline-go", "modulesRight"], "readOnly": false, "title": "programs.powerline-go.modulesRight", "type": "null or (list of string)", "descriptionHTML": "<p>List of module names to load to be displayed on the right side.\nCurrently not supported by bash. Specifying a value for this\noption will force powerline-go to use the eval format to set\nthe prompt.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "false", "description": "Set to true if the prompt should be on a line of its own.", "example": "true", "loc": ["programs", "powerline-go", "newline"], "readOnly": false, "title": "programs.powerline-go.newline", "type": "boolean", "descriptionHTML": "<p>Set to true if the prompt should be on a line of its own.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "null", "description": "Pairs of full-path and corresponding desired short name. You\nmay use '~' to represent your home directory but you should\nprotect it to avoid shell substitution.", "example": "{ \"\\\\~/projects/home-manager\" = \"prj:home-manager\"; }\n", "loc": ["programs", "powerline-go", "pathAliases"], "readOnly": false, "title": "programs.powerline-go.pathAliases", "type": "null or (attribute set of string)", "descriptionHTML": "<p>Pairs of full-path and corresponding desired short name. You\nmay use '~' to represent your home directory but you should\nprotect it to avoid shell substitution.</p>"}, {"declarations": [{"name": "<programs/powerline-go.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/powerline-go.nix"}], "default": "{ }", "description": "This can be any key/value pair as described in\nhttps://github.com/justjanne/powerline-go.", "example": "{\n  hostname-only-if-ssh = true;\n  numeric-exit-codes = true;\n  cwd-max-depth = 7;\n  ignore-repos = [ \"/home/me/big-project\" \"/home/me/huge-project\" ];\n}\n", "loc": ["programs", "powerline-go", "settings"], "readOnly": false, "title": "programs.powerline-go.settings", "type": "attribute set of (boolean or signed integer or string or list of string)", "descriptionHTML": "<p>This can be any key/value pair as described in\n<a href=\"https://github.com/justjanne/powerline-go\">https://github.com/justjanne/powerline-go</a>.</p>"}, {"declarations": [{"name": "<programs/pqiv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pqiv.nix"}], "default": "false", "description": "Whether to enable pqiv image viewer.", "example": "true", "loc": ["programs", "pqiv", "enable"], "readOnly": false, "title": "programs.pqiv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pqiv image viewer.</p>"}, {"declarations": [{"name": "<programs/pqiv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pqiv.nix"}], "default": "\"\"", "description": "Extra lines to be added to {file}$XDG_CONFIG_HOME/pqivrc. See\n{manpage}pqiv(1) for a list of available options.", "example": "[actions]\nset_cursor_auto_hide(1)\n\n[keybindings]\nt { montage_mode_enter() }\n@MONTAGE {\n  t { montage_mode_return_cancel() }\n}\n", "loc": ["programs", "pqiv", "extraConfig"], "readOnly": false, "title": "programs.pqiv.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines to be added to {file}<code>$XDG_CONFIG_HOME/pqivrc</code>. See\n{manpage}<code>pqiv(1)</code> for a list of available options.</p>"}, {"declarations": [{"name": "<programs/pqiv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pqiv.nix"}], "default": "pkgs.pqiv", "description": "The pqiv package to use.", "example": "", "loc": ["programs", "pqiv", "package"], "readOnly": false, "title": "programs.pqiv.package", "type": "package", "descriptionHTML": "<p>The pqiv package to use.</p>"}, {"declarations": [{"name": "<programs/pqiv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pqiv.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/pqivrc. See\n{manpage}pqiv(1) for a list of available options.", "example": "{\n  options = {\n    lazy-load = true;\n    hide-info-box = true;\n    background-pattern = \"black\";\n    thumbnail-size = \"256x256\";\n    command-1 = \"thunar\";\n  };\n};\n", "loc": ["programs", "pqiv", "settings"], "readOnly": false, "title": "programs.pqiv.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/pqivrc</code>. See\n{manpage}<code>pqiv(1)</code> for a list of available options.</p>"}, {"declarations": [{"name": "<programs/ptyxis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ptyxis.nix"}], "default": "false", "description": "Whether to enable ptyxis.", "example": "true", "loc": ["programs", "ptyxis", "enable"], "readOnly": false, "title": "programs.ptyxis.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ptyxis.</p>"}, {"declarations": [{"name": "<programs/ptyxis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ptyxis.nix"}], "default": "pkgs.ptyxis", "description": "The ptyxis package to use.", "example": "", "loc": ["programs", "ptyxis", "package"], "readOnly": false, "title": "programs.ptyxis.package", "type": "null or package", "descriptionHTML": "<p>The ptyxis package to use.</p>"}, {"declarations": [{"name": "<programs/ptyxis.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ptyxis.nix"}], "default": "{ }", "description": "Written to {file}$XDG_CONFIG_HOME/org.gnome.Prompt/palettes/NAME.palette.\nSee https://gitlab.gnome.org/chergert/ptyxis/-/tree/main/data/palettes\nfor more information.", "example": "{\n  myPalette = {\n    Palette.Name = \"My awesome theme\";\n    Light = {\n      Foreground=\"#E2E2E3\";\n      Background=\"#2C2E34\";\n      Color0=\"#2C2E34\";\n      Color1=\"#FC5D7C\";\n      Color2=\"#9ED072\";\n      Color3=\"#E7C664\";\n      Color4=\"#F39660\";\n    };\n  };\n}\n", "loc": ["programs", "ptyxis", "palettes"], "readOnly": false, "title": "programs.ptyxis.palettes", "type": "attribute set of ((attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))) or absolute path or string)", "descriptionHTML": "<p>Written to {file}<code>$XDG_CONFIG_HOME/org.gnome.Prompt/palettes/NAME.palette</code>.\nSee <a href=\"https://gitlab.gnome.org/chergert/ptyxis/-/tree/main/data/palettes\">https://gitlab.gnome.org/chergert/ptyxis/-/tree/main/data/palettes</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/pubs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pubs.nix"}], "default": "false", "description": "Whether to enable pubs.", "example": "true", "loc": ["programs", "pubs", "enable"], "readOnly": false, "title": "programs.pubs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pubs.</p>"}, {"declarations": [{"name": "<programs/pubs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pubs.nix"}], "default": "\"\"", "description": "Configuration using syntax written to\n{file}$HOME/.pubsrc.", "example": "''\n[main]\npubsdir = ${config.home.homeDirectory}/.pubs\ndocsdir = ${config.home.homeDirectory}/.pubs/doc\ndoc_add = link\nopen_cmd = xdg-open\n\n[plugins]\nactive = git,alias\n\n[[alias]]\n\n[[[la]]]\ncommand = list -a\ndescription = lists papers in lexicographic order\n\n[[git]]\nquiet = True\nmanual = False\nforce_color = False\n''", "loc": ["programs", "pubs", "extraConfig"], "readOnly": false, "title": "programs.pubs.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration using syntax written to\n{file}<code>$HOME/.pubsrc</code>.</p>"}, {"declarations": [{"name": "<programs/pubs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pubs.nix"}], "default": "pkgs.pubs", "description": "The pubs package to use.", "example": "", "loc": ["programs", "pubs", "package"], "readOnly": false, "title": "programs.pubs.package", "type": "package", "descriptionHTML": "<p>The pubs package to use.</p>"}, {"declarations": [{"name": "<programs/pyenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pyenv.nix"}], "default": "false", "description": "Whether to enable pyenv.", "example": "true", "loc": ["programs", "pyenv", "enable"], "readOnly": false, "title": "programs.pyenv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pyenv.</p>"}, {"declarations": [{"name": "<programs/pyenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pyenv.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "pyenv", "enableBashIntegration"], "readOnly": false, "title": "programs.pyenv.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/pyenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pyenv.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "pyenv", "enableFishIntegration"], "readOnly": false, "title": "programs.pyenv.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/pyenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pyenv.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "pyenv", "enableZshIntegration"], "readOnly": false, "title": "programs.pyenv.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/pyenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pyenv.nix"}], "default": "pkgs.pyenv", "description": "The pyenv package to use.", "example": "", "loc": ["programs", "pyenv", "package"], "readOnly": false, "title": "programs.pyenv.package", "type": "package", "descriptionHTML": "<p>The pyenv package to use.</p>"}, {"declarations": [{"name": "<programs/pyenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pyenv.nix"}], "default": "\"\\${config.xdg.dataHome}/pyenv\"", "description": "The pyenv root directory ({env}PYENV_ROOT).\n::: {.note}\nThis deviates from upstream, which uses {file}$HOME/.pyenv.\nThe default path in Home Manager is set according to the XDG\nbase directory specification.\n:::", "example": "", "loc": ["programs", "pyenv", "rootDirectory"], "readOnly": false, "title": "programs.pyenv.rootDirectory", "type": "absolute path", "descriptionHTML": "<p>The pyenv root directory ({env}<code>PYENV_ROOT</code>).</p>\n<p>::: {.note}\nThis deviates from upstream, which uses {file}<code>$HOME/.pyenv</code>.\nThe default path in Home Manager is set according to the XDG\nbase directory specification.\n:::</p>"}, {"declarations": [{"name": "<programs/pylint.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pylint.nix"}], "default": "false", "description": "Whether to enable the pylint Python linter.", "example": "true", "loc": ["programs", "pylint", "enable"], "readOnly": false, "title": "programs.pylint.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the pylint Python linter.</p>"}, {"declarations": [{"name": "<programs/pylint.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pylint.nix"}], "default": "pkgs.python3Packages.pylint", "description": "The pylint package to use.", "example": "", "loc": ["programs", "pylint", "package"], "readOnly": false, "title": "programs.pylint.package", "type": "package", "descriptionHTML": "<p>The pylint package to use.</p>"}, {"declarations": [{"name": "<programs/pylint.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pylint.nix"}], "default": "{}", "description": "The pylint configuration.", "example": "", "loc": ["programs", "pylint", "settings"], "readOnly": false, "title": "programs.pylint.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a non-empty list of them)", "descriptionHTML": "<p>The pylint configuration.</p>"}, {"declarations": [{"name": "<programs/pywal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pywal.nix"}], "default": "false", "description": "Whether to enable pywal.", "example": "true", "loc": ["programs", "pywal", "enable"], "readOnly": false, "title": "programs.pywal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pywal.</p>"}, {"declarations": [{"name": "<programs/pywal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/pywal.nix"}], "default": "pkgs.pywal", "description": "The pywal package to use.", "example": "", "loc": ["programs", "pywal", "package"], "readOnly": false, "title": "programs.pywal.package", "type": "package", "descriptionHTML": "<p>The pywal package to use.</p>"}, {"declarations": [{"name": "<programs/qcal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qcal.nix"}], "default": "30", "description": "Default number of days to show calendar entries for", "example": "", "loc": ["programs", "qcal", "defaultNumDays"], "readOnly": false, "title": "programs.qcal.defaultNumDays", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Default number of days to show calendar entries for</p>"}, {"declarations": [{"name": "<programs/qcal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qcal.nix"}], "default": "false", "description": "Whether to enable qcal, a CLI calendar application.", "example": "true", "loc": ["programs", "qcal", "enable"], "readOnly": false, "title": "programs.qcal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable qcal, a CLI calendar application.</p>"}, {"declarations": [{"name": "<programs/qcal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qcal.nix"}], "default": "pkgs.qcal", "description": "The qcal package to use.", "example": "", "loc": ["programs", "qcal", "package"], "readOnly": false, "title": "programs.qcal.package", "type": "null or package", "descriptionHTML": "<p>The qcal package to use.</p>"}, {"declarations": [{"name": "<programs/qcal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qcal.nix"}], "default": "\"Local\"", "description": "Timezone to display calendar entries in", "example": "\"Europe/Vienna\"", "loc": ["programs", "qcal", "timezone"], "readOnly": false, "title": "programs.qcal.timezone", "type": "(optionally newline-terminated) single-line string", "descriptionHTML": "<p>Timezone to display calendar entries in</p>"}, {"declarations": [{"name": "<programs/quickshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/quickshell.nix"}], "default": "null", "description": "The name of the config to use.\nIf null, quickshell will attempt to use a config located in $XDG_CONFIG_HOME/quickshell instead of one of the named sub-directories.", "example": "", "loc": ["programs", "quickshell", "activeConfig"], "readOnly": false, "title": "programs.quickshell.activeConfig", "type": "null or string", "descriptionHTML": "<p>The name of the config to use.</p>\n<p>If <code>null</code>, quickshell will attempt to use a config located in <code>$XDG_CONFIG_HOME/quickshell</code> instead of one of the named sub-directories.</p>"}, {"declarations": [{"name": "<programs/quickshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/quickshell.nix"}], "default": "{ }", "description": "A set of configs to include in the quickshell config directory. The key is the name of the config.\nThe configuration that quickshell should use can be specified with the activeConfig option.", "example": "", "loc": ["programs", "quickshell", "configs"], "readOnly": false, "title": "programs.quickshell.configs", "type": "attribute set of absolute path", "descriptionHTML": "<p>A set of configs to include in the quickshell config directory. The key is the name of the config.</p>\n<p>The configuration that quickshell should use can be specified with the <code>activeConfig</code> option.</p>"}, {"declarations": [{"name": "<programs/quickshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/quickshell.nix"}], "default": "false", "description": "Whether to enable quickshell, a flexbile QtQuick-based desktop shell toolkit..", "example": "true", "loc": ["programs", "quickshell", "enable"], "readOnly": false, "title": "programs.quickshell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable quickshell, a flexbile QtQuick-based desktop shell toolkit..</p>"}, {"declarations": [{"name": "<programs/quickshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/quickshell.nix"}], "default": "pkgs.quickshell", "description": "The quickshell package to use.", "example": "", "loc": ["programs", "quickshell", "package"], "readOnly": false, "title": "programs.quickshell.package", "type": "null or package", "descriptionHTML": "<p>The quickshell package to use.</p>"}, {"declarations": [{"name": "<programs/quickshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/quickshell.nix"}], "default": "false", "description": "Whether to enable quickshell systemd service.", "example": "true", "loc": ["programs", "quickshell", "systemd", "enable"], "readOnly": false, "title": "programs.quickshell.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable quickshell systemd service.</p>"}, {"declarations": [{"name": "<programs/quickshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/quickshell.nix"}], "default": "config.wayland.systemd.target", "description": "The systemd target that will automatically start quickshell.\nIf you set this to a WM-specific target, make sure that systemd integration for that WM is enabled (e.g. wayland.windowManager.hyprland.systemd.enable). This is typically true by default.", "example": "\"hyprland-session.target\"", "loc": ["programs", "quickshell", "systemd", "target"], "readOnly": false, "title": "programs.quickshell.systemd.target", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start quickshell.</p>\n<p>If you set this to a WM-specific target, make sure that systemd integration for that WM is enabled (e.g. <code>wayland.windowManager.hyprland.systemd.enable</code>). <strong>This is typically true by default</strong>.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "Aliases for commands.", "example": "", "loc": ["programs", "qutebrowser", "aliases"], "readOnly": false, "title": "programs.qutebrowser.aliases", "type": "attribute set of string", "descriptionHTML": "<p>Aliases for commands.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "false", "description": "Whether to enable qutebrowser.", "example": "true", "loc": ["programs", "qutebrowser", "enable"], "readOnly": false, "title": "programs.qutebrowser.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable qutebrowser.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "true", "description": "Disable to prevent loading default key bindings.", "example": "", "loc": ["programs", "qutebrowser", "enableDefaultBindings"], "readOnly": false, "title": "programs.qutebrowser.enableDefaultBindings", "type": "boolean", "descriptionHTML": "<p>Disable to prevent loading default key bindings.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "\"\"", "description": "Extra lines added to qutebrowser {file}config.py file.", "example": "", "loc": ["programs", "qutebrowser", "extraConfig"], "readOnly": false, "title": "programs.qutebrowser.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to qutebrowser {file}<code>config.py</code> file.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "[ ]", "description": "Greasemonkey userscripts to add to qutebrowser's {file}greasemonkey\ndirectory.", "example": "[\n  (pkgs.fetchurl {\n    url = \"https://raw.githubusercontent.com/afreakk/greasemonkeyscripts/1d1be041a65c251692ee082eda64d2637edf6444/youtube_sponsorblock.js\";\n    sha256 = \"sha256-e3QgDPa3AOpPyzwvVjPQyEsSUC9goisjBUDMxLwg8ZE=\";\n  })\n  (pkgs.writeText \"some-script.js\" ''\n    // ==UserScript==\n    // @name  Some Greasemonkey script\n    // ==/UserScript==\n  '')\n]\n", "loc": ["programs", "qutebrowser", "greasemonkey"], "readOnly": false, "title": "programs.qutebrowser.greasemonkey", "type": "list of package", "descriptionHTML": "<p>Greasemonkey userscripts to add to qutebrowser's {file}<code>greasemonkey</code>\ndirectory.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "Key bindings mapping keys to commands in different modes. This setting\nis a dictionary containing mode names and dictionaries mapping keys to\ncommands: {mode: {key: command}} If you want to map\na key to another key, check the keyMappings setting\ninstead. For modifiers, you can use either - or\n+ as delimiters, and these names:\nControl\n: Control, Ctrl\nMeta\n: Meta, Windows, Mod4\nAlt\n: Alt, Mod1\nShift\n: Shift\nFor simple keys (no &lt;&gt;-signs), a capital\nletter means the key is pressed with Shift. For special keys (with\n&lt;&gt;-signs), you need to explicitly add\nShift- to match a key pressed with shift. If you\nwant a binding to do nothing, bind it to the nop\ncommand. If you want a default binding to be passed through to the\nwebsite, bind it to null. Note that some commands which are only useful\nfor bindings (but not used interactively) are hidden from the command\ncompletion. See :help for a full list of available\ncommands. The following modes are available:\nnormal\n: Default mode, where most commands are invoked.\ninsert\n: Entered when an input field is focused on a website, or by\n  pressing i in normal mode. Passes through almost all keypresses\n  to the website, but has some bindings like\n  &lt;Ctrl-e&gt; to open an external editor.\n  Note that single keys can't be bound in this mode.\nhint\n: Entered when f is pressed to select links with the keyboard. Note\n  that single keys can't be bound in this mode.\npassthrough\n: Similar to insert mode, but passes through all keypresses except\n  &lt;Escape&gt; to leave the mode. It might be\n  useful to bind &lt;Escape&gt; to some other\n  key in this mode if you want to be able to send an Escape key to\n  the website as well. Note that single keys can't be bound in this\n  mode.\ncommand\n: Entered when pressing the : key in order to enter a command. Note\n  that single keys can't be bound in this mode.\nprompt\n: Entered when there's a prompt to display, like for download\n  locations or when invoked from JavaScript.\nyesno\n: Entered when there's a yes/no prompt displayed.\ncaret\n: Entered when pressing the v mode, used to select text using the\n  keyboard.\nregister\n: Entered when qutebrowser is waiting for a register name/key for\n  commands like :set-mark.", "example": "{\n  normal = {\n    \"<Ctrl-v>\" = \"spawn mpv {url}\";\n    \",p\" = \"spawn --userscript qute-pass\";\n    \",l\" = ''config-cycle spellcheck.languages [\"en-GB\"] [\"en-US\"]'';\n    \"<F1>\" = mkMerge [\n      \"config-cycle tabs.show never always\"\n      \"config-cycle statusbar.show in-mode always\"\n      \"config-cycle scrolling.bar never always\"\n    ];\n  };\n  prompt = {\n    \"<Ctrl-y>\" = \"prompt-yes\";\n  };\n}\n", "loc": ["programs", "qutebrowser", "keyBindings"], "readOnly": false, "title": "programs.qutebrowser.keyBindings", "type": "attribute set of attribute set of (null or strings concatenated with \" ;; \")", "descriptionHTML": "<p>Key bindings mapping keys to commands in different modes. This setting\nis a dictionary containing mode names and dictionaries mapping keys to\ncommands: <code>{mode: {key: command}}</code> If you want to map\na key to another key, check the <code>keyMappings</code> setting\ninstead. For modifiers, you can use either <code>-</code> or\n<code>+</code> as delimiters, and these names:</p>\n<p>Control\n: <code>Control</code>, <code>Ctrl</code></p>\n<p>Meta\n: <code>Meta</code>, <code>Windows</code>, <code>Mod4</code></p>\n<p>Alt\n: <code>Alt</code>, <code>Mod1</code></p>\n<p>Shift\n: <code>Shift</code></p>\n<p>For simple keys (no <code>&lt;&gt;</code>-signs), a capital\nletter means the key is pressed with Shift. For special keys (with\n<code>&lt;&gt;</code>-signs), you need to explicitly add\n<code>Shift-</code> to match a key pressed with shift. If you\nwant a binding to do nothing, bind it to the <code>nop</code>\ncommand. If you want a default binding to be passed through to the\nwebsite, bind it to null. Note that some commands which are only useful\nfor bindings (but not used interactively) are hidden from the command\ncompletion. See <code>:help</code> for a full list of available\ncommands. The following modes are available:</p>\n<p><code>normal</code>\n: Default mode, where most commands are invoked.</p>\n<p><code>insert</code>\n: Entered when an input field is focused on a website, or by\n  pressing <code>i</code> in normal mode. Passes through almost all keypresses\n  to the website, but has some bindings like\n  <code>&lt;Ctrl-e&gt;</code> to open an external editor.\n  Note that single keys can't be bound in this mode.</p>\n<p><code>hint</code>\n: Entered when <code>f</code> is pressed to select links with the keyboard. Note\n  that single keys can't be bound in this mode.</p>\n<p><code>passthrough</code>\n: Similar to insert mode, but passes through all keypresses except\n  <code>&lt;Escape&gt;</code> to leave the mode. It might be\n  useful to bind <code>&lt;Escape&gt;</code> to some other\n  key in this mode if you want to be able to send an Escape key to\n  the website as well. Note that single keys can't be bound in this\n  mode.</p>\n<p><code>command</code>\n: Entered when pressing the <code>:</code> key in order to enter a command. Note\n  that single keys can't be bound in this mode.</p>\n<p><code>prompt</code>\n: Entered when there's a prompt to display, like for download\n  locations or when invoked from JavaScript.</p>\n<p><code>yesno</code>\n: Entered when there's a yes/no prompt displayed.</p>\n<p><code>caret</code>\n: Entered when pressing the <code>v</code> mode, used to select text using the\n  keyboard.</p>\n<p><code>register</code>\n: Entered when qutebrowser is waiting for a register name/key for\n  commands like <code>:set-mark</code>.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "This setting can be used to map keys to other keys. When the key used\nas dictionary-key is pressed, the binding for the key used as\ndictionary-value is invoked instead. This is useful for global\nremappings of keys, for example to map Ctrl-[ to Escape. Note that when\na key is bound (via bindings.default or\nbindings.commands), the mapping is ignored.", "example": "", "loc": ["programs", "qutebrowser", "keyMappings"], "readOnly": false, "title": "programs.qutebrowser.keyMappings", "type": "attribute set of string", "descriptionHTML": "<p>This setting can be used to map keys to other keys. When the key used\nas dictionary-key is pressed, the binding for the key used as\ndictionary-value is invoked instead. This is useful for global\nremappings of keys, for example to map Ctrl-[ to Escape. Note that when\na key is bound (via <code>bindings.default</code> or\n<code>bindings.commands</code>), the mapping is ignored.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "false", "description": "Load settings configured via the GUI.", "example": "", "loc": ["programs", "qutebrowser", "loadAutoconfig"], "readOnly": false, "title": "programs.qutebrowser.loadAutoconfig", "type": "boolean", "descriptionHTML": "<p>Load settings configured via the GUI.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "pkgs.qutebrowser", "description": "The qutebrowser package to use.", "example": "", "loc": ["programs", "qutebrowser", "package"], "readOnly": false, "title": "programs.qutebrowser.package", "type": "null or package", "descriptionHTML": "<p>The qutebrowser package to use.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "Options to set, as in settings but per domain.\nRefer to {option}settings for details.", "example": "{\n  \"zoom.us\" = {\n    content = {\n      autoplay = true;\n      media.audio_capture = true;\n      media.video_capture = true;\n    };\n  };\n  \"github.com\".colors.webpage.darkmode.enabled = false;\n};\n", "loc": ["programs", "qutebrowser", "perDomainSettings"], "readOnly": false, "title": "programs.qutebrowser.perDomainSettings", "type": "attribute set of anything", "descriptionHTML": "<p>Options to set, as in <code>settings</code> but per domain.\nRefer to {option}<code>settings</code> for details.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "Quickmarks to add to qutebrowser's {file}quickmarks file.\nNote that when Home Manager manages your quickmarks, you cannot edit them at runtime.", "example": "{\n  nixpkgs = \"https://github.com/NixOS/nixpkgs\";\n  home-manager = \"https://github.com/nix-community/home-manager\";\n}\n", "loc": ["programs", "qutebrowser", "quickmarks"], "readOnly": false, "title": "programs.qutebrowser.quickmarks", "type": "attribute set of string", "descriptionHTML": "<p>Quickmarks to add to qutebrowser's {file}<code>quickmarks</code> file.\nNote that when Home Manager manages your quickmarks, you cannot edit them at runtime.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "Search engines that can be used via the address bar. Maps a search\nengine name (such as DEFAULT, or\nddg) to a URL with a {}\nplaceholder. The placeholder will be replaced by the search term, use\n{{ and }} for literal\n{/} signs. The search engine named\nDEFAULT is used when\nurl.auto_search is turned on and something else than\na URL was entered to be opened. Other search engines can be used by\nprepending the search engine name to the search term, for example\n:open google qutebrowser.", "example": "{\n  w = \"https://en.wikipedia.org/wiki/Special:Search?search={}&go=Go&ns0=1\";\n  aw = \"https://wiki.archlinux.org/?search={}\";\n  nw = \"https://wiki.nixos.org/index.php?search={}\";\n  g = \"https://www.google.com/search?hl=en&q={}\";\n}\n", "loc": ["programs", "qutebrowser", "searchEngines"], "readOnly": false, "title": "programs.qutebrowser.searchEngines", "type": "attribute set of string", "descriptionHTML": "<p>Search engines that can be used via the address bar. Maps a search\nengine name (such as <code>DEFAULT</code>, or\n<code>ddg</code>) to a URL with a <code>{}</code>\nplaceholder. The placeholder will be replaced by the search term, use\n<code>{{</code> and <code>}}</code> for literal\n<code>{/}</code> signs. The search engine named\n<code>DEFAULT</code> is used when\n<code>url.auto_search</code> is turned on and something else than\na URL was entered to be opened. Other search engines can be used by\nprepending the search engine name to the search term, for example\n<code>:open google qutebrowser</code>.</p>"}, {"declarations": [{"name": "<programs/qutebrowser.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/qutebrowser.nix"}], "default": "{ }", "description": "Options to add to qutebrowser {file}config.py file.\nSee https://qutebrowser.org/doc/help/settings.html\nfor options.", "example": "{\n  colors = {\n    hints = {\n      bg = \"#000000\";\n      fg = \"#ffffff\";\n    };\n    tabs.bar.bg = \"#000000\";\n  };\n  tabs.tabs_are_windows = true;\n}\n", "loc": ["programs", "qutebrowser", "settings"], "readOnly": false, "title": "programs.qutebrowser.settings", "type": "attribute set of anything", "descriptionHTML": "<p>Options to add to qutebrowser {file}<code>config.py</code> file.\nSee <a href=\"https://qutebrowser.org/doc/help/settings.html\">https://qutebrowser.org/doc/help/settings.html</a>\nfor options.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "{ }", "description": "Aliases written to {file}$XDG_CONFIG_HOME/ranger/rc.conf.", "example": "{\n  e = \"edit\";\n  filter = \"scout -prts\";\n  setl = \"setlocal\";\n}", "loc": ["programs", "ranger", "aliases"], "readOnly": false, "title": "programs.ranger.aliases", "type": "attribute set of string", "descriptionHTML": "<p>Aliases written to {file}<code>$XDG_CONFIG_HOME/ranger/rc.conf</code>.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "false", "description": "Whether to enable ranger file manager.", "example": "true", "loc": ["programs", "ranger", "enable"], "readOnly": false, "title": "programs.ranger.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ranger file manager.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to\n{file}$XDG_CONFIG_HOME/ranger/rc.conf.", "example": "", "loc": ["programs", "ranger", "extraConfig"], "readOnly": false, "title": "programs.ranger.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to\n{file}<code>$XDG_CONFIG_HOME/ranger/rc.conf</code>.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "[ ]", "description": "Extra packages added to ranger.", "example": "", "loc": ["programs", "ranger", "extraPackages"], "readOnly": false, "title": "programs.ranger.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages added to ranger.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "{ }", "description": "Mappings written to {file}$XDG_CONFIG_HOME/ranger/rc.conf.", "example": "{\n  Q = \"quitall\";\n  q = \"quit\";\n}", "loc": ["programs", "ranger", "mappings"], "readOnly": false, "title": "programs.ranger.mappings", "type": "attribute set of string", "descriptionHTML": "<p>Mappings written to {file}<code>$XDG_CONFIG_HOME/ranger/rc.conf</code>.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "pkgs.ranger", "description": "The ranger package to use.", "example": "", "loc": ["programs", "ranger", "package"], "readOnly": false, "title": "programs.ranger.package", "type": "null or package", "descriptionHTML": "<p>The ranger package to use.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "[ ]", "description": "List of files to be added to {file}$XDG_CONFIG_HOME/ranger/plugins/.", "example": "[\n  {\n    name = \"zoxide\";\n    src = builtins.fetchGit {\n      url = \"https://github.com/jchook/ranger-zoxide.git\";\n      rev = \"363df97af34c96ea873c5b13b035413f56b12ead\";\n    };\n  }\n]\n", "loc": ["programs", "ranger", "plugins"], "readOnly": false, "title": "programs.ranger.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>List of files to be added to {file}<code>$XDG_CONFIG_HOME/ranger/plugins/</code>.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "", "description": "Name of the plugin linked to\n{file}$XDG_CONFIG_HOME/ranger/plugins/. In the case of a\nsingle-file plugin, it must also have .py suffix.", "example": "", "loc": ["programs", "ranger", "plugins", "*", "name"], "readOnly": false, "title": "programs.ranger.plugins.*.name", "type": "string", "descriptionHTML": "<p>Name of the plugin linked to\n{file}<code>$XDG_CONFIG_HOME/ranger/plugins/</code>. In the case of a\nsingle-file plugin, it must also have <code>.py</code> suffix.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "", "description": "The plugin file or directory.", "example": "", "loc": ["programs", "ranger", "plugins", "*", "src"], "readOnly": false, "title": "programs.ranger.plugins.*.src", "type": "absolute path", "descriptionHTML": "<p>The plugin file or directory.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "[ ]", "description": "Settings written to {file}$XDG_CONFIG_HOME/ranger/rifle.conf.", "example": "", "loc": ["programs", "ranger", "rifle"], "readOnly": false, "title": "programs.ranger.rifle", "type": "list of (submodule)", "descriptionHTML": "<p>Settings written to {file}<code>$XDG_CONFIG_HOME/ranger/rifle.conf</code>.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "", "description": "A command to run for the matching file.", "example": "\"${pkgs.vim}/bin/vim -- \\\"$@\\\"\"", "loc": ["programs", "ranger", "rifle", "*", "command"], "readOnly": false, "title": "programs.ranger.rifle.*.command", "type": "string", "descriptionHTML": "<p>A command to run for the matching file.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "", "description": "A condition to match a file.", "example": "\"mime ^text, label editor\"", "loc": ["programs", "ranger", "rifle", "*", "condition"], "readOnly": false, "title": "programs.ranger.rifle.*.condition", "type": "string", "descriptionHTML": "<p>A condition to match a file.</p>"}, {"declarations": [{"name": "<programs/ranger.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ranger.nix"}], "default": "{ }", "description": "Settings written to {file}$XDG_CONFIG_HOME/ranger/rc.conf.", "example": "{\n  column_ratios = \"1,3,3\";\n  confirm_on_delete = \"never\";\n  scroll_offset = 8;\n  unicode_ellipsis = true;\n}", "loc": ["programs", "ranger", "settings"], "readOnly": false, "title": "programs.ranger.settings", "type": "attribute set of (boolean or floating point number or signed integer or string)", "descriptionHTML": "<p>Settings written to {file}<code>$XDG_CONFIG_HOME/ranger/rc.conf</code>.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "false", "description": "Whether to enable rbenv.", "example": "true", "loc": ["programs", "rbenv", "enable"], "readOnly": false, "title": "programs.rbenv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rbenv.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "rbenv", "enableBashIntegration"], "readOnly": false, "title": "programs.rbenv.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "rbenv", "enableFishIntegration"], "readOnly": false, "title": "programs.rbenv.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "rbenv", "enableZshIntegration"], "readOnly": false, "title": "programs.rbenv.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "pkgs.rbenv", "description": "The rbenv package to use.", "example": "", "loc": ["programs", "rbenv", "package"], "readOnly": false, "title": "programs.rbenv.package", "type": "package", "descriptionHTML": "<p>The rbenv package to use.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "[ ]", "description": "rbenv plugins to install in {file}$HOME/.rbenv/plugins/.\nSee https://github.com/rbenv/rbenv/wiki/Plugins\nfor the full list of plugins.", "example": "[\n  {\n    name = \"ruby-build\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"rbenv\";\n      repo = \"ruby-build\";\n      rev = \"v20221225\";\n      hash = \"sha256-Kuq0Z1kh2mvq7rHEgwVG9XwzR5ZUtU/h8SQ7W4/mBU0=\";\n    };\n  }\n]\n", "loc": ["programs", "rbenv", "plugins"], "readOnly": false, "title": "programs.rbenv.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>rbenv plugins to install in {file}<code>$HOME/.rbenv/plugins/</code>.</p>\n<p>See <a href=\"https://github.com/rbenv/rbenv/wiki/Plugins\">https://github.com/rbenv/rbenv/wiki/Plugins</a>\nfor the full list of plugins.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "", "description": "Name of the plugin.", "example": "", "loc": ["programs", "rbenv", "plugins", "*", "name"], "readOnly": false, "title": "programs.rbenv.plugins.*.name", "type": "string", "descriptionHTML": "<p>Name of the plugin.</p>"}, {"declarations": [{"name": "<programs/rbenv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbenv.nix"}], "default": "", "description": "Path to the plugin folder.", "example": "", "loc": ["programs", "rbenv", "plugins", "*", "src"], "readOnly": false, "title": "programs.rbenv.plugins.*.src", "type": "absolute path", "descriptionHTML": "<p>Path to the plugin folder.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "false", "description": "Whether to enable rbw, a CLI Bitwarden client.", "example": "true", "loc": ["programs", "rbw", "enable"], "readOnly": false, "title": "programs.rbw.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rbw, a CLI Bitwarden client.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "pkgs.rbw", "description": "The rbw package to use. Package providing the {command}rbw tool and its\n{command}rbw-agent daemon.", "example": "", "loc": ["programs", "rbw", "package"], "readOnly": false, "title": "programs.rbw.package", "type": "package", "descriptionHTML": "<p>The rbw package to use. Package providing the {command}<code>rbw</code> tool and its\n{command}<code>rbw-agent</code> daemon.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "null", "description": "rbw configuration, if not defined the configuration will not be\nmanaged by Home Manager.", "example": "{\n  email = \"name@example.com\";\n  lock_timeout = 300;\n  pinentry = pkgs.pinentry-gnome3;\n}\n", "loc": ["programs", "rbw", "settings"], "readOnly": false, "title": "programs.rbw.settings", "type": "null or (JSON value)", "descriptionHTML": "<p>rbw configuration, if not defined the configuration will not be\nmanaged by Home Manager.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "null", "description": "The base-url for a self-hosted bitwarden installation.", "example": "\"https://bitwarden.example.com/\"", "loc": ["programs", "rbw", "settings", "base_url"], "readOnly": false, "title": "programs.rbw.settings.base_url", "type": "null or string", "descriptionHTML": "<p>The base-url for a self-hosted bitwarden installation.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "", "description": "The email address for your bitwarden account.", "example": "\"name@example.com\"", "loc": ["programs", "rbw", "settings", "email"], "readOnly": false, "title": "programs.rbw.settings.email", "type": "string", "descriptionHTML": "<p>The email address for your bitwarden account.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "null", "description": "The identity url for your bitwarden installation.", "example": "\"https://identity.example.com/\"", "loc": ["programs", "rbw", "settings", "identity_url"], "readOnly": false, "title": "programs.rbw.settings.identity_url", "type": "null or string", "descriptionHTML": "<p>The identity url for your bitwarden installation.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "3600", "description": "The amount of time that your login information should be cached.", "example": "300", "loc": ["programs", "rbw", "settings", "lock_timeout"], "readOnly": false, "title": "programs.rbw.settings.lock_timeout", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The amount of time that your login information should be cached.</p>"}, {"declarations": [{"name": "<programs/rbw.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rbw.nix"}], "default": "null", "description": "Which pinentry interface to use. Beware that\npinentry-gnome3 may not work on non-Gnome\nsystems. You can fix it by adding the following to your\nsystem configuration:\nnix\nservices.dbus.packages = [ pkgs.gcr ];", "example": "pkgs.pinentry-gnome3", "loc": ["programs", "rbw", "settings", "pinentry"], "readOnly": false, "title": "programs.rbw.settings.pinentry", "type": "null or package", "descriptionHTML": "<p>Which pinentry interface to use. Beware that\n<code>pinentry-gnome3</code> may not work on non-Gnome\nsystems. You can fix it by adding the following to your\nsystem configuration:\n<code>nix\nservices.dbus.packages = [ pkgs.gcr ];</code></p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "false", "description": "Whether to enable rclone.", "example": "true", "loc": ["programs", "rclone", "enable"], "readOnly": false, "title": "programs.rclone.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rclone.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "pkgs.rclone", "description": "The rclone package to use.", "example": "", "loc": ["programs", "rclone", "package"], "readOnly": false, "title": "programs.rclone.package", "type": "package", "descriptionHTML": "<p>The rclone package to use.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "{ }", "description": "An attribute set of remote configurations. Each remote consists of regular\nconfiguration options and optional secrets.\nSee https://rclone.org/docs/ for more information on configuring specific\nremotes.", "example": "{\n  b2 = {\n    config = {\n      type = \"b2\";\n      hard_delete = true;\n    };\n    secrets = {\n      # using sops\n      account = config.sops.secrets.b2-acc-id.path;\n      # using agenix\n      key = config.age.secrets.b2-key.path;\n    };\n  };\n\n  server.config = {\n    type = \"sftp\";\n    host = \"server\";\n    user = \"backup\";\n    key_file = \"${home.homeDirectory}/.ssh/id_ed25519\";\n  };\n}", "loc": ["programs", "rclone", "remotes"], "readOnly": false, "title": "programs.rclone.remotes", "type": "attribute set of (submodule)", "descriptionHTML": "<p>An attribute set of remote configurations. Each remote consists of regular\nconfiguration options and optional secrets.</p>\n<p>See <a href=\"https://rclone.org/docs/\">https://rclone.org/docs/</a> for more information on configuring specific\nremotes.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "{ }", "description": "Regular configuration options as described in rclone's documentation\nhttps://rclone.org/docs/. When specifying options follow the formatting\nprocess outlined here https://rclone.org/docs/#config-config-file, namley:\n - Remove the leading double-dash (--) from the rclone option name\n - Replace hyphens (-) with underscores (_)\n - Convert to lowercase\n - Use the resulting string as your configuration key\nFor example, the rclone option \"--mega-hard-delete\" would use \"hard_delete\"\nas the config key.\nSecurity Note: Always use the {option}secrets option for sensitive data\ninstead of the {option}config option to prevent exposing credentials to\nthe world-readable Nix store.", "example": "{\n  type = \"mega\"; # Required - specifies the remote type\n  user = \"you@example.com\";\n  hard_delete = true;\n}", "loc": ["programs", "rclone", "remotes", "<name>", "config"], "readOnly": false, "title": "programs.rclone.remotes.<name>.config", "type": "An attribute set containing a remote type and options.", "descriptionHTML": "<p>Regular configuration options as described in rclone's documentation\n<a href=\"https://rclone.org/docs/\">https://rclone.org/docs/</a>. When specifying options follow the formatting\nprocess outlined here <a href=\"https://rclone.org/docs/#config-config-file\">https://rclone.org/docs/#config-config-file</a>, namley:\n - Remove the leading double-dash (--) from the rclone option name\n - Replace hyphens (-) with underscores (_)\n - Convert to lowercase\n - Use the resulting string as your configuration key</p>\n<p>For example, the rclone option \"--mega-hard-delete\" would use \"hard_delete\"\nas the config key.</p>\n<p>Security Note: Always use the {option}<code>secrets</code> option for sensitive data\ninstead of the {option}<code>config</code> option to prevent exposing credentials to\nthe world-readable Nix store.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "{ }", "description": "An attribute set mapping remote file paths to their corresponding mount\npoint configurations.\nFor each entry, to perform the equivalent of\nrclone mount remote:path/to/files /path/to/local/mount \u2014 as described in the\nrclone documentation https://rclone.org/commands/rclone_mount/ \u2014 we create\na key-value pair like this:\n\"path/to/files/on/remote\" = { ... }.", "example": "{\n  \"path/to/files\" = {\n    enable = true;\n    mountPoint = \"/home/alice/rclone-mount\";\n    options = {\n      dir-cache-time = \"5000h\";\n      poll-interval = \"10s\";\n      umask = \"002\";\n      user-agent = \"Laptop\";\n    };\n  };\n}\n", "loc": ["programs", "rclone", "remotes", "<name>", "mounts"], "readOnly": false, "title": "programs.rclone.remotes.<name>.mounts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>An attribute set mapping remote file paths to their corresponding mount\npoint configurations.</p>\n<p>For each entry, to perform the equivalent of\n<code>rclone mount remote:path/to/files /path/to/local/mount</code> \u2014 as described in the\nrclone documentation <a href=\"https://rclone.org/commands/rclone_mount/\">https://rclone.org/commands/rclone_mount/</a> \u2014 we create\na key-value pair like this:\n<code>\"path/to/files/on/remote\" = { ... }</code>.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "false", "description": "Whether to enable this mount.", "example": "true", "loc": ["programs", "rclone", "remotes", "<name>", "mounts", "<name>", "enable"], "readOnly": false, "title": "programs.rclone.remotes.<name>.mounts.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable this mount.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "null", "description": "A local file path specifying the location of the mount point.", "example": "\"/home/alice/my-remote\"", "loc": ["programs", "rclone", "remotes", "<name>", "mounts", "<name>", "mountPoint"], "readOnly": false, "title": "programs.rclone.remotes.<name>.mounts.<name>.mountPoint", "type": "string", "descriptionHTML": "<p>A local file path specifying the location of the mount point.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "{ }", "description": "An attribute set of option values passed to rclone mount. To set\na boolean option, assign it true or false. See\nhttps://nixos.org/manual/nixpkgs/stable/#function-library-lib.cli.toGNUCommandLineShell\nfor more details on the format.\nSome caching options are set by default, namely vfs-cache-mode = \"full\"\nand cache-dir. These can be overridden if desired.", "example": "", "loc": ["programs", "rclone", "remotes", "<name>", "mounts", "<name>", "options"], "readOnly": false, "title": "programs.rclone.remotes.<name>.mounts.<name>.options", "type": "attribute set of (null or boolean or signed integer or floating point number or string)", "descriptionHTML": "<p>An attribute set of option values passed to <code>rclone mount</code>. To set\na boolean option, assign it <code>true</code> or <code>false</code>. See\n<a href=\"https://nixos.org/manual/nixpkgs/stable/#function-library-lib.cli.toGNUCommandLineShell\">https://nixos.org/manual/nixpkgs/stable/#function-library-lib.cli.toGNUCommandLineShell</a>\nfor more details on the format.</p>\n<p>Some caching options are set by default, namely <code>vfs-cache-mode = \"full\"</code>\nand <code>cache-dir</code>. These can be overridden if desired.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "{ }", "description": "Sensitive configuration values such as passwords, API keys, and tokens. These\nmust be provided as file paths to the secrets, which will be read at activation\ntime.\nNote: If using secret management solutions like agenix or sops-nix with\nhome-manager, you need to ensure their services are activated before switching\nto this home-manager generation. Consider setting\n{option}systemd.user.startServices to \"sd-switch\" for automatic service\nstartup.", "example": "{\n  password = \"/run/secrets/password\";\n  api_key = config.age.secrets.api-key.path;\n}", "loc": ["programs", "rclone", "remotes", "<name>", "secrets"], "readOnly": false, "title": "programs.rclone.remotes.<name>.secrets", "type": "attribute set of string", "descriptionHTML": "<p>Sensitive configuration values such as passwords, API keys, and tokens. These\nmust be provided as file paths to the secrets, which will be read at activation\ntime.</p>\n<p>Note: If using secret management solutions like agenix or sops-nix with\nhome-manager, you need to ensure their services are activated before switching\nto this home-manager generation. Consider setting\n{option}<code>systemd.user.startServices</code> to <code>\"sd-switch\"</code> for automatic service\nstartup.</p>"}, {"declarations": [{"name": "<programs/rclone.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rclone.nix"}], "default": "\"reloadSystemd\"", "description": "Controls when the rclone configuration is written during Home Manager activation.\nYou should not need to change this unless you have very specific activation order\nrequirements.", "example": "", "loc": ["programs", "rclone", "writeAfter"], "readOnly": false, "title": "programs.rclone.writeAfter", "type": "string", "descriptionHTML": "<p>Controls when the rclone configuration is written during Home Manager activation.\nYou should not need to change this unless you have very specific activation order\nrequirements.</p>"}, {"declarations": [{"name": "<programs/readline.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/readline.nix"}], "default": "{ }", "description": "Readline bindings.", "example": "{ \"\\\\C-h\" = \"backward-kill-word\"; }\n", "loc": ["programs", "readline", "bindings"], "readOnly": false, "title": "programs.readline.bindings", "type": "attribute set of string", "descriptionHTML": "<p>Readline bindings.</p>"}, {"declarations": [{"name": "<programs/readline.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/readline.nix"}], "default": "false", "description": "Whether to enable readline.", "example": "true", "loc": ["programs", "readline", "enable"], "readOnly": false, "title": "programs.readline.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable readline.</p>"}, {"declarations": [{"name": "<programs/readline.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/readline.nix"}], "default": "\"\"", "description": "Configuration lines appended unchanged to the end of the\n{file}~/.inputrc file.", "example": "", "loc": ["programs", "readline", "extraConfig"], "readOnly": false, "title": "programs.readline.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration lines appended unchanged to the end of the\n{file}<code>~/.inputrc</code> file.</p>"}, {"declarations": [{"name": "<programs/readline.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/readline.nix"}], "default": "true", "description": "Whether to include the system-wide configuration.", "example": "", "loc": ["programs", "readline", "includeSystemConfig"], "readOnly": false, "title": "programs.readline.includeSystemConfig", "type": "boolean", "descriptionHTML": "<p>Whether to include the system-wide configuration.</p>"}, {"declarations": [{"name": "<programs/readline.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/readline.nix"}], "default": "{ }", "description": "Readline customization variable assignments.", "example": "{\n  expand-tilde = true;\n}", "loc": ["programs", "readline", "variables"], "readOnly": false, "title": "programs.readline.variables", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Readline customization variable assignments.</p>"}, {"declarations": [{"name": "<programs/rio.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rio.nix"}], "default": "false", "description": "Enable Rio, a terminal built to run everywhere, as a native desktop applications by\nRust/WebGPU or even in the browsers powered by WebAssembly/WebGPU.", "example": "true", "loc": ["programs", "rio", "enable"], "readOnly": false, "title": "programs.rio.enable", "type": "boolean", "descriptionHTML": "<p>Enable Rio, a terminal built to run everywhere, as a native desktop applications by\nRust/WebGPU or even in the browsers powered by WebAssembly/WebGPU.</p>"}, {"declarations": [{"name": "<programs/rio.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rio.nix"}], "default": "pkgs.rio", "description": "The rio package to use.", "example": "", "loc": ["programs", "rio", "package"], "readOnly": false, "title": "programs.rio.package", "type": "null or package", "descriptionHTML": "<p>The rio package to use.</p>"}, {"declarations": [{"name": "<programs/rio.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rio.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/rio/config.toml. See\nhttps://raphamorim.io/rio/docs/#configuration-file for options.", "example": "", "loc": ["programs", "rio", "settings"], "readOnly": false, "title": "programs.rio.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/rio/config.toml</code>. See\n<a href=\"https://raphamorim.io/rio/docs/#configuration-file\">https://raphamorim.io/rio/docs/#configuration-file</a> for options.</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "[ ]", "description": "Custom adapters that invoke external preprocessing scripts.\nSee <link xlink:href=\"https://github.com/phiresky/ripgrep-all/wiki#custom-adapters\"/>.", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters", "type": "list of (submodule)", "descriptionHTML": "<p>Custom adapters that invoke external preprocessing scripts.\nSee <link xlink:href=\"https://github.com/phiresky/ripgrep-all/wiki#custom-adapters\"/>.</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "[ ]", "description": "The output path hint; the placeholders are the same as for rga's args", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "args"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.args", "type": "list of string", "descriptionHTML": "<p>The output path hint; the placeholders are the same as for rga's <code>args</code></p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "", "description": "The path of the binary to run", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "binary"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.binary", "type": "absolute path", "descriptionHTML": "<p>The path of the binary to run</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "", "description": "A description of this adapter; shown in rga's help", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "description"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.description", "type": "string", "descriptionHTML": "<p>A description of this adapter; shown in rga's help</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "null", "description": "If true, the adapter will be disabled by default", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "disabled_by_default"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.disabled_by_default", "type": "null or boolean", "descriptionHTML": "<p>If true, the adapter will be disabled by default</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "", "description": "The file extensions this adapter supports", "example": "[\n  \"pdf\"\n]", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "extensions"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.extensions", "type": "list of string", "descriptionHTML": "<p>The file extensions this adapter supports</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "null", "description": "if --rga-accurate, only match by mime types, ignore extensions completely", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "match_only_by_mime"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.match_only_by_mime", "type": "null or boolean", "descriptionHTML": "<p>if --rga-accurate, only match by mime types, ignore extensions completely</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "null", "description": "If not null and --rga-accurate is enabled, mime type matching is used instead of file name matching", "example": "[\n  \"application/pdf\"\n]", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "mimetypes"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.mimetypes", "type": "null or (list of string)", "descriptionHTML": "<p>If not null and --rga-accurate is enabled, mime type matching is used instead of file name matching</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "", "description": "The unique identifier and name of this adapter; must only include a-z, 0-9, _", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "name"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.name", "type": "string", "descriptionHTML": "<p>The unique identifier and name of this adapter; must only include a-z, 0-9, _</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "null", "description": "Setting this is useful if the output format is not plain text (.txt) but instead some other format that should be passed to another adapter", "example": "\"$\\${input_virtual_path}.txt.asciipagebreaks\"", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "output_path_hint"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.output_path_hint", "type": "null or string", "descriptionHTML": "<p>Setting this is useful if the output format is not plain text (.txt) but instead some other format that should be passed to another adapter</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "1", "description": "The version identifier used to key cache entries; change if the configuration or program changes", "example": "", "loc": ["programs", "ripgrep-all", "custom_adapters", "*", "version"], "readOnly": false, "title": "programs.ripgrep-all.custom_adapters.*.version", "type": "signed integer", "descriptionHTML": "<p>The version identifier used to key cache entries; change if the configuration or program changes</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "false", "description": "Whether to enable ripgrep-all (rga).", "example": "true", "loc": ["programs", "ripgrep-all", "enable"], "readOnly": false, "title": "programs.ripgrep-all.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ripgrep-all (rga).</p>"}, {"declarations": [{"name": "<programs/ripgrep-all.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep-all.nix"}], "default": "pkgs.ripgrep-all", "description": "The ripgrep-all package to use.", "example": "", "loc": ["programs", "ripgrep-all", "package"], "readOnly": false, "title": "programs.ripgrep-all.package", "type": "null or package", "descriptionHTML": "<p>The ripgrep-all package to use.</p>"}, {"declarations": [{"name": "<programs/ripgrep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep.nix"}], "default": "[ ]", "description": "List of arguments to pass to ripgrep. Each item is given to ripgrep as\na single command line argument verbatim.\nSee https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file\nfor an example configuration.", "example": "[\n  \"--max-columns-preview\"\n  \"--colors=line:style:bold\"\n]", "loc": ["programs", "ripgrep", "arguments"], "readOnly": false, "title": "programs.ripgrep.arguments", "type": "list of string", "descriptionHTML": "<p>List of arguments to pass to ripgrep. Each item is given to ripgrep as\na single command line argument verbatim.</p>\n<p>See <a href=\"https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file\">https://github.com/BurntSushi/ripgrep/blob/master/GUIDE.md#configuration-file</a>\nfor an example configuration.</p>"}, {"declarations": [{"name": "<programs/ripgrep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep.nix"}], "default": "false", "description": "Whether to enable Ripgrep.", "example": "true", "loc": ["programs", "ripgrep", "enable"], "readOnly": false, "title": "programs.ripgrep.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Ripgrep.</p>"}, {"declarations": [{"name": "<programs/ripgrep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ripgrep.nix"}], "default": "pkgs.ripgrep", "description": "The ripgrep package to use.", "example": "", "loc": ["programs", "ripgrep", "package"], "readOnly": false, "title": "programs.ripgrep.package", "type": "null or package", "descriptionHTML": "<p>The ripgrep package to use.</p>"}, {"declarations": [{"name": "<programs/rmpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rmpc.nix"}], "default": "\"\"", "description": "Configuration settings for rmpc in the Rusty Object Notation\nformat. All available options can be found in the official\ndocumentation at https://mierak.github.io/rmpc/next/configuration/.", "example": "''\n  (\n      address: \"127.0.0.1:6600\",\n      password: None,\n      theme: None,\n      cache_dir: None,\n      on_song_change: None,\n      volume_step: 5,\n      max_fps: 30,\n      scrolloff: 0,\n      wrap_navigation: false,\n      enable_mouse: true,\n      enable_config_hot_reload: true,\n      status_update_interval_ms: 1000,\n      select_current_song_on_change: false,\n      browser_song_sort: [Disc, Track, Artist, Title],\n  )\n''", "loc": ["programs", "rmpc", "config"], "readOnly": false, "title": "programs.rmpc.config", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration settings for rmpc in the Rusty Object Notation\nformat. All available options can be found in the official\ndocumentation at <a href=\"https://mierak.github.io/rmpc/next/configuration/\">https://mierak.github.io/rmpc/next/configuration/</a>.</p>"}, {"declarations": [{"name": "<programs/rmpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rmpc.nix"}], "default": "false", "description": "Whether to enable rmpc.", "example": "true", "loc": ["programs", "rmpc", "enable"], "readOnly": false, "title": "programs.rmpc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rmpc.</p>"}, {"declarations": [{"name": "<programs/rmpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rmpc.nix"}], "default": "pkgs.rmpc", "description": "The rmpc package to use.", "example": "", "loc": ["programs", "rmpc", "package"], "readOnly": false, "title": "programs.rmpc.package", "type": "null or package", "descriptionHTML": "<p>The rmpc package to use.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "\"$XDG_CONFIG_HOME/rofi/config.rasi\"", "description": "Path where to put generated configuration file.", "example": "", "loc": ["programs", "rofi", "configPath"], "readOnly": false, "title": "programs.rofi.configPath", "type": "string", "descriptionHTML": "<p>Path where to put generated configuration file.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "null", "description": "Whether to cycle through the results list.", "example": "", "loc": ["programs", "rofi", "cycle"], "readOnly": false, "title": "programs.rofi.cycle", "type": "null or boolean", "descriptionHTML": "<p>Whether to cycle through the results list.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "false", "description": "Whether to enable Rofi: A window switcher, application launcher and dmenu replacement.", "example": "true", "loc": ["programs", "rofi", "enable"], "readOnly": false, "title": "programs.rofi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Rofi: A window switcher, application launcher and dmenu replacement.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "{ }", "description": "Additional configuration to add.", "example": "{\n  kb-primary-paste = \"Control+V,Shift+Insert\";\n  kb-secondary-paste = \"Control+v,Insert\";\n}\n", "loc": ["programs", "rofi", "extraConfig"], "readOnly": false, "title": "programs.rofi.extraConfig", "type": "(attribute set of (string or signed integer or boolean or (Rasi literal string) or list of (string or signed integer or boolean or (Rasi literal string)))) or string", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "", "description": "Resulting customized rofi package.", "example": "", "loc": ["programs", "rofi", "finalPackage"], "readOnly": true, "title": "programs.rofi.finalPackage", "type": "package", "descriptionHTML": "<p>Resulting customized rofi package.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "null", "description": "Font to use.", "example": "\"Droid Sans Mono 14\"", "loc": ["programs", "rofi", "font"], "readOnly": false, "title": "programs.rofi.font", "type": "null or string", "descriptionHTML": "<p>Font to use.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "\"center\"", "description": "The location rofi appears on the screen.", "example": "", "loc": ["programs", "rofi", "location"], "readOnly": false, "title": "programs.rofi.location", "type": "one of \"bottom\", \"bottom-left\", \"bottom-right\", \"center\", \"left\", \"right\", \"top\", \"top-left\", \"top-right\"", "descriptionHTML": "<p>The location rofi appears on the screen.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "[ ]", "description": "Modes to enable. For custom modes see man 5 rofi-script.", "example": "[\n  \"drun\"\n  \"emoji\"\n  \"ssh\"\n  {\n    name = \"whatnot\";\n    path = lib.getExe pkgs.rofi-whatnot;\n  }\n]\n", "loc": ["programs", "rofi", "modes"], "readOnly": false, "title": "programs.rofi.modes", "type": "list of (string or (submodule))", "descriptionHTML": "<p>Modes to enable. For custom modes see <code>man 5 rofi-script</code>.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "pkgs.rofi", "description": "The rofi package to use.", "example": "pkgs.rofi.override { plugins = [ pkgs.rofi-emoji ]; }", "loc": ["programs", "rofi", "package"], "readOnly": false, "title": "programs.rofi.package", "type": "package", "descriptionHTML": "<p>The rofi package to use.</p>"}, {"declarations": [{"name": "<programs/rofi-pass.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi-pass.nix"}], "default": "false", "description": "Whether to enable rofi integration with password-store.", "example": "true", "loc": ["programs", "rofi", "pass", "enable"], "readOnly": false, "title": "programs.rofi.pass.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rofi integration with password-store.</p>"}, {"declarations": [{"name": "<programs/rofi-pass.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi-pass.nix"}], "default": "\"\"", "description": "Extra configuration to be added at to the rofi-pass config file.\nAdditional examples can be found at\nhttps://github.com/carnager/rofi-pass/blob/master/config.example.", "example": "''\n  URL_field='url'\n  USERNAME_field='user'\n  AUTOTYPE_field='autotype'\n''", "loc": ["programs", "rofi", "pass", "extraConfig"], "readOnly": false, "title": "programs.rofi.pass.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration to be added at to the rofi-pass config file.\nAdditional examples can be found at\n<a href=\"https://github.com/carnager/rofi-pass/blob/master/config.example\">https://github.com/carnager/rofi-pass/blob/master/config.example</a>.</p>"}, {"declarations": [{"name": "<programs/rofi-pass.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi-pass.nix"}], "default": "pkgs.rofi-pass", "description": "The rofi-pass package to use.", "example": "pkgs.rofi-pass-wayland", "loc": ["programs", "rofi", "pass", "package"], "readOnly": false, "title": "programs.rofi.pass.package", "type": "null or package", "descriptionHTML": "<p>The rofi-pass package to use.</p>"}, {"declarations": [{"name": "<programs/rofi-pass.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi-pass.nix"}], "default": "[ ]", "description": "Directory roots of your password-stores.", "example": "", "loc": ["programs", "rofi", "pass", "stores"], "readOnly": false, "title": "programs.rofi.pass.stores", "type": "list of string", "descriptionHTML": "<p>Directory roots of your password-stores.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "[ ]", "description": "List of rofi plugins to be installed.", "example": "[ pkgs.rofi-calc ]", "loc": ["programs", "rofi", "plugins"], "readOnly": false, "title": "programs.rofi.plugins", "type": "list of package", "descriptionHTML": "<p>List of rofi plugins to be installed.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "null", "description": "Path to the terminal which will be used to run console applications", "example": "\"\\${pkgs.gnome.gnome_terminal}/bin/gnome-terminal\"", "loc": ["programs", "rofi", "terminal"], "readOnly": false, "title": "programs.rofi.terminal", "type": "null or string", "descriptionHTML": "<p>Path to the terminal which will be used to run console applications</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "null", "description": "Name of theme or path to theme file in rasi format or attribute set with\ntheme configuration. Available named themes can be viewed using the\n{command}rofi-theme-selector tool.", "example": "let\n  # Use `mkLiteral` for string-like values that should show without\n  # quotes, e.g.:\n  # {\n  #   foo = \"abc\"; => foo: \"abc\";\n  #   bar = mkLiteral \"abc\"; => bar: abc;\n  # };\n  inherit (config.lib.formats.rasi) mkLiteral;\nin {\n  \"*\" = {\n    background-color = mkLiteral \"#000000\";\n    foreground-color = mkLiteral \"rgba ( 250, 251, 252, 100 % )\";\n    border-color = mkLiteral \"#FFFFFF\";\n    width = 512;\n  };\n\n  \"#inputbar\" = {\n    children = map mkLiteral [ \"prompt\" \"entry\" ];\n  };\n\n  \"#textbox-prompt-colon\" = {\n    expand = false;\n    str = \":\";\n    margin = mkLiteral \"0px 0.3em 0em 0em\";\n    text-color = mkLiteral \"@foreground-color\";\n  };\n}\n", "loc": ["programs", "rofi", "theme"], "readOnly": false, "title": "programs.rofi.theme", "type": "null or string or absolute path or attribute set of ((attribute set of (string or signed integer or boolean or (Rasi literal string) or list of (string or signed integer or boolean or (Rasi literal string)))) or string)", "descriptionHTML": "<p>Name of theme or path to theme file in rasi format or attribute set with\ntheme configuration. Available named themes can be viewed using the\n{command}<code>rofi-theme-selector</code> tool.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "0", "description": "Offset in the x-axis in pixels relative to the chosen location.", "example": "", "loc": ["programs", "rofi", "xoffset"], "readOnly": false, "title": "programs.rofi.xoffset", "type": "signed integer", "descriptionHTML": "<p>Offset in the x-axis in pixels relative to the chosen location.</p>"}, {"declarations": [{"name": "<programs/rofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rofi.nix"}], "default": "0", "description": "Offset in the y-axis in pixels relative to the chosen location.", "example": "", "loc": ["programs", "rofi", "yoffset"], "readOnly": false, "title": "programs.rofi.yoffset", "type": "signed integer", "descriptionHTML": "<p>Offset in the y-axis in pixels relative to the chosen location.</p>"}, {"declarations": [{"name": "<programs/rtorrent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rtorrent.nix"}], "default": "false", "description": "Whether to enable rTorrent.", "example": "true", "loc": ["programs", "rtorrent", "enable"], "readOnly": false, "title": "programs.rtorrent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rTorrent.</p>"}, {"declarations": [{"name": "<programs/rtorrent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rtorrent.nix"}], "default": "\"\"", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/rtorrent/rtorrent.rc. See\nhttps://github.com/rakshasa/rtorrent/wiki/Config-Guide\nfor explanation about possible values.", "example": "", "loc": ["programs", "rtorrent", "extraConfig"], "readOnly": false, "title": "programs.rtorrent.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/rtorrent/rtorrent.rc</code>. See\n<a href=\"https://github.com/rakshasa/rtorrent/wiki/Config-Guide\">https://github.com/rakshasa/rtorrent/wiki/Config-Guide</a>\nfor explanation about possible values.</p>"}, {"declarations": [{"name": "<programs/rtorrent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/rtorrent.nix"}], "default": "pkgs.rtorrent", "description": "The rtorrent package to use.", "example": "", "loc": ["programs", "rtorrent", "package"], "readOnly": false, "title": "programs.rtorrent.package", "type": "null or package", "descriptionHTML": "<p>The rtorrent package to use.</p>"}, {"declarations": [{"name": "<programs/ruff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ruff.nix"}], "default": "false", "description": "Whether to enable ruff, an extremely fast Python linter and code formatter, written in Rust.", "example": "true", "loc": ["programs", "ruff", "enable"], "readOnly": false, "title": "programs.ruff.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ruff, an extremely fast Python linter and code formatter, written in Rust.</p>"}, {"declarations": [{"name": "<programs/ruff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ruff.nix"}], "default": "pkgs.ruff", "description": "The ruff package to use.", "example": "", "loc": ["programs", "ruff", "package"], "readOnly": false, "title": "programs.ruff.package", "type": "null or package", "descriptionHTML": "<p>The ruff package to use.</p>"}, {"declarations": [{"name": "<programs/ruff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ruff.nix"}], "default": "", "description": "Ruff configuration.\nFor available settings see https://docs.astral.sh/ruff/settings.", "example": "{\n  line-length = 100;\n  per-file-ignores = { \"__init__.py\" = [ \"F401\" ]; };\n  lint = {\n    select = [ \"E4\" \"E7\" \"E9\" \"F\" ];\n    ignore = [ ];\n  };\n}\n", "loc": ["programs", "ruff", "settings"], "readOnly": false, "title": "programs.ruff.settings", "type": "TOML value", "descriptionHTML": "<p>Ruff configuration.\nFor available settings see <a href=\"https://docs.astral.sh/ruff/settings\">https://docs.astral.sh/ruff/settings</a>.</p>"}, {"declarations": [{"name": "<programs/sagemath.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sagemath.nix"}], "default": "${config.xdg.configHome}/sage", "description": "Directory where the {file}sage.init file will be stored.\nNote that the upstream default is {file}~/.sage,\nbut our default is to follow XDG.", "example": "", "loc": ["programs", "sagemath", "configDir"], "readOnly": false, "title": "programs.sagemath.configDir", "type": "string", "descriptionHTML": "<p>Directory where the {file}<code>sage.init</code> file will be stored.\nNote that the upstream default is {file}<code>~/.sage</code>,\nbut our default is to follow XDG.</p>"}, {"declarations": [{"name": "<programs/sagemath.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sagemath.nix"}], "default": "${config.xdg.dataHome}/sage", "description": "Location for {env}DOT_SAGE.\nNote that the upstream default is {file}~/.sage,\nbut our default is to follow XDG.", "example": "", "loc": ["programs", "sagemath", "dataDir"], "readOnly": false, "title": "programs.sagemath.dataDir", "type": "string", "descriptionHTML": "<p>Location for {env}<code>DOT_SAGE</code>.\nNote that the upstream default is {file}<code>~/.sage</code>,\nbut our default is to follow XDG.</p>"}, {"declarations": [{"name": "<programs/sagemath.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sagemath.nix"}], "default": "false", "description": "Whether to enable SageMath, a mathematics software system.", "example": "true", "loc": ["programs", "sagemath", "enable"], "readOnly": false, "title": "programs.sagemath.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable SageMath, a mathematics software system.</p>"}, {"declarations": [{"name": "<programs/sagemath.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sagemath.nix"}], "default": "\"\"", "description": "Contents of the {file}init.sage file that is loaded on startup.", "example": "\"%colors linux\"", "loc": ["programs", "sagemath", "initScript"], "readOnly": false, "title": "programs.sagemath.initScript", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Contents of the {file}<code>init.sage</code> file that is loaded on startup.</p>"}, {"declarations": [{"name": "<programs/sagemath.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sagemath.nix"}], "default": "pkgs.sage", "description": "The sage package to use. The SageMath package to use.", "example": "", "loc": ["programs", "sagemath", "package"], "readOnly": false, "title": "programs.sagemath.package", "type": "null or package", "descriptionHTML": "<p>The sage package to use. The SageMath package to use.</p>"}, {"declarations": [{"name": "<programs/sapling.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sapling.nix"}], "default": "{ }", "description": "Sapling aliases to define.", "example": "", "loc": ["programs", "sapling", "aliases"], "readOnly": false, "title": "programs.sapling.aliases", "type": "attribute set of string", "descriptionHTML": "<p>Sapling aliases to define.</p>"}, {"declarations": [{"name": "<programs/sapling.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sapling.nix"}], "default": "false", "description": "Whether to enable Sapling.", "example": "true", "loc": ["programs", "sapling", "enable"], "readOnly": false, "title": "programs.sapling.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Sapling.</p>"}, {"declarations": [{"name": "<programs/sapling.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sapling.nix"}], "default": "{ }", "description": "Additional configuration to add.", "example": "", "loc": ["programs", "sapling", "extraConfig"], "readOnly": false, "title": "programs.sapling.extraConfig", "type": "attribute set of anything", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<programs/sapling.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sapling.nix"}], "default": "pkgs.sapling", "description": "The sapling package to use.", "example": "", "loc": ["programs", "sapling", "package"], "readOnly": false, "title": "programs.sapling.package", "type": "null or package", "descriptionHTML": "<p>The sapling package to use.</p>"}, {"declarations": [{"name": "<programs/sapling.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sapling.nix"}], "default": "", "description": "Default user email to use.", "example": "", "loc": ["programs", "sapling", "userEmail"], "readOnly": false, "title": "programs.sapling.userEmail", "type": "string", "descriptionHTML": "<p>Default user email to use.</p>"}, {"declarations": [{"name": "<programs/sapling.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sapling.nix"}], "default": "", "description": "Default user name to use.", "example": "", "loc": ["programs", "sapling", "userName"], "readOnly": false, "title": "programs.sapling.userName", "type": "string", "descriptionHTML": "<p>Default user name to use.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "\".sbt\"", "description": "Where the sbt configuration files should be located, relative\n{env}HOME.", "example": "", "loc": ["programs", "sbt", "baseUserConfigPath"], "readOnly": false, "title": "programs.sbt.baseUserConfigPath", "type": "string", "descriptionHTML": "<p>Where the sbt configuration files should be located, relative\n{env}<code>HOME</code>.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "[ ]", "description": "A list of credentials to define in the sbt configuration directory.", "example": "[{\n  realm = \"Sonatype Nexus Repository Manager\";\n  host = \"example.com\";\n  user = \"user\";\n  passwordCommand = \"pass show sbt/user@example.com\";\n}]\n", "loc": ["programs", "sbt", "credentials"], "readOnly": false, "title": "programs.sbt.credentials", "type": "list of (submodule)", "descriptionHTML": "<p>A list of credentials to define in the sbt configuration directory.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The hostname of the repository you're authenticating to.", "example": "", "loc": ["programs", "sbt", "credentials", "*", "host"], "readOnly": false, "title": "programs.sbt.credentials.*.host", "type": "string", "descriptionHTML": "<p>The hostname of the repository you're authenticating to.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The command that provides the password or authentication token for\nthe repository.", "example": "", "loc": ["programs", "sbt", "credentials", "*", "passwordCommand"], "readOnly": false, "title": "programs.sbt.credentials.*.passwordCommand", "type": "string", "descriptionHTML": "<p>The command that provides the password or authentication token for\nthe repository.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The realm of the repository you're authenticating to.", "example": "", "loc": ["programs", "sbt", "credentials", "*", "realm"], "readOnly": false, "title": "programs.sbt.credentials.*.realm", "type": "string", "descriptionHTML": "<p>The realm of the repository you're authenticating to.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The user you're using to authenticate.", "example": "", "loc": ["programs", "sbt", "credentials", "*", "user"], "readOnly": false, "title": "programs.sbt.credentials.*.user", "type": "string", "descriptionHTML": "<p>The user you're using to authenticate.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "false", "description": "Whether to enable sbt.", "example": "true", "loc": ["programs", "sbt", "enable"], "readOnly": false, "title": "programs.sbt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sbt.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "pkgs.sbt", "description": "The sbt package to use.", "example": "", "loc": ["programs", "sbt", "package"], "readOnly": false, "title": "programs.sbt.package", "type": "package", "descriptionHTML": "<p>The sbt package to use.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "[ ]", "description": "A list of plugins to place in the sbt configuration directory.", "example": "[\n  {\n    org = \"net.virtual-void\";\n    artifact = \"sbt-dependency-graph\";\n    version = \"0.10.0-RC1\";\n  }\n  {\n    org = \"com.dwijnand\";\n    artifact = \"sbt-project-graph\";\n    version = \"0.4.0\";\n  }\n]\n", "loc": ["programs", "sbt", "plugins"], "readOnly": false, "title": "programs.sbt.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>A list of plugins to place in the sbt configuration directory.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The name of the artifact.", "example": "", "loc": ["programs", "sbt", "plugins", "*", "artifact"], "readOnly": false, "title": "programs.sbt.plugins.*.artifact", "type": "string", "descriptionHTML": "<p>The name of the artifact.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The organization the artifact is published under.", "example": "", "loc": ["programs", "sbt", "plugins", "*", "org"], "readOnly": false, "title": "programs.sbt.plugins.*.org", "type": "string", "descriptionHTML": "<p>The organization the artifact is published under.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "", "description": "The version of the plugin.", "example": "", "loc": ["programs", "sbt", "plugins", "*", "version"], "readOnly": false, "title": "programs.sbt.plugins.*.version", "type": "string", "descriptionHTML": "<p>The version of the plugin.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "[ ]", "description": "A list of extra commands to put in plugins conf file.\nUse it in last resort when you can't use the plugins option.", "example": "[\n  \"addDependencyTreePlugin\"\n]\n", "loc": ["programs", "sbt", "pluginsExtra"], "readOnly": false, "title": "programs.sbt.pluginsExtra", "type": "list of string", "descriptionHTML": "<p>A list of extra commands to put in plugins conf file.\nUse it in last resort when you can't use the <code>plugins</code> option.</p>"}, {"declarations": [{"name": "<programs/sbt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sbt.nix"}], "default": "[ ]", "description": "A list of repositories to use when resolving dependencies. Defined as a\nlist of pre-defined repository or custom repository as a set of name to\nURL. The list will be used populate the ~/.sbt/repositories\nfile in the order specified.\nPre-defined repositories must be one of local,\nmaven-local, maven-central.\nCustom repositories are defined as\n{ name-of-repo = \"https://url.to.repo.com\"}.\nSee\nhttps://www.scala-sbt.org/1.x/docs/Launcher-Configuration.html#3.+Repositories+Section\nabout this configuration section and\nhttps://www.scala-sbt.org/1.x/docs/Proxy-Repositories.html\nto read about proxy repositories.", "example": "[\n  \"local\"\n  { my-ivy-proxy-releases = \"http://repo.company.com/ivy-releases/, [organization]/[module]/(scala_[scalaVersion]/)(sbt_[sbtVersion]/)[revision]/[type]s/[artifact](-[classifier]).[ext]\" }\n  { my-maven-proxy-releases = \"http://repo.company.com/maven-releases/\" }\n  \"maven-central\"\n]\n", "loc": ["programs", "sbt", "repositories"], "readOnly": false, "title": "programs.sbt.repositories", "type": "list of (one of \"local\", \"maven-central\", \"maven-local\" or attribute set of string)", "descriptionHTML": "<p>A list of repositories to use when resolving dependencies. Defined as a\nlist of pre-defined repository or custom repository as a set of name to\nURL. The list will be used populate the <code>~/.sbt/repositories</code>\nfile in the order specified.</p>\n<p>Pre-defined repositories must be one of <code>local</code>,\n<code>maven-local</code>, <code>maven-central</code>.</p>\n<p>Custom repositories are defined as\n<code>{ name-of-repo = \"https://url.to.repo.com\"}</code>.</p>\n<p>See\n<a href=\"https://www.scala-sbt.org/1.x/docs/Launcher-Configuration.html#3.+Repositories+Section\">https://www.scala-sbt.org/1.x/docs/Launcher-Configuration.html#3.+Repositories+Section</a>\nabout this configuration section and\n<a href=\"https://www.scala-sbt.org/1.x/docs/Proxy-Repositories.html\">https://www.scala-sbt.org/1.x/docs/Proxy-Repositories.html</a>\nto read about proxy repositories.</p>"}, {"declarations": [{"name": "<programs/scmpuff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/scmpuff.nix"}], "default": "false", "description": "Whether to enable scmpuff, a command line tool that allows you to work quicker with Git by\nsubstituting numeric shortcuts for files.", "example": "true", "loc": ["programs", "scmpuff", "enable"], "readOnly": false, "title": "programs.scmpuff.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable scmpuff, a command line tool that allows you to work quicker with Git by\nsubstituting numeric shortcuts for files.</p>"}, {"declarations": [{"name": "<programs/scmpuff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/scmpuff.nix"}], "default": "true", "description": "Whether to enable aliases (e.g. gs, ga, gd, gco).", "example": "", "loc": ["programs", "scmpuff", "enableAliases"], "readOnly": false, "title": "programs.scmpuff.enableAliases", "type": "boolean", "descriptionHTML": "<p>Whether to enable aliases (e.g. gs, ga, gd, gco).</p>"}, {"declarations": [{"name": "<programs/scmpuff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/scmpuff.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "scmpuff", "enableBashIntegration"], "readOnly": false, "title": "programs.scmpuff.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/scmpuff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/scmpuff.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "scmpuff", "enableFishIntegration"], "readOnly": false, "title": "programs.scmpuff.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/scmpuff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/scmpuff.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "scmpuff", "enableZshIntegration"], "readOnly": false, "title": "programs.scmpuff.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/scmpuff.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/scmpuff.nix"}], "default": "pkgs.scmpuff", "description": "The scmpuff package to use.", "example": "", "loc": ["programs", "scmpuff", "package"], "readOnly": false, "title": "programs.scmpuff.package", "type": "package", "descriptionHTML": "<p>The scmpuff package to use.</p>"}, {"declarations": [{"name": "<programs/script-directory.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/script-directory.nix"}], "default": "false", "description": "Whether to enable script-directory.", "example": "true", "loc": ["programs", "script-directory", "enable"], "readOnly": false, "title": "programs.script-directory.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable script-directory.</p>"}, {"declarations": [{"name": "<programs/script-directory.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/script-directory.nix"}], "default": "pkgs.script-directory", "description": "The script-directory package to use.", "example": "", "loc": ["programs", "script-directory", "package"], "readOnly": false, "title": "programs.script-directory.package", "type": "package", "descriptionHTML": "<p>The script-directory package to use.</p>"}, {"declarations": [{"name": "<programs/script-directory.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/script-directory.nix"}], "default": "{ }", "description": "script-directory config, for options take a look at the documentation", "example": "{\n  SD_ROOT = \"${config.home.homeDirectory}/.sd\";\n  SD_EDITOR = \"nvim\";\n  SD_CAT = \"lolcat\";\n}\n", "loc": ["programs", "script-directory", "settings"], "readOnly": false, "title": "programs.script-directory.settings", "type": "attribute set of string", "descriptionHTML": "<p>script-directory config, for options take a look at the <a href=\"https://github.com/ianthehenry/sd#options\">documentation</a></p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "", "description": "Configuration for senpai. For a complete list of options, see\n{manpage}senpai(5).", "example": "{\n  address = \"libera.chat:6697\";\n  nickname = \"nicholas\";\n  password = \"verysecurepassword\";\n}\n", "loc": ["programs", "senpai", "config"], "readOnly": false, "title": "programs.senpai.config", "type": "attribute set of anything", "descriptionHTML": "<p>Configuration for senpai. For a complete list of options, see\n{manpage}<code>senpai(5)</code>.</p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "", "description": "The address (host[:port]) of the IRC server. senpai uses TLS\nconnections by default unless you specify tls option to be false.\nTLS connections default to port 6697, plain-text use port 6667.\nURircs://, irc://, and irc+insecure:// URLs are supported,\nin which case only the hostname and port parts will be used. If\nthe scheme is ircs/irc+insecure, tls will be overriden and set\nto true/false accordingly.", "example": "", "loc": ["programs", "senpai", "config", "address"], "readOnly": false, "title": "programs.senpai.config.address", "type": "string", "descriptionHTML": "<p>The address (<code>host[:port]</code>) of the IRC server. senpai uses TLS\nconnections by default unless you specify tls option to be false.\nTLS connections default to port 6697, plain-text use port 6667.</p>\n<p>UR<code>ircs://</code>, <code>irc://</code>, and <code>irc+insecure://</code> URLs are supported,\nin which case only the hostname and port parts will be used. If\nthe scheme is <code>ircs/irc+insecure</code>, tls will be overriden and set\nto true/false accordingly.</p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "", "description": "Your nickname, sent with a NICK IRC message. It mustn't contain\nspaces or colons (:).", "example": "", "loc": ["programs", "senpai", "config", "nickname"], "readOnly": false, "title": "programs.senpai.config.nickname", "type": "string", "descriptionHTML": "<p>Your nickname, sent with a NICK IRC message. It mustn't contain\nspaces or colons (:).</p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "null", "description": "Your password, used for SASL authentication. Note that it will\nreside world-readable in the Nix store.", "example": "", "loc": ["programs", "senpai", "config", "password"], "readOnly": false, "title": "programs.senpai.config.password", "type": "null or string", "descriptionHTML": "<p>Your password, used for SASL authentication. Note that it will\nreside world-readable in the Nix store.</p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "null", "description": "Alternatively to providing your SASL authentication password\ndirectly in plaintext, you can specify a command to be run to\nfetch the password at runtime. This is useful if you store your\npasswords in a separate (probably encrypted) file using gpg or a\ncommand line password manager such as pass or gopass. If a\npassword-cmd is provided, the value of password will be ignored\nand the first line of the output of password-cmd will be used\nfor login.", "example": "[\n  \"gopass\"\n  \"show\"\n  \"irc/guest\"\n]", "loc": ["programs", "senpai", "config", "password-cmd"], "readOnly": false, "title": "programs.senpai.config.password-cmd", "type": "null or (list of string)", "descriptionHTML": "<p>Alternatively to providing your SASL authentication password\ndirectly in plaintext, you can specify a command to be run to\nfetch the password at runtime. This is useful if you store your\npasswords in a separate (probably encrypted) file using <code>gpg</code> or a\ncommand line password manager such as <code>pass</code> or <code>gopass</code>. If a\npassword-cmd is provided, the value of password will be ignored\nand the first line of the output of <code>password-cmd</code> will be used\nfor login.</p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "false", "description": "Whether to enable senpai.", "example": "true", "loc": ["programs", "senpai", "enable"], "readOnly": false, "title": "programs.senpai.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable senpai.</p>"}, {"declarations": [{"name": "<programs/senpai.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/senpai.nix"}], "default": "pkgs.senpai", "description": "The senpai package to use.", "example": "", "loc": ["programs", "senpai", "package"], "readOnly": false, "title": "programs.senpai.package", "type": "package", "descriptionHTML": "<p>The senpai package to use.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "false", "description": "Whether to enable the sesh terminal session manager.", "example": "true", "loc": ["programs", "sesh", "enable"], "readOnly": false, "title": "programs.sesh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the sesh terminal session manager.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "true", "description": "Whether to enable a shell alias s to quickly launch sessions.", "example": "", "loc": ["programs", "sesh", "enableAlias"], "readOnly": false, "title": "programs.sesh.enableAlias", "type": "boolean", "descriptionHTML": "<p>Whether to enable a shell alias <code>s</code> to quickly launch sessions.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "true", "description": "Enable Tmux integration with sesh.", "example": "", "loc": ["programs", "sesh", "enableTmuxIntegration"], "readOnly": false, "title": "programs.sesh.enableTmuxIntegration", "type": "boolean", "descriptionHTML": "<p>Enable Tmux integration with sesh.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "pkgs.fzf", "description": "The fzf package to use.", "example": "", "loc": ["programs", "sesh", "fzfPackage"], "readOnly": false, "title": "programs.sesh.fzfPackage", "type": "null or package", "descriptionHTML": "<p>The fzf package to use.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "true", "description": "Display icons next to results ({option}--icons argument).", "example": "", "loc": ["programs", "sesh", "icons"], "readOnly": false, "title": "programs.sesh.icons", "type": "boolean", "descriptionHTML": "<p>Display icons next to results ({option}<code>--icons</code> argument).</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "pkgs.sesh", "description": "The sesh package to use.", "example": "", "loc": ["programs", "sesh", "package"], "readOnly": false, "title": "programs.sesh.package", "type": "package", "descriptionHTML": "<p>The sesh package to use.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "{ }", "description": "Configuration for sesh, written to ~/.config/sesh/sesh.toml.\nSee the sesh documentation for available options.", "example": "", "loc": ["programs", "sesh", "settings"], "readOnly": false, "title": "programs.sesh.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration for sesh, written to <code>~/.config/sesh/sesh.toml</code>.</p>\n<p>See the <a href=\"https://github.com/joshmedeski/sesh#configuration\">sesh documentation</a> for available options.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "\"s\"", "description": "Keybinding for invoking sesh in Tmux.", "example": "", "loc": ["programs", "sesh", "tmuxKey"], "readOnly": false, "title": "programs.sesh.tmuxKey", "type": "string", "descriptionHTML": "<p>Keybinding for invoking sesh in Tmux.</p>"}, {"declarations": [{"name": "<programs/sesh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sesh.nix"}], "default": "pkgs.zoxide", "description": "The zoxide package to use.", "example": "", "loc": ["programs", "sesh", "zoxidePackage"], "readOnly": false, "title": "programs.sesh.zoxidePackage", "type": "null or package", "descriptionHTML": "<p>The zoxide package to use.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "null", "description": "Path to the SSH key to be used by default. Can be overridden per host.", "example": "", "loc": ["programs", "sftpman", "defaultSshKey"], "readOnly": false, "title": "programs.sftpman.defaultSshKey", "type": "null or string", "descriptionHTML": "<p>Path to the SSH key to be used by default. Can be overridden per host.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "false", "description": "Whether to enable sftpman, an application that handles sshfs/sftp file systems mounting.", "example": "true", "loc": ["programs", "sftpman", "enable"], "readOnly": false, "title": "programs.sftpman.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sftpman, an application that handles sshfs/sftp file systems mounting.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "{ }", "description": "The sshfs mount configurations written to\n{file}$XDG_CONFIG_HOME/sftpman/mounts/.", "example": "", "loc": ["programs", "sftpman", "mounts"], "readOnly": false, "title": "programs.sftpman.mounts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>The sshfs mount configurations written to\n{file}<code>$XDG_CONFIG_HOME/sftpman/mounts/</code>.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "\"publickey\"", "description": "The authentication method to use.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "authType"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.authType", "type": "one of \"password\", \"publickey\", \"hostbased\", \"keyboard-interactive\", \"gssapi-with-mic\"", "descriptionHTML": "<p>The authentication method to use.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "\"true\"", "description": "Command to run before mounting.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "beforeMount"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.beforeMount", "type": "string", "descriptionHTML": "<p>Command to run before mounting.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "", "description": "The host to connect to.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "host"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.host", "type": "string", "descriptionHTML": "<p>The host to connect to.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "[ ]", "description": "Options to pass to sshfs.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "mountOptions"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.mountOptions", "type": "list of string", "descriptionHTML": "<p>Options to pass to sshfs.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "", "description": "The remote path to mount.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "mountPoint"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.mountPoint", "type": "string", "descriptionHTML": "<p>The remote path to mount.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "22", "description": "The port to connect to.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "port"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port to connect to.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "config.programs.sftpman.defaultSshKey", "description": "Path to the SSH key to use for authentication.\nOnly applies if authMethod is publickey.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "sshKey"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.sshKey", "type": "null or string", "descriptionHTML": "<p>Path to the SSH key to use for authentication.\nOnly applies if authMethod is <code>publickey</code>.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "", "description": "The username to authenticate with.", "example": "", "loc": ["programs", "sftpman", "mounts", "<name>", "user"], "readOnly": false, "title": "programs.sftpman.mounts.<name>.user", "type": "string", "descriptionHTML": "<p>The username to authenticate with.</p>"}, {"declarations": [{"name": "<programs/sftpman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sftpman.nix"}], "default": "pkgs.sftpman", "description": "The sftpman package to use.", "example": "", "loc": ["programs", "sftpman", "package"], "readOnly": false, "title": "programs.sftpman.package", "type": "null or package", "descriptionHTML": "<p>The sftpman package to use.</p>"}, {"declarations": [{"name": "<programs/sioyek.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sioyek.nix"}], "default": "{ }", "description": "Input configuration written to\n{file}$XDG_CONFIG_HOME/sioyek/keys_user.config.\nSee https://github.com/ahrm/sioyek/blob/main/pdf_viewer/keys.config.\nEach attribute could also accept a list of strings to set multiple\nbindings of the same command.", "example": "{\n  \"move_up\" = \"k\";\n  \"move_down\" = \"j\";\n  \"move_left\" = \"h\";\n  \"move_right\" = \"l\";\n  \"screen_down\" = [ \"d\" \"<C-d>\" ];\n  \"screen_up\" = [ \"u\" \"<C-u>\" ];\n}\n", "loc": ["programs", "sioyek", "bindings"], "readOnly": false, "title": "programs.sioyek.bindings", "type": "attribute set of (string or list of string)", "descriptionHTML": "<p>Input configuration written to\n{file}<code>$XDG_CONFIG_HOME/sioyek/keys_user.config</code>.\nSee <a href=\"https://github.com/ahrm/sioyek/blob/main/pdf_viewer/keys.config\">https://github.com/ahrm/sioyek/blob/main/pdf_viewer/keys.config</a>.</p>\n<p>Each attribute could also accept a list of strings to set multiple\nbindings of the same command.</p>"}, {"declarations": [{"name": "<programs/sioyek.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sioyek.nix"}], "default": "{ }", "description": "Input configuration written to\n{file}$XDG_CONFIG_HOME/sioyek/prefs_user.config.\nSee https://github.com/ahrm/sioyek/blob/main/pdf_viewer/prefs.config.", "example": "{\n  \"background_color\" = \"1.0 1.0 1.0\";\n  \"text_highlight_color\" = \"1.0 0.0 0.0\";\n}\n", "loc": ["programs", "sioyek", "config"], "readOnly": false, "title": "programs.sioyek.config", "type": "attribute set of string", "descriptionHTML": "<p>Input configuration written to\n{file}<code>$XDG_CONFIG_HOME/sioyek/prefs_user.config</code>.\nSee <a href=\"https://github.com/ahrm/sioyek/blob/main/pdf_viewer/prefs.config\">https://github.com/ahrm/sioyek/blob/main/pdf_viewer/prefs.config</a>.</p>"}, {"declarations": [{"name": "<programs/sioyek.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sioyek.nix"}], "default": "false", "description": "Whether to enable Sioyek, a PDF viewer designed for reading research papers and technical books.", "example": "true", "loc": ["programs", "sioyek", "enable"], "readOnly": false, "title": "programs.sioyek.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Sioyek, a PDF viewer designed for reading research papers and technical books.</p>"}, {"declarations": [{"name": "<programs/sioyek.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sioyek.nix"}], "default": "pkgs.sioyek", "description": "The sioyek package to use.", "example": "", "loc": ["programs", "sioyek", "package"], "readOnly": false, "title": "programs.sioyek.package", "type": "package", "descriptionHTML": "<p>The sioyek package to use.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "null", "description": "The sketchybar configuration. Can be specified as:\n\nA string containing the configuration content directly\nAn attribute set with 'source' pointing to a directory containing\n   the full configuration, and optionally 'recursive = true' to\n   recursively copy all files\nAn attribute set with 'text' containing inline configuration\n\nWhen using a string or 'text', the appropriate shebang will be\nautomatically added based on configType (bash or lua).\nWhen using a directory source, it should contain a file named\n\"sketchybarrc\" which serves as the main entry point.", "example": "# String example - inline configuration\n''\n# Define colors\nexport COLOR_BLACK=\"0xff181926\"\nexport COLOR_WHITE=\"0xffcad3f5\"\n\n# Configure bar\nsketchybar --bar height=32 \\\n                position=top \\\n                padding_left=10 \\\n                padding_right=10 \\\n                color=$COLOR_BLACK\n\n# Configure default values\nsketchybar --default icon.font=\"SF Pro:Bold:14.0\" \\\n                    icon.color=$COLOR_WHITE \\\n                    label.font=\"SF Pro:Bold:14.0\" \\\n                    label.color=$COLOR_WHITE\n\n# Add items to the bar\nsketchybar --add item clock right \\\n          --set clock script=\"date '+%H:%M'\" \\\n                      update_freq=10\n\n# Update the bar\nsketchybar --update\n''\n\n# Or directory example - for complex configurations\n# {\n#   source = ./path/to/sketchybar-config;\n#   recursive = true;\n# }\n", "loc": ["programs", "sketchybar", "config"], "readOnly": false, "title": "programs.sketchybar.config", "type": "null or strings concatenated with \"\\n\" or (submodule)", "descriptionHTML": "<p>The sketchybar configuration. Can be specified as:</p>\n<ol>\n<li>A string containing the configuration content directly</li>\n<li>An attribute set with 'source' pointing to a directory containing\n   the full configuration, and optionally 'recursive = true' to\n   recursively copy all files</li>\n<li>An attribute set with 'text' containing inline configuration</li>\n</ol>\n<p>When using a string or 'text', the appropriate shebang will be\nautomatically added based on configType (bash or lua).</p>\n<p>When using a directory source, it should contain a file named\n\"sketchybarrc\" which serves as the main entry point.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "\"bash\"", "description": "The type of configuration to generate.\nSet to \"bash\" to use the standard bash configuration.\nSet to \"lua\" to use the Lua configuration via SbarLua.", "example": "", "loc": ["programs", "sketchybar", "configType"], "readOnly": false, "title": "programs.sketchybar.configType", "type": "one of \"bash\", \"lua\"", "descriptionHTML": "<p>The type of configuration to generate.</p>\n<p>Set to \"bash\" to use the standard bash configuration.\nSet to \"lua\" to use the Lua configuration via SbarLua.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "false", "description": "Whether to enable sketchybar.", "example": "true", "loc": ["programs", "sketchybar", "enable"], "readOnly": false, "title": "programs.sketchybar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sketchybar.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "ps: [ ]", "description": "The extra Lua packages required for your plugins to work.\nThis option accepts a function that takes a Lua package set as an argument,\nand selects the required Lua packages from this package set.\nSee the example for more info.", "example": "luaPkgs: with luaPkgs; [ luautf8 ]", "loc": ["programs", "sketchybar", "extraLuaPackages"], "readOnly": false, "title": "programs.sketchybar.extraLuaPackages", "type": "function that evaluates to a(n) list of package", "descriptionHTML": "<p>The extra Lua packages required for your plugins to work.\nThis option accepts a function that takes a Lua package set as an argument,\nand selects the required Lua packages from this package set.\nSee the example for more info.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "[ ]", "description": "Extra packages to add to PATH for the sketchybar service.", "example": "[ pkgs.jq ]", "loc": ["programs", "sketchybar", "extraPackages"], "readOnly": false, "title": "programs.sketchybar.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages to add to PATH for the sketchybar service.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "true", "description": "Whether to include common system PATH in the wrapper.\nThis allows sketchybar to access system binaries.", "example": "", "loc": ["programs", "sketchybar", "includeSystemPath"], "readOnly": false, "title": "programs.sketchybar.includeSystemPath", "type": "boolean", "descriptionHTML": "<p>Whether to include common system <code>PATH</code> in the wrapper.\nThis allows sketchybar to access system binaries.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "pkgs.lua5_4", "description": "The lua5_4 package to use. Lua interpreter to use when configType is lua.", "example": "", "loc": ["programs", "sketchybar", "luaPackage"], "readOnly": false, "title": "programs.sketchybar.luaPackage", "type": "null or package", "descriptionHTML": "<p>The lua5_4 package to use. Lua interpreter to use when configType is lua.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "pkgs.sketchybar", "description": "The sketchybar package to use.", "example": "", "loc": ["programs", "sketchybar", "package"], "readOnly": false, "title": "programs.sketchybar.package", "type": "package", "descriptionHTML": "<p>The sketchybar package to use.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "pkgs.sbarlua", "description": "The sbarlua package to use. Required when using a lua configuration.", "example": "", "loc": ["programs", "sketchybar", "sbarLuaPackage"], "readOnly": false, "title": "programs.sketchybar.sbarLuaPackage", "type": "null or package", "descriptionHTML": "<p>The sbarlua package to use. Required when using a lua configuration.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "true", "description": "Whether to enable sketchybar service.", "example": "true", "loc": ["programs", "sketchybar", "service", "enable"], "readOnly": false, "title": "programs.sketchybar.service.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sketchybar service.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "${config.home.homeDirectory}/Library/Logs/sketchybar/sketchybar.err.log", "description": "Absolute path to log all stderr output.", "example": "\"/Users/khaneliman/Library/Logs/sketchybar.log\"", "loc": ["programs", "sketchybar", "service", "errorLogFile"], "readOnly": false, "title": "programs.sketchybar.service.errorLogFile", "type": "null or absolute path or string", "descriptionHTML": "<p>Absolute path to log all stderr output.</p>"}, {"declarations": [{"name": "<programs/sketchybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sketchybar.nix"}], "default": "${config.home.homeDirectory}/Library/Logs/sketchybar/sketchybar.out.log", "description": "Absolute path to log all stdout output.", "example": "\"/Users/khaneliman/Library/Logs/sketchybar.log\"", "loc": ["programs", "sketchybar", "service", "outLogFile"], "readOnly": false, "title": "programs.sketchybar.service.outLogFile", "type": "null or absolute path or string", "descriptionHTML": "<p>Absolute path to log all stdout output.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "null", "description": "The command that gets executed as the source for skim for the\nALT-C keybinding.", "example": "\"fd --type d\"", "loc": ["programs", "skim", "changeDirWidgetCommand"], "readOnly": false, "title": "programs.skim.changeDirWidgetCommand", "type": "null or string", "descriptionHTML": "<p>The command that gets executed as the source for skim for the\nALT-C keybinding.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[ ]", "description": "Command line options for the ALT-C keybinding.", "example": "[\n  \"--preview 'tree -C {} | head -200'\"\n]", "loc": ["programs", "skim", "changeDirWidgetOptions"], "readOnly": false, "title": "programs.skim.changeDirWidgetOptions", "type": "list of string", "descriptionHTML": "<p>Command line options for the ALT-C keybinding.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "null", "description": "The command that gets executed as the default source for skim\nwhen running.", "example": "\"fd --type f\"", "loc": ["programs", "skim", "defaultCommand"], "readOnly": false, "title": "programs.skim.defaultCommand", "type": "null or string", "descriptionHTML": "<p>The command that gets executed as the default source for skim\nwhen running.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[ ]", "description": "Extra command line options given to skim by default.", "example": "[\n  \"--height 40%\"\n  \"--prompt \u27eb\"\n]", "loc": ["programs", "skim", "defaultOptions"], "readOnly": false, "title": "programs.skim.defaultOptions", "type": "list of string", "descriptionHTML": "<p>Extra command line options given to skim by default.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "false", "description": "Whether to enable skim - a command-line fuzzy finder.", "example": "true", "loc": ["programs", "skim", "enable"], "readOnly": false, "title": "programs.skim.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable skim - a command-line fuzzy finder.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "skim", "enableBashIntegration"], "readOnly": false, "title": "programs.skim.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "skim", "enableFishIntegration"], "readOnly": false, "title": "programs.skim.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "skim", "enableZshIntegration"], "readOnly": false, "title": "programs.skim.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "null", "description": "The command that gets executed as the source for skim for the\nCTRL-T keybinding.", "example": "\"fd --type f\"", "loc": ["programs", "skim", "fileWidgetCommand"], "readOnly": false, "title": "programs.skim.fileWidgetCommand", "type": "null or string", "descriptionHTML": "<p>The command that gets executed as the source for skim for the\nCTRL-T keybinding.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[ ]", "description": "Command line options for the CTRL-T keybinding.", "example": "[\n  \"--preview 'head {}'\"\n]", "loc": ["programs", "skim", "fileWidgetOptions"], "readOnly": false, "title": "programs.skim.fileWidgetOptions", "type": "list of string", "descriptionHTML": "<p>Command line options for the CTRL-T keybinding.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "[ ]", "description": "Command line options for the CTRL-R keybinding.", "example": "[\n  \"--tac\"\n  \"--exact\"\n]", "loc": ["programs", "skim", "historyWidgetOptions"], "readOnly": false, "title": "programs.skim.historyWidgetOptions", "type": "list of string", "descriptionHTML": "<p>Command line options for the CTRL-R keybinding.</p>"}, {"declarations": [{"name": "<programs/skim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/skim.nix"}], "default": "pkgs.skim", "description": "The skim package to use.", "example": "", "loc": ["programs", "skim", "package"], "readOnly": false, "title": "programs.skim.package", "type": "package", "descriptionHTML": "<p>The skim package to use.</p>"}, {"declarations": [{"name": "<programs/sm64ex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sm64ex.nix"}], "default": "null", "description": "The path to the Super Mario 64 baserom to extract assets from.", "example": "/home/foo/baserom.us.z64", "loc": ["programs", "sm64ex", "baserom"], "readOnly": false, "title": "programs.sm64ex.baserom", "type": "null or absolute path", "descriptionHTML": "<p>The path to the Super Mario 64 baserom to extract assets from.</p>"}, {"declarations": [{"name": "<programs/sm64ex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sm64ex.nix"}], "default": "false", "description": "Whether to enable sm64ex.", "example": "true", "loc": ["programs", "sm64ex", "enable"], "readOnly": false, "title": "programs.sm64ex.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sm64ex.</p>"}, {"declarations": [{"name": "<programs/sm64ex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sm64ex.nix"}], "default": "null", "description": "Extra flags to pass to the compiler. See\nhttps://github.com/sm64pc/sm64ex/wiki/Build-options\nfor more information.", "example": "[\n  \"BETTERCAMERA=1\"\n  \"NODRAWINGDISTANCE=1\"\n];\n", "loc": ["programs", "sm64ex", "extraCompileFlags"], "readOnly": false, "title": "programs.sm64ex.extraCompileFlags", "type": "null or (list of string)", "descriptionHTML": "<p>Extra flags to pass to the compiler. See\n<a href=\"https://github.com/sm64pc/sm64ex/wiki/Build-options\">https://github.com/sm64pc/sm64ex/wiki/Build-options</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/sm64ex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sm64ex.nix"}], "default": "pkgs.sm64ex", "description": "The sm64ex package to use.", "example": "", "loc": ["programs", "sm64ex", "package"], "readOnly": false, "title": "programs.sm64ex.package", "type": "null or package", "descriptionHTML": "<p>The sm64ex package to use.</p>"}, {"declarations": [{"name": "<programs/sm64ex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sm64ex.nix"}], "default": "us", "description": "Your baserom's region. Note that only \"us\", \"eu\", and \"jp\" are supported.", "example": "jp", "loc": ["programs", "sm64ex", "region"], "readOnly": false, "title": "programs.sm64ex.region", "type": "null or one of \"us\", \"eu\", \"jp\"", "descriptionHTML": "<p>Your baserom's region. Note that only \"us\", \"eu\", and \"jp\" are supported.</p>"}, {"declarations": [{"name": "<programs/sm64ex.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sm64ex.nix"}], "default": "null", "description": "Settings for sm64ex's {file}$XDG_DATA_HOME/sm64pc/sm64config.txt file.", "example": "{\n  fullscreen = false;\n  window_x = 0;\n  window_y = 0;\n  window_w = 1920;\n  window_h = 1080;\n  vsync = 1;\n  texture_filtering = 1;\n  master_volume = 127;\n  music_volume = 127;\n  sfx_volume = 127;\n  env_volume = 127;\n  key_a = [ \"0026\" \"1000\" \"1103\" ];\n  key_b = [ \"0033\" \"1002\" \"1101\" ];\n  key_start = [ \"0039\" \"1006\" \"ffff\" ];\n  key_l = [ \"0034\" \"1007\" \"1104\" ];\n  key_r = [ \"0036\" \"100a\" \"1105\" ];\n  key_z = [ \"0025\" \"1009\" \"1102\" ];\n  key_cup = [ \"100b\" \"ffff\" \"ffff\" ];\n  key_cdown = [ \"100c\" \"ffff\" \"ffff\" ];\n  key_cleft = [ \"100d\" \"ffff\" \"ffff\" ];\n  key_cright = [ \"100e\" \"ffff\" \"ffff\" ];\n  key_stickup = [ \"0011\" \"ffff\" \"ffff\" ];\n  key_stickdown = [ \"001f\" \"ffff\" \"ffff\" ];\n  key_stickleft = [ \"001e\" \"ffff\" \"ffff\" ];\n  key_stickright = [ \"0020\" \"ffff\" \"ffff\" ];\n  stick_deadzone = 16;\n  rumble_strength = 10;\n  skip_intro = 1;\n};\n", "loc": ["programs", "sm64ex", "settings"], "readOnly": false, "title": "programs.sm64ex.settings", "type": "null or (attribute set of (string or signed integer or boolean or list of string))", "descriptionHTML": "<p>Settings for sm64ex's {file}<code>$XDG_DATA_HOME/sm64pc/sm64config.txt</code> file.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "false", "description": "Whether to enable Smug session manager.", "example": "true", "loc": ["programs", "smug", "enable"], "readOnly": false, "title": "programs.smug.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Smug session manager.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "pkgs.smug", "description": "The smug package to use.", "example": "", "loc": ["programs", "smug", "package"], "readOnly": false, "title": "programs.smug.package", "type": "null or package", "descriptionHTML": "<p>The smug package to use.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "{ }", "description": "Attribute set with project configurations.", "example": "", "loc": ["programs", "smug", "projects"], "readOnly": false, "title": "programs.smug.projects", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set with project configurations.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Commands to execute before the tmux-session starts.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "beforeStart"], "readOnly": false, "title": "programs.smug.projects.<name>.beforeStart", "type": "null or (list of string)", "descriptionHTML": "<p>Commands to execute before the tmux-session starts.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Environment Variables to set in session.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "env"], "readOnly": false, "title": "programs.smug.projects.<name>.env", "type": "null or (attribute set of string)", "descriptionHTML": "<p>Environment Variables to set in session.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Root path in filesystem of the smug project. This is where tmux\nchanges its directory to.\nApplication defaults to $HOME.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "root"], "readOnly": false, "title": "programs.smug.projects.<name>.root", "type": "null or string", "descriptionHTML": "<p>Root path in filesystem of the smug project. This is where tmux\nchanges its directory to.</p>\n<p>Application defaults to <code>$HOME</code>.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Commands to execute after the tmux-session is destroyed.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "stop"], "readOnly": false, "title": "programs.smug.projects.<name>.stop", "type": "null or (list of string)", "descriptionHTML": "<p>Commands to execute after the tmux-session is destroyed.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "", "description": "Windows to create in the project session", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows"], "readOnly": false, "title": "programs.smug.projects.<name>.windows", "type": "list of (submodule)", "descriptionHTML": "<p>Windows to create in the project session</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Commands to execute when window starts.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "commands"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.commands", "type": "null or (list of string)", "descriptionHTML": "<p>Commands to execute when window starts.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "", "description": "Layout of window when opening panes.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "layout"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.layout", "type": "one of \"main-horizontal\", \"main-vertical\", \"even-vertical\", \"even-horizontal\", \"tiled\"", "descriptionHTML": "<p>Layout of window when opening panes.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Start window only manually, using the -w arg", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "manual"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.manual", "type": "null or boolean", "descriptionHTML": "<p>Start window only manually, using the -w arg</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "", "description": "Name of the tmux window;", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "name"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.name", "type": "string", "descriptionHTML": "<p>Name of the tmux window;</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Panes to open in a window.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "panes"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.panes", "type": "null or (list of (submodule))", "descriptionHTML": "<p>Panes to open in a window.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Commands to execute when pane starts.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "panes", "*", "commands"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.panes.*.commands", "type": "null or (list of string)", "descriptionHTML": "<p>Commands to execute when pane starts.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Root path of pane. This is relative to the path of the smug project.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "panes", "*", "root"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.panes.*.root", "type": "null or string", "descriptionHTML": "<p>Root path of pane. This is relative to the path of the smug project.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "", "description": "Type of pane.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "panes", "*", "type"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.panes.*.type", "type": "one of \"horizontal\", \"vertical\"", "descriptionHTML": "<p>Type of pane.</p>"}, {"declarations": [{"name": "<programs/smug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/smug.nix"}], "default": "null", "description": "Root path of window. This is relative to the path of the smug project.", "example": "", "loc": ["programs", "smug", "projects", "<name>", "windows", "*", "root"], "readOnly": false, "title": "programs.smug.projects.<name>.windows.*.root", "type": "null or string", "descriptionHTML": "<p>Root path of window. This is relative to the path of the smug project.</p>"}, {"declarations": [{"name": "<programs/spotify-player.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/spotify-player.nix"}], "default": "[ ]", "description": "Configuration written to the actions field of\n{file}$XDG_CONFIG_HOME/spotify-player/keymap.toml.\nSee\nhttps://github.com/aome510/spotify-player/blob/master/docs/config.md#actions\nfor the full list of options.", "example": "[\n  {\n    action = \"GoToArtist\";\n    key_sequence = \"g A\";\n  }\n  {\n    action = \"GoToAlbum\";\n    key_sequence = \"g B\";\n    target = \"PlayingTrack\";\n  }\n  {\n    action = \"ToggleLiked\";\n    key_sequence = \"C-l\";\n  }\n]\n", "loc": ["programs", "spotify-player", "actions"], "readOnly": false, "title": "programs.spotify-player.actions", "type": "list of (TOML value)", "descriptionHTML": "<p>Configuration written to the <code>actions</code> field of\n{file}<code>$XDG_CONFIG_HOME/spotify-player/keymap.toml</code>.</p>\n<p>See\n<a href=\"https://github.com/aome510/spotify-player/blob/master/docs/config.md#actions\">https://github.com/aome510/spotify-player/blob/master/docs/config.md#actions</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/spotify-player.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/spotify-player.nix"}], "default": "false", "description": "Whether to enable spotify-player.", "example": "true", "loc": ["programs", "spotify-player", "enable"], "readOnly": false, "title": "programs.spotify-player.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable spotify-player.</p>"}, {"declarations": [{"name": "<programs/spotify-player.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/spotify-player.nix"}], "default": "[ ]", "description": "Configuration written to the keymaps field of\n{file}$XDG_CONFIG_HOME/spotify-player/keymap.toml.\nSee\nhttps://github.com/aome510/spotify-player/blob/master/docs/config.md#keymaps\nfor the full list of options.", "example": "[\n  {\n    command = \"NextTrack\";\n    key_sequence = \"g n\";\n  }\n  {\n    command = \"PreviousTrack\";\n    key_sequence = \"g p\";\n  }\n  {\n    command = \"Search\";\n    key_sequence = \"C-c C-x /\";\n  }\n  {\n    command = \"ResumePause\";\n    key_sequence = \"M-enter\";\n  }\n  {\n    command = \"None\";\n    key_sequence = \"q\";\n  }\n]\n", "loc": ["programs", "spotify-player", "keymaps"], "readOnly": false, "title": "programs.spotify-player.keymaps", "type": "list of (TOML value)", "descriptionHTML": "<p>Configuration written to the <code>keymaps</code> field of\n{file}<code>$XDG_CONFIG_HOME/spotify-player/keymap.toml</code>.</p>\n<p>See\n<a href=\"https://github.com/aome510/spotify-player/blob/master/docs/config.md#keymaps\">https://github.com/aome510/spotify-player/blob/master/docs/config.md#keymaps</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/spotify-player.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/spotify-player.nix"}], "default": "pkgs.spotify-player", "description": "The spotify-player package to use.", "example": "", "loc": ["programs", "spotify-player", "package"], "readOnly": false, "title": "programs.spotify-player.package", "type": "null or package", "descriptionHTML": "<p>The spotify-player package to use.</p>"}, {"declarations": [{"name": "<programs/spotify-player.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/spotify-player.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/spotify-player/app.toml.\nSee\nhttps://github.com/aome510/spotify-player/blob/master/docs/config.md#general\nfor the full list of options.", "example": "{\n  theme = \"default\";\n  playback_window_position = \"Top\";\n  copy_command = {\n    command = \"wl-copy\";\n    args = [];\n  };\n  device = {\n    audio_cache = false;\n    normalization = false;\n  };\n}\n", "loc": ["programs", "spotify-player", "settings"], "readOnly": false, "title": "programs.spotify-player.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/spotify-player/app.toml</code>.</p>\n<p>See\n<a href=\"https://github.com/aome510/spotify-player/blob/master/docs/config.md#general\">https://github.com/aome510/spotify-player/blob/master/docs/config.md#general</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/spotify-player.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/spotify-player.nix"}], "default": "[ ]", "description": "Configuration written to the themes field of\n{file}$XDG_CONFIG_HOME/spotify-player/theme.toml.\nSee\nhttps://github.com/aome510/spotify-player/blob/master/docs/config.md#themes\nfor the full list of options.", "example": "[\n  {\n    name = \"default2\";\n    palette = {\n      black = \"black\";\n      red = \"red\";\n      green = \"green\";\n      yellow = \"yellow\";\n      blue = \"blue\";\n      magenta = \"magenta\";\n      cyan = \"cyan\";\n      white = \"white\";\n      bright_black = \"bright_black\";\n      bright_red = \"bright_red\";\n      bright_green = \"bright_green\";\n      bright_yellow = \"bright_yellow\";\n      bright_blue = \"bright_blue\";\n      bright_magenta = \"bright_magenta\";\n      bright_cyan = \"bright_cyan\";\n      bright_white = \"bright_white\";\n    };\n    component_style = {\n      block_title = { fg = \"Magenta\"; };\n      border = {};\n      playback_track = { fg = \"Cyan\"; modifiers = [\"Bold\"]; };\n      playback_artists = { fg = \"Cyan\"; modifiers = [\"Bold\"]; };\n      playback_album = { fg = \"Yellow\"; };\n      playback_metadata = { fg = \"BrightBlack\"; };\n      playback_progress_bar = { bg = \"BrightBlack\"; fg = \"Green\"; };\n      current_playing = { fg = \"Green\"; modifiers = [\"Bold\"]; };\n      page_desc = { fg = \"Cyan\"; modifiers = [\"Bold\"]; };\n      table_header = { fg = \"Blue\"; };\n      selection = { modifiers = [\"Bold\" \"Reversed\"]; };\n    };\n  }\n]\n", "loc": ["programs", "spotify-player", "themes"], "readOnly": false, "title": "programs.spotify-player.themes", "type": "list of (TOML value)", "descriptionHTML": "<p>Configuration written to the <code>themes</code> field of\n{file}<code>$XDG_CONFIG_HOME/spotify-player/theme.toml</code>.</p>\n<p>See\n<a href=\"https://github.com/aome510/spotify-player/blob/master/docs/config.md#themes\">https://github.com/aome510/spotify-player/blob/master/docs/config.md#themes</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/sqls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sqls.nix"}], "default": "false", "description": "Whether to enable sqls, a SQL language server written in Go.", "example": "true", "loc": ["programs", "sqls", "enable"], "readOnly": false, "title": "programs.sqls.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sqls, a SQL language server written in Go.</p>"}, {"declarations": [{"name": "<programs/sqls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sqls.nix"}], "default": "pkgs.sqls", "description": "The sqls package to use.", "example": "", "loc": ["programs", "sqls", "package"], "readOnly": false, "title": "programs.sqls.package", "type": "null or package", "descriptionHTML": "<p>The sqls package to use.</p>"}, {"declarations": [{"name": "<programs/sqls.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sqls.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/sqls/config.yml. See\nhttps://github.com/lighttiger2505/sqls#db-configuration\nfor supported values.", "example": "{\n   lowercaseKeywords = true;\n   connections = [\n     {\n       driver = \"mysql\";\n       dataSourceName = \"root:root@tcp(127.0.0.1:13306)/world\";\n     }\n   ];\n}\n", "loc": ["programs", "sqls", "settings"], "readOnly": false, "title": "programs.sqls.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/sqls/config.yml</code>. See\n<a href=\"https://github.com/lighttiger2505/sqls#db-configuration\">https://github.com/lighttiger2505/sqls#db-configuration</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"no\"", "description": "When enabled, a private key that is used during authentication will be\nadded to ssh-agent if it is running (with confirmation enabled if\nset to 'confirm'). The argument must be 'no' (the default), 'yes', 'confirm'\n(optionally followed by a time interval), 'ask' or a time interval (e.g. '1h').", "example": "", "loc": ["programs", "ssh", "addKeysToAgent"], "readOnly": false, "title": "programs.ssh.addKeysToAgent", "type": "string", "descriptionHTML": "<p>When enabled, a private key that is used during authentication will be\nadded to ssh-agent if it is running (with confirmation enabled if\nset to 'confirm'). The argument must be 'no' (the default), 'yes', 'confirm'\n(optionally followed by a time interval), 'ask' or a time interval (e.g. '1h').</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Specifies whether to use compression.", "example": "", "loc": ["programs", "ssh", "compression"], "readOnly": false, "title": "programs.ssh.compression", "type": "boolean", "descriptionHTML": "<p>Specifies whether to use compression.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"no\"", "description": "Configure sharing of multiple sessions over a single network connection.", "example": "", "loc": ["programs", "ssh", "controlMaster"], "readOnly": false, "title": "programs.ssh.controlMaster", "type": "one of \"yes\", \"no\", \"ask\", \"auto\", \"autoask\"", "descriptionHTML": "<p>Configure sharing of multiple sessions over a single network connection.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"~/.ssh/master-%r@%n:%p\"", "description": "Specify path to the control socket used for connection sharing.", "example": "", "loc": ["programs", "ssh", "controlPath"], "readOnly": false, "title": "programs.ssh.controlPath", "type": "string", "descriptionHTML": "<p>Specify path to the control socket used for connection sharing.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"no\"", "description": "Whether control socket should remain open in the background.", "example": "\"10m\"", "loc": ["programs", "ssh", "controlPersist"], "readOnly": false, "title": "programs.ssh.controlPersist", "type": "string", "descriptionHTML": "<p>Whether control socket should remain open in the background.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Whether to enable SSH client configuration.", "example": "true", "loc": ["programs", "ssh", "enable"], "readOnly": false, "title": "programs.ssh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable SSH client configuration.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"\"", "description": "Extra configuration.", "example": "", "loc": ["programs", "ssh", "extraConfig"], "readOnly": false, "title": "programs.ssh.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "{ }", "description": "Extra SSH configuration options that take precedence over any\nhost specific configuration.", "example": "", "loc": ["programs", "ssh", "extraOptionOverrides"], "readOnly": false, "title": "programs.ssh.extraOptionOverrides", "type": "attribute set of string", "descriptionHTML": "<p>Extra SSH configuration options that take precedence over any\nhost specific configuration.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Whether the connection to the authentication agent (if any)\nwill be forwarded to the remote machine.", "example": "", "loc": ["programs", "ssh", "forwardAgent"], "readOnly": false, "title": "programs.ssh.forwardAgent", "type": "boolean", "descriptionHTML": "<p>Whether the connection to the authentication agent (if any)\nwill be forwarded to the remote machine.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Indicates that\n{manpage}ssh(1)\nshould hash host names and addresses when they are added to\nthe known hosts file.", "example": "", "loc": ["programs", "ssh", "hashKnownHosts"], "readOnly": false, "title": "programs.ssh.hashKnownHosts", "type": "boolean", "descriptionHTML": "<p>Indicates that\n{manpage}<code>ssh(1)</code>\nshould hash host names and addresses when they are added to\nthe known hosts file.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "File globs of ssh config files that should be included via the\nInclude directive.\nSee\n{manpage}ssh_config(5)\nfor more information.", "example": "", "loc": ["programs", "ssh", "includes"], "readOnly": false, "title": "programs.ssh.includes", "type": "list of string", "descriptionHTML": "<p>File globs of ssh config files that should be included via the\n<code>Include</code> directive.</p>\n<p>See\n{manpage}<code>ssh_config(5)</code>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "{ }", "description": "Specify per-host settings. Note, if the order of rules matter\nthen use the DAG functions to express the dependencies as\nshown in the example.\nSee\n{manpage}ssh_config(5)\nfor more information.", "example": "{\n  \"john.example.com\" = {\n    hostname = \"example.com\";\n    user = \"john\";\n  };\n  foo = lib.hm.dag.entryBefore [\"john.example.com\"] {\n    hostname = \"example.com\";\n    identityFile = \"/home/john/.ssh/foo_rsa\";\n  };\n};\n", "loc": ["programs", "ssh", "matchBlocks"], "readOnly": false, "title": "programs.ssh.matchBlocks", "type": "DAG of submodule", "descriptionHTML": "<p>Specify per-host settings. Note, if the order of rules matter\nthen use the DAG functions to express the dependencies as\nshown in the example.</p>\n<p>See\n{manpage}<code>ssh_config(5)</code>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies which address family to use when connecting.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "addressFamily"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.addressFamily", "type": "null or one of \"any\", \"inet\", \"inet6\"", "descriptionHTML": "<p>Specifies which address family to use when connecting.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Specifies files from which the user certificate is read.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "certificateFile"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.certificateFile", "type": "(list of string) or null or string", "descriptionHTML": "<p>Specifies files from which the user certificate is read.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "true", "description": "Check the host IP address in the\n{file}known_hosts file.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "checkHostIP"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.checkHostIP", "type": "boolean", "descriptionHTML": "<p>Check the host IP address in the\n{file}<code>known_hosts</code> file.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies whether to use compression. Omitted from the host\nblock when null.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "compression"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.compression", "type": "null or boolean", "descriptionHTML": "<p>Specifies whether to use compression. Omitted from the host\nblock when <code>null</code>.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Specify dynamic port forwardings. See\n{manpage}ssh_config(5) for DynamicForward.", "example": "[ { port = 8080; } ];\n", "loc": ["programs", "ssh", "matchBlocks", "<name>", "dynamicForwards"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.dynamicForwards", "type": "list of (submodule)", "descriptionHTML": "<p>Specify dynamic port forwardings. See\n{manpage}<code>ssh_config(5)</code> for <code>DynamicForward</code>.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"localhost\"", "description": "The address where to bind the port.", "example": "\"example.org\"", "loc": ["programs", "ssh", "matchBlocks", "<name>", "dynamicForwards", "*", "address"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.dynamicForwards.*.address", "type": "string", "descriptionHTML": "<p>The address where to bind the port.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies port number to bind on bind address.", "example": "8080", "loc": ["programs", "ssh", "matchBlocks", "<name>", "dynamicForwards", "*", "port"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.dynamicForwards.*.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Specifies port number to bind on bind address.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "{ }", "description": "Extra configuration options for the host.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "extraOptions"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.extraOptions", "type": "attribute set of string", "descriptionHTML": "<p>Extra configuration options for the host.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Whether the connection to the authentication agent (if any)\nwill be forwarded to the remote machine.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "forwardAgent"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.forwardAgent", "type": "null or boolean", "descriptionHTML": "<p>Whether the connection to the authentication agent (if any)\nwill be forwarded to the remote machine.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Specifies whether X11 connections will be automatically redirected\nover the secure channel and {env}DISPLAY set.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "forwardX11"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.forwardX11", "type": "boolean", "descriptionHTML": "<p>Specifies whether X11 connections will be automatically redirected\nover the secure channel and {env}<code>DISPLAY</code> set.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Specifies whether remote X11 clients will have full access to the\noriginal X11 display.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "forwardX11Trusted"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.forwardX11Trusted", "type": "boolean", "descriptionHTML": "<p>Specifies whether remote X11 clients will have full access to the\noriginal X11 display.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Host pattern used by this conditional block.\nSee\n{manpage}ssh_config(5)\nfor Host block details.\nThis option is ignored if\n{option}ssh.matchBlocks.*.match\nif defined.", "example": "\"*.example.org\"", "loc": ["programs", "ssh", "matchBlocks", "<name>", "host"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.host", "type": "null or string", "descriptionHTML": "<p><code>Host</code> pattern used by this conditional block.\nSee\n{manpage}<code>ssh_config(5)</code>\nfor <code>Host</code> block details.\nThis option is ignored if\n{option}<code>ssh.matchBlocks.*.match</code>\nif defined.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies the real host name to log into.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "hostname"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.hostname", "type": "null or string", "descriptionHTML": "<p>Specifies the real host name to log into.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "false", "description": "Specifies that ssh should only use the authentication\nidentity explicitly configured in the\n{file}~/.ssh/config files or passed on the\nssh command-line, even if {command}ssh-agent\noffers more identities.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "identitiesOnly"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.identitiesOnly", "type": "boolean", "descriptionHTML": "<p>Specifies that ssh should only use the authentication\nidentity explicitly configured in the\n{file}<code>~/.ssh/config</code> files or passed on the\nssh command-line, even if {command}<code>ssh-agent</code>\noffers more identities.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Specifies the location of the ssh identity agent.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "identityAgent"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.identityAgent", "type": "(list of string) or null or string", "descriptionHTML": "<p>Specifies the location of the ssh identity agent.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Specifies files from which the user identity is read.\nIdentities will be tried in the given order.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "identityFile"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.identityFile", "type": "(list of string) or null or string", "descriptionHTML": "<p>Specifies files from which the user identity is read.\nIdentities will be tried in the given order.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Specify local port forwardings. See\n{manpage}ssh_config(5) for LocalForward.", "example": "[\n  {\n    bind.port = 8080;\n    host.address = \"10.0.0.13\";\n    host.port = 80;\n  }\n];\n", "loc": ["programs", "ssh", "matchBlocks", "<name>", "localForwards"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.localForwards", "type": "list of (submodule)", "descriptionHTML": "<p>Specify local port forwardings. See\n{manpage}<code>ssh_config(5)</code> for <code>LocalForward</code>.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"localhost\"", "description": "The address where to bind the port.", "example": "\"example.org\"", "loc": ["programs", "ssh", "matchBlocks", "<name>", "localForwards", "*", "bind", "address"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.localForwards.*.bind.address", "type": "string", "descriptionHTML": "<p>The address where to bind the port.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies port number to bind on bind address.", "example": "8080", "loc": ["programs", "ssh", "matchBlocks", "<name>", "localForwards", "*", "bind", "port"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.localForwards.*.bind.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Specifies port number to bind on bind address.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "The address where to forward the traffic to.", "example": "\"example.org\"", "loc": ["programs", "ssh", "matchBlocks", "<name>", "localForwards", "*", "host", "address"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.localForwards.*.host.address", "type": "null or string", "descriptionHTML": "<p>The address where to forward the traffic to.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies port number to forward the traffic to.", "example": "80", "loc": ["programs", "ssh", "matchBlocks", "<name>", "localForwards", "*", "host", "port"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.localForwards.*.host.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Specifies port number to forward the traffic to.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Match block conditions used by this block. See\n{manpage}ssh_config(5)\nfor Match block details.\nThis option takes precedence over\n{option}ssh.matchBlocks.*.host\nif defined.", "example": "''\n  host <hostname> canonical\n  host <hostname> exec \"ping -c1 -q 192.168.17.1\"''", "loc": ["programs", "ssh", "matchBlocks", "<name>", "match"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.match", "type": "null or string", "descriptionHTML": "<p><code>Match</code> block conditions used by this block. See\n{manpage}<code>ssh_config(5)</code>\nfor <code>Match</code> block details.\nThis option takes precedence over\n{option}<code>ssh.matchBlocks.*.host</code>\nif defined.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies port number to connect on remote host.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "port"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Specifies port number to connect on remote host.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "The command to use to connect to the server.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "proxyCommand"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.proxyCommand", "type": "null or string", "descriptionHTML": "<p>The command to use to connect to the server.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "The proxy host to use to connect to the server.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "proxyJump"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.proxyJump", "type": "null or string", "descriptionHTML": "<p>The proxy host to use to connect to the server.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Specify remote port forwardings. See\n{manpage}ssh_config(5) for RemoteForward.", "example": "[\n  {\n    bind.port = 8080;\n    host.address = \"10.0.0.13\";\n    host.port = 80;\n  }\n];\n", "loc": ["programs", "ssh", "matchBlocks", "<name>", "remoteForwards"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.remoteForwards", "type": "list of (submodule)", "descriptionHTML": "<p>Specify remote port forwardings. See\n{manpage}<code>ssh_config(5)</code> for <code>RemoteForward</code>.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"localhost\"", "description": "The address where to bind the port.", "example": "\"example.org\"", "loc": ["programs", "ssh", "matchBlocks", "<name>", "remoteForwards", "*", "bind", "address"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.remoteForwards.*.bind.address", "type": "string", "descriptionHTML": "<p>The address where to bind the port.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies port number to bind on bind address.", "example": "8080", "loc": ["programs", "ssh", "matchBlocks", "<name>", "remoteForwards", "*", "bind", "port"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.remoteForwards.*.bind.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Specifies port number to bind on bind address.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "The address where to forward the traffic to.", "example": "\"example.org\"", "loc": ["programs", "ssh", "matchBlocks", "<name>", "remoteForwards", "*", "host", "address"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.remoteForwards.*.host.address", "type": "null or string", "descriptionHTML": "<p>The address where to forward the traffic to.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies port number to forward the traffic to.", "example": "80", "loc": ["programs", "ssh", "matchBlocks", "<name>", "remoteForwards", "*", "host", "port"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.remoteForwards.*.host.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Specifies port number to forward the traffic to.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "[ ]", "description": "Environment variables to send from the local host to the\nserver.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "sendEnv"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.sendEnv", "type": "list of string", "descriptionHTML": "<p>Environment variables to send from the local host to the\nserver.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "3", "description": "Sets the number of server alive messages which may be sent\nwithout SSH receiving any messages back from the server.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "serverAliveCountMax"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.serverAliveCountMax", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Sets the number of server alive messages which may be sent\nwithout SSH receiving any messages back from the server.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "0", "description": "Set timeout in seconds after which response will be requested.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "serverAliveInterval"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.serverAliveInterval", "type": "signed integer", "descriptionHTML": "<p>Set timeout in seconds after which response will be requested.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "{ }", "description": "Environment variables and their value to send to the server.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "setEnv"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.setEnv", "type": "attribute set of (string or absolute path or signed integer or floating point number)", "descriptionHTML": "<p>Environment variables and their value to send to the server.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "Specifies the user to log in as.", "example": "", "loc": ["programs", "ssh", "matchBlocks", "<name>", "user"], "readOnly": false, "title": "programs.ssh.matchBlocks.<name>.user", "type": "null or string", "descriptionHTML": "<p>Specifies the user to log in as.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "null", "description": "The openssh package to use. By default, the client provided by your system is used.", "example": "", "loc": ["programs", "ssh", "package"], "readOnly": false, "title": "programs.ssh.package", "type": "null or package", "descriptionHTML": "<p>The openssh package to use. By default, the client provided by your system is used.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "3", "description": "Sets the default number of server alive messages which may be\nsent without SSH receiving any messages back from the server.", "example": "", "loc": ["programs", "ssh", "serverAliveCountMax"], "readOnly": false, "title": "programs.ssh.serverAliveCountMax", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Sets the default number of server alive messages which may be\nsent without SSH receiving any messages back from the server.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "0", "description": "Set default timeout in seconds after which response will be requested.", "example": "", "loc": ["programs", "ssh", "serverAliveInterval"], "readOnly": false, "title": "programs.ssh.serverAliveInterval", "type": "signed integer", "descriptionHTML": "<p>Set default timeout in seconds after which response will be requested.</p>"}, {"declarations": [{"name": "<programs/ssh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/ssh.nix"}], "default": "\"~/.ssh/known_hosts\"", "description": "Specifies one or more files to use for the user host key\ndatabase, separated by whitespace. The default is\n{file}~/.ssh/known_hosts.", "example": "", "loc": ["programs", "ssh", "userKnownHostsFile"], "readOnly": false, "title": "programs.ssh.userKnownHostsFile", "type": "string", "descriptionHTML": "<p>Specifies one or more files to use for the user host key\ndatabase, separated by whitespace. The default is\n{file}<code>~/.ssh/known_hosts</code>.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "false", "description": "Whether to enable starship.", "example": "true", "loc": ["programs", "starship", "enable"], "readOnly": false, "title": "programs.starship.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable starship.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "starship", "enableBashIntegration"], "readOnly": false, "title": "programs.starship.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "starship", "enableFishIntegration"], "readOnly": false, "title": "programs.starship.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "true", "description": "Only enable starship when the shell is interactive. This option is only\nvalid for the Fish shell.\nSome plugins require this to be set to false to function correctly.", "example": "", "loc": ["programs", "starship", "enableInteractive"], "readOnly": false, "title": "programs.starship.enableInteractive", "type": "boolean", "descriptionHTML": "<p>Only enable starship when the shell is interactive. This option is only\nvalid for the Fish shell.</p>\n<p>Some plugins require this to be set to <code>false</code> to function correctly.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "[](#opt-home.shell.enableIonIntegration)", "description": "Whether to enable Ion integration.", "example": "false", "loc": ["programs", "starship", "enableIonIntegration"], "readOnly": false, "title": "programs.starship.enableIonIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Ion integration.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "starship", "enableNushellIntegration"], "readOnly": false, "title": "programs.starship.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "false", "description": "The TransientPrompt feature of Starship replaces previous prompts with a\ncustom string. This is only a valid option for the Fish shell.\nFor documentation on how to change the default replacement string and\nfor more information visit\nhttps://starship.rs/advanced-config/#transientprompt-and-transientrightprompt-in-cmd", "example": "", "loc": ["programs", "starship", "enableTransience"], "readOnly": false, "title": "programs.starship.enableTransience", "type": "boolean", "descriptionHTML": "<p>The TransientPrompt feature of Starship replaces previous prompts with a\ncustom string. This is only a valid option for the Fish shell.</p>\n<p>For documentation on how to change the default replacement string and\nfor more information visit\nhttps://starship.rs/advanced-config/#transientprompt-and-transientrightprompt-in-cmd</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "starship", "enableZshIntegration"], "readOnly": false, "title": "programs.starship.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "pkgs.starship", "description": "The starship package to use.", "example": "", "loc": ["programs", "starship", "package"], "readOnly": false, "title": "programs.starship.package", "type": "package", "descriptionHTML": "<p>The starship package to use.</p>"}, {"declarations": [{"name": "<programs/starship.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/starship.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/starship.toml.\nSee https://starship.rs/config/ for the full list\nof options.", "example": "{\n  add_newline = false;\n  format = lib.concatStrings [\n    \"$line_break\"\n    \"$package\"\n    \"$line_break\"\n    \"$character\"\n  ];\n  scan_timeout = 10;\n  character = {\n    success_symbol = \"\u279c\";\n    error_symbol = \"\u279c\";\n  };\n}\n", "loc": ["programs", "starship", "settings"], "readOnly": false, "title": "programs.starship.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/starship.toml</code>.</p>\n<p>See <a href=\"https://starship.rs/config/\">https://starship.rs/config/</a> for the full list\nof options.</p>"}, {"declarations": [{"name": "<programs/streamlink.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/streamlink.nix"}], "default": "false", "description": "Whether to enable streamlink.", "example": "true", "loc": ["programs", "streamlink", "enable"], "readOnly": false, "title": "programs.streamlink.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable streamlink.</p>"}, {"declarations": [{"name": "<programs/streamlink.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/streamlink.nix"}], "default": "pkgs.streamlink", "description": "The streamlink package to use.", "example": "", "loc": ["programs", "streamlink", "package"], "readOnly": false, "title": "programs.streamlink.package", "type": "null or package", "descriptionHTML": "<p>The streamlink package to use.</p>"}, {"declarations": [{"name": "<programs/streamlink.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/streamlink.nix"}], "default": "{ }", "description": "Streamlink plugins.\nIf a source is set, the custom plugin will be linked to the data directory.\nAdditional configuration specific to the plugin, if defined, will be\nwritten to the config directory, and override global settings.", "example": "{\n  custom_plugin = {\n    src = ./custom_plugin.py;\n    settings = {\n      quiet = true;\n    };\n  };\n}\n", "loc": ["programs", "streamlink", "plugins"], "readOnly": false, "title": "programs.streamlink.plugins", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Streamlink plugins.</p>\n<p>If a source is set, the custom plugin will be linked to the data directory.</p>\n<p>Additional configuration specific to the plugin, if defined, will be\nwritten to the config directory, and override global settings.</p>"}, {"declarations": [{"name": "<programs/streamlink.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/streamlink.nix"}], "default": "{ }", "description": "Configuration for the specific plugin, written to\n{file}$XDG_CONFIG_HOME/streamlink/config.&lt;name&gt; (linux) or\n{file}Library/Application Support/streamlink/config.&lt;name&gt; (darwin).", "example": "{\n  quiet = true;\n}\n", "loc": ["programs", "streamlink", "plugins", "<name>", "settings"], "readOnly": false, "title": "programs.streamlink.plugins.<name>.settings", "type": "attribute set of (boolean or signed integer or floating point number or string or list of (signed integer or floating point number or string))", "descriptionHTML": "<p>Configuration for the specific plugin, written to\n{file}<code>$XDG_CONFIG_HOME/streamlink/config.&lt;name&gt;</code> (linux) or\n{file}<code>Library/Application Support/streamlink/config.&lt;name&gt;</code> (darwin).</p>"}, {"declarations": [{"name": "<programs/streamlink.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/streamlink.nix"}], "default": "null", "description": "Source of the custom plugin. The value should be a path to the\nplugin file, or the text of the plugin code. Will be linked to\n{file}$XDG_DATA_HOME/streamlink/plugins/&lt;name&gt;.py (linux) or\n{file}Library/Application Support/streamlink/plugins/&lt;name&gt;.py (darwin).", "example": "./custom_plugin.py", "loc": ["programs", "streamlink", "plugins", "<name>", "src"], "readOnly": false, "title": "programs.streamlink.plugins.<name>.src", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Source of the custom plugin. The value should be a path to the\nplugin file, or the text of the plugin code. Will be linked to\n{file}<code>$XDG_DATA_HOME/streamlink/plugins/&lt;name&gt;.py</code> (linux) or\n{file}<code>Library/Application Support/streamlink/plugins/&lt;name&gt;.py</code> (darwin).</p>"}, {"declarations": [{"name": "<programs/streamlink.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/streamlink.nix"}], "default": "{ }", "description": "Global configuration options for streamlink. It will be written to\n{file}$XDG_CONFIG_HOME/streamlink/config (linux) or\n{file}Library/Application Support/streamlink/config (darwin).", "example": "{\n  player = \"${pkgs.mpv}/bin/mpv\";\n  player-args = \"--cache 2048\";\n  player-no-close = true;\n}\n", "loc": ["programs", "streamlink", "settings"], "readOnly": false, "title": "programs.streamlink.settings", "type": "attribute set of (boolean or signed integer or floating point number or string or list of (signed integer or floating point number or string))", "descriptionHTML": "<p>Global configuration options for streamlink. It will be written to\n{file}<code>$XDG_CONFIG_HOME/streamlink/config</code> (linux) or\n{file}<code>Library/Application Support/streamlink/config</code> (darwin).</p>"}, {"declarations": [{"name": "<programs/superfile.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/superfile.nix"}], "default": "false", "description": "Whether to enable superfile - Pretty fancy and modern terminal file manager.", "example": "true", "loc": ["programs", "superfile", "enable"], "readOnly": false, "title": "programs.superfile.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable superfile - Pretty fancy and modern terminal file manager.</p>"}, {"declarations": [{"name": "<programs/superfile.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/superfile.nix"}], "default": "{ }", "description": "Hotkey configuration written to {file}$XDG_CONFIG_HOME/superfile/hotkeys.toml\n(linux) or {file}Library/Application Support/superfile/hotkeys.toml (darwin), See\nhttps://superfile.netlify.app/configure/custom-hotkeys/ for supported values.", "example": "confirm = [\n  \"enter\"\n  \"right\"\n  \"l\"\n];\n", "loc": ["programs", "superfile", "hotkeys"], "readOnly": false, "title": "programs.superfile.hotkeys", "type": "TOML value", "descriptionHTML": "<p>Hotkey configuration written to {file}<code>$XDG_CONFIG_HOME/superfile/hotkeys.toml</code>\n(linux) or {file}<code>Library/Application Support/superfile/hotkeys.toml</code> (darwin), See\n<a href=\"https://superfile.netlify.app/configure/custom-hotkeys/\">https://superfile.netlify.app/configure/custom-hotkeys/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/superfile.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/superfile.nix"}], "default": "pkgs.exiftool", "description": "The exiftool package to use.", "example": "", "loc": ["programs", "superfile", "metadataPackage"], "readOnly": false, "title": "programs.superfile.metadataPackage", "type": "null or package", "descriptionHTML": "<p>The exiftool package to use.</p>"}, {"declarations": [{"name": "<programs/superfile.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/superfile.nix"}], "default": "pkgs.superfile", "description": "The superfile package to use.", "example": "", "loc": ["programs", "superfile", "package"], "readOnly": false, "title": "programs.superfile.package", "type": "null or package", "descriptionHTML": "<p>The superfile package to use.</p>"}, {"declarations": [{"name": "<programs/superfile.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/superfile.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/superfile/config.toml\n(linux) or {file}Library/Application Support/superfile/config.toml (darwin), See\nhttps://superfile.netlify.app/configure/superfile-config/ for supported values.", "example": "theme = \"catppuccin-frappe\";\ndefault_sort_type = 0;\ntransparent_background = false;\n", "loc": ["programs", "superfile", "settings"], "readOnly": false, "title": "programs.superfile.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/superfile/config.toml</code>\n(linux) or {file}<code>Library/Application Support/superfile/config.toml</code> (darwin), See\n<a href=\"https://superfile.netlify.app/configure/superfile-config/\">https://superfile.netlify.app/configure/superfile-config/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/superfile.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/superfile.nix"}], "default": "{ }", "description": "Theme files written to {file}$XDG_CONFIG_HOME/superfile/theme/\n(linux) or {file}Library/Application Support/superfile/theme/ (darwin), See\nhttps://superfile.netlify.app/configure/custom-theme/ for supported values.", "example": "myTheme = {\n  code_syntax_highlight = \"catppuccin-latte\";\n\n  file_panel_border = \"#101010\";\n  sidebar_border = \"#101011\";\n  footer_border = \"#101012\";\n\n  gradient_color = [\n    \"#101013\"\n    \"#101014\"\n  ];\n\n  # ...\n};\nmyOtherFavoriteTheme = {\n  code_syntax_highlight = \"catppuccin-mocha\";\n\n  file_panel_border = \"#505050\";\n  sidebar_border = \"#505051\";\n  footer_border = \"#505052\";\n\n  gradient_color = [\n    \"#505053\"\n    \"#505054\"\n  ];\n\n  # ...\n};\n", "loc": ["programs", "superfile", "themes"], "readOnly": false, "title": "programs.superfile.themes", "type": "attribute set of (TOML value or absolute path)", "descriptionHTML": "<p>Theme files written to {file}<code>$XDG_CONFIG_HOME/superfile/theme/</code>\n(linux) or {file}<code>Library/Application Support/superfile/theme/</code> (darwin), See\n<a href=\"https://superfile.netlify.app/configure/custom-theme/\">https://superfile.netlify.app/configure/custom-theme/</a> for supported values.</p>"}, {"declarations": [{"name": "<programs/sway-easyfocus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sway-easyfocus.nix"}], "default": "false", "description": "Whether to enable sway-easyfocus.", "example": "true", "loc": ["programs", "sway-easyfocus", "enable"], "readOnly": false, "title": "programs.sway-easyfocus.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sway-easyfocus.</p>"}, {"declarations": [{"name": "<programs/sway-easyfocus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sway-easyfocus.nix"}], "default": "pkgs.sway-easyfocus", "description": "The sway-easyfocus package to use.", "example": "", "loc": ["programs", "sway-easyfocus", "package"], "readOnly": false, "title": "programs.sway-easyfocus.package", "type": "null or package", "descriptionHTML": "<p>The sway-easyfocus package to use.</p>"}, {"declarations": [{"name": "<programs/sway-easyfocus.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/sway-easyfocus.nix"}], "default": "{ }", "description": "Configuration settings for sway-easyfocus. All available options can be found here:\nhttps://github.com/edzdez/sway-easyfocus?tab=readme-ov-file#config-file.", "example": "{\n  chars = \"fjghdkslaemuvitywoqpcbnxz\";\n  focused_background_color = \"285577\";\n  focused_background_opacity = 1.0;\n  focused_text_color = \"ffffff\";\n  font_family = \"monospace\";\n  font_size = \"medium\";\n  font_weight = \"bold\";\n  window_background_color = \"d1f21\";\n  window_background_opacity = 0.2;\n}", "loc": ["programs", "sway-easyfocus", "settings"], "readOnly": false, "title": "programs.sway-easyfocus.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration settings for sway-easyfocus. All available options can be found here:\n<a href=\"https://github.com/edzdez/sway-easyfocus?tab=readme-ov-file#config-file\">https://github.com/edzdez/sway-easyfocus?tab=readme-ov-file#config-file</a>.</p>"}, {"declarations": [{"name": "<programs/swayimg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayimg.nix"}], "default": "false", "description": "Whether to enable swayimg.", "example": "true", "loc": ["programs", "swayimg", "enable"], "readOnly": false, "title": "programs.swayimg.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable swayimg.</p>"}, {"declarations": [{"name": "<programs/swayimg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayimg.nix"}], "default": "pkgs.swayimg", "description": "The swayimg package to use.", "example": "", "loc": ["programs", "swayimg", "package"], "readOnly": false, "title": "programs.swayimg.package", "type": "package", "descriptionHTML": "<p>The swayimg package to use.</p>"}, {"declarations": [{"name": "<programs/swayimg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayimg.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/swayimg/config. See https://github.com/artemsen/swayimg/blob/master/extra/swayimgrc for a list of available options.", "example": "{\n  viewer = {\n    window = \"#10000010\";\n    scale = \"fill\";\n  };\n  \"info.viewer\" = {\n    top_left = \"+name,+format\";\n  };\n  \"keys.viewer\" = {\n    \"Shift+r\" = \"rand_file\";\n  };\n}\n", "loc": ["programs", "swayimg", "settings"], "readOnly": false, "title": "programs.swayimg.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/swayimg/config</code>. See <a href=\"https://github.com/artemsen/swayimg/blob/master/extra/swayimgrc\">https://github.com/artemsen/swayimg/blob/master/extra/swayimgrc</a> for a list of available options.</p>"}, {"declarations": [{"name": "<programs/swaylock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swaylock.nix"}], "default": "true  if state version < 23.05 and settings \u2260 { },\nfalse otherwise\n", "description": "Whether to enable swaylock.\nNote that PAM must be configured to enable swaylock to perform\nauthentication. The package installed through home-manager\nwill not be able to unlock the session without this\nconfiguration.\nOn NixOS, this is by default enabled with the sway module, but\nfor other compositors it can currently be enabled using:\nnix\nsecurity.pam.services.swaylock = {};", "example": "true", "loc": ["programs", "swaylock", "enable"], "readOnly": false, "title": "programs.swaylock.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable swaylock.</p>\n<p>Note that PAM must be configured to enable swaylock to perform\nauthentication. The package installed through home-manager\nwill <em>not</em> be able to unlock the session without this\nconfiguration.</p>\n<p>On NixOS, this is by default enabled with the sway module, but\nfor other compositors it can currently be enabled using:</p>\n<p><code>nix\nsecurity.pam.services.swaylock = {};</code></p>"}, {"declarations": [{"name": "<programs/swaylock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swaylock.nix"}], "default": "pkgs.swaylock", "description": "The swaylock package to use.", "example": "", "loc": ["programs", "swaylock", "package"], "readOnly": false, "title": "programs.swaylock.package", "type": "null or package", "descriptionHTML": "<p>The swaylock package to use.</p>"}, {"declarations": [{"name": "<programs/swaylock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swaylock.nix"}], "default": "{ }", "description": "Default arguments to {command}swaylock. An empty set\ndisables configuration generation.", "example": "{\n  color = \"808080\";\n  font-size = 24;\n  indicator-idle-visible = false;\n  indicator-radius = 100;\n  line-color = \"ffffff\";\n  show-failed-attempts = true;\n}", "loc": ["programs", "swaylock", "settings"], "readOnly": false, "title": "programs.swaylock.settings", "type": "attribute set of (boolean or floating point number or signed integer or absolute path or string)", "descriptionHTML": "<p>Default arguments to {command}<code>swaylock</code>. An empty set\ndisables configuration generation.</p>"}, {"declarations": [{"name": "<programs/swayr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayr.nix"}], "default": "false", "description": "Whether to enable the swayr service.", "example": "true", "loc": ["programs", "swayr", "enable"], "readOnly": false, "title": "programs.swayr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the swayr service.</p>"}, {"declarations": [{"name": "<programs/swayr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayr.nix"}], "default": "\"\"", "description": "Extra configuration lines to append to the swayr\nconfiguration file.", "example": "", "loc": ["programs", "swayr", "extraConfig"], "readOnly": false, "title": "programs.swayr.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to append to the swayr\nconfiguration file.</p>"}, {"declarations": [{"name": "<programs/swayr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayr.nix"}], "default": "pkgs.swayr", "description": "The swayr package to use.", "example": "", "loc": ["programs", "swayr", "package"], "readOnly": false, "title": "programs.swayr.package", "type": "package", "descriptionHTML": "<p>The swayr package to use.</p>"}, {"declarations": [{"name": "<programs/swayr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayr.nix"}], "default": "{ }", "description": "Configuration included in config.toml.\nFor available options see https://git.sr.ht/~tsdh/swayr#swayr-configuration", "example": "menu = {\n  executable = \"${pkgs.wofi}/bin/wofi\";\n  args = [\n    \"--show=dmenu\"\n    \"--allow-markup\"\n    \"--allow-images\"\n    \"--insensitive\"\n    \"--cache-file=/dev/null\"\n    \"--parse-search\"\n    \"--height=40%\"\n    \"--prompt={prompt}\"\n  ];\n};\n\nformat = {\n  output_format = \"{indent}<b>Output {name}</b>    <span alpha=\\\"20000\\\">({id})</span>\";\n  workspace_format = \"{indent}<b>Workspace {name} [{layout}]</b> on output {output_name}    <span alpha=\\\"20000\\\">({id})</span>\";\n  container_format = \"{indent}<b>Container [{layout}]</b> <i>{marks}</i> on workspace {workspace_name}    <span alpha=\\\"20000\\\">({id})</span>\";\n  window_format = \"img:{app_icon}:text:{indent}<i>{app_name}</i> \u2014 {urgency_start}<b>\u201c{title}\u201d</b>{urgency_end} <i>{marks}</i> on workspace {workspace_name} / {output_name}    <span alpha=\\\"20000\\\">({id})</span>\";\n  indent = \"    \";\n  urgency_start = \"<span background=\\\"darkred\\\" foreground=\\\"yellow\\\">\";\n  urgency_end = \"</span>\";\n  html_escape = true;\n};\n\nlayout = {\n  auto_tile = false;\n  auto_tile_min_window_width_per_output_width = [\n    [ 800 400 ]\n    [ 1024 500 ]\n    [ 1280 600 ]\n    [ 1400 680 ]\n    [ 1440 700 ]\n    [ 1600 780 ]\n    [ 1680 780 ]\n    [ 1920 920 ]\n    [ 2048 980 ]\n    [ 2560 1000 ]\n    [ 3440 1200 ]\n    [ 3840 1280 ]\n    [ 4096 1400 ]\n    [ 4480 1600 ]\n    [ 7680 2400 ]\n  ];\n};\n\nfocus = {\n  lockin_delay = 750;\n};\n\nmisc = {\n  seq_inhibit = false;\n};\n", "loc": ["programs", "swayr", "settings"], "readOnly": false, "title": "programs.swayr.settings", "type": "null or TOML value", "descriptionHTML": "<p>Configuration included in <code>config.toml</code>.\nFor available options see <a href=\"https://git.sr.ht/~tsdh/swayr#swayr-configuration\">https://git.sr.ht/~tsdh/swayr#swayr-configuration</a></p>"}, {"declarations": [{"name": "<programs/swayr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayr.nix"}], "default": "false", "description": "Whether to enable swayr systemd integration.", "example": "true", "loc": ["programs", "swayr", "systemd", "enable"], "readOnly": false, "title": "programs.swayr.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable swayr systemd integration.</p>"}, {"declarations": [{"name": "<programs/swayr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/swayr.nix"}], "default": "\"graphical-session.target\"", "description": "Systemd target to bind to.", "example": "", "loc": ["programs", "swayr", "systemd", "target"], "readOnly": false, "title": "programs.swayr.systemd.target", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<programs/taskwarrior.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/taskwarrior.nix"}], "default": "null", "description": "Either one of the default provided theme as string, or a\npath to a theme configuration file.", "example": "\"dark-blue-256\"", "loc": ["programs", "taskwarrior", "colorTheme"], "readOnly": false, "title": "programs.taskwarrior.colorTheme", "type": "null or string or absolute path", "descriptionHTML": "<p>Either one of the default provided theme as string, or a\npath to a theme configuration file.</p>"}, {"declarations": [{"name": "<programs/taskwarrior.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/taskwarrior.nix"}], "default": "{ }", "description": "Key-value configuration written to\n{file}$XDG_CONFIG_HOME/task/taskrc.", "example": "{\n  confirmation = false;\n  report.minimal.filter = \"status:pending\";\n  report.active.columns = [ \"id\" \"start\" \"entry.age\" \"priority\" \"project\" \"due\" \"description\" ];\n  report.active.labels  = [ \"ID\" \"Started\" \"Age\" \"Priority\" \"Project\" \"Due\" \"Description\" ];\n  taskd = {\n    certificate = \"/path/to/cert\";\n    key = \"/path/to/key\";\n    ca = \"/path/to/ca\";\n    server = \"host.domain:53589\";\n    credentials = \"Org/First Last/cf31f287-ee9e-43a8-843e-e8bbd5de4294\";\n  };\n}\n", "loc": ["programs", "taskwarrior", "config"], "readOnly": false, "title": "programs.taskwarrior.config", "type": "attribute set of anything", "descriptionHTML": "<p>Key-value configuration written to\n{file}<code>$XDG_CONFIG_HOME/task/taskrc</code>.</p>"}, {"declarations": [{"name": "<programs/taskwarrior.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/taskwarrior.nix"}], "default": "\"$XDG_DATA_HOME/task\"", "description": "Location where Task Warrior will store its data.\nHome Manager will attempt to create this directory.", "example": "", "loc": ["programs", "taskwarrior", "dataLocation"], "readOnly": false, "title": "programs.taskwarrior.dataLocation", "type": "string", "descriptionHTML": "<p>Location where Task Warrior will store its data.</p>\n<p>Home Manager will attempt to create this directory.</p>"}, {"declarations": [{"name": "<programs/taskwarrior.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/taskwarrior.nix"}], "default": "false", "description": "Whether to enable Task Warrior.", "example": "true", "loc": ["programs", "taskwarrior", "enable"], "readOnly": false, "title": "programs.taskwarrior.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Task Warrior.</p>"}, {"declarations": [{"name": "<programs/taskwarrior.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/taskwarrior.nix"}], "default": "\"\"", "description": "Additional content written at the end of\n{file}$XDG_CONFIG_HOME/task/taskrc.", "example": "", "loc": ["programs", "taskwarrior", "extraConfig"], "readOnly": false, "title": "programs.taskwarrior.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional content written at the end of\n{file}<code>$XDG_CONFIG_HOME/task/taskrc</code>.</p>"}, {"declarations": [{"name": "<programs/taskwarrior.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/taskwarrior.nix"}], "default": "pkgs.taskwarrior", "description": "The taskwarrior package to use.", "example": "pkgs.taskwarrior3", "loc": ["programs", "taskwarrior", "package"], "readOnly": false, "title": "programs.taskwarrior.package", "type": "null or package", "descriptionHTML": "<p>The taskwarrior package to use.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "false", "description": "Whether to enable Tealdeer.", "example": "true", "loc": ["programs", "tealdeer", "enable"], "readOnly": false, "title": "programs.tealdeer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Tealdeer.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "true", "description": "Whether to enable Auto updates.", "example": "false", "loc": ["programs", "tealdeer", "enableAutoUpdates"], "readOnly": false, "title": "programs.tealdeer.enableAutoUpdates", "type": "boolean", "descriptionHTML": "<p>Whether to enable Auto updates.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "pkgs.tealdeer", "description": "The tealdeer package to use.", "example": "", "loc": ["programs", "tealdeer", "package"], "readOnly": false, "title": "programs.tealdeer.package", "type": "package", "descriptionHTML": "<p>The tealdeer package to use.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "null", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/tealdeer/config.toml on Linux or\n{file}$HOME/Library/Application Support/tealdeer/config.toml on Darwin.\nSee https://tealdeer-rs.github.io/tealdeer/config.html for more information.", "example": "{\n  display = {\n    compact = false;\n    use_pager = true;\n  };\n  updates = {\n    auto_update = false;\n  };\n};\n", "loc": ["programs", "tealdeer", "settings"], "readOnly": false, "title": "programs.tealdeer.settings", "type": "null or (TOML value)", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/tealdeer/config.toml</code> on Linux or\n{file}<code>$HOME/Library/Application Support/tealdeer/config.toml</code> on Darwin.\nSee <a href=\"https://tealdeer-rs.github.io/tealdeer/config.html\">https://tealdeer-rs.github.io/tealdeer/config.html</a> for more information.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "{ }", "description": "Tealdeer can refresh the cache automatically when it is outdated.\nThis behavior can be configured in the updates section.", "example": "", "loc": ["programs", "tealdeer", "settings", "updates"], "readOnly": false, "title": "programs.tealdeer.settings.updates", "type": "submodule", "descriptionHTML": "<p>Tealdeer can refresh the cache automatically when it is outdated.\nThis behavior can be configured in the updates section.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "false", "description": "Whether to enable auto-update.", "example": "true", "loc": ["programs", "tealdeer", "settings", "updates", "auto_update"], "readOnly": false, "title": "programs.tealdeer.settings.updates.auto_update", "type": "boolean", "descriptionHTML": "<p>Whether to enable auto-update.</p>"}, {"declarations": [{"name": "<programs/tealdeer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tealdeer.nix"}], "default": "720", "description": "Duration, since the last cache update, after which the cache will be refreshed.\nThis parameter is ignored if {var}auto_update is set to false.", "example": "24", "loc": ["programs", "tealdeer", "settings", "updates", "auto_update_interval_hours"], "readOnly": false, "title": "programs.tealdeer.settings.updates.auto_update_interval_hours", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Duration, since the last cache update, after which the cache will be refreshed.\nThis parameter is ignored if {var}<code>auto_update</code> is set to <code>false</code>.</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "{ }", "description": "Each set of channels are written to\n{file}$XDG_CONFIG_HOME/television/NAME-channels.toml\nSee https://github.com/alexpasmantier/television/blob/main/docs/channels.md\nfor options", "example": "{\n  my-custom = {\n    cable_channel = [\n      {\n        name = \"git-log\";\n        source_command = \"git log --oneline --date=short --pretty=\\\"format:%h %s %an %cd\\\" \\\"$@\\\"\";\n        preview_command = \"git show -p --stat --pretty=fuller --color=always {0}\";\n      }\n      {\n        name = \"git-log\";\n        source_command = \"git log --oneline --date=short --pretty=\\\"format:%h %s %an %cd\\\" \\\"$@\\\"\";\n        preview_command = \"git show -p --stat --pretty=fuller --color=always {0}\";\n      }\n    ];\n  };\n}\n", "loc": ["programs", "television", "channels"], "readOnly": false, "title": "programs.television.channels", "type": "attribute set of (TOML value)", "descriptionHTML": "<p>Each set of channels are written to\n{file}<code>$XDG_CONFIG_HOME/television/NAME-channels.toml</code></p>\n<p>See <a href=\"https://github.com/alexpasmantier/television/blob/main/docs/channels.md\">https://github.com/alexpasmantier/television/blob/main/docs/channels.md</a>\nfor options</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "false", "description": "Whether to enable television.", "example": "true", "loc": ["programs", "television", "enable"], "readOnly": false, "title": "programs.television.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable television.</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "television", "enableBashIntegration"], "readOnly": false, "title": "programs.television.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "television", "enableFishIntegration"], "readOnly": false, "title": "programs.television.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "television", "enableZshIntegration"], "readOnly": false, "title": "programs.television.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "pkgs.television", "description": "The television package to use.", "example": "", "loc": ["programs", "television", "package"], "readOnly": false, "title": "programs.television.package", "type": "null or package", "descriptionHTML": "<p>The television package to use.</p>"}, {"declarations": [{"name": "<programs/television.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/television.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/television/config.toml.\nSee https://github.com/alexpasmantier/television/blob/main/.config/config.toml\nfor the full list of options.", "example": "{\n  tick_rate = 50;\n  ui = {\n    use_nerd_font_icons = true;\n    ui_scale = 120;\n    show_preview_panel = false;\n  };\n  keybindings = {\n    quit = [ \"esc\" \"ctrl-c\" ];\n  };\n}\n", "loc": ["programs", "television", "settings"], "readOnly": false, "title": "programs.television.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/television/config.toml</code>.\nSee <a href=\"https://github.com/alexpasmantier/television/blob/main/.config/config.toml\">https://github.com/alexpasmantier/television/blob/main/.config/config.toml</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/terminator.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/terminator.nix"}], "default": "{ }", "description": "configuration for terminator.\nFor a list of all possible options refer to the\n{manpage}terminator_config(5)\nman page.", "example": "{\n  global_config.borderless = true;\n  profiles.default.background_color = \"#002b36\";\n}\n", "loc": ["programs", "terminator", "config"], "readOnly": false, "title": "programs.terminator.config", "type": "attribute set of anything", "descriptionHTML": "<p>configuration for terminator.</p>\n<p>For a list of all possible options refer to the\n{manpage}<code>terminator_config(5)</code>\nman page.</p>"}, {"declarations": [{"name": "<programs/terminator.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/terminator.nix"}], "default": "false", "description": "Whether to enable terminator, a tiling terminal emulator.", "example": "true", "loc": ["programs", "terminator", "enable"], "readOnly": false, "title": "programs.terminator.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable terminator, a tiling terminal emulator.</p>"}, {"declarations": [{"name": "<programs/terminator.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/terminator.nix"}], "default": "pkgs.terminator", "description": "The terminator package to use.", "example": "", "loc": ["programs", "terminator", "package"], "readOnly": false, "title": "programs.terminator.package", "type": "package", "descriptionHTML": "<p>The terminator package to use.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Allow the output of bold characters when the bold escape sequence appears.", "example": "", "loc": ["programs", "termite", "allowBold"], "readOnly": false, "title": "programs.termite.allowBold", "type": "null or boolean", "descriptionHTML": "<p>Allow the output of bold characters when the bold escape sequence appears.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Have the terminal beep on the terminal bell.", "example": "", "loc": ["programs", "termite", "audibleBell"], "readOnly": false, "title": "programs.termite.audibleBell", "type": "null or boolean", "descriptionHTML": "<p>Have the terminal beep on the terminal bell.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Background color value.", "example": "\"rgba(63, 63, 63, 0.8)\"", "loc": ["programs", "termite", "backgroundColor"], "readOnly": false, "title": "programs.termite.backgroundColor", "type": "null or string", "descriptionHTML": "<p>Background color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Set the default browser for opening links. If its not set, $BROWSER is read.\nIf that's not set, url hints will be disabled.", "example": "\"\\${pkgs.xdg-utils}/xdg-open\"", "loc": ["programs", "termite", "browser"], "readOnly": false, "title": "programs.termite.browser", "type": "null or string", "descriptionHTML": "<p>Set the default browser for opening links. If its not set, $BROWSER is read.\nIf that's not set, url hints will be disabled.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Auto-detected URLs can be clicked on to open them in  your browser.\nOnly enabled if a browser is configured or detected.", "example": "", "loc": ["programs", "termite", "clickableUrl"], "readOnly": false, "title": "programs.termite.clickableUrl", "type": "null or boolean", "descriptionHTML": "<p>Auto-detected URLs can be clicked on to open them in  your browser.\nOnly enabled if a browser is configured or detected.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "\"\"", "description": "Extra colors options that should be added to [colors] section.", "example": "''\n  color0 = #3f3f3f\n  color1 = #705050\n  color2 = #60b48a\n''", "loc": ["programs", "termite", "colorsExtra"], "readOnly": false, "title": "programs.termite.colorsExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra colors options that should be added to [colors] section.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Specify the how the terminal's cursor should behave.\nAccepts system to respect the gtk global configuration,\non and off to explicitly enable or disable them.", "example": "\"system\"", "loc": ["programs", "termite", "cursorBlink"], "readOnly": false, "title": "programs.termite.cursorBlink", "type": "null or one of \"system\", \"on\", \"off\"", "descriptionHTML": "<p>Specify the how the terminal's cursor should behave.\nAccepts system to respect the gtk global configuration,\non and off to explicitly enable or disable them.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Cursor color value.", "example": "\"#dcdccc\"", "loc": ["programs", "termite", "cursorColor"], "readOnly": false, "title": "programs.termite.cursorColor", "type": "null or string", "descriptionHTML": "<p>Cursor color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Cursor foreground color value.", "example": "\"#dcdccc\"", "loc": ["programs", "termite", "cursorForegroundColor"], "readOnly": false, "title": "programs.termite.cursorForegroundColor", "type": "null or string", "descriptionHTML": "<p>Cursor foreground color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Specify how the cursor should look. Accepts block, ibeam and underline.", "example": "\"block\"", "loc": ["programs", "termite", "cursorShape"], "readOnly": false, "title": "programs.termite.cursorShape", "type": "null or one of \"block\", \"underline\", \"ibeam\"", "descriptionHTML": "<p>Specify how the cursor should look. Accepts block, ibeam and underline.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Settings dynamic title allows the terminal and the shell to\nupdate the terminal's title.", "example": "", "loc": ["programs", "termite", "dynamicTitle"], "readOnly": false, "title": "programs.termite.dynamicTitle", "type": "null or boolean", "descriptionHTML": "<p>Settings dynamic title allows the terminal and the shell to\nupdate the terminal's title.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "false", "description": "Whether to enable Termite VTE-based terminal.", "example": "true", "loc": ["programs", "termite", "enable"], "readOnly": false, "title": "programs.termite.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Termite VTE-based terminal.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "true", "description": "Whether to enable Shell VTE integration.", "example": "true", "loc": ["programs", "termite", "enableVteIntegration"], "readOnly": false, "title": "programs.termite.enableVteIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Shell VTE integration.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Whether to hide url hints not matching input in url hints mode.", "example": "", "loc": ["programs", "termite", "filterUnmatchedUrls"], "readOnly": false, "title": "programs.termite.filterUnmatchedUrls", "type": "null or boolean", "descriptionHTML": "<p>Whether to hide url hints not matching input in url hints mode.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "The font description for the terminal's font.", "example": "\"Monospace 12\"", "loc": ["programs", "termite", "font"], "readOnly": false, "title": "programs.termite.font", "type": "null or string", "descriptionHTML": "<p>The font description for the terminal's font.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Foreground bold color value.", "example": "\"#ffffff\"", "loc": ["programs", "termite", "foregroundBoldColor"], "readOnly": false, "title": "programs.termite.foregroundBoldColor", "type": "null or string", "descriptionHTML": "<p>Foreground bold color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Foreground color value.", "example": "\"#dcdccc\"", "loc": ["programs", "termite", "foregroundColor"], "readOnly": false, "title": "programs.termite.foregroundColor", "type": "null or string", "descriptionHTML": "<p>Foreground color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Enables entering fullscreen mode by pressing F11.", "example": "", "loc": ["programs", "termite", "fullscreen"], "readOnly": false, "title": "programs.termite.fullscreen", "type": "null or boolean", "descriptionHTML": "<p>Enables entering fullscreen mode by pressing F11.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "The default window geometry for new terminal windows.", "example": "\"640x480\"", "loc": ["programs", "termite", "geometry"], "readOnly": false, "title": "programs.termite.geometry", "type": "null or string", "descriptionHTML": "<p>The default window geometry for new terminal windows.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "highlight color value.", "example": "\"#2f2f2f\"", "loc": ["programs", "termite", "highlightColor"], "readOnly": false, "title": "programs.termite.highlightColor", "type": "null or string", "descriptionHTML": "<p>highlight color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints active background color value.", "example": "\"#3f3f3f\"", "loc": ["programs", "termite", "hintsActiveBackgroundColor"], "readOnly": false, "title": "programs.termite.hintsActiveBackgroundColor", "type": "null or string", "descriptionHTML": "<p>Hints active background color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints active foreground color value.", "example": "\"#e68080\"", "loc": ["programs", "termite", "hintsActiveForegroundColor"], "readOnly": false, "title": "programs.termite.hintsActiveForegroundColor", "type": "null or string", "descriptionHTML": "<p>Hints active foreground color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints background color value.", "example": "\"#3f3f3f\"", "loc": ["programs", "termite", "hintsBackgroundColor"], "readOnly": false, "title": "programs.termite.hintsBackgroundColor", "type": "null or string", "descriptionHTML": "<p>Hints background color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints border color value.", "example": "\"#3f3f3f\"", "loc": ["programs", "termite", "hintsBorderColor"], "readOnly": false, "title": "programs.termite.hintsBorderColor", "type": "null or string", "descriptionHTML": "<p>Hints border color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints border width.", "example": "\"0.5\"", "loc": ["programs", "termite", "hintsBorderWidth"], "readOnly": false, "title": "programs.termite.hintsBorderWidth", "type": "null or string", "descriptionHTML": "<p>Hints border width.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "\"\"", "description": "Extra hints options that should be added to [hints] section.", "example": "\"border = #3f3f3f\"", "loc": ["programs", "termite", "hintsExtra"], "readOnly": false, "title": "programs.termite.hintsExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra hints options that should be added to [hints] section.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "The font description for the hints font.", "example": "\"Monospace 12\"", "loc": ["programs", "termite", "hintsFont"], "readOnly": false, "title": "programs.termite.hintsFont", "type": "null or string", "descriptionHTML": "<p>The font description for the hints font.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints foreground color value.", "example": "\"#dcdccc\"", "loc": ["programs", "termite", "hintsForegroundColor"], "readOnly": false, "title": "programs.termite.hintsForegroundColor", "type": "null or string", "descriptionHTML": "<p>Hints foreground color value.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints padding.", "example": "2", "loc": ["programs", "termite", "hintsPadding"], "readOnly": false, "title": "programs.termite.hintsPadding", "type": "null or signed integer", "descriptionHTML": "<p>Hints padding.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Hints roundness.", "example": "\"0.2\"", "loc": ["programs", "termite", "hintsRoundness"], "readOnly": false, "title": "programs.termite.hintsRoundness", "type": "null or string", "descriptionHTML": "<p>Hints roundness.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "The name of the icon to be used for the terminal process.", "example": "\"terminal\"", "loc": ["programs", "termite", "iconName"], "readOnly": false, "title": "programs.termite.iconName", "type": "null or string", "descriptionHTML": "<p>The name of the icon to be used for the terminal process.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Emit escape sequences for extra keys,\nlike the modifyOtherKeys resource for\n{manpage}xterm(1).", "example": "", "loc": ["programs", "termite", "modifyOtherKeys"], "readOnly": false, "title": "programs.termite.modifyOtherKeys", "type": "null or boolean", "descriptionHTML": "<p>Emit escape sequences for extra keys,\nlike the modifyOtherKeys resource for\n{manpage}<code>xterm(1)</code>.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Automatically hide the mouse pointer when you start typing.", "example": "", "loc": ["programs", "termite", "mouseAutohide"], "readOnly": false, "title": "programs.termite.mouseAutohide", "type": "null or boolean", "descriptionHTML": "<p>Automatically hide the mouse pointer when you start typing.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "\"\"", "description": "Extra options that should be added to [options] section.", "example": "\"fullscreen = true\"", "loc": ["programs", "termite", "optionsExtra"], "readOnly": false, "title": "programs.termite.optionsExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra options that should be added to [options] section.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "pkgs.termite", "description": "The termite package to use.", "example": "", "loc": ["programs", "termite", "package"], "readOnly": false, "title": "programs.termite.package", "type": "null or package", "descriptionHTML": "<p>The termite package to use.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Scroll to the bottom automatically when a key is pressed.", "example": "", "loc": ["programs", "termite", "scrollOnKeystroke"], "readOnly": false, "title": "programs.termite.scrollOnKeystroke", "type": "null or boolean", "descriptionHTML": "<p>Scroll to the bottom automatically when a key is pressed.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Scroll to the bottom when the shell generates output.", "example": "", "loc": ["programs", "termite", "scrollOnOutput"], "readOnly": false, "title": "programs.termite.scrollOnOutput", "type": "null or boolean", "descriptionHTML": "<p>Scroll to the bottom when the shell generates output.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Set the number of lines to limit the terminal's scrollback.", "example": "10000", "loc": ["programs", "termite", "scrollbackLines"], "readOnly": false, "title": "programs.termite.scrollbackLines", "type": "null or signed integer", "descriptionHTML": "<p>Set the number of lines to limit the terminal's scrollback.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Scrollbar position.", "example": "", "loc": ["programs", "termite", "scrollbar"], "readOnly": false, "title": "programs.termite.scrollbar", "type": "null or one of \"off\", \"left\", \"right\"", "descriptionHTML": "<p>Scrollbar position.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Search from top again when you hit the bottom.", "example": "", "loc": ["programs", "termite", "searchWrap"], "readOnly": false, "title": "programs.termite.searchWrap", "type": "null or boolean", "descriptionHTML": "<p>Search from top again when you hit the bottom.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Enable size hints. Locks the terminal resizing\nto increments of the terminal's cell size.\nRequires a window manager that respects scroll hints.", "example": "", "loc": ["programs", "termite", "sizeHints"], "readOnly": false, "title": "programs.termite.sizeHints", "type": "null or boolean", "descriptionHTML": "<p>Enable size hints. Locks the terminal resizing\nto increments of the terminal's cell size.\nRequires a window manager that respects scroll hints.</p>"}, {"declarations": [{"name": "<programs/termite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/termite.nix"}], "default": "null", "description": "Sets the window as urgent on the terminal bell.", "example": "", "loc": ["programs", "termite", "urgentOnBell"], "readOnly": false, "title": "programs.termite.urgentOnBell", "type": "null or boolean", "descriptionHTML": "<p>Sets the window as urgent on the terminal bell.</p>"}, {"declarations": [{"name": "<programs/tex-fmt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tex-fmt.nix"}], "default": "false", "description": "Whether to enable tex-fmt.", "example": "true", "loc": ["programs", "tex-fmt", "enable"], "readOnly": false, "title": "programs.tex-fmt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tex-fmt.</p>"}, {"declarations": [{"name": "<programs/tex-fmt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tex-fmt.nix"}], "default": "pkgs.tex-fmt", "description": "The tex-fmt package to use.", "example": "", "loc": ["programs", "tex-fmt", "package"], "readOnly": false, "title": "programs.tex-fmt.package", "type": "null or package", "descriptionHTML": "<p>The tex-fmt package to use.</p>"}, {"declarations": [{"name": "<programs/tex-fmt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tex-fmt.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/tex-fmt/tex-fmt.toml on Linux or\n{file}$HOME/Library/Application Support/tex-fmt/tex-fmt.toml on Darwin.\nSee https://github.com/WGUNDERWOOD/tex-fmt and\nhttps://github.com/WGUNDERWOOD/tex-fmt/blob/master/tex-fmt.toml\nfor more information.", "example": "{\n  wrap = true;\n  tabsize = 2;\n  tabchar = \"space\";\n  lists = [];\n}\n", "loc": ["programs", "tex-fmt", "settings"], "readOnly": false, "title": "programs.tex-fmt.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/tex-fmt/tex-fmt.toml</code> on Linux or\n{file}<code>$HOME/Library/Application Support/tex-fmt/tex-fmt.toml</code> on Darwin.\nSee <a href=\"https://github.com/WGUNDERWOOD/tex-fmt\">https://github.com/WGUNDERWOOD/tex-fmt</a> and\n<a href=\"https://github.com/WGUNDERWOOD/tex-fmt/blob/master/tex-fmt.toml\">https://github.com/WGUNDERWOOD/tex-fmt/blob/master/tex-fmt.toml</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/texlive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/texlive.nix"}], "default": "false", "description": "Whether to enable TeX Live.", "example": "true", "loc": ["programs", "texlive", "enable"], "readOnly": false, "title": "programs.texlive.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable TeX Live.</p>"}, {"declarations": [{"name": "<programs/texlive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/texlive.nix"}], "default": "\"tpkgs: { inherit (tpkgs) collection-basic; }\"", "description": "Extra packages available to TeX Live.", "example": "tpkgs: { inherit (tpkgs) collection-fontsrecommended algorithms; }\n", "loc": ["programs", "texlive", "extraPackages"], "readOnly": false, "title": "programs.texlive.extraPackages", "type": "unspecified value", "descriptionHTML": "<p>Extra packages available to TeX Live.</p>"}, {"declarations": [{"name": "<programs/texlive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/texlive.nix"}], "default": "", "description": "Resulting customized TeX Live package.", "example": "", "loc": ["programs", "texlive", "package"], "readOnly": true, "title": "programs.texlive.package", "type": "package", "descriptionHTML": "<p>Resulting customized TeX Live package.</p>"}, {"declarations": [{"name": "<programs/texlive.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/texlive.nix"}], "default": "pkgs.texlive", "description": "TeX Live package set to use.", "example": "", "loc": ["programs", "texlive", "packageSet"], "readOnly": false, "title": "programs.texlive.packageSet", "type": "unspecified value", "descriptionHTML": "<p>TeX Live package set to use.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "\"fuck\"", "description": "Alias used to invoke thefuck.", "example": "", "loc": ["programs", "thefuck", "alias"], "readOnly": false, "title": "programs.thefuck.alias", "type": "string", "descriptionHTML": "<p>Alias used to invoke <code>thefuck</code>.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "false", "description": "Whether to enable thefuck - magnificent app that corrects your previous console command.", "example": "true", "loc": ["programs", "thefuck", "enable"], "readOnly": false, "title": "programs.thefuck.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable thefuck - magnificent app that corrects your previous console command.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "thefuck", "enableBashIntegration"], "readOnly": false, "title": "programs.thefuck.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "thefuck", "enableFishIntegration"], "readOnly": false, "title": "programs.thefuck.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "false", "description": "Whether to enable thefuck's experimental instant mode.", "example": "true", "loc": ["programs", "thefuck", "enableInstantMode"], "readOnly": false, "title": "programs.thefuck.enableInstantMode", "type": "boolean", "descriptionHTML": "<p>Whether to enable thefuck's experimental instant mode.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "thefuck", "enableNushellIntegration"], "readOnly": false, "title": "programs.thefuck.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "thefuck", "enableZshIntegration"], "readOnly": false, "title": "programs.thefuck.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/thefuck.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thefuck.nix"}], "default": "pkgs.thefuck", "description": "The thefuck package to use.", "example": "", "loc": ["programs", "thefuck", "package"], "readOnly": false, "title": "programs.thefuck.package", "type": "package", "descriptionHTML": "<p>The thefuck package to use.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Whether to enable Thunderbird.", "example": "true", "loc": ["programs", "thunderbird", "enable"], "readOnly": false, "title": "programs.thunderbird.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Thunderbird.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "Additional packages containing native messaging hosts that should be\nmade available to Thunderbird extensions.", "example": "", "loc": ["programs", "thunderbird", "nativeMessagingHosts"], "readOnly": false, "title": "programs.thunderbird.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>Additional packages containing native messaging hosts that should be\nmade available to Thunderbird extensions.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "pkgs.thunderbird", "description": "The thunderbird package to use.", "example": "pkgs.thunderbird-91", "loc": ["programs", "thunderbird", "package"], "readOnly": false, "title": "programs.thunderbird.package", "type": "package", "descriptionHTML": "<p>The thunderbird package to use.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "", "description": "Attribute set of Thunderbird profiles.", "example": "", "loc": ["programs", "thunderbird", "profiles"], "readOnly": false, "title": "programs.thunderbird.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of Thunderbird profiles.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "Custom ordering of accounts and local folders in\nThunderbird's folder pane. The accounts are specified\nby their name. For declarative accounts, it must be the name\nof their attribute in config.accounts.email.accounts (or\nconfig.programs.thunderbird.profiles.&lt;name&gt;.feedAccounts\nfor feed accounts). The local folders name can be found in\nthe mail.accountmanager.accounts Thunderbird preference,\nfor example with Settings > Config Editor (\"account1\" by\ndefault). Enabled accounts and local folders that aren't\nlisted here appear in an arbitrary order after the ordered\naccounts.", "example": "''\n  [\n    \"my-awesome-account\"\n    \"private\"\n    \"work\"\n    \"rss\"\n    /* Other accounts in arbitrary order */\n  ]\n''", "loc": ["programs", "thunderbird", "profiles", "<name>", "accountsOrder"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.accountsOrder", "type": "list of string", "descriptionHTML": "<p>Custom ordering of accounts and local folders in\nThunderbird's folder pane. The accounts are specified\nby their name. For declarative accounts, it must be the name\nof their attribute in <code>config.accounts.email.accounts</code> (or\n<code>config.programs.thunderbird.profiles.&lt;name&gt;.feedAccounts</code>\nfor feed accounts). The local folders name can be found in\nthe <code>mail.accountmanager.accounts</code> Thunderbird preference,\nfor example with Settings &gt; Config Editor (\"account1\" by\ndefault). Enabled accounts and local folders that aren't\nlisted here appear in an arbitrary order after the ordered\naccounts.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "Custom ordering of calendar accounts. The accounts are specified\nby their name. For declarative accounts, it must be the name\nof their attribute in config.accounts.calendar.accounts.\nEnabled accounts that aren't listed here appear in an arbitrary\norder after the ordered accounts.", "example": "''\n  [\n    \"my-awesome-account\"\n    \"private\"\n    \"work\"\n    \"holidays\"\n    /* Other accounts in arbitrary order */\n  ]\n''", "loc": ["programs", "thunderbird", "profiles", "<name>", "calendarAccountsOrder"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.calendarAccountsOrder", "type": "list of string", "descriptionHTML": "<p>Custom ordering of calendar accounts. The accounts are specified\nby their name. For declarative accounts, it must be the name\nof their attribute in <code>config.accounts.calendar.accounts</code>.\nEnabled accounts that aren't listed here appear in an arbitrary\norder after the ordered accounts.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "List of \u2039name\u203a add-on packages to install for this profile.\nNote that it is necessary to manually enable extensions\ninside \u2039name\u203a after the first installation.\nTo automatically enable extensions add\n\"extensions.autoDisableScopes\" = 0;\nto\n{option}programs.thunderbird.profiles.&lt;profile&gt;.settings", "example": "[\n  pkgs.some-thunderbird-extension\n]\n", "loc": ["programs", "thunderbird", "profiles", "<name>", "extensions"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.extensions", "type": "list of package", "descriptionHTML": "<p>List of \u2039name\u203a add-on packages to install for this profile.</p>\n<p>Note that it is necessary to manually enable extensions\ninside \u2039name\u203a after the first installation.</p>\n<p>To automatically enable extensions add\n<code>\"extensions.autoDisableScopes\" = 0;</code>\nto\n<a href=\"#opt-programs.thunderbird.profiles._name_.settings\">{option}<code>programs.thunderbird.profiles.&lt;profile&gt;.settings</code></a></p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "\"\"", "description": "Extra preferences to add to {file}user.js.", "example": "", "loc": ["programs", "thunderbird", "profiles", "<name>", "extraConfig"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra preferences to add to {file}<code>user.js</code>.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "{ }", "description": "Attribute set of feed accounts. Feeds themselves have to be\nmanaged through Thunderbird's settings. This option allows\nfeeds to coexist with declaratively managed email accounts.", "example": "", "loc": ["programs", "thunderbird", "profiles", "<name>", "feedAccounts"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.feedAccounts", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of feed accounts. Feeds themselves have to be\nmanaged through Thunderbird's settings. This option allows\nfeeds to coexist with declaratively managed email accounts.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "\"\u2039name\u203a\"", "description": "This feed account's name.", "example": "", "loc": ["programs", "thunderbird", "profiles", "<name>", "feedAccounts", "<name>", "name"], "readOnly": true, "title": "programs.thunderbird.profiles.<name>.feedAccounts.<name>.name", "type": "string", "descriptionHTML": "<p>This feed account's name.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Whether this is a default profile. There must be exactly one\ndefault profile.", "example": "true", "loc": ["programs", "thunderbird", "profiles", "<name>", "isDefault"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.isDefault", "type": "boolean", "descriptionHTML": "<p>Whether this is a default profile. There must be exactly one\ndefault profile.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "\"\u2039name\u203a\"", "description": "This profile's name.", "example": "", "loc": ["programs", "thunderbird", "profiles", "<name>", "name"], "readOnly": true, "title": "programs.thunderbird.profiles.<name>.name", "type": "string", "descriptionHTML": "<p>This profile's name.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "{ }", "description": "Declarative search engine configuration.", "example": "", "loc": ["programs", "thunderbird", "profiles", "<name>", "search"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.search", "type": "submodule", "descriptionHTML": "<p>Declarative search engine configuration.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "null", "description": "The default search engine used in the address bar and search\nbar.", "example": "\"ddg\"", "loc": ["programs", "thunderbird", "profiles", "<name>", "search", "default"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.search.default", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the address bar and search\nbar.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "{ }", "description": "Attribute set of search engine configurations. Engines that\nonly have {var}metaData specified will be treated as builtin\nto Thunderbird.\nSee SearchEngine.jsm\nin Thunderbird's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.\nNote, {var}icon is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.", "example": "{\n  nix-packages = {\n    name = \"Nix Packages\";\n    urls = [{\n      template = \"https://search.nixos.org/packages\";\n      params = [\n        { name = \"type\"; value = \"packages\"; }\n        { name = \"query\"; value = \"{searchTerms}\"; }\n      ];\n    }];\n\n    icon = \"${pkgs.nixos-icons}/share/icons/hicolor/scalable/apps/nix-snowflake.svg\";\n    definedAliases = [ \"@np\" ];\n  };\n\n  nixos-wiki = {\n    name = \"NixOS Wiki\";\n    urls = [{ template = \"https://wiki.nixos.org/w/index.php?search={searchTerms}\"; }];\n    iconMapObj.\"16\" = \"https://wiki.nixos.org/favicon.ico\";\n    definedAliases = [ \"@nw\" ];\n  };\n\n  bing.metaData.hidden = true;\n  google.metaData.alias = \"@g\"; # builtin engines only support specifying one additional alias\n}\n", "loc": ["programs", "thunderbird", "profiles", "<name>", "search", "engines"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.search.engines", "type": "attribute set of attribute set of (JSON value)", "descriptionHTML": "<p>Attribute set of search engine configurations. Engines that\nonly have {var}<code>metaData</code> specified will be treated as builtin\nto Thunderbird.</p>\n<p>See <a href=\"https://searchfox.org/mozilla-central/rev/e3f42ec9320748b2aab3d474d1e47075def9000c/toolkit/components/search/SearchEngine.sys.mjs#890-923\">SearchEngine.jsm</a>\nin Thunderbird's source for available options. We maintain a\nmapping to let you specify all options in the referenced link\nwithout underscores, but it may fall out of date with future\noptions.</p>\n<p>Note, {var}<code>icon</code> is also a special option added by Home\nManager to make it convenient to specify absolute icon paths.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Whether to force replace the existing search\nconfiguration. This is recommended since Thunderbird will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.", "example": "", "loc": ["programs", "thunderbird", "profiles", "<name>", "search", "force"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.search.force", "type": "boolean", "descriptionHTML": "<p>Whether to force replace the existing search\nconfiguration. This is recommended since Thunderbird will\nreplace the symlink for the search configuration on every\nlaunch, but note that you'll lose any existing configuration\nby enabling this.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "[ ]", "description": "The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.", "example": "[\n  \"ddg\"\n  \"google\"\n]", "loc": ["programs", "thunderbird", "profiles", "<name>", "search", "order"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.search.order", "type": "list of string", "descriptionHTML": "<p>The order the search engines are listed in. Any engines that\naren't included in this list will be listed after these in an\nunspecified order.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "null", "description": "The default search engine used in the Private Browsing.", "example": "\"ddg\"", "loc": ["programs", "thunderbird", "profiles", "<name>", "search", "privateDefault"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.search.privateDefault", "type": "null or string", "descriptionHTML": "<p>The default search engine used in the Private Browsing.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "{ }", "description": "Preferences to add to this profile's\n{file}user.js.", "example": "{\n  \"mail.spellcheck.inline\" = false;\n  \"mailnews.database.global.views.global.columns\" = {\n    selectCol = {\n      visible = false;\n      ordinal = 1;\n    };\n    threadCol = {\n      visible = true;\n      ordinal = 2;\n    };\n  };\n}\n", "loc": ["programs", "thunderbird", "profiles", "<name>", "settings"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.settings", "type": "Thunderbird preference (int, bool, string, and also attrs, list, float as a JSON string)", "descriptionHTML": "<p>Preferences to add to this profile's\n{file}<code>user.js</code>.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "\"\"", "description": "Custom Thunderbird user chrome CSS.", "example": "''\n  /* Hide tab bar in Thunderbird */\n  #tabs-toolbar {\n    visibility: collapse !important;\n  }\n''", "loc": ["programs", "thunderbird", "profiles", "<name>", "userChrome"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.userChrome", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom Thunderbird user chrome CSS.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "\"\"", "description": "Custom Thunderbird user content CSS.", "example": "''\n  /* Hide scrollbar on Thunderbird pages */\n  *{scrollbar-width:none !important}\n''", "loc": ["programs", "thunderbird", "profiles", "<name>", "userContent"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.userContent", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom Thunderbird user content CSS.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "false", "description": "Allow using external GPG keys with GPGME.", "example": "true", "loc": ["programs", "thunderbird", "profiles", "<name>", "withExternalGnupg"], "readOnly": false, "title": "programs.thunderbird.profiles.<name>.withExternalGnupg", "type": "boolean", "descriptionHTML": "<p>Allow using external GPG keys with GPGME.</p>"}, {"declarations": [{"name": "<programs/thunderbird.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/thunderbird.nix"}], "default": "{ }", "description": "Attribute set of Thunderbird preferences to be added to\nall profiles.", "example": "{\n  \"general.useragent.override\" = \"\";\n  \"privacy.donottrackheader.enabled\" = true;\n}\n", "loc": ["programs", "thunderbird", "settings"], "readOnly": false, "title": "programs.thunderbird.settings", "type": "Thunderbird preference (int, bool, string, and also attrs, list, float as a JSON string)", "descriptionHTML": "<p>Attribute set of Thunderbird preferences to be added to\nall profiles.</p>"}, {"declarations": [{"name": "<programs/timidity.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/timidity.nix"}], "default": "false", "description": "Whether to enable timidity, a software MIDI renderer.", "example": "true", "loc": ["programs", "timidity", "enable"], "readOnly": false, "title": "programs.timidity.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable timidity, a software MIDI renderer.</p>"}, {"declarations": [{"name": "<programs/timidity.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/timidity.nix"}], "default": "\"\"", "description": "Extra configuration.", "example": "''\n  soundfont ${pkgs.soundfont-fluid}/share/soundfonts/FluidR3_GM2-2.sf2\n''\n", "loc": ["programs", "timidity", "extraConfig"], "readOnly": false, "title": "programs.timidity.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration.</p>"}, {"declarations": [{"name": "<programs/timidity.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/timidity.nix"}], "default": "", "description": "Resulting package.", "example": "", "loc": ["programs", "timidity", "finalPackage"], "readOnly": true, "title": "programs.timidity.finalPackage", "type": "package", "descriptionHTML": "<p>Resulting package.</p>"}, {"declarations": [{"name": "<programs/timidity.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/timidity.nix"}], "default": "pkgs.timidity", "description": "The timidity package to use.", "example": "", "loc": ["programs", "timidity", "package"], "readOnly": false, "title": "programs.timidity.package", "type": "package", "descriptionHTML": "<p>The timidity package to use.</p>"}, {"declarations": [{"name": "<programs/tint2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tint2.nix"}], "default": "false", "description": "Whether to enable tint2, a simple, unobtrusive and light panel for Xorg.", "example": "true", "loc": ["programs", "tint2", "enable"], "readOnly": false, "title": "programs.tint2.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tint2, a simple, unobtrusive and light panel for Xorg.</p>"}, {"declarations": [{"name": "<programs/tint2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tint2.nix"}], "default": "\"\"", "description": "Commands for tint2 that will be add to the {file}tint2rc\nfile.", "example": "", "loc": ["programs", "tint2", "extraConfig"], "readOnly": false, "title": "programs.tint2.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Commands for tint2 that will be add to the {file}<code>tint2rc</code>\nfile.</p>"}, {"declarations": [{"name": "<programs/tint2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tint2.nix"}], "default": "pkgs.tint2", "description": "The tint2 package to use.", "example": "", "loc": ["programs", "tint2", "package"], "readOnly": false, "title": "programs.tint2.package", "type": "package", "descriptionHTML": "<p>The tint2 package to use.</p>"}, {"declarations": [{"name": "<programs/tiny.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tiny.nix"}], "default": "false", "description": "Whether to enable tiny, a TUI IRC client written in Rust.", "example": "true", "loc": ["programs", "tiny", "enable"], "readOnly": false, "title": "programs.tiny.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tiny, a TUI IRC client written in Rust.</p>"}, {"declarations": [{"name": "<programs/tiny.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tiny.nix"}], "default": "pkgs.tiny", "description": "The tiny package to use.", "example": "", "loc": ["programs", "tiny", "package"], "readOnly": false, "title": "programs.tiny.package", "type": "package", "descriptionHTML": "<p>The tiny package to use.</p>"}, {"declarations": [{"name": "<programs/tiny.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tiny.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/tiny/config.yml. See\nhttps://github.com/osa1/tiny/blob/master/crates/tiny/config.yml\nfor the default configuration.", "example": "{\n  servers = [\n    {\n      addr = \"irc.libera.chat\";\n      port = 6697;\n      tls = true;\n      realname = \"John Doe\";\n      nicks = [ \"tinyuser\" ];\n    }\n  ];\n  defaults = {\n    nicks = [ \"tinyuser\" ];\n    realname = \"John Doe\";\n    join = [];\n    tls = true;\n  };\n};\n", "loc": ["programs", "tiny", "settings"], "readOnly": false, "title": "programs.tiny.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/tiny/config.yml</code>. See\n<a href=\"https://github.com/osa1/tiny/blob/master/crates/tiny/config.yml\">https://github.com/osa1/tiny/blob/master/crates/tiny/config.yml</a>\nfor the default configuration.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "null", "description": "Tmate server EdDSA key fingerprint.", "example": "SHA256:1111111111111111111111111111111111111111111", "loc": ["programs", "tmate", "dsaFingerprint"], "readOnly": false, "title": "programs.tmate.dsaFingerprint", "type": "null or string", "descriptionHTML": "<p>Tmate server EdDSA key fingerprint.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "false", "description": "Whether to enable tmate.", "example": "true", "loc": ["programs", "tmate", "enable"], "readOnly": false, "title": "programs.tmate.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tmate.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "\"\"", "description": "Additional content written at the end of\n{file}~/.tmate.conf.", "example": "", "loc": ["programs", "tmate", "extraConfig"], "readOnly": false, "title": "programs.tmate.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional content written at the end of\n{file}<code>~/.tmate.conf</code>.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "null", "description": "Tmate server address.", "example": "tmate.io", "loc": ["programs", "tmate", "host"], "readOnly": false, "title": "programs.tmate.host", "type": "null or string", "descriptionHTML": "<p>Tmate server address.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "pkgs.tmate", "description": "The tmate package to use.", "example": "", "loc": ["programs", "tmate", "package"], "readOnly": false, "title": "programs.tmate.package", "type": "package", "descriptionHTML": "<p>The tmate package to use.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "null", "description": "Tmate server port.", "example": "2222", "loc": ["programs", "tmate", "port"], "readOnly": false, "title": "programs.tmate.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Tmate server port.</p>"}, {"declarations": [{"name": "<programs/tmate.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmate.nix"}], "default": "null", "description": "Tmate server RSA key fingerprint.", "example": "SHA256:1111111111111111111111111111111111111111111", "loc": ["programs", "tmate", "rsaFingerprint"], "readOnly": false, "title": "programs.tmate.rsaFingerprint", "type": "null or string", "descriptionHTML": "<p>Tmate server RSA key fingerprint.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Resize the window to the size of the smallest session for\nwhich it is the current window.", "example": "", "loc": ["programs", "tmux", "aggressiveResize"], "readOnly": false, "title": "programs.tmux.aggressiveResize", "type": "boolean", "descriptionHTML": "<p>Resize the window to the size of the smallest session for\nwhich it is the current window.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "0", "description": "Base index for windows and panes.", "example": "1", "loc": ["programs", "tmux", "baseIndex"], "readOnly": false, "title": "programs.tmux.baseIndex", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Base index for windows and panes.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Use 24 hour clock.", "example": "", "loc": ["programs", "tmux", "clock24"], "readOnly": false, "title": "programs.tmux.clock24", "type": "boolean", "descriptionHTML": "<p>Use 24 hour clock.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Override the hjkl and HJKL bindings for pane navigation and\nresizing in VI mode.", "example": "", "loc": ["programs", "tmux", "customPaneNavigationAndResize"], "readOnly": false, "title": "programs.tmux.customPaneNavigationAndResize", "type": "boolean", "descriptionHTML": "<p>Override the hjkl and HJKL bindings for pane navigation and\nresizing in VI mode.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Disable confirmation prompt before killing a pane or window", "example": "", "loc": ["programs", "tmux", "disableConfirmationPrompt"], "readOnly": false, "title": "programs.tmux.disableConfirmationPrompt", "type": "boolean", "descriptionHTML": "<p>Disable confirmation prompt before killing a pane or window</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Whether to enable tmux.", "example": "true", "loc": ["programs", "tmux", "enable"], "readOnly": false, "title": "programs.tmux.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tmux.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "500", "description": "Time in milliseconds for which tmux waits after an escape is\ninput.", "example": "0", "loc": ["programs", "tmux", "escapeTime"], "readOnly": false, "title": "programs.tmux.escapeTime", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Time in milliseconds for which tmux waits after an escape is\ninput.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "\"\"", "description": "Additional configuration to add to\n{file}tmux.conf.", "example": "", "loc": ["programs", "tmux", "extraConfig"], "readOnly": false, "title": "programs.tmux.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add to\n{file}<code>tmux.conf</code>.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "On supported terminals, request focus events and pass them through to\napplications running in tmux.", "example": "", "loc": ["programs", "tmux", "focusEvents"], "readOnly": false, "title": "programs.tmux.focusEvents", "type": "boolean", "descriptionHTML": "<p>On supported terminals, request focus events and pass them through to\napplications running in tmux.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "2000", "description": "Maximum number of lines held in window history.", "example": "5000", "loc": ["programs", "tmux", "historyLimit"], "readOnly": false, "title": "programs.tmux.historyLimit", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Maximum number of lines held in window history.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "\"emacs\"", "description": "VI or Emacs style shortcuts.", "example": "\"vi\"", "loc": ["programs", "tmux", "keyMode"], "readOnly": false, "title": "programs.tmux.keyMode", "type": "one of \"emacs\", \"vi\"", "descriptionHTML": "<p>VI or Emacs style shortcuts.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Whether to enable mouse support.", "example": "true", "loc": ["programs", "tmux", "mouse"], "readOnly": false, "title": "programs.tmux.mouse", "type": "boolean", "descriptionHTML": "<p>Whether to enable mouse support.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Automatically spawn a session if trying to attach and none\nare running.", "example": "", "loc": ["programs", "tmux", "newSession"], "readOnly": false, "title": "programs.tmux.newSession", "type": "boolean", "descriptionHTML": "<p>Automatically spawn a session if trying to attach and none\nare running.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "pkgs.tmux", "description": "The tmux package to use.", "example": "", "loc": ["programs", "tmux", "package"], "readOnly": false, "title": "programs.tmux.package", "type": "package", "descriptionHTML": "<p>The tmux package to use.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "[ ]", "description": "List of tmux plugins to be included at the end of your tmux\nconfiguration. The sensible plugin, however, is defaulted to\nrun at the top of your configuration.", "example": "with pkgs; [\n  tmuxPlugins.cpu\n  {\n    plugin = tmuxPlugins.resurrect;\n    extraConfig = \"set -g @resurrect-strategy-nvim 'session'\";\n  }\n  {\n    plugin = tmuxPlugins.continuum;\n    extraConfig = ''\n      set -g @continuum-restore 'on'\n      set -g @continuum-save-interval '60' # minutes\n    '';\n  }\n]\n", "loc": ["programs", "tmux", "plugins"], "readOnly": false, "title": "programs.tmux.plugins", "type": "list of plugin packages or submodules", "descriptionHTML": "<p>List of tmux plugins to be included at the end of your tmux\nconfiguration. The sensible plugin, however, is defaulted to\nrun at the top of your configuration.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "null", "description": "Set the prefix key. Overrules the \"shortcut\" option when set.", "example": "\"C-a\"", "loc": ["programs", "tmux", "prefix"], "readOnly": false, "title": "programs.tmux.prefix", "type": "null or string", "descriptionHTML": "<p>Set the prefix key. Overrules the \"shortcut\" option when set.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "5", "description": "Number of lines/columns when resizing.", "example": "10", "loc": ["programs", "tmux", "resizeAmount"], "readOnly": false, "title": "programs.tmux.resizeAmount", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Number of lines/columns when resizing.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Reverse the window split shortcuts.", "example": "", "loc": ["programs", "tmux", "reverseSplit"], "readOnly": false, "title": "programs.tmux.reverseSplit", "type": "boolean", "descriptionHTML": "<p>Reverse the window split shortcuts.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "true", "description": "Store tmux socket under {file}/run, which is more\nsecure than {file}/tmp, but as a downside it doesn't\nsurvive user logout.", "example": "", "loc": ["programs", "tmux", "secureSocket"], "readOnly": false, "title": "programs.tmux.secureSocket", "type": "boolean", "descriptionHTML": "<p>Store tmux socket under {file}<code>/run</code>, which is more\nsecure than {file}<code>/tmp</code>, but as a downside it doesn't\nsurvive user logout.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Run the sensible plugin at the top of the configuration. It\nis possible to override the sensible settings using the\n{option}programs.tmux.extraConfig option.", "example": "", "loc": ["programs", "tmux", "sensibleOnTop"], "readOnly": false, "title": "programs.tmux.sensibleOnTop", "type": "boolean", "descriptionHTML": "<p>Run the sensible plugin at the top of the configuration. It\nis possible to override the sensible settings using the\n{option}<code>programs.tmux.extraConfig</code> option.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "null", "description": "Set the default-shell tmux variable.", "example": "${pkgs.zsh}/bin/zsh", "loc": ["programs", "tmux", "shell"], "readOnly": false, "title": "programs.tmux.shell", "type": "null or string", "descriptionHTML": "<p>Set the default-shell tmux variable.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "\"b\"", "description": "CTRL following by this key is used as the main shortcut.", "example": "\"a\"", "loc": ["programs", "tmux", "shortcut"], "readOnly": false, "title": "programs.tmux.shortcut", "type": "string", "descriptionHTML": "<p>CTRL following by this key is used as the main shortcut.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "\"screen\"", "description": "Set the $TERM variable.", "example": "\"screen-256color\"", "loc": ["programs", "tmux", "terminal"], "readOnly": false, "title": "programs.tmux.terminal", "type": "string", "descriptionHTML": "<p>Set the $TERM variable.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Whether to enable tmuxinator.", "example": "true", "loc": ["programs", "tmux", "tmuxinator", "enable"], "readOnly": false, "title": "programs.tmux.tmuxinator.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tmuxinator.</p>"}, {"declarations": [{"name": "<programs/tmux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tmux.nix"}], "default": "false", "description": "Whether to enable tmuxp.", "example": "true", "loc": ["programs", "tmux", "tmuxp", "enable"], "readOnly": false, "title": "programs.tmux.tmuxp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tmuxp.</p>"}, {"declarations": [{"name": "<programs/todoman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/todoman.nix"}], "default": "false", "description": "Whether to enable todoman.", "example": "true", "loc": ["programs", "todoman", "enable"], "readOnly": false, "title": "programs.todoman.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable todoman.</p>"}, {"declarations": [{"name": "<programs/todoman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/todoman.nix"}], "default": "\"\"", "description": "Text for configuration of todoman.\nThe syntax is Python.\nSee docs.\nfor the full list of options.", "example": "''\n  date_format = \"%Y-%m-%d\";\n  time_format = \"%H:%M\";\n  default_list = \"Personal\";\n  default_due = 48;\n''", "loc": ["programs", "todoman", "extraConfig"], "readOnly": false, "title": "programs.todoman.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text for configuration of todoman.\nThe syntax is Python.</p>\n<p>See <a href=\"https://todoman.readthedocs.io/en/stable/man.html#id5\">docs</a>.\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/todoman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/todoman.nix"}], "default": "\"*\"", "description": "The glob expansion which matches all directories relevant.", "example": "\"*/*\"", "loc": ["programs", "todoman", "glob"], "readOnly": false, "title": "programs.todoman.glob", "type": "string", "descriptionHTML": "<p>The glob expansion which matches all directories relevant.</p>"}, {"declarations": [{"name": "<programs/todoman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/todoman.nix"}], "default": "pkgs.todoman", "description": "The todoman package to use.", "example": "", "loc": ["programs", "todoman", "package"], "readOnly": false, "title": "programs.todoman.package", "type": "null or package", "descriptionHTML": "<p>The todoman package to use.</p>"}, {"declarations": [{"name": "<programs/tofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tofi.nix"}], "default": "false", "description": "Whether to enable Tofi, a tiny dynamic menu for Wayland.", "example": "true", "loc": ["programs", "tofi", "enable"], "readOnly": false, "title": "programs.tofi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Tofi, a tiny dynamic menu for Wayland.</p>"}, {"declarations": [{"name": "<programs/tofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tofi.nix"}], "default": "pkgs.tofi", "description": "The tofi package to use.", "example": "", "loc": ["programs", "tofi", "package"], "readOnly": false, "title": "programs.tofi.package", "type": "null or package", "descriptionHTML": "<p>The tofi package to use.</p>"}, {"declarations": [{"name": "<programs/tofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tofi.nix"}], "default": "{ }", "description": "Settings to be written to the Tofi configuration file.\nSee https://github.com/philj56/tofi/blob/master/doc/config\nfor the full list of options.", "example": "{\n  background-color = \"#000000\";\n  border-width = 0;\n  font = \"monospace\";\n  height = \"100%\";\n  num-results = 5;\n  outline-width = 0;\n  padding-left = \"35%\";\n  padding-top = \"35%\";\n  result-spacing = 25;\n  width = \"100%\";\n}\n", "loc": ["programs", "tofi", "settings"], "readOnly": false, "title": "programs.tofi.settings", "type": "attribute set of (string or signed integer or boolean)", "descriptionHTML": "<p>Settings to be written to the Tofi configuration file.</p>\n<p>See <a href=\"https://github.com/philj56/tofi/blob/master/doc/config\">https://github.com/philj56/tofi/blob/master/doc/config</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/topgrade.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/topgrade.nix"}], "default": "false", "description": "Whether to enable topgrade.", "example": "true", "loc": ["programs", "topgrade", "enable"], "readOnly": false, "title": "programs.topgrade.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable topgrade.</p>"}, {"declarations": [{"name": "<programs/topgrade.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/topgrade.nix"}], "default": "pkgs.topgrade", "description": "The topgrade package to use.", "example": "", "loc": ["programs", "topgrade", "package"], "readOnly": false, "title": "programs.topgrade.package", "type": "package", "descriptionHTML": "<p>The topgrade package to use.</p>"}, {"declarations": [{"name": "<programs/topgrade.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/topgrade.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/topgrade.toml.\nSee https://github.com/r-darwish/topgrade/wiki/Step-list for the full list\nof options.", "example": "{\n  misc = {\n    assume_yes = true;\n    disable = [\n      \"flutter\"\n      \"node\"\n    ];\n    set_title = false;\n    cleanup = true;\n  };\n  commands = {\n    \"Run garbage collection on Nix store\" = \"nix-collect-garbage\";\n  };\n}\n", "loc": ["programs", "topgrade", "settings"], "readOnly": false, "title": "programs.topgrade.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/topgrade.toml</code>.</p>\n<p>See <a href=\"https://github.com/r-darwish/topgrade/wiki/Step-list\">https://github.com/r-darwish/topgrade/wiki/Step-list</a> for the full list\nof options.</p>"}, {"declarations": [{"name": "<programs/translate-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/translate-shell.nix"}], "default": "false", "description": "Whether to enable translate-shell.", "example": "true", "loc": ["programs", "translate-shell", "enable"], "readOnly": false, "title": "programs.translate-shell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable translate-shell.</p>"}, {"declarations": [{"name": "<programs/translate-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/translate-shell.nix"}], "default": "pkgs.translate-shell", "description": "The translate-shell package to use.", "example": "", "loc": ["programs", "translate-shell", "package"], "readOnly": false, "title": "programs.translate-shell.package", "type": "null or package", "descriptionHTML": "<p>The translate-shell package to use.</p>"}, {"declarations": [{"name": "<programs/translate-shell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/translate-shell.nix"}], "default": "{ }", "description": "Options to add to {file}$XDG_CONFIG_HOME/translate-shell/init.trans file.\nSee https://github.com/soimort/translate-shell/wiki/Configuration\nfor options.", "example": "{\n  hl = \"en\";\n  tl = [\n    \"es\"\n    \"fr\"\n  ];\n  verbose = true;\n}", "loc": ["programs", "translate-shell", "settings"], "readOnly": false, "title": "programs.translate-shell.settings", "type": "attribute set of (boolean or string or list of string)", "descriptionHTML": "<p>Options to add to {file}<code>$XDG_CONFIG_HOME/translate-shell/init.trans</code> file.\nSee <a href=\"https://github.com/soimort/translate-shell/wiki/Configuration\">https://github.com/soimort/translate-shell/wiki/Configuration</a>\nfor options.</p>"}, {"declarations": [{"name": "<programs/tray-tui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tray-tui.nix"}], "default": "false", "description": "Whether to enable tray-tui.", "example": "true", "loc": ["programs", "tray-tui", "enable"], "readOnly": false, "title": "programs.tray-tui.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable tray-tui.</p>"}, {"declarations": [{"name": "<programs/tray-tui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tray-tui.nix"}], "default": "pkgs.tray-tui", "description": "The tray-tui package to use.", "example": "", "loc": ["programs", "tray-tui", "package"], "readOnly": false, "title": "programs.tray-tui.package", "type": "null or package", "descriptionHTML": "<p>The tray-tui package to use.</p>"}, {"declarations": [{"name": "<programs/tray-tui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/tray-tui.nix"}], "default": "{ }", "description": "Configuration settings for tray-tui. All the available options\ncan be found here: https://github.com/Levizor/tray-tui/blob/main/config_example.toml", "example": "{\n  columns = 3;\n  key_map = {\n    down = \"focus_down\";\n    h = \"focus_left\";\n    j = \"focus_up\";\n    k = \"focus_down\";\n    l = \"focus_right\";\n    left = \"focus_left\";\n    right = \"focus_right\";\n    up = \"focus_up\";\n  };\n  sorting = false;\n}", "loc": ["programs", "tray-tui", "settings"], "readOnly": false, "title": "programs.tray-tui.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for tray-tui. All the available options\ncan be found here: <a href=\"https://github.com/Levizor/tray-tui/blob/main/config_example.toml\">https://github.com/Levizor/tray-tui/blob/main/config_example.toml</a></p>"}, {"declarations": [{"name": "<programs/trippy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/trippy.nix"}], "default": "false", "description": "Whether to enable trippy.", "example": "true", "loc": ["programs", "trippy", "enable"], "readOnly": false, "title": "programs.trippy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable trippy.</p>"}, {"declarations": [{"name": "<programs/trippy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/trippy.nix"}], "default": "pkgs.trippy", "description": "The trippy package to use.", "example": "", "loc": ["programs", "trippy", "package"], "readOnly": false, "title": "programs.trippy.package", "type": "null or package", "descriptionHTML": "<p>The trippy package to use.</p>"}, {"declarations": [{"name": "<programs/trippy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/trippy.nix"}], "default": "{ }", "description": "Configuration settings for trippy. All the available options can be found\nhere: https://trippy.rs/reference/configuration/", "example": "{\n  bindings = {\n    toggle-help = \"h\";\n    toggle-help-alt = \"?\";\n    toggle-settings = \"s\";\n    toggle-settings-dns = \"3\";\n    toggle-settings-geoip = \"4\";\n    toggle-settings-trace = \"2\";\n    toggle-settings-tui = \"1\";\n  };\n  theme-colors = {\n    bg-color = \"black\";\n    border-color = \"gray\";\n    tab-text-color = \"green\";\n    text-color = \"gray\";\n  };\n}", "loc": ["programs", "trippy", "settings"], "readOnly": false, "title": "programs.trippy.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for trippy. All the available options can be found\nhere: <a href=\"https://trippy.rs/reference/configuration/\">https://trippy.rs/reference/configuration/</a></p>"}, {"declarations": [{"name": "<programs/twitch-tui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/twitch-tui.nix"}], "default": "false", "description": "Whether to enable twitch-tui.", "example": "true", "loc": ["programs", "twitch-tui", "enable"], "readOnly": false, "title": "programs.twitch-tui.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable twitch-tui.</p>"}, {"declarations": [{"name": "<programs/twitch-tui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/twitch-tui.nix"}], "default": "pkgs.twitch-tui", "description": "The twitch-tui package to use.", "example": "", "loc": ["programs", "twitch-tui", "package"], "readOnly": false, "title": "programs.twitch-tui.package", "type": "null or package", "descriptionHTML": "<p>The twitch-tui package to use.</p>"}, {"declarations": [{"name": "<programs/twitch-tui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/twitch-tui.nix"}], "default": "{ }", "description": "Configuration settings for twitch-tui. All the available options\ncan be found here: https://github.com/Xithrius/twitch-tui/blob/main/default-config.toml", "example": "{\n  terminal = {\n    delay = 30;\n    first_state = \"dashboard\";\n    log_file = \"\";\n    log_level = \"info\";\n    maximum_messages = 500;\n  };\n  twitch = {\n    channel = \"\";\n    server = \"wss://eventsub.wss.twitch.tv/ws\";\n    token = \"\";\n    username = \"\";\n  };\n}", "loc": ["programs", "twitch-tui", "settings"], "readOnly": false, "title": "programs.twitch-tui.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for twitch-tui. All the available options\ncan be found here: <a href=\"https://github.com/Xithrius/twitch-tui/blob/main/default-config.toml\">https://github.com/Xithrius/twitch-tui/blob/main/default-config.toml</a></p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "false", "description": "Whether to enable rxvt-unicode terminal emulator.", "example": "true", "loc": ["programs", "urxvt", "enable"], "readOnly": false, "title": "programs.urxvt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rxvt-unicode terminal emulator.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "{ }", "description": "Additional configuration to add.", "example": "{\n  shading = 15;\n}", "loc": ["programs", "urxvt", "extraConfig"], "readOnly": false, "title": "programs.urxvt.extraConfig", "type": "attribute set of anything", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "[ ]", "description": "List of fonts to be used.", "example": "[\n  \"xft:Droid Sans Mono Nerd Font:size=9\"\n]", "loc": ["programs", "urxvt", "fonts"], "readOnly": false, "title": "programs.urxvt.fonts", "type": "list of string", "descriptionHTML": "<p>List of fonts to be used.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "true", "description": "ISO14755 support for viewing and entering unicode characters.", "example": "", "loc": ["programs", "urxvt", "iso14755"], "readOnly": false, "title": "programs.urxvt.iso14755", "type": "boolean", "descriptionHTML": "<p>ISO14755 support for viewing and entering unicode characters.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "{ }", "description": "Mapping of keybindings to actions", "example": "{\n  \"Shift-Control-C\" = \"eval:selection_to_clipboard\";\n  \"Shift-Control-V\" = \"eval:paste_clipboard\";\n}\n", "loc": ["programs", "urxvt", "keybindings"], "readOnly": false, "title": "programs.urxvt.keybindings", "type": "attribute set of string", "descriptionHTML": "<p>Mapping of keybindings to actions</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "pkgs.rxvt-unicode", "description": "The rxvt-unicode package to use.", "example": "", "loc": ["programs", "urxvt", "package"], "readOnly": false, "title": "programs.urxvt.package", "type": "package", "descriptionHTML": "<p>The rxvt-unicode package to use.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "{ }", "description": "Scrollbar settings.", "example": "", "loc": ["programs", "urxvt", "scroll", "bar"], "readOnly": false, "title": "programs.urxvt.scroll.bar", "type": "submodule", "descriptionHTML": "<p>Scrollbar settings.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "\"center\"", "description": "Scrollbar alignment.", "example": "", "loc": ["programs", "urxvt", "scroll", "bar", "align"], "readOnly": false, "title": "programs.urxvt.scroll.bar.align", "type": "one of \"top\", \"bottom\", \"center\"", "descriptionHTML": "<p>Scrollbar alignment.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "true", "description": "Whether to enable the scrollbar", "example": "", "loc": ["programs", "urxvt", "scroll", "bar", "enable"], "readOnly": false, "title": "programs.urxvt.scroll.bar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the scrollbar</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "true", "description": "Whether to display an rxvt scrollbar without a trough.", "example": "", "loc": ["programs", "urxvt", "scroll", "bar", "floating"], "readOnly": false, "title": "programs.urxvt.scroll.bar.floating", "type": "boolean", "descriptionHTML": "<p>Whether to display an rxvt scrollbar without a trough.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "\"right\"", "description": "Scrollbar position.", "example": "", "loc": ["programs", "urxvt", "scroll", "bar", "position"], "readOnly": false, "title": "programs.urxvt.scroll.bar.position", "type": "one of \"left\", \"right\"", "descriptionHTML": "<p>Scrollbar position.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "\"plain\"", "description": "Scrollbar style.", "example": "", "loc": ["programs", "urxvt", "scroll", "bar", "style"], "readOnly": false, "title": "programs.urxvt.scroll.bar.style", "type": "one of \"rxvt\", \"plain\", \"next\", \"xterm\"", "descriptionHTML": "<p>Scrollbar style.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "true", "description": "Whether to keep a scroll position when TTY receives new lines.", "example": "", "loc": ["programs", "urxvt", "scroll", "keepPosition"], "readOnly": false, "title": "programs.urxvt.scroll.keepPosition", "type": "boolean", "descriptionHTML": "<p>Whether to keep a scroll position when TTY receives new lines.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "10000", "description": "Number of lines to save in the scrollback buffer.", "example": "", "loc": ["programs", "urxvt", "scroll", "lines"], "readOnly": false, "title": "programs.urxvt.scroll.lines", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Number of lines to save in the scrollback buffer.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "true", "description": "Whether to scroll to bottom on keyboard input.", "example": "", "loc": ["programs", "urxvt", "scroll", "scrollOnKeystroke"], "readOnly": false, "title": "programs.urxvt.scroll.scrollOnKeystroke", "type": "boolean", "descriptionHTML": "<p>Whether to scroll to bottom on keyboard input.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "false", "description": "Whether to scroll to bottom on TTY output.", "example": "", "loc": ["programs", "urxvt", "scroll", "scrollOnOutput"], "readOnly": false, "title": "programs.urxvt.scroll.scrollOnOutput", "type": "boolean", "descriptionHTML": "<p>Whether to scroll to bottom on TTY output.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "100", "description": "Darken (0 to 99) or lighten (101 to 200) the transparent background.", "example": "", "loc": ["programs", "urxvt", "shading"], "readOnly": false, "title": "programs.urxvt.shading", "type": "integer between 0 and 200 (both inclusive)", "descriptionHTML": "<p>Darken (0 to 99) or lighten (101 to 200) the transparent background.</p>"}, {"declarations": [{"name": "<programs/urxvt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/urxvt.nix"}], "default": "false", "description": "Whether to enable pseudo-transparency.", "example": "", "loc": ["programs", "urxvt", "transparent"], "readOnly": false, "title": "programs.urxvt.transparent", "type": "boolean", "descriptionHTML": "<p>Whether to enable pseudo-transparency.</p>"}, {"declarations": [{"name": "<programs/uv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/uv.nix"}], "default": "false", "description": "Whether to enable uv.", "example": "true", "loc": ["programs", "uv", "enable"], "readOnly": false, "title": "programs.uv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable uv.</p>"}, {"declarations": [{"name": "<programs/uv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/uv.nix"}], "default": "pkgs.uv", "description": "The uv package to use.", "example": "", "loc": ["programs", "uv", "package"], "readOnly": false, "title": "programs.uv.package", "type": "null or package", "descriptionHTML": "<p>The uv package to use.</p>"}, {"declarations": [{"name": "<programs/uv.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/uv.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/uv/uv.toml.\nSee https://docs.astral.sh/uv/configuration/files/\nand https://docs.astral.sh/uv/reference/settings/\nfor more information.", "example": "{\n  python-downloads = \"never\";\n  python-preference = \"only-system\";\n  pip.index-url = \"https://test.pypi.org/simple\";\n}\n", "loc": ["programs", "uv", "settings"], "readOnly": false, "title": "programs.uv.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/uv/uv.toml</code>.\nSee <a href=\"https://docs.astral.sh/uv/configuration/files/\">https://docs.astral.sh/uv/configuration/files/</a>\nand <a href=\"https://docs.astral.sh/uv/reference/settings/\">https://docs.astral.sh/uv/reference/settings/</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/default.nix"}], "default": "false", "description": "Whether to enable vdirsyncer.", "example": "true", "loc": ["programs", "vdirsyncer", "enable"], "readOnly": false, "title": "programs.vdirsyncer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable vdirsyncer.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/default.nix"}], "default": "pkgs.vdirsyncer", "description": "The vdirsyncer package to use.", "example": "", "loc": ["programs", "vdirsyncer", "package"], "readOnly": false, "title": "programs.vdirsyncer.package", "type": "package", "descriptionHTML": "<p>The vdirsyncer package to use.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/default.nix"}], "default": "\"$XDG_DATA_HOME/vdirsyncer/status\"", "description": "A directory where vdirsyncer will store some additional data for the next sync.\nFor more information, see the\nvdirsyncer manual.", "example": "", "loc": ["programs", "vdirsyncer", "statusPath"], "readOnly": false, "title": "programs.vdirsyncer.statusPath", "type": "string", "descriptionHTML": "<p>A directory where vdirsyncer will store some additional data for the next sync.</p>\n<p>For more information, see the\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#general-section\">vdirsyncer manual</a>.</p>"}, {"declarations": [{"name": "<programs/vesktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vesktop.nix"}], "default": "false", "description": "Whether to enable Vesktop, an alternate client for Discord with Vencord built-in.", "example": "true", "loc": ["programs", "vesktop", "enable"], "readOnly": false, "title": "programs.vesktop.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Vesktop, an alternate client for Discord with Vencord built-in.</p>"}, {"declarations": [{"name": "<programs/vesktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vesktop.nix"}], "default": "pkgs.vesktop", "description": "The vesktop package to use.", "example": "", "loc": ["programs", "vesktop", "package"], "readOnly": false, "title": "programs.vesktop.package", "type": "package", "descriptionHTML": "<p>The vesktop package to use.</p>"}, {"declarations": [{"name": "<programs/vesktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vesktop.nix"}], "default": "{ }", "description": "Vesktop settings written to\n{file}$XDG_CONFIG_HOME/vesktop/settings.json. See\nhttps://github.com/Vencord/Vesktop/blob/main/src/shared/settings.d.ts\nfor available options.", "example": "{\n  appBadge = false;\n  arRPC = true;\n  checkUpdates = false;\n  customTitleBar = false;\n  disableMinSize = true;\n  minimizeToTray = false;\n  tray = false;\n  splashBackground = \"#000000\";\n  splashColor = \"#ffffff\";\n  splashTheming = true;\n  staticTitle = true;\n  hardwareAcceleration = true;\n  discordBranch = \"stable\";\n}\n", "loc": ["programs", "vesktop", "settings"], "readOnly": false, "title": "programs.vesktop.settings", "type": "JSON value", "descriptionHTML": "<p>Vesktop settings written to\n{file}<code>$XDG_CONFIG_HOME/vesktop/settings.json</code>. See\n<a href=\"https://github.com/Vencord/Vesktop/blob/main/src/shared/settings.d.ts\">https://github.com/Vencord/Vesktop/blob/main/src/shared/settings.d.ts</a>\nfor available options.</p>"}, {"declarations": [{"name": "<programs/vesktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vesktop.nix"}], "default": "{ }", "description": "Vencord settings written to\n{file}$XDG_CONFIG_HOME/vesktop/settings/settings.json. See\nhttps://github.com/Vendicated/Vencord/blob/main/src/api/Settings.ts\nfor available options.", "example": "{\n  autoUpdate = false;\n  autoUpdateNotification = false;\n  notifyAboutUpdates = false;\n  useQuickCss = true;\n  disableMinSize = true;\n  plugins = {\n    MessageLogger = {\n      enabled = true;\n      ignoreSelf = true;\n    };\n    FakeNitro.enabled = true;\n  };\n}\n", "loc": ["programs", "vesktop", "vencord", "settings"], "readOnly": false, "title": "programs.vesktop.vencord.settings", "type": "JSON value", "descriptionHTML": "<p>Vencord settings written to\n{file}<code>$XDG_CONFIG_HOME/vesktop/settings/settings.json</code>. See\n<a href=\"https://github.com/Vendicated/Vencord/blob/main/src/api/Settings.ts\">https://github.com/Vendicated/Vencord/blob/main/src/api/Settings.ts</a>\nfor available options.</p>"}, {"declarations": [{"name": "<programs/vesktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vesktop.nix"}], "default": "{ }", "description": "Themes to add for Vencord, they can be enabled by setting\nprograms.vesktop.vencord.settings.enabledThemes to [ \"THEME_NAME.css\" ]", "example": "", "loc": ["programs", "vesktop", "vencord", "themes"], "readOnly": false, "title": "programs.vesktop.vencord.themes", "type": "attribute set of (strings concatenated with \"\\n\" or absolute path)", "descriptionHTML": "<p>Themes to add for Vencord, they can be enabled by setting\n<code>programs.vesktop.vencord.settings.enabledThemes</code> to <code>[ \"THEME_NAME.css\" ]</code></p>"}, {"declarations": [{"name": "<programs/vesktop.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vesktop.nix"}], "default": "false", "description": "Whether to enable Vencord package from Nixpkgs.", "example": "true", "loc": ["programs", "vesktop", "vencord", "useSystem"], "readOnly": false, "title": "programs.vesktop.vencord.useSystem", "type": "boolean", "descriptionHTML": "<p>Whether to enable Vencord package from Nixpkgs.</p>"}, {"declarations": [{"name": "<programs/vifm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vifm.nix"}], "default": "false", "description": "Whether to enable vifm, a Vim-like file manager.", "example": "true", "loc": ["programs", "vifm", "enable"], "readOnly": false, "title": "programs.vifm.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable vifm, a Vim-like file manager.</p>"}, {"declarations": [{"name": "<programs/vifm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vifm.nix"}], "default": "\"\"", "description": "Extra lines added to the {file}$XDG_CONFIG_HOME/vifm/vifmrc file.", "example": "\"mark h ~/\"", "loc": ["programs", "vifm", "extraConfig"], "readOnly": false, "title": "programs.vifm.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines added to the {file}<code>$XDG_CONFIG_HOME/vifm/vifmrc</code> file.</p>"}, {"declarations": [{"name": "<programs/vifm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vifm.nix"}], "default": "pkgs.vifm", "description": "The vifm package to use.", "example": "", "loc": ["programs", "vifm", "package"], "readOnly": false, "title": "programs.vifm.package", "type": "null or package", "descriptionHTML": "<p>The vifm package to use.</p>"}, {"declarations": [{"name": "<programs/vim-vint.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim-vint.nix"}], "default": "false", "description": "Whether to enable the Vint linter for Vimscript.", "example": "true", "loc": ["programs", "vim-vint", "enable"], "readOnly": false, "title": "programs.vim-vint.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Vint linter for Vimscript.</p>"}, {"declarations": [{"name": "<programs/vim-vint.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim-vint.nix"}], "default": "pkgs.vim-vint", "description": "The vim-vint package to use.", "example": "", "loc": ["programs", "vim-vint", "package"], "readOnly": false, "title": "programs.vim-vint.package", "type": "null or package", "descriptionHTML": "<p>The vim-vint package to use.</p>"}, {"declarations": [{"name": "<programs/vim-vint.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim-vint.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/.vintrc.yaml", "example": "", "loc": ["programs", "vim-vint", "settings"], "readOnly": false, "title": "programs.vim-vint.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/.vintrc.yaml</code></p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "false", "description": "Whether to configure {command}vim as the default\neditor using the {env}EDITOR environment variable.", "example": "", "loc": ["programs", "vim", "defaultEditor"], "readOnly": false, "title": "programs.vim.defaultEditor", "type": "boolean", "descriptionHTML": "<p>Whether to configure {command}<code>vim</code> as the default\neditor using the {env}<code>EDITOR</code> environment variable.</p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "false", "description": "Whether to enable Vim.", "example": "true", "loc": ["programs", "vim", "enable"], "readOnly": false, "title": "programs.vim.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Vim.</p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "\"\"", "description": "Custom .vimrc lines", "example": "''\n  set nocompatible\n  set nobackup\n''", "loc": ["programs", "vim", "extraConfig"], "readOnly": false, "title": "programs.vim.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Custom .vimrc lines</p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "", "description": "Resulting customized vim package", "example": "", "loc": ["programs", "vim", "package"], "readOnly": true, "title": "programs.vim.package", "type": "package", "descriptionHTML": "<p>Resulting customized vim package</p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "pkgs.vim-full", "description": "The vim-full package to use. Vim package to customize", "example": "pkgs.vim", "loc": ["programs", "vim", "packageConfigurable"], "readOnly": false, "title": "programs.vim.packageConfigurable", "type": "package", "descriptionHTML": "<p>The vim-full package to use. Vim package to customize</p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "[\n  <derivation vimplugin-vim-sensible-2024-06-08>\n]", "description": "List of vim plugins to install. To get a list of supported plugins run:\n{command}nix-env -f '&lt;nixpkgs&gt;' -qaP -A vimPlugins.\nNote: String values are deprecated, please use actual packages.", "example": "[ pkgs.vimPlugins.YankRing ]", "loc": ["programs", "vim", "plugins"], "readOnly": false, "title": "programs.vim.plugins", "type": "list of (string or package)", "descriptionHTML": "<p>List of vim plugins to install. To get a list of supported plugins run:\n{command}<code>nix-env -f '&lt;nixpkgs&gt;' -qaP -A vimPlugins</code>.</p>\n<p>Note: String values are deprecated, please use actual packages.</p>"}, {"declarations": [{"name": "<programs/vim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vim.nix"}], "default": "{ }", "description": "At attribute set of Vim settings. The attribute names and\ncorresponding values must be among the following supported\noptions.\n{var}background\n: one of \"dark\", \"light\"\n{var}backupdir\n: list of string\n{var}copyindent\n: boolean\n{var}directory\n: list of string\n{var}expandtab\n: boolean\n{var}hidden\n: boolean\n{var}history\n: signed integer\n{var}ignorecase\n: boolean\n{var}modeline\n: boolean\n{var}mouse\n: one of \"n\", \"v\", \"i\", \"c\", \"h\", \"a\", \"r\"\n{var}mousefocus\n: boolean\n{var}mousehide\n: boolean\n{var}mousemodel\n: one of \"extend\", \"popup\", \"popup_setpos\"\n{var}number\n: boolean\n{var}relativenumber\n: boolean\n{var}shiftwidth\n: signed integer\n{var}smartcase\n: boolean\n{var}tabstop\n: signed integer\n{var}undodir\n: list of string\n{var}undofile\n: boolean\nSee the Vim documentation for detailed descriptions of these\noptions. Use  to manually\nset any options not listed above.", "example": "{\n  expandtab = true;\n  history = 1000;\n  background = \"dark\";\n}\n", "loc": ["programs", "vim", "settings"], "readOnly": false, "title": "programs.vim.settings", "type": "submodule", "descriptionHTML": "<p>At attribute set of Vim settings. The attribute names and\ncorresponding values must be among the following supported\noptions.</p>\n<p>{var}<code>background</code>\n: one of \"dark\", \"light\"</p>\n<p>{var}<code>backupdir</code>\n: list of string</p>\n<p>{var}<code>copyindent</code>\n: boolean</p>\n<p>{var}<code>directory</code>\n: list of string</p>\n<p>{var}<code>expandtab</code>\n: boolean</p>\n<p>{var}<code>hidden</code>\n: boolean</p>\n<p>{var}<code>history</code>\n: signed integer</p>\n<p>{var}<code>ignorecase</code>\n: boolean</p>\n<p>{var}<code>modeline</code>\n: boolean</p>\n<p>{var}<code>mouse</code>\n: one of \"n\", \"v\", \"i\", \"c\", \"h\", \"a\", \"r\"</p>\n<p>{var}<code>mousefocus</code>\n: boolean</p>\n<p>{var}<code>mousehide</code>\n: boolean</p>\n<p>{var}<code>mousemodel</code>\n: one of \"extend\", \"popup\", \"popup_setpos\"</p>\n<p>{var}<code>number</code>\n: boolean</p>\n<p>{var}<code>relativenumber</code>\n: boolean</p>\n<p>{var}<code>shiftwidth</code>\n: signed integer</p>\n<p>{var}<code>smartcase</code>\n: boolean</p>\n<p>{var}<code>tabstop</code>\n: signed integer</p>\n<p>{var}<code>undodir</code>\n: list of string</p>\n<p>{var}<code>undofile</code>\n: boolean</p>\n<p>See the Vim documentation for detailed descriptions of these\noptions. Use <a href=\"#opt-programs.vim.extraConfig\"></a> to manually\nset any options not listed above.</p>"}, {"declarations": [{"name": "<programs/vinegar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vinegar.nix"}], "default": "false", "description": "Whether to enable Vinegar.", "example": "true", "loc": ["programs", "vinegar", "enable"], "readOnly": false, "title": "programs.vinegar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Vinegar.</p>"}, {"declarations": [{"name": "<programs/vinegar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vinegar.nix"}], "default": "pkgs.vinegar", "description": "The vinegar package to use.", "example": "", "loc": ["programs", "vinegar", "package"], "readOnly": false, "title": "programs.vinegar.package", "type": "null or package", "descriptionHTML": "<p>The vinegar package to use.</p>"}, {"declarations": [{"name": "<programs/vinegar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vinegar.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/vinegar/config.toml.\nSee https://vinegarhq.org/Configuration/ for more information.", "example": "{\n  env = {\n    WINEFSYNC = \"1\";\n  };\n  studio = {\n    dxvk = false;\n    env = {\n      DXVK_HUD = \"0\";\n      MANGOHUD = \"1\";\n    };\n    fflags = {\n      DFIntTaskSchedulerTargetFps = 144;\n    };\n    renderer = \"Vulkan\";\n  };\n}", "loc": ["programs", "vinegar", "settings"], "readOnly": false, "title": "programs.vinegar.settings", "type": "attribute set of (TOML value)", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/vinegar/config.toml</code>.</p>\n<p>See <a href=\"https://vinegarhq.org/Configuration/\">https://vinegarhq.org/Configuration/</a> for more information.</p>"}, {"declarations": [{"name": "<programs/visidata.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/visidata.nix"}], "default": "false", "description": "Whether to enable Visidata.", "example": "true", "loc": ["programs", "visidata", "enable"], "readOnly": false, "title": "programs.visidata.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Visidata.</p>"}, {"declarations": [{"name": "<programs/visidata.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/visidata.nix"}], "default": "pkgs.visidata", "description": "The visidata package to use.", "example": "", "loc": ["programs", "visidata", "package"], "readOnly": false, "title": "programs.visidata.package", "type": "null or package", "descriptionHTML": "<p>The visidata package to use.</p>"}, {"declarations": [{"name": "<programs/visidata.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/visidata.nix"}], "default": "\"\"", "description": "Configuration settings and Python function declarations\nto be written to ~/.visidatarc. All available options\ncan be found here: https://www.visidata.org/docs/.", "example": "''\n  options.min_memory_mb=100  # stop processing without 100MB free\n  \n  bindkey('0', 'go-leftmost')   # alias '0' to go to first column, like vim\n  \n  def median(values):\n      L = sorted(values)\n      return L[len(L)//2]\n  \n  vd.aggregator('median', median)\n''", "loc": ["programs", "visidata", "visidatarc"], "readOnly": false, "title": "programs.visidata.visidatarc", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration settings and Python function declarations\nto be written to ~/.visidatarc. All available options\ncan be found here: <a href=\"https://www.visidata.org/docs/\">https://www.visidata.org/docs/</a>.</p>"}, {"declarations": [{"name": "<programs/chromium.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/chromium.nix"}], "default": "[ ]", "description": "List of Vivaldi Browser native messaging hosts to install.", "example": "[\n  pkgs.kdePackages.plasma-browser-integration\n]\n", "loc": ["programs", "vivaldi", "nativeMessagingHosts"], "readOnly": false, "title": "programs.vivaldi.nativeMessagingHosts", "type": "list of package", "descriptionHTML": "<p>List of Vivaldi Browser native messaging hosts to install.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "false", "description": "Whether to enable Visual Studio Code.", "example": "true", "loc": ["programs", "vscode", "enable"], "readOnly": false, "title": "programs.vscode.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Visual Studio Code.</p>"}, {"declarations": [{"name": "<programs/vscode/haskell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/haskell.nix"}], "default": "false", "description": "Whether to enable Haskell integration for Visual Studio Code.", "example": "true", "loc": ["programs", "vscode", "haskell", "enable"], "readOnly": false, "title": "programs.vscode.haskell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Haskell integration for Visual Studio Code.</p>"}, {"declarations": [{"name": "<programs/vscode/haskell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/haskell.nix"}], "default": "true", "description": "Whether to enable Haskell IDE engine integration.", "example": "", "loc": ["programs", "vscode", "haskell", "hie", "enable"], "readOnly": false, "title": "programs.vscode.haskell.hie.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Haskell IDE engine integration.</p>"}, {"declarations": [{"name": "<programs/vscode/haskell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/haskell.nix"}], "default": "\"${pkgs.hie-nix.hies}/bin/hie-wrapper\"", "description": "The path to the Haskell IDE Engine executable.\nBecause hie-nix is not packaged in Nixpkgs, you need to add it as an\noverlay or set this option. Example overlay configuration:\n```nix\nnixpkgs.overlays = [\n  (self: super: { hie-nix = import ~/src/hie-nix {}; })\n]\n```", "example": "(import ~/src/haskell-ide-engine {}).hies + \"/bin/hie-wrapper\";\n", "loc": ["programs", "vscode", "haskell", "hie", "executablePath"], "readOnly": false, "title": "programs.vscode.haskell.hie.executablePath", "type": "absolute path", "descriptionHTML": "<p>The path to the Haskell IDE Engine executable.</p>\n<p>Because hie-nix is not packaged in Nixpkgs, you need to add it as an\noverlay or set this option. Example overlay configuration:</p>\n<p>```nix\nnixpkgs.overlays = [\n  (self: super: { hie-nix = import ~/src/hie-nix {}; })\n]</p>\n<p>```</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "true", "description": "Whether extensions can be installed or updated manually\nor by Visual Studio Code. Mutually exclusive to\nprograms.vscode.profiles.", "example": "false", "loc": ["programs", "vscode", "mutableExtensionsDir"], "readOnly": false, "title": "programs.vscode.mutableExtensionsDir", "type": "boolean", "descriptionHTML": "<p>Whether extensions can be installed or updated manually\nor by Visual Studio Code. Mutually exclusive to\nprograms.vscode.profiles.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "pkgs.vscode", "description": "The vscode package to use. Version of Visual Studio Code to install.", "example": "pkgs.vscodium", "loc": ["programs", "vscode", "package"], "readOnly": false, "title": "programs.vscode.package", "type": "package", "descriptionHTML": "<p>The vscode package to use. Version of Visual Studio Code to install.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "{ }", "description": "A list of all VSCode profiles. Mutually exclusive\nto programs.vscode.mutableExtensionsDir", "example": "", "loc": ["programs", "vscode", "profiles"], "readOnly": false, "title": "programs.vscode.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>A list of all VSCode profiles. Mutually exclusive\nto programs.vscode.mutableExtensionsDir</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "null", "description": "Whether to enable update notifications for extensions.\nCan only be set for the default profile, but\nit applies to all profiles.", "example": "", "loc": ["programs", "vscode", "profiles", "<name>", "enableExtensionUpdateCheck"], "readOnly": false, "title": "programs.vscode.profiles.<name>.enableExtensionUpdateCheck", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable update notifications for extensions.\nCan only be set for the default profile, but\nit applies to all profiles.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "null", "description": "Whether to enable update checks/notifications.\nCan only be set for the default profile, but\nit applies to all profiles.", "example": "", "loc": ["programs", "vscode", "profiles", "<name>", "enableUpdateCheck"], "readOnly": false, "title": "programs.vscode.profiles.<name>.enableUpdateCheck", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable update checks/notifications.\nCan only be set for the default profile, but\nit applies to all profiles.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "[ ]", "description": "The extensions Visual Studio Code should be started with.", "example": "[ pkgs.vscode-extensions.bbenoist.nix ]", "loc": ["programs", "vscode", "profiles", "<name>", "extensions"], "readOnly": false, "title": "programs.vscode.profiles.<name>.extensions", "type": "list of package", "descriptionHTML": "<p>The extensions Visual Studio Code should be started with.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "{ }", "description": "Defines global user snippets.", "example": "{\n  fixme = {\n    body = [\n      \"$LINE_COMMENT FIXME: $0\"\n    ];\n    description = \"Insert a FIXME remark\";\n    prefix = [\n      \"fixme\"\n    ];\n  };\n}", "loc": ["programs", "vscode", "profiles", "<name>", "globalSnippets"], "readOnly": false, "title": "programs.vscode.profiles.<name>.globalSnippets", "type": "JSON value", "descriptionHTML": "<p>Defines global user snippets.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "[ ]", "description": "Keybindings written to Visual Studio Code's\n{file}keybindings.json.\nThis can be a JSON object or a path to a custom JSON file.", "example": "[\n  {\n    key = \"ctrl+c\";\n    command = \"editor.action.clipboardCopyAction\";\n    when = \"textInputFocus\";\n  }\n]\n", "loc": ["programs", "vscode", "profiles", "<name>", "keybindings"], "readOnly": false, "title": "programs.vscode.profiles.<name>.keybindings", "type": "absolute path or list of (submodule)", "descriptionHTML": "<p>Keybindings written to Visual Studio Code's\n{file}<code>keybindings.json</code>.\nThis can be a JSON object or a path to a custom JSON file.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "{ }", "description": "Defines user snippets for different languages.", "example": "{\n  haskell = {\n    fixme = {\n      body = [\n        \"$LINE_COMMENT FIXME: $0\"\n      ];\n      description = \"Insert a FIXME remark\";\n      prefix = [\n        \"fixme\"\n      ];\n    };\n  };\n}", "loc": ["programs", "vscode", "profiles", "<name>", "languageSnippets"], "readOnly": false, "title": "programs.vscode.profiles.<name>.languageSnippets", "type": "JSON value", "descriptionHTML": "<p>Defines user snippets for different languages.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "{ }", "description": "Configuration written to Visual Studio Code's\n{file}mcp.json.\nThis can be a JSON object or a path to a custom JSON file.", "example": "{\n  \"servers\": {\n    \"Github\": {\n      \"url\": \"https://api.githubcopilot.com/mcp/\"\n    }\n  }\n}\n", "loc": ["programs", "vscode", "profiles", "<name>", "userMcp"], "readOnly": false, "title": "programs.vscode.profiles.<name>.userMcp", "type": "absolute path or JSON value", "descriptionHTML": "<p>Configuration written to Visual Studio Code's\n{file}<code>mcp.json</code>.\nThis can be a JSON object or a path to a custom JSON file.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "{ }", "description": "Configuration written to Visual Studio Code's\n{file}settings.json.\nThis can be a JSON object or a path to a custom JSON file.", "example": "{\n  \"files.autoSave\" = \"off\";\n  \"[nix]\".\"editor.tabSize\" = 2;\n}\n", "loc": ["programs", "vscode", "profiles", "<name>", "userSettings"], "readOnly": false, "title": "programs.vscode.profiles.<name>.userSettings", "type": "absolute path or JSON value", "descriptionHTML": "<p>Configuration written to Visual Studio Code's\n{file}<code>settings.json</code>.\nThis can be a JSON object or a path to a custom JSON file.</p>"}, {"declarations": [{"name": "<programs/vscode/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vscode/default.nix"}], "default": "{ }", "description": "Configuration written to Visual Studio Code's\n{file}tasks.json.\nThis can be a JSON object or a path to a custom JSON file.", "example": "{\n  version = \"2.0.0\";\n  tasks = [\n    {\n      type = \"shell\";\n      label = \"Hello task\";\n      command = \"hello\";\n    }\n  ];\n}\n", "loc": ["programs", "vscode", "profiles", "<name>", "userTasks"], "readOnly": false, "title": "programs.vscode.profiles.<name>.userTasks", "type": "absolute path or JSON value", "descriptionHTML": "<p>Configuration written to Visual Studio Code's\n{file}<code>tasks.json</code>.\nThis can be a JSON object or a path to a custom JSON file.</p>"}, {"declarations": [{"name": "<programs/wallust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wallust.nix"}], "default": "false", "description": "Whether to enable Wallust color scheme generator.", "example": "true", "loc": ["programs", "wallust", "enable"], "readOnly": false, "title": "programs.wallust.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Wallust color scheme generator.</p>"}, {"declarations": [{"name": "<programs/wallust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wallust.nix"}], "default": "pkgs.wallust", "description": "The wallust package to use.", "example": "", "loc": ["programs", "wallust", "package"], "readOnly": false, "title": "programs.wallust.package", "type": "null or package", "descriptionHTML": "<p>The wallust package to use.</p>"}, {"declarations": [{"name": "<programs/wallust.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wallust.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/wallust/wallust.toml.\nSee https://explosion-mental.codeberg.page/wallust/config/ for\ndocumentation.", "example": "{\n  palette = \"softdark\";\n}\n", "loc": ["programs", "wallust", "settings"], "readOnly": false, "title": "programs.wallust.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/wallust/wallust.toml</code>.\nSee <a href=\"https://explosion-mental.codeberg.page/wallust/config/\">https://explosion-mental.codeberg.page/wallust/config/</a> for\ndocumentation.</p>"}, {"declarations": [{"name": "<programs/watson.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/watson.nix"}], "default": "false", "description": "Whether to enable watson, a wonderful CLI to track your time.", "example": "true", "loc": ["programs", "watson", "enable"], "readOnly": false, "title": "programs.watson.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable watson, a wonderful CLI to track your time.</p>"}, {"declarations": [{"name": "<programs/watson.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/watson.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "watson", "enableBashIntegration"], "readOnly": false, "title": "programs.watson.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/watson.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/watson.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "watson", "enableFishIntegration"], "readOnly": false, "title": "programs.watson.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/watson.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/watson.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "watson", "enableZshIntegration"], "readOnly": false, "title": "programs.watson.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/watson.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/watson.nix"}], "default": "pkgs.watson", "description": "The watson package to use.", "example": "", "loc": ["programs", "watson", "package"], "readOnly": false, "title": "programs.watson.package", "type": "package", "descriptionHTML": "<p>The watson package to use.</p>"}, {"declarations": [{"name": "<programs/watson.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/watson.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/watson/config on Linux or\n{file}$HOME/Library/Application Support/watson/config on Darwin.\nSee https://github.com/TailorDev/Watson/blob/master/docs/user-guide/configuration.md\nfor an example configuration.", "example": "{\n  backend = {\n    url = \"https://api.crick.fr\";\n    token = \"yourapitoken\";\n  };\n\n  options = {\n    stop_on_start = true;\n    stop_on_restart = false;\n    date_format = \"%Y.%m.%d\";\n    time_format = \"%H:%M:%S%z\";\n    week_start = \"monday\";\n    log_current = false;\n    pager = true;\n    report_current = false;\n    reverse_log = true;\n  };\n}\n", "loc": ["programs", "watson", "settings"], "readOnly": false, "title": "programs.watson.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/watson/config</code> on Linux or\n{file}<code>$HOME/Library/Application Support/watson/config</code> on Darwin.</p>\n<p>See <a href=\"https://github.com/TailorDev/Watson/blob/master/docs/user-guide/configuration.md\">https://github.com/TailorDev/Watson/blob/master/docs/user-guide/configuration.md</a>\nfor an example configuration.</p>"}, {"declarations": [{"name": "<programs/waveterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waveterm.nix"}], "default": "{ }", "description": "Bookmark definitions for WaveTerm. Details about the format and the options\ncan be found here: https://docs.waveterm.dev/config#webbookmarks-configuration.", "example": "{\n  \"bookmark@claude\" = {\n    title = \"Claude\";\n    url = \"https://claude.ai\";\n  };\n  \"bookmark@github\" = {\n    title = \"GitHub\";\n    url = \"https://github.com\";\n  };\n  \"bookmark@google\" = {\n    title = \"Google\";\n    url = \"https://www.google.com\";\n  };\n}", "loc": ["programs", "waveterm", "bookmarks"], "readOnly": false, "title": "programs.waveterm.bookmarks", "type": "JSON value", "descriptionHTML": "<p>Bookmark definitions for WaveTerm. Details about the format and the options\ncan be found here: <a href=\"https://docs.waveterm.dev/config#webbookmarks-configuration\">https://docs.waveterm.dev/config#webbookmarks-configuration</a>.</p>"}, {"declarations": [{"name": "<programs/waveterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waveterm.nix"}], "default": "false", "description": "Whether to enable waveterm.", "example": "true", "loc": ["programs", "waveterm", "enable"], "readOnly": false, "title": "programs.waveterm.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable waveterm.</p>"}, {"declarations": [{"name": "<programs/waveterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waveterm.nix"}], "default": "pkgs.waveterm", "description": "The waveterm package to use.", "example": "", "loc": ["programs", "waveterm", "package"], "readOnly": false, "title": "programs.waveterm.package", "type": "null or package", "descriptionHTML": "<p>The waveterm package to use.</p>"}, {"declarations": [{"name": "<programs/waveterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waveterm.nix"}], "default": "{ }", "description": "Configuration settings for WaveTerm. All available options can be\nfound here: https://docs.waveterm.dev/config#configuration-keys.", "example": "{\n  \"app:dismissarchitecturewarning\" = false;\n  \"autoupdate:enabled\" = false;\n  \"term:fontfamily\" = \"JuliaMono\";\n  \"term:fontsize\" = 12.0;\n  \"term:theme\" = \"my-custom-theme\";\n  \"term:transparency\" = 0.5;\n  \"window:bgcolor\" = \"#000000\";\n  \"window:blur\" = true;\n  \"window:opacity\" = 0.5;\n  \"window:reducedmotion\" = true;\n  \"window:showhelp\" = false;\n}", "loc": ["programs", "waveterm", "settings"], "readOnly": false, "title": "programs.waveterm.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration settings for WaveTerm. All available options can be\nfound here: <a href=\"https://docs.waveterm.dev/config#configuration-keys\">https://docs.waveterm.dev/config#configuration-keys</a>.</p>"}, {"declarations": [{"name": "<programs/waveterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waveterm.nix"}], "default": "{ }", "description": "User defined terminal themes. All the details about available options and\nformat can be found here: https://docs.waveterm.dev/config#terminal-theming.", "example": "{\n  default-dark = {\n    background = \"#00000077\";\n    black = \"#757575\";\n    blue = \"#85aacb\";\n    brightBlack = \"#727272\";\n    brightBlue = \"#9ab6cb\";\n    brightCyan = \"#b7b8cb\";\n    brightGreen = \"#a3dd97\";\n    brightMagenta = \"#cc8ecb\";\n    brightRed = \"#cc9d97\";\n    brightWhite = \"#f0f0f0\";\n    brightYellow = \"#cbcaaa\";\n    cmdtext = \"#f0f0f0\";\n    cursorAccent = \"\";\n    cyan = \"#74a7cb\";\n    \"display:name\" = \"Default Dark\";\n    \"display:order\" = 1;\n    foreground = \"#c1c1c1\";\n    gray = \"#8b918a\";\n    green = \"#76c266\";\n    magenta = \"#cc72ca\";\n    red = \"#cc685c\";\n    selectionBackground = \"\";\n    white = \"#c1c1c1\";\n    yellow = \"#cbca9b\";\n  };\n}", "loc": ["programs", "waveterm", "themes"], "readOnly": false, "title": "programs.waveterm.themes", "type": "JSON value", "descriptionHTML": "<p>User defined terminal themes. All the details about available options and\nformat can be found here: <a href=\"https://docs.waveterm.dev/config#terminal-theming\">https://docs.waveterm.dev/config#terminal-theming</a>.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "false", "description": "Whether to enable Waybar.", "example": "true", "loc": ["programs", "waybar", "enable"], "readOnly": false, "title": "programs.waybar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Waybar.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "pkgs.waybar", "description": "Waybar package to use. Set to null to use the default package.", "example": "", "loc": ["programs", "waybar", "package"], "readOnly": false, "title": "programs.waybar.package", "type": "package", "descriptionHTML": "<p>Waybar package to use. Set to <code>null</code> to use the default package.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "[ ]", "description": "Configuration for Waybar, see https://github.com/Alexays/Waybar/wiki/Configuration\nfor supported values.", "example": "{\n  mainBar = {\n    layer = \"top\";\n    position = \"top\";\n    height = 30;\n    output = [\n      \"eDP-1\"\n      \"HDMI-A-1\"\n    ];\n    modules-left = [ \"sway/workspaces\" \"sway/mode\" \"wlr/taskbar\" ];\n    modules-center = [ \"sway/window\" \"custom/hello-from-waybar\" ];\n    modules-right = [ \"mpd\" \"custom/mymodule#with-css-id\" \"temperature\" ];\n\n    \"sway/workspaces\" = {\n      disable-scroll = true;\n      all-outputs = true;\n    };\n    \"custom/hello-from-waybar\" = {\n      format = \"hello {}\";\n      max-length = 40;\n      interval = \"once\";\n      exec = pkgs.writeShellScript \"hello-from-waybar\" ''\n        echo \"from within waybar\"\n      '';\n    };\n  };\n}\n", "loc": ["programs", "waybar", "settings"], "readOnly": false, "title": "programs.waybar.settings", "type": "(list of (JSON value)) or attribute set of (JSON value)", "descriptionHTML": "<p>Configuration for Waybar, see <a href=\"https://github.com/Alexays/Waybar/wiki/Configuration\">https://github.com/Alexays/Waybar/wiki/Configuration</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "null", "description": "CSS style of the bar.\nSee https://github.com/Alexays/Waybar/wiki/Configuration\nfor the documentation.\nIf the value is set to a path literal, then the path will be used as the css file.", "example": "''\n  * {\n    border: none;\n    border-radius: 0;\n    font-family: Source Code Pro;\n  }\n  window#waybar {\n    background: #16191C;\n    color: #AAB2BF;\n  }\n  #workspaces button {\n    padding: 0 5px;\n  }\n''", "loc": ["programs", "waybar", "style"], "readOnly": false, "title": "programs.waybar.style", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>CSS style of the bar.</p>\n<p>See <a href=\"https://github.com/Alexays/Waybar/wiki/Configuration\">https://github.com/Alexays/Waybar/wiki/Configuration</a>\nfor the documentation.</p>\n<p>If the value is set to a path literal, then the path will be used as the css file.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "false", "description": "Whether to enable Waybar systemd integration.", "example": "true", "loc": ["programs", "waybar", "systemd", "enable"], "readOnly": false, "title": "programs.waybar.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Waybar systemd integration.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "false", "description": "Whether to enable debug logging.", "example": "true", "loc": ["programs", "waybar", "systemd", "enableDebug"], "readOnly": false, "title": "programs.waybar.systemd.enableDebug", "type": "boolean", "descriptionHTML": "<p>Whether to enable debug logging.</p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "false", "description": "Inspect objects and find their CSS classes, experiment with live CSS styles, and lookup the current value of CSS properties.\nSee https://developer.gnome.org/documentation/tools/inspector.html", "example": "true", "loc": ["programs", "waybar", "systemd", "enableInspect"], "readOnly": false, "title": "programs.waybar.systemd.enableInspect", "type": "boolean", "descriptionHTML": "<p>Inspect objects and find their CSS classes, experiment with live CSS styles, and lookup the current value of CSS properties.</p>\n<p>See <a href=\"https://developer.gnome.org/documentation/tools/inspector.html\">https://developer.gnome.org/documentation/tools/inspector.html</a></p>"}, {"declarations": [{"name": "<programs/waybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waybar.nix"}], "default": "config.wayland.systemd.target", "description": "The systemd target that will automatically start the Waybar service.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["programs", "waybar", "systemd", "target"], "readOnly": false, "title": "programs.waybar.systemd.target", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start the Waybar service.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<programs/waylogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waylogout.nix"}], "default": "false", "description": "Whether or not to enable waylogout.", "example": "true", "loc": ["programs", "waylogout", "enable"], "readOnly": false, "title": "programs.waylogout.enable", "type": "boolean", "descriptionHTML": "<p>Whether or not to enable waylogout.</p>"}, {"declarations": [{"name": "<programs/waylogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waylogout.nix"}], "default": "pkgs.waylogout", "description": "The waylogout package to use.", "example": "", "loc": ["programs", "waylogout", "package"], "readOnly": false, "title": "programs.waylogout.package", "type": "null or package", "descriptionHTML": "<p>The waylogout package to use.</p>"}, {"declarations": [{"name": "<programs/waylogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/waylogout.nix"}], "default": "{ }", "description": "Default arguments to {command}waylogout. An empty set\ndisables configuration generation.", "example": "{\n  color = \"808080\";\n  effect-blur = \"7x4\";\n  poweroff-command = \"systemctl poweroff\";\n  reboot-command = \"systemctl reboot\";\n  scaling = \"fit\";\n  screenshots = true;\n}", "loc": ["programs", "waylogout", "settings"], "readOnly": false, "title": "programs.waylogout.settings", "type": "attribute set of (boolean or floating point number or signed integer or absolute path or string)", "descriptionHTML": "<p>Default arguments to {command}<code>waylogout</code>. An empty set\ndisables configuration generation.</p>"}, {"declarations": [{"name": "<programs/wayprompt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wayprompt.nix"}], "default": "false", "description": "Whether to enable Wayprompt, a password-prompter for Wayland.", "example": "true", "loc": ["programs", "wayprompt", "enable"], "readOnly": false, "title": "programs.wayprompt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Wayprompt, a password-prompter for Wayland.</p>"}, {"declarations": [{"name": "<programs/wayprompt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wayprompt.nix"}], "default": "pkgs.wayprompt", "description": "The wayprompt package to use.", "example": "", "loc": ["programs", "wayprompt", "package"], "readOnly": false, "title": "programs.wayprompt.package", "type": "null or package", "descriptionHTML": "<p>The wayprompt package to use.</p>"}, {"declarations": [{"name": "<programs/wayprompt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wayprompt.nix"}], "default": "{ }", "description": "Configuration for wayprompt written to\n{file}$XDG_CONFIG_HOME/wayprompt/config.ini.\nSee {manpage}wayprompt(5) for a list of available options.\nNote that colours can be either 6-hex-digit RGB or 8-hex-digit RGBA values.", "example": "{\n  general = {\n    font-regular = \"sans:size=14\";\n    pin-square-amount = 32;\n  };\n  colours = {\n    background = \"ffffffaa\";\n  };\n}\n", "loc": ["programs", "wayprompt", "settings"], "readOnly": false, "title": "programs.wayprompt.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration for wayprompt written to\n{file}<code>$XDG_CONFIG_HOME/wayprompt/config.ini</code>.\nSee {manpage}<code>wayprompt(5)</code> for a list of available options.\nNote that colours can be either 6-hex-digit RGB or 8-hex-digit RGBA values.</p>"}, {"declarations": [{"name": "<programs/wezterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wezterm.nix"}], "default": "{ }", "description": "Attribute set of additional color schemes to be written to\n{file}$XDG_CONFIG_HOME/wezterm/colors, where each key is\ntaken as the name of the corresponding color scheme. See\nhttps://wezfurlong.org/wezterm/config/appearance.html#defining-a-color-scheme-in-a-separate-file\nfor more details of the TOML color scheme format.", "example": "myCoolTheme = {\n  ansi = [\n    \"#222222\" \"#D14949\" \"#48874F\" \"#AFA75A\"\n    \"#599797\" \"#8F6089\" \"#5C9FA8\" \"#8C8C8C\"\n  ];\n  brights = [\n    \"#444444\" \"#FF6D6D\" \"#89FF95\" \"#FFF484\"\n    \"#97DDFF\" \"#FDAAF2\" \"#85F5DA\" \"#E9E9E9\"\n  ];\n  background = \"#1B1B1B\";\n  cursor_bg = \"#BEAF8A\";\n  cursor_border = \"#BEAF8A\";\n  cursor_fg = \"#1B1B1B\";\n  foreground = \"#BEAF8A\";\n  selection_bg = \"#444444\";\n  selection_fg = \"#E9E9E9\";\n};\n", "loc": ["programs", "wezterm", "colorSchemes"], "readOnly": false, "title": "programs.wezterm.colorSchemes", "type": "attribute set of (TOML value)", "descriptionHTML": "<p>Attribute set of additional color schemes to be written to\n{file}<code>$XDG_CONFIG_HOME/wezterm/colors</code>, where each key is\ntaken as the name of the corresponding color scheme. See\n<a href=\"https://wezfurlong.org/wezterm/config/appearance.html#defining-a-color-scheme-in-a-separate-file\">https://wezfurlong.org/wezterm/config/appearance.html#defining-a-color-scheme-in-a-separate-file</a>\nfor more details of the TOML color scheme format.</p>"}, {"declarations": [{"name": "<programs/wezterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wezterm.nix"}], "default": "false", "description": "Whether to enable wezterm.", "example": "true", "loc": ["programs", "wezterm", "enable"], "readOnly": false, "title": "programs.wezterm.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wezterm.</p>"}, {"declarations": [{"name": "<programs/wezterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wezterm.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "wezterm", "enableBashIntegration"], "readOnly": false, "title": "programs.wezterm.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/wezterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wezterm.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "wezterm", "enableZshIntegration"], "readOnly": false, "title": "programs.wezterm.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/wezterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wezterm.nix"}], "default": "\"\"", "description": "Extra configuration written to\n{file}$XDG_CONFIG_HOME/wezterm/wezterm.lua. See\nhttps://wezfurlong.org/wezterm/config/files.html\nhow to configure.", "example": "-- Your lua code / config here\nlocal mylib = require 'mylib';\nreturn {\n  usemylib = mylib.do_fun();\n  font = wezterm.font(\"JetBrains Mono\"),\n  font_size = 16.0,\n  color_scheme = \"Tomorrow Night\",\n  hide_tab_bar_if_only_one_tab = true,\n  default_prog = { \"zsh\", \"--login\", \"-c\", \"tmux attach -t dev || tmux new -s dev\" },\n  keys = {\n    {key=\"n\", mods=\"SHIFT|CTRL\", action=\"ToggleFullScreen\"},\n  }\n}\n", "loc": ["programs", "wezterm", "extraConfig"], "readOnly": false, "title": "programs.wezterm.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration written to\n{file}<code>$XDG_CONFIG_HOME/wezterm/wezterm.lua</code>. See\n<a href=\"https://wezfurlong.org/wezterm/config/files.html\">https://wezfurlong.org/wezterm/config/files.html</a>\nhow to configure.</p>"}, {"declarations": [{"name": "<programs/wezterm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wezterm.nix"}], "default": "pkgs.wezterm", "description": "The wezterm package to use.", "example": "", "loc": ["programs", "wezterm", "package"], "readOnly": false, "title": "programs.wezterm.package", "type": "package", "descriptionHTML": "<p>The wezterm package to use.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "false", "description": "Whether to enable wlogout.", "example": "true", "loc": ["programs", "wlogout", "enable"], "readOnly": false, "title": "programs.wlogout.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wlogout.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "[ ]", "description": "Layout configuration for wlogout, see https://github.com/ArtsyMacaw/wlogout#config\nfor supported values.", "example": "[\n  {\n    label = \"shutdown\";\n    action = \"systemctl poweroff\";\n    text = \"Shutdown\";\n    keybind = \"s\";\n  }\n]\n", "loc": ["programs", "wlogout", "layout"], "readOnly": false, "title": "programs.wlogout.layout", "type": "list of (JSON value)", "descriptionHTML": "<p>Layout configuration for wlogout, see <a href=\"https://github.com/ArtsyMacaw/wlogout#config\">https://github.com/ArtsyMacaw/wlogout#config</a>\nfor supported values.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "\"\"", "description": "Command to execute when clicked.", "example": "\"systemctl poweroff\"", "loc": ["programs", "wlogout", "layout", "*", "action"], "readOnly": false, "title": "programs.wlogout.layout.*.action", "type": "absolute path or string", "descriptionHTML": "<p>Command to execute when clicked.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "null", "description": "Make button circular.", "example": "true", "loc": ["programs", "wlogout", "layout", "*", "circular"], "readOnly": false, "title": "programs.wlogout.layout.*.circular", "type": "null or boolean", "descriptionHTML": "<p>Make button circular.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "null", "description": "Relative height of tile.", "example": "0.5", "loc": ["programs", "wlogout", "layout", "*", "height"], "readOnly": false, "title": "programs.wlogout.layout.*.height", "type": "null or integer or floating point number between 0 and 1 (both inclusive)", "descriptionHTML": "<p>Relative height of tile.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "\"\"", "description": "Keyboard character to trigger this action.", "example": "\"s\"", "loc": ["programs", "wlogout", "layout", "*", "keybind"], "readOnly": false, "title": "programs.wlogout.layout.*.keybind", "type": "string", "descriptionHTML": "<p>Keyboard character to trigger this action.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "\"\"", "description": "CSS label of button.", "example": "\"shutdown\"", "loc": ["programs", "wlogout", "layout", "*", "label"], "readOnly": false, "title": "programs.wlogout.layout.*.label", "type": "string", "descriptionHTML": "<p>CSS label of button.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "\"\"", "description": "Text displayed on button.", "example": "\"Shutdown\"", "loc": ["programs", "wlogout", "layout", "*", "text"], "readOnly": false, "title": "programs.wlogout.layout.*.text", "type": "string", "descriptionHTML": "<p>Text displayed on button.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "null", "description": "Relative width of tile.", "example": "0.5", "loc": ["programs", "wlogout", "layout", "*", "width"], "readOnly": false, "title": "programs.wlogout.layout.*.width", "type": "null or integer or floating point number between 0 and 1 (both inclusive)", "descriptionHTML": "<p>Relative width of tile.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "pkgs.wlogout", "description": "The wlogout package to use.", "example": "", "loc": ["programs", "wlogout", "package"], "readOnly": false, "title": "programs.wlogout.package", "type": "null or package", "descriptionHTML": "<p>The wlogout package to use.</p>"}, {"declarations": [{"name": "<programs/wlogout.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wlogout.nix"}], "default": "null", "description": "CSS style of the bar.\nSee https://github.com/ArtsyMacaw/wlogout#style\nfor the documentation.\nIf the value is set to a path literal, then the path will be used as the css file.", "example": "''\n  window {\n    background: #16191C;\n  }\n  \n  button {\n    color: #AAB2BF;\n  }\n''", "loc": ["programs", "wlogout", "style"], "readOnly": false, "title": "programs.wlogout.style", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>CSS style of the bar.</p>\n<p>See <a href=\"https://github.com/ArtsyMacaw/wlogout#style\">https://github.com/ArtsyMacaw/wlogout#style</a>\nfor the documentation.</p>\n<p>If the value is set to a path literal, then the path will be used as the css file.</p>"}, {"declarations": [{"name": "<programs/wofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wofi.nix"}], "default": "false", "description": "Whether to enable wofi: a launcher/menu program for wlroots based wayland compositors such as sway.", "example": "true", "loc": ["programs", "wofi", "enable"], "readOnly": false, "title": "programs.wofi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wofi: a launcher/menu program for wlroots based wayland compositors such as sway.</p>"}, {"declarations": [{"name": "<programs/wofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wofi.nix"}], "default": "pkgs.wofi", "description": "The wofi package to use.", "example": "", "loc": ["programs", "wofi", "package"], "readOnly": false, "title": "programs.wofi.package", "type": "null or package", "descriptionHTML": "<p>The wofi package to use.</p>"}, {"declarations": [{"name": "<programs/wofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wofi.nix"}], "default": "{ }", "description": "Configuration options for wofi. See\n{manpage}wofi(5).", "example": "{\n  location = \"bottom-right\";\n  allow_markup = true;\n  width = 250;\n}\n", "loc": ["programs", "wofi", "settings"], "readOnly": false, "title": "programs.wofi.settings", "type": "attribute set", "descriptionHTML": "<p>Configuration options for wofi. See\n{manpage}<code>wofi(5)</code>.</p>"}, {"declarations": [{"name": "<programs/wofi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/wofi.nix"}], "default": "null", "description": "CSS style for wofi to use as a stylesheet. See\n{manpage}wofi(7)", "example": "''\n  * {\n      font-family: monospace;\n  }\n  \n  window {\n      background-color: #7c818c;\n  }\n''", "loc": ["programs", "wofi", "style"], "readOnly": false, "title": "programs.wofi.style", "type": "null or strings concatenated with \"\\n\" or absolute path", "descriptionHTML": "<p>CSS style for wofi to use as a stylesheet. See\n{manpage}<code>wofi(7)</code></p>"}, {"declarations": [{"name": "<programs/xmobar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xmobar.nix"}], "default": "false", "description": "Whether to enable Xmobar, a minimalistic status bar.", "example": "true", "loc": ["programs", "xmobar", "enable"], "readOnly": false, "title": "programs.xmobar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Xmobar, a minimalistic status bar.</p>"}, {"declarations": [{"name": "<programs/xmobar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xmobar.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to\n{file}$XDG_CONFIG_HOME/xmobar/.xmobarrc.\nSee\nhttps://xmobar.org/#configuration\nfor options.", "example": "Config\n  { font        = \"Fira Code\"\n  , borderColor = \"#d0d0d0\"\n  , border      = FullB\n  , borderWidth = 3\n  , bgColor     = \"#222\"\n  , fgColor     = \"grey\"\n  , position    = TopSize C 99 30\n  , commands    =\n      [ Run Cpu [\"-t\", \"cpu: <fc=#4eb4fa><bar> <total>%</fc>\"] 10\n      , Run Network \"enp3s0\" [\"-S\", \"True\", \"-t\", \"eth: <fc=#4eb4fa><rx></fc>/<fc=#4eb4fa><tx></fc>\"] 10\n      , Run Memory [\"-t\",\"mem: <fc=#4eb4fa><usedbar> <usedratio>%</fc>\"] 10\n      , Run Date \"date: <fc=#4eb4fa>%a %d %b %Y %H:%M:%S </fc>\" \"date\" 10\n      , Run StdinReader\n      ]\n  , sepChar     = \"%\"\n  , alignSep    = \"}{\"\n  , template    = \"  %StdinReader% | %cpu% | %memory% | %enp3s0%  }{%date%  \"\n  }\n", "loc": ["programs", "xmobar", "extraConfig"], "readOnly": false, "title": "programs.xmobar.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to\n{file}<code>$XDG_CONFIG_HOME/xmobar/.xmobarrc</code>.\nSee\n<a href=\"https://xmobar.org/#configuration\">https://xmobar.org/#configuration</a>\nfor options.</p>"}, {"declarations": [{"name": "<programs/xmobar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xmobar.nix"}], "default": "pkgs.haskellPackages.xmobar", "description": "The xmobar package to use.", "example": "", "loc": ["programs", "xmobar", "package"], "readOnly": false, "title": "programs.xmobar.package", "type": "package", "descriptionHTML": "<p>The xmobar package to use.</p>"}, {"declarations": [{"name": "<programs/xplr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xplr.nix"}], "default": "false", "description": "Whether to enable xplr, terminal UI based file explorer.", "example": "true", "loc": ["programs", "xplr", "enable"], "readOnly": false, "title": "programs.xplr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable xplr, terminal UI based file explorer.</p>"}, {"declarations": [{"name": "<programs/xplr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xplr.nix"}], "default": "\"\"", "description": "Extra xplr configuration.", "example": "require(\"wl-clipboard\").setup {\n  copy_command = \"wl-copy -t text/uri-list\",\n  paste_command = \"wl-paste\",\n  keep_selection = true,\n}\n", "loc": ["programs", "xplr", "extraConfig"], "readOnly": false, "title": "programs.xplr.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra xplr configuration.</p>"}, {"declarations": [{"name": "<programs/xplr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xplr.nix"}], "default": "pkgs.xplr", "description": "The xplr package to use.", "example": "", "loc": ["programs", "xplr", "package"], "readOnly": false, "title": "programs.xplr.package", "type": "null or package", "descriptionHTML": "<p>The xplr package to use.</p>"}, {"declarations": [{"name": "<programs/xplr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/xplr.nix"}], "default": "{ }", "description": "An attribute set of plugin paths to be added to the [package.path]https://www.lua.org/manual/5.4/manual.html#pdf-package.path of the {file}~/config/xplr/init.lua configuration file.\nMust be a package or string representing the plugin directory's path.\nIf the path string is not absolute, it will be relative to {file}$XDG_CONFIG_HOME/xplr/init.lua.", "example": "{\n  wl-clipboard = fetchFromGitHub {\n    owner = \"sayanarijit\";\n    repo = \"wl-clipboard.xplr\";\n    rev = \"a3ffc87460c5c7f560bffea689487ae14b36d9c3\";\n    hash = \"sha256-I4rh5Zks9hiXozBiPDuRdHwW5I7ppzEpQNtirY0Lcks=\";\n  }\n  local-plugin = \"/home/user/.config/plugins/local-plugin\";\n};\n", "loc": ["programs", "xplr", "plugins"], "readOnly": false, "title": "programs.xplr.plugins", "type": "null or (attribute set of (package or string))", "descriptionHTML": "<p>An attribute set of plugin paths to be added to the [package.path]<a href=\"https://www.lua.org/manual/5.4/manual.html#pdf-package.path\">https://www.lua.org/manual/5.4/manual.html#pdf-package.path</a> of the {file}<code>~/config/xplr/init.lua</code> configuration file.</p>\n<p>Must be a package or string representing the plugin directory's path.\nIf the path string is not absolute, it will be relative to {file}<code>$XDG_CONFIG_HOME/xplr/init.lua</code>.</p>"}, {"declarations": [{"name": "<programs/yambar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yambar.nix"}], "default": "false", "description": "Whether to enable Yambar.", "example": "true", "loc": ["programs", "yambar", "enable"], "readOnly": false, "title": "programs.yambar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Yambar.</p>"}, {"declarations": [{"name": "<programs/yambar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yambar.nix"}], "default": "pkgs.yambar", "description": "The yambar package to use.", "example": "", "loc": ["programs", "yambar", "package"], "readOnly": false, "title": "programs.yambar.package", "type": "null or package", "descriptionHTML": "<p>The yambar package to use.</p>"}, {"declarations": [{"name": "<programs/yambar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yambar.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/yambar/config.yml.\nSee {manpage}yambar(5) for options.", "example": "bar = {\n  location = \"top\";\n  height = 26;\n  background = \"00000066\";\n\n  right = [\n    {\n      clock.content = [\n        {\n          string.text = \"{time}\";\n        }\n      ];\n    }\n  ];\n};\n", "loc": ["programs", "yambar", "settings"], "readOnly": false, "title": "programs.yambar.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/yambar/config.yml</code>.\nSee {manpage}<code>yambar(5)</code> for options.</p>"}, {"declarations": [{"name": "<programs/yambar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yambar.nix"}], "default": "false", "description": "Whether to enable yambar systemd integration.", "example": "true", "loc": ["programs", "yambar", "systemd", "enable"], "readOnly": false, "title": "programs.yambar.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable yambar systemd integration.</p>"}, {"declarations": [{"name": "<programs/yambar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yambar.nix"}], "default": "\"graphical-session.target\"", "description": "The systemd target that will automatically start the yambar service.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["programs", "yambar", "systemd", "target"], "readOnly": false, "title": "programs.yambar.systemd.target", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start the yambar service.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "false", "description": "Whether to enable yazi.", "example": "true", "loc": ["programs", "yazi", "enable"], "readOnly": false, "title": "programs.yazi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable yazi.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "yazi", "enableBashIntegration"], "readOnly": false, "title": "programs.yazi.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "yazi", "enableFishIntegration"], "readOnly": false, "title": "programs.yazi.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "yazi", "enableNushellIntegration"], "readOnly": false, "title": "programs.yazi.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "yazi", "enableZshIntegration"], "readOnly": false, "title": "programs.yazi.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "{ }", "description": "Pre-made themes.\nValues should be a package or path containing the required files.\nWill be linked to {file}$XDG_CONFIG_HOME/yazi/flavors/&lt;name&gt;.yazi.\nSee https://yazi-rs.github.io/docs/flavors/overview/ for documentation.", "example": "{\n  foo = ./foo;\n  bar = pkgs.bar;\n}\n", "loc": ["programs", "yazi", "flavors"], "readOnly": false, "title": "programs.yazi.flavors", "type": "attribute set of (absolute path or package)", "descriptionHTML": "<p>Pre-made themes.\nValues should be a package or path containing the required files.\nWill be linked to {file}<code>$XDG_CONFIG_HOME/yazi/flavors/&lt;name&gt;.yazi</code>.</p>\n<p>See <a href=\"https://yazi-rs.github.io/docs/flavors/overview/\">https://yazi-rs.github.io/docs/flavors/overview/</a> for documentation.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "null", "description": "The init.lua for Yazi itself.", "example": "./init.lua", "loc": ["programs", "yazi", "initLua"], "readOnly": false, "title": "programs.yazi.initLua", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>The init.lua for Yazi itself.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/yazi/keymap.toml.\nSee https://yazi-rs.github.io/docs/configuration/keymap\nfor the full list of options.", "example": "{\n  input.prepend_keymap = [\n    { run = \"close\"; on = [ \"<C-q>\" ]; }\n    { run = \"close --submit\"; on = [ \"<Enter>\" ]; }\n    { run = \"escape\"; on = [ \"<Esc>\" ]; }\n    { run = \"backspace\"; on = [ \"<Backspace>\" ]; }\n  ];\n  mgr.prepend_keymap = [\n    { run = \"escape\"; on = [ \"<Esc>\" ]; }\n    { run = \"quit\"; on = [ \"q\" ]; }\n    { run = \"close\"; on = [ \"<C-q>\" ]; }\n  ];\n}\n", "loc": ["programs", "yazi", "keymap"], "readOnly": false, "title": "programs.yazi.keymap", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/yazi/keymap.toml</code>.</p>\n<p>See <a href=\"https://yazi-rs.github.io/docs/configuration/keymap\">https://yazi-rs.github.io/docs/configuration/keymap</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "pkgs.yazi", "description": "The yazi package to use.", "example": "", "loc": ["programs", "yazi", "package"], "readOnly": false, "title": "programs.yazi.package", "type": "null or package", "descriptionHTML": "<p>The yazi package to use.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "{ }", "description": "Lua plugins.\nValues should be a package or path containing an init.lua file.\nWill be linked to {file}$XDG_CONFIG_HOME/yazi/plugins/&lt;name&gt;.yazi.\nSee https://yazi-rs.github.io/docs/plugins/overview\nfor documentation.", "example": "{\n  foo = ./foo;\n  bar = pkgs.bar;\n}\n", "loc": ["programs", "yazi", "plugins"], "readOnly": false, "title": "programs.yazi.plugins", "type": "attribute set of (absolute path or package)", "descriptionHTML": "<p>Lua plugins.\nValues should be a package or path containing an <code>init.lua</code> file.\nWill be linked to {file}<code>$XDG_CONFIG_HOME/yazi/plugins/&lt;name&gt;.yazi</code>.</p>\n<p>See <a href=\"https://yazi-rs.github.io/docs/plugins/overview\">https://yazi-rs.github.io/docs/plugins/overview</a>\nfor documentation.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/yazi/yazi.toml.\nSee https://yazi-rs.github.io/docs/configuration/yazi\nfor the full list of options.", "example": "{\n  log = {\n    enabled = false;\n  };\n  mgr = {\n    show_hidden = false;\n    sort_by = \"mtime\";\n    sort_dir_first = true;\n    sort_reverse = true;\n  };\n}\n", "loc": ["programs", "yazi", "settings"], "readOnly": false, "title": "programs.yazi.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/yazi/yazi.toml</code>.</p>\n<p>See <a href=\"https://yazi-rs.github.io/docs/configuration/yazi\">https://yazi-rs.github.io/docs/configuration/yazi</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "\"yy\"", "description": "Name of the shell wrapper to be called.", "example": "\"y\"", "loc": ["programs", "yazi", "shellWrapperName"], "readOnly": false, "title": "programs.yazi.shellWrapperName", "type": "string", "descriptionHTML": "<p>Name of the shell wrapper to be called.</p>"}, {"declarations": [{"name": "<programs/yazi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yazi.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/yazi/theme.toml.\nSee https://yazi-rs.github.io/docs/configuration/theme\nfor the full list of options", "example": "{\n  filetype = {\n    rules = [\n      { fg = \"#7AD9E5\"; mime = \"image/*\"; }\n      { fg = \"#F3D398\"; mime = \"video/*\"; }\n      { fg = \"#F3D398\"; mime = \"audio/*\"; }\n      { fg = \"#CD9EFC\"; mime = \"application/bzip\"; }\n    ];\n  };\n}\n", "loc": ["programs", "yazi", "theme"], "readOnly": false, "title": "programs.yazi.theme", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/yazi/theme.toml</code>.</p>\n<p>See <a href=\"https://yazi-rs.github.io/docs/configuration/theme\">https://yazi-rs.github.io/docs/configuration/theme</a>\nfor the full list of options</p>"}, {"declarations": [{"name": "<programs/yt-dlp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yt-dlp.nix"}], "default": "false", "description": "Whether to enable yt-dlp.", "example": "true", "loc": ["programs", "yt-dlp", "enable"], "readOnly": false, "title": "programs.yt-dlp.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable yt-dlp.</p>"}, {"declarations": [{"name": "<programs/yt-dlp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yt-dlp.nix"}], "default": "\"\"", "description": "Extra configuration to add to\n{file}$XDG_CONFIG_HOME/yt-dlp/config.", "example": "''\n  --update\n  -F\n''", "loc": ["programs", "yt-dlp", "extraConfig"], "readOnly": false, "title": "programs.yt-dlp.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration to add to\n{file}<code>$XDG_CONFIG_HOME/yt-dlp/config</code>.</p>"}, {"declarations": [{"name": "<programs/yt-dlp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yt-dlp.nix"}], "default": "pkgs.yt-dlp", "description": "The yt-dlp package to use.", "example": "", "loc": ["programs", "yt-dlp", "package"], "readOnly": false, "title": "programs.yt-dlp.package", "type": "package", "descriptionHTML": "<p>The yt-dlp package to use.</p>"}, {"declarations": [{"name": "<programs/yt-dlp.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/yt-dlp.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/yt-dlp/config.\nOptions must be specified in their \"long form\", for\nexample, update = true; instead of U = true;.\nShort options can be specified in the extraConfig option.\nSee https://github.com/yt-dlp/yt-dlp#configuration\nfor explanation about possible values.", "example": "{\n  embed-thumbnail = true;\n  embed-subs = true;\n  sub-langs = \"all\";\n  downloader = \"aria2c\";\n  downloader-args = \"aria2c:'-c -x8 -s8 -k1M'\";\n}\n", "loc": ["programs", "yt-dlp", "settings"], "readOnly": false, "title": "programs.yt-dlp.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/yt-dlp/config</code>.</p>\n<p>Options must be specified in their \"long form\", for\nexample, <code>update = true;</code> instead of <code>U = true;</code>.\nShort options can be specified in the <code>extraConfig</code> option.\nSee <a href=\"https://github.com/yt-dlp/yt-dlp#configuration\">https://github.com/yt-dlp/yt-dlp#configuration</a>\nfor explanation about possible values.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "false", "description": "Whether to enable z.lua.", "example": "true", "loc": ["programs", "z-lua", "enable"], "readOnly": false, "title": "programs.z-lua.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable z.lua.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "false", "description": "Whether to enable recommended z.lua aliases.", "example": "", "loc": ["programs", "z-lua", "enableAliases"], "readOnly": false, "title": "programs.z-lua.enableAliases", "type": "boolean", "descriptionHTML": "<p>Whether to enable recommended z.lua aliases.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "z-lua", "enableBashIntegration"], "readOnly": false, "title": "programs.z-lua.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "z-lua", "enableFishIntegration"], "readOnly": false, "title": "programs.z-lua.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "z-lua", "enableZshIntegration"], "readOnly": false, "title": "programs.z-lua.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "[ ]", "description": "List of options to pass to z.lua.", "example": "[\n  \"enhanced\"\n  \"once\"\n  \"fzf\"\n]", "loc": ["programs", "z-lua", "options"], "readOnly": false, "title": "programs.z-lua.options", "type": "list of string", "descriptionHTML": "<p>List of options to pass to z.lua.</p>"}, {"declarations": [{"name": "<programs/z-lua.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/z-lua.nix"}], "default": "pkgs.z-lua", "description": "The z-lua package to use.", "example": "", "loc": ["programs", "z-lua", "package"], "readOnly": false, "title": "programs.z-lua.package", "type": "package", "descriptionHTML": "<p>The z-lua package to use.</p>"}, {"declarations": [{"name": "<programs/zathura.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zathura.nix"}], "default": "false", "description": "Whether to enable Zathura, a highly customizable and functional document viewer\nfocused on keyboard interaction.", "example": "true", "loc": ["programs", "zathura", "enable"], "readOnly": false, "title": "programs.zathura.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zathura, a highly customizable and functional document viewer\nfocused on keyboard interaction.</p>"}, {"declarations": [{"name": "<programs/zathura.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zathura.nix"}], "default": "\"\"", "description": "Additional commands for zathura that will be added to the\n{file}zathurarc file.", "example": "", "loc": ["programs", "zathura", "extraConfig"], "readOnly": false, "title": "programs.zathura.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional commands for zathura that will be added to the\n{file}<code>zathurarc</code> file.</p>"}, {"declarations": [{"name": "<programs/zathura.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zathura.nix"}], "default": "{ }", "description": "Add {option}:map mappings to zathura and make\nthem permanent. See\n{manpage}zathurarc(5)\nfor the full list of possible mappings.\nYou can create a mode-specific mapping by specifying the mode before the key:\n\"[normal] &lt;C-b&gt;\" = \"scroll left\";", "example": "{\n  \"<Right>\" = \"navigate next\";\n  D = \"toggle_page_mode\";\n  \"[fullscreen] <C-i>\" = \"zoom in\";\n}", "loc": ["programs", "zathura", "mappings"], "readOnly": false, "title": "programs.zathura.mappings", "type": "attribute set of string", "descriptionHTML": "<p>Add {option}<code>:map</code> mappings to zathura and make\nthem permanent. See\n{manpage}<code>zathurarc(5)</code>\nfor the full list of possible mappings.</p>\n<p>You can create a mode-specific mapping by specifying the mode before the key:\n<code>\"[normal] &lt;C-b&gt;\" = \"scroll left\";</code></p>"}, {"declarations": [{"name": "<programs/zathura.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zathura.nix"}], "default": "{ }", "description": "Add {option}:set command options to zathura and make\nthem permanent. See\n{manpage}zathurarc(5)\nfor the full list of options.", "example": "{\n  default-bg = \"#000000\";\n  default-fg = \"#FFFFFF\";\n}", "loc": ["programs", "zathura", "options"], "readOnly": false, "title": "programs.zathura.options", "type": "attribute set of (string or boolean or signed integer or floating point number)", "descriptionHTML": "<p>Add {option}<code>:set</code> command options to zathura and make\nthem permanent. See\n{manpage}<code>zathurarc(5)</code>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<programs/zathura.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zathura.nix"}], "default": "pkgs.zathura", "description": "The zathura package to use.", "example": "", "loc": ["programs", "zathura", "package"], "readOnly": false, "title": "programs.zathura.package", "type": "package", "descriptionHTML": "<p>The zathura package to use.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "false", "description": "Whether to enable Zed, the high performance, multiplayer code editor from the creators of Atom and Tree-sitter.", "example": "true", "loc": ["programs", "zed-editor", "enable"], "readOnly": false, "title": "programs.zed-editor.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zed, the high performance, multiplayer code editor from the creators of Atom and Tree-sitter.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "[ ]", "description": "A list of the extensions Zed should install on startup.\nUse the name of a repository in the extension list.", "example": "[ \"swift\" \"nix\" \"xy-zed\" ]\n", "loc": ["programs", "zed-editor", "extensions"], "readOnly": false, "title": "programs.zed-editor.extensions", "type": "list of string", "descriptionHTML": "<p>A list of the extensions Zed should install on startup.\nUse the name of a repository in the <a href=\"https://github.com/zed-industries/extensions/tree/main/extensions\">extension list</a>.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "[ ]", "description": "Extra packages available to Zed.", "example": "[ pkgs.nixd ]", "loc": ["programs", "zed-editor", "extraPackages"], "readOnly": false, "title": "programs.zed-editor.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages available to Zed.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "false", "description": "Whether to symlink the Zed's remote server binary to the expected\nlocation. This allows remotely connecting to this system from a\ndistant Zed client.\nFor more information, consult the\n\"Remote Server\" section\nin the wiki.", "example": "true", "loc": ["programs", "zed-editor", "installRemoteServer"], "readOnly": false, "title": "programs.zed-editor.installRemoteServer", "type": "boolean", "descriptionHTML": "<p>Whether to symlink the Zed's remote server binary to the expected\nlocation. This allows remotely connecting to this system from a\ndistant Zed client.</p>\n<p>For more information, consult the\n<a href=\"https://wiki.nixos.org/wiki/Zed#Remote_Server\">\"Remote Server\" section</a>\nin the wiki.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "pkgs.zed-editor", "description": "The zed-editor package to use.", "example": "", "loc": ["programs", "zed-editor", "package"], "readOnly": false, "title": "programs.zed-editor.package", "type": "null or package", "descriptionHTML": "<p>The zed-editor package to use.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "{ }", "description": "Each theme is written to\n{file}$XDG_CONFIG_HOME/zed/themes/theme-name.json\nwhere the name of each attribute is the theme-name\nSee https://zed.dev/docs/extensions/themes for the structure of a\nZed theme", "example": "", "loc": ["programs", "zed-editor", "themes"], "readOnly": false, "title": "programs.zed-editor.themes", "type": "attribute set of (JSON value or absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Each theme is written to\n{file}<code>$XDG_CONFIG_HOME/zed/themes/theme-name.json</code>\nwhere the name of each attribute is the theme-name</p>\n<p>See <a href=\"https://zed.dev/docs/extensions/themes\">https://zed.dev/docs/extensions/themes</a> for the structure of a\nZed theme</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "[ ]", "description": "Configuration written to Zed's {file}keymap.json.", "example": "[\n  {\n    context = \"Workspace\";\n    bindings = {\n      ctrl-shift-t = \"workspace::NewTerminal\";\n    };\n  };\n]\n", "loc": ["programs", "zed-editor", "userKeymaps"], "readOnly": false, "title": "programs.zed-editor.userKeymaps", "type": "JSON value", "descriptionHTML": "<p>Configuration written to Zed's {file}<code>keymap.json</code>.</p>"}, {"declarations": [{"name": "<programs/zed-editor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zed-editor.nix"}], "default": "{ }", "description": "Configuration written to Zed's {file}settings.json.", "example": "{\n  features = {\n    copilot = false;\n  };\n  telemetry = {\n    metrics = false;\n  };\n  vim_mode = false;\n  ui_font_size = 16;\n  buffer_font_size = 16;\n}\n", "loc": ["programs", "zed-editor", "userSettings"], "readOnly": false, "title": "programs.zed-editor.userSettings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to Zed's {file}<code>settings.json</code>.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "false", "description": "Whether to attach to the default session after being autostarted if a Zellij session already exists.\nVariable is checked in auto-start script. Requires shell integration to be enabled to have effect.", "example": "", "loc": ["programs", "zellij", "attachExistingSession"], "readOnly": false, "title": "programs.zellij.attachExistingSession", "type": "boolean", "descriptionHTML": "<p>Whether to attach to the default session after being autostarted if a Zellij session already exists.</p>\n<p>Variable is checked in <code>auto-start</code> script. Requires shell integration to be enabled to have effect.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "false", "description": "Whether to enable Zellij.", "example": "true", "loc": ["programs", "zellij", "enable"], "readOnly": false, "title": "programs.zellij.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zellij.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "true", "loc": ["programs", "zellij", "enableBashIntegration"], "readOnly": false, "title": "programs.zellij.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "true", "loc": ["programs", "zellij", "enableFishIntegration"], "readOnly": false, "title": "programs.zellij.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "true", "loc": ["programs", "zellij", "enableZshIntegration"], "readOnly": false, "title": "programs.zellij.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "false", "description": "Whether to exit the shell when Zellij exits after being autostarted.\nVariable is checked in auto-start script. Requires shell integration to be enabled to have effect.", "example": "", "loc": ["programs", "zellij", "exitShellOnExit"], "readOnly": false, "title": "programs.zellij.exitShellOnExit", "type": "boolean", "descriptionHTML": "<p>Whether to exit the shell when Zellij exits after being autostarted.</p>\n<p>Variable is checked in <code>auto-start</code> script. Requires shell integration to be enabled to have effect.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/zellij/layouts/&lt;layout&gt;.kdl.\nSee https://zellij.dev/documentation for the full\nlist of options.", "example": "{\n  dev = {\n    layout = {\n      _children = [\n        {\n          default_tab_template = {\n            _children = [\n              {\n                pane = {\n                  size = 1;\n                  borderless = true;\n                  plugin = {\n                    location = \"zellij:tab-bar\";\n                  };\n                };\n              }\n              { \"children\" = { }; }\n              {\n                pane = {\n                  size = 2;\n                  borderless = true;\n                  plugin = {\n                    location = \"zellij:status-bar\";\n                  };\n                };\n              }\n            ];\n          };\n        }\n        {\n          tab = {\n            _props = {\n              name = \"Project\";\n              focus = true;\n            };\n            _children = [\n              {\n                pane = {\n                  command = \"nvim\";\n                };\n              }\n            ];\n          };\n        }\n        {\n          tab = {\n            _props = {\n              name = \"Git\";\n            };\n            _children = [\n              {\n                pane = {\n                  command = \"lazygit\";\n                };\n              }\n            ];\n          };\n        }\n        {\n          tab = {\n            _props = {\n              name = \"Files\";\n            };\n            _children = [\n              {\n                pane = {\n                  command = \"yazi\";\n                };\n              }\n            ];\n          };\n        }\n        {\n          tab = {\n            _props = {\n              name = \"Shell\";\n            };\n            _children = [\n              {\n                pane = {\n                  command = \"zsh\";\n                };\n              }\n            ];\n          };\n        }\n      ];\n    };\n  };\n}\n", "loc": ["programs", "zellij", "layouts"], "readOnly": false, "title": "programs.zellij.layouts", "type": "attribute set of (YAML 1.1 value or absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/zellij/layouts/&lt;layout&gt;.kdl</code>.</p>\n<p>See <a href=\"https://zellij.dev/documentation\">https://zellij.dev/documentation</a> for the full\nlist of options.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "pkgs.zellij", "description": "The zellij package to use.", "example": "", "loc": ["programs", "zellij", "package"], "readOnly": false, "title": "programs.zellij.package", "type": "package", "descriptionHTML": "<p>The zellij package to use.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/zellij/config.kdl.\nIf programs.zellij.package.version is older than 0.32.0, then\nthe configuration is written to {file}$XDG_CONFIG_HOME/zellij/config.yaml.\nSee https://zellij.dev/documentation for the full\nlist of options.", "example": "{\n  theme = \"custom\";\n  themes.custom.fg = \"#ffffff\";\n  keybinds._props.clear-defaults = true;\n  keybinds.pane._children = [\n    {\n      bind = {\n        _args = [\"e\"];\n        _children = [\n          { TogglePaneEmbedOrFloating = {}; }\n          { SwitchToMode._args = [\"locked\"]; }\n        ];\n      };\n    }\n    {\n      bind = {\n        _args = [\"left\"];\n        MoveFocus = [\"left\"];\n      };\n    }\n  ];\n}\n", "loc": ["programs", "zellij", "settings"], "readOnly": false, "title": "programs.zellij.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/zellij/config.kdl</code>.</p>\n<p>If <code>programs.zellij.package.version</code> is older than 0.32.0, then\nthe configuration is written to {file}<code>$XDG_CONFIG_HOME/zellij/config.yaml</code>.</p>\n<p>See <a href=\"https://zellij.dev/documentation\">https://zellij.dev/documentation</a> for the full\nlist of options.</p>"}, {"declarations": [{"name": "<programs/zellij.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zellij.nix"}], "default": "{ }", "description": "Each them is written to {file}$XDG_CONFIG_HOME/zellij/themes/NAME.kdl.\nSee https://zellij.dev/documentation/themes.html for more information.", "example": "", "loc": ["programs", "zellij", "themes"], "readOnly": false, "title": "programs.zellij.themes", "type": "attribute set of (YAML 1.1 value or absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Each them is written to {file}<code>$XDG_CONFIG_HOME/zellij/themes/NAME.kdl</code>.\nSee <a href=\"https://zellij.dev/documentation/themes.html\">https://zellij.dev/documentation/themes.html</a> for more information.</p>"}, {"declarations": [{"name": "<programs/zk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zk.nix"}], "default": "false", "description": "Whether to enable zk.", "example": "true", "loc": ["programs", "zk", "enable"], "readOnly": false, "title": "programs.zk.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable zk.</p>"}, {"declarations": [{"name": "<programs/zk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zk.nix"}], "default": "pkgs.zk", "description": "The zk package to use.", "example": "", "loc": ["programs", "zk", "package"], "readOnly": false, "title": "programs.zk.package", "type": "null or package", "descriptionHTML": "<p>The zk package to use.</p>"}, {"declarations": [{"name": "<programs/zk.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zk.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/zk/config.toml.\nSee https://github.com/mickael-menu/zk/blob/main/docs/config.md for\navailable options and documentation.", "example": "{\n  note = {\n    language = \"en\";\n    default-title = \"Untitled\";\n    filename = \"{{id}}-{{slug title}}\";\n    extension = \"md\";\n    template = \"default.md\";\n    id-charset = \"alphanum\";\n    id-length = 4;\n    id-case = \"lower\";\n  };\n  extra = {\n    author = \"Micka\u00ebl\";\n  };\n}\n", "loc": ["programs", "zk", "settings"], "readOnly": false, "title": "programs.zk.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/zk/config.toml</code>.</p>\n<p>See <a href=\"https://github.com/mickael-menu/zk/blob/main/docs/config.md\">https://github.com/mickael-menu/zk/blob/main/docs/config.md</a> for\navailable options and documentation.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "false", "description": "Whether to enable zoxide.", "example": "true", "loc": ["programs", "zoxide", "enable"], "readOnly": false, "title": "programs.zoxide.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable zoxide.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["programs", "zoxide", "enableBashIntegration"], "readOnly": false, "title": "programs.zoxide.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["programs", "zoxide", "enableFishIntegration"], "readOnly": false, "title": "programs.zoxide.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["programs", "zoxide", "enableNushellIntegration"], "readOnly": false, "title": "programs.zoxide.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["programs", "zoxide", "enableZshIntegration"], "readOnly": false, "title": "programs.zoxide.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "[ ]", "description": "List of options to pass to zoxide init.", "example": "[\n  \"--no-cmd\"\n]", "loc": ["programs", "zoxide", "options"], "readOnly": false, "title": "programs.zoxide.options", "type": "list of string", "descriptionHTML": "<p>List of options to pass to zoxide init.</p>"}, {"declarations": [{"name": "<programs/zoxide.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zoxide.nix"}], "default": "pkgs.zoxide", "description": "The zoxide package to use.", "example": "", "loc": ["programs", "zoxide", "package"], "readOnly": false, "title": "programs.zoxide.package", "type": "package", "descriptionHTML": "<p>The zoxide package to use.</p>"}, {"declarations": [{"name": "<programs/antidote.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/antidote.nix"}], "default": "false", "description": "Whether to enable antidote - a zsh plugin manager.", "example": "true", "loc": ["programs", "zsh", "antidote", "enable"], "readOnly": false, "title": "programs.zsh.antidote.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable antidote - a zsh plugin manager.</p>"}, {"declarations": [{"name": "<programs/antidote.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/antidote.nix"}], "default": "pkgs.antidote", "description": "The antidote package to use.", "example": "", "loc": ["programs", "zsh", "antidote", "package"], "readOnly": false, "title": "programs.zsh.antidote.package", "type": "null or package", "descriptionHTML": "<p>The antidote package to use.</p>"}, {"declarations": [{"name": "<programs/antidote.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/antidote.nix"}], "default": "[ ]", "description": "List of antidote plugins.", "example": "[\n  \"zsh-users/zsh-autosuggestions\"\n]", "loc": ["programs", "zsh", "antidote", "plugins"], "readOnly": false, "title": "programs.zsh.antidote.plugins", "type": "list of string", "descriptionHTML": "<p>List of antidote plugins.</p>"}, {"declarations": [{"name": "<programs/antidote.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/antidote.nix"}], "default": "false", "description": "Whether to enable friendly names.", "example": "true", "loc": ["programs", "zsh", "antidote", "useFriendlyNames"], "readOnly": false, "title": "programs.zsh.antidote.useFriendlyNames", "type": "boolean", "descriptionHTML": "<p>Whether to enable friendly names.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "null", "description": "Automatically enter into a directory if typed directly into shell.", "example": "", "loc": ["programs", "zsh", "autocd"], "readOnly": false, "title": "programs.zsh.autocd", "type": "null or boolean", "descriptionHTML": "<p>Automatically enter into a directory if typed directly into shell.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "false", "description": "Enable zsh autosuggestions", "example": "", "loc": ["programs", "zsh", "autosuggestion", "enable"], "readOnly": false, "title": "programs.zsh.autosuggestion.enable", "type": "boolean", "descriptionHTML": "<p>Enable zsh autosuggestions</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "null", "description": "Custom styles for autosuggestion highlighting. See\n{manpage}zshzle(1) for syntax.", "example": "\"fg=#ff00ff,bg=cyan,bold,underline\"", "loc": ["programs", "zsh", "autosuggestion", "highlight"], "readOnly": false, "title": "programs.zsh.autosuggestion.highlight", "type": "null or string", "descriptionHTML": "<p>Custom styles for autosuggestion highlighting. See\n{manpage}<code>zshzle(1)</code> for syntax.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "[\n  \"history\"\n]", "description": "ZSH_AUTOSUGGEST_STRATEGY is an array that specifies how suggestions should be generated.\nThe strategies in the array are tried successively until a suggestion is found.\nThere are currently three built-in strategies to choose from:\n\nhistory: Chooses the most recent match from history.\ncompletion: Chooses a suggestion based on what tab-completion would suggest. (requires zpty module)\nmatch_prev_cmd: Like history, but chooses the most recent match whose preceding history item matches\n    the most recently executed command. Note that this strategy won't work as expected with ZSH options that\n    don't preserve the history order such as HIST_IGNORE_ALL_DUPS or HIST_EXPIRE_DUPS_FIRST.\n\nSetting the option to an empty list [] will make ZSH_AUTOSUGGESTION_STRATEGY not be set automatically,\nallowing the variable to be declared in {option}programs.zsh.localVariables or {option}programs.zsh.sessionVariables", "example": "", "loc": ["programs", "zsh", "autosuggestion", "strategy"], "readOnly": false, "title": "programs.zsh.autosuggestion.strategy", "type": "list of (one of \"history\", \"completion\", \"match_prev_cmd\")", "descriptionHTML": "<p><code>ZSH_AUTOSUGGEST_STRATEGY</code> is an array that specifies how suggestions should be generated.\nThe strategies in the array are tried successively until a suggestion is found.\nThere are currently three built-in strategies to choose from:</p>\n<ul>\n<li><code>history</code>: Chooses the most recent match from history.</li>\n<li><code>completion</code>: Chooses a suggestion based on what tab-completion would suggest. (requires <code>zpty</code> module)</li>\n<li><code>match_prev_cmd</code>: Like <code>history</code>, but chooses the most recent match whose preceding history item matches\n    the most recently executed command. Note that this strategy won't work as expected with ZSH options that\n    don't preserve the history order such as <code>HIST_IGNORE_ALL_DUPS</code> or <code>HIST_EXPIRE_DUPS_FIRST</code>.</li>\n</ul>\n<p>Setting the option to an empty list <code>[]</code> will make ZSH_AUTOSUGGESTION_STRATEGY not be set automatically,\nallowing the variable to be declared in {option}<code>programs.zsh.localVariables</code> or {option}<code>programs.zsh.sessionVariables</code></p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "[ ]", "description": "List of paths to autocomplete calls to {command}cd.", "example": "", "loc": ["programs", "zsh", "cdpath"], "readOnly": false, "title": "programs.zsh.cdpath", "type": "list of string", "descriptionHTML": "<p>List of paths to autocomplete calls to {command}<code>cd</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "\"autoload -U compinit && compinit\"", "description": "Initialization commands to run when completion is enabled.", "example": "", "loc": ["programs", "zsh", "completionInit"], "readOnly": false, "title": "programs.zsh.completionInit", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Initialization commands to run when completion is enabled.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "null", "description": "The default base keymap to use.", "example": "\"emacs\"", "loc": ["programs", "zsh", "defaultKeymap"], "readOnly": false, "title": "programs.zsh.defaultKeymap", "type": "null or one of \"emacs\", \"vicmd\", \"viins\"", "descriptionHTML": "<p>The default base keymap to use.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "An attribute set that adds to named directory hash table.", "example": "{\n  docs  = \"$HOME/Documents\";\n  vids  = \"$HOME/Videos\";\n  dl    = \"$HOME/Downloads\";\n}\n", "loc": ["programs", "zsh", "dirHashes"], "readOnly": false, "title": "programs.zsh.dirHashes", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that adds to named directory hash table.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "null", "description": "Directory where the zsh configuration and more should be located,\nrelative to the users home directory. The default is the home\ndirectory.", "example": "\".config/zsh\"", "loc": ["programs", "zsh", "dotDir"], "readOnly": false, "title": "programs.zsh.dotDir", "type": "null or string", "descriptionHTML": "<p>Directory where the zsh configuration and more should be located,\nrelative to the users home directory. The default is the home\ndirectory.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "false", "description": "Whether to enable Z shell (Zsh).", "example": "true", "loc": ["programs", "zsh", "enable"], "readOnly": false, "title": "programs.zsh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Z shell (Zsh).</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "true", "description": "Enable zsh completion. Don't forget to add\nnix\n  environment.pathsToLink = [ \"/share/zsh\" ];\nto your system configuration to get completion for system packages (e.g. systemd).", "example": "", "loc": ["programs", "zsh", "enableCompletion"], "readOnly": false, "title": "programs.zsh.enableCompletion", "type": "boolean", "descriptionHTML": "<p>Enable zsh completion. Don't forget to add\n<code>nix\n  environment.pathsToLink = [ \"/share/zsh\" ];</code>\nto your system configuration to get completion for system packages (e.g. systemd).</p>"}, {"declarations": [{"name": "<misc/vte.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/vte.nix"}], "default": "false", "description": "Whether to enable integration with terminals using the VTE\nlibrary. This will let the terminal track the current working\ndirectory.", "example": "true", "loc": ["programs", "zsh", "enableVteIntegration"], "readOnly": false, "title": "programs.zsh.enableVteIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable integration with terminals using the VTE\nlibrary. This will let the terminal track the current working\ndirectory.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "\"\"", "description": "Extra commands that should be added to {file}.zshenv.", "example": "", "loc": ["programs", "zsh", "envExtra"], "readOnly": false, "title": "programs.zsh.envExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be added to {file}<code>.zshenv</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "{ }", "description": "Options related to commands history configuration.", "example": "", "loc": ["programs", "zsh", "history"], "readOnly": false, "title": "programs.zsh.history", "type": "submodule", "descriptionHTML": "<p>Options related to commands history configuration.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "If set, zsh sessions will append their history list to the history\nfile, rather than replace it. Thus, multiple parallel zsh sessions\nwill all have the new entries from their history lists added to the\nhistory file, in the order that they exit.\nThis file will still be periodically re-written to trim it when the\nnumber of lines grows 20% beyond the value specified by\nprograms.zsh.history.save.", "example": "", "loc": ["programs", "zsh", "history", "append"], "readOnly": false, "title": "programs.zsh.history.append", "type": "boolean", "descriptionHTML": "<p>If set, zsh sessions will append their history list to the history\nfile, rather than replace it. Thus, multiple parallel zsh sessions\nwill all have the new entries from their history lists added to the\nhistory file, in the order that they exit.</p>\n<p>This file will still be periodically re-written to trim it when the\nnumber of lines grows 20% beyond the value specified by\n<code>programs.zsh.history.save</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "Expire duplicates first.", "example": "", "loc": ["programs", "zsh", "history", "expireDuplicatesFirst"], "readOnly": false, "title": "programs.zsh.history.expireDuplicatesFirst", "type": "boolean", "descriptionHTML": "<p>Expire duplicates first.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "Save timestamp into the history file.", "example": "", "loc": ["programs", "zsh", "history", "extended"], "readOnly": false, "title": "programs.zsh.history.extended", "type": "boolean", "descriptionHTML": "<p>Save timestamp into the history file.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "Do not display a line previously found in the history\nfile.", "example": "", "loc": ["programs", "zsh", "history", "findNoDups"], "readOnly": false, "title": "programs.zsh.history.findNoDups", "type": "boolean", "descriptionHTML": "<p>Do not display a line previously found in the history\nfile.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "If a new command line being added to the history list\nduplicates an older one, the older command is removed\nfrom the list (even if it is not the previous event).", "example": "", "loc": ["programs", "zsh", "history", "ignoreAllDups"], "readOnly": false, "title": "programs.zsh.history.ignoreAllDups", "type": "boolean", "descriptionHTML": "<p>If a new command line being added to the history list\nduplicates an older one, the older command is removed\nfrom the list (even if it is not the previous event).</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "true", "description": "Do not enter command lines into the history list\nif they are duplicates of the previous event.", "example": "", "loc": ["programs", "zsh", "history", "ignoreDups"], "readOnly": false, "title": "programs.zsh.history.ignoreDups", "type": "boolean", "descriptionHTML": "<p>Do not enter command lines into the history list\nif they are duplicates of the previous event.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "[ ]", "description": "Do not enter command lines into the history list\nif they match any one of the given shell patterns.", "example": "[ \"rm *\" \"pkill *\" ]", "loc": ["programs", "zsh", "history", "ignorePatterns"], "readOnly": false, "title": "programs.zsh.history.ignorePatterns", "type": "list of string", "descriptionHTML": "<p>Do not enter command lines into the history list\nif they match any one of the given shell patterns.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "true", "description": "Do not enter command lines into the history list\nif the first character is a space.", "example": "", "loc": ["programs", "zsh", "history", "ignoreSpace"], "readOnly": false, "title": "programs.zsh.history.ignoreSpace", "type": "boolean", "descriptionHTML": "<p>Do not enter command lines into the history list\nif the first character is a space.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "\"$HOME/.zsh_history\" if state version \u2265 20.03,\n\"$ZDOTDIR/.zsh_history\" otherwise\n", "description": "History file location", "example": "\"${config.xdg.dataHome}/zsh/zsh_history\"", "loc": ["programs", "zsh", "history", "path"], "readOnly": false, "title": "programs.zsh.history.path", "type": "string", "descriptionHTML": "<p>History file location</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "10000", "description": "Number of history lines to save.", "example": "", "loc": ["programs", "zsh", "history", "save"], "readOnly": false, "title": "programs.zsh.history.save", "type": "signed integer", "descriptionHTML": "<p>Number of history lines to save.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "Do not write duplicate entries into the history file.", "example": "", "loc": ["programs", "zsh", "history", "saveNoDups"], "readOnly": false, "title": "programs.zsh.history.saveNoDups", "type": "boolean", "descriptionHTML": "<p>Do not write duplicate entries into the history file.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "true", "description": "Share command history between zsh sessions.", "example": "", "loc": ["programs", "zsh", "history", "share"], "readOnly": false, "title": "programs.zsh.history.share", "type": "boolean", "descriptionHTML": "<p>Share command history between zsh sessions.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "10000", "description": "Number of history lines to keep.", "example": "", "loc": ["programs", "zsh", "history", "size"], "readOnly": false, "title": "programs.zsh.history.size", "type": "signed integer", "descriptionHTML": "<p>Number of history lines to keep.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "{ }", "description": "Options related to zsh-history-substring-search.", "example": "", "loc": ["programs", "zsh", "historySubstringSearch"], "readOnly": false, "title": "programs.zsh.historySubstringSearch", "type": "submodule", "descriptionHTML": "<p>Options related to zsh-history-substring-search.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "false", "description": "Whether to enable history substring search.", "example": "true", "loc": ["programs", "zsh", "historySubstringSearch", "enable"], "readOnly": false, "title": "programs.zsh.historySubstringSearch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable history substring search.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "[\n  \"^[[B\"\n]", "description": "The key codes to be used when searching down.\nThe default of ^[[B may correspond to the DOWN key -- if not, try\n$terminfo[kcud1].", "example": "", "loc": ["programs", "zsh", "historySubstringSearch", "searchDownKey"], "readOnly": false, "title": "programs.zsh.historySubstringSearch.searchDownKey", "type": "(list of string) or string", "descriptionHTML": "<p>The key codes to be used when searching down.\nThe default of <code>^[[B</code> may correspond to the DOWN key -- if not, try\n<code>$terminfo[kcud1]</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/history.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/history.nix"}], "default": "[\n  \"^[[A\"\n]", "description": "The key codes to be used when searching up.\nThe default of ^[[A may correspond to the UP key -- if not, try\n$terminfo[kcuu1].", "example": "", "loc": ["programs", "zsh", "historySubstringSearch", "searchUpKey"], "readOnly": false, "title": "programs.zsh.historySubstringSearch.searchUpKey", "type": "(list of string) or string", "descriptionHTML": "<p>The key codes to be used when searching up.\nThe default of <code>^[[A</code> may correspond to the UP key -- if not, try\n<code>$terminfo[kcuu1]</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "\"\"", "description": "Content to be added to {file}.zshrc.\nTo specify the order, use lib.mkOrder.\nCommon order values:\n- 500 (mkBefore): Early initialization (replaces initExtraFirst)\n- 550: Before completion initialization (replaces initExtraBeforeCompInit)\n- 1000 (default): General configuration (replaces initExtra)\n- 1500 (mkAfter): Last to run configuration\nTo specify both content in Early initialization and General configuration, use lib.mkMerge.\ne.g.\ninitContent = let\n    zshConfigEarlyInit = lib.mkOrder 500 \"do something\";\n    zshConfig = lib.mkOrder 1000 \"do something\";\nin\n    lib.mkMerge [ zshConfigEarlyInit zshConfig ];", "example": "lib.mkOrder 1200 '''\n  echo \"Hello zsh initContent!\"\n''';\n", "loc": ["programs", "zsh", "initContent"], "readOnly": false, "title": "programs.zsh.initContent", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Content to be added to {file}<code>.zshrc</code>.</p>\n<p>To specify the order, use <code>lib.mkOrder</code>.</p>\n<p>Common order values:\n- 500 (mkBefore): Early initialization (replaces initExtraFirst)\n- 550: Before completion initialization (replaces initExtraBeforeCompInit)\n- 1000 (default): General configuration (replaces initExtra)\n- 1500 (mkAfter): Last to run configuration</p>\n<p>To specify both content in Early initialization and General configuration, use <code>lib.mkMerge</code>.</p>\n<p>e.g.</p>\n<p>initContent = let\n    zshConfigEarlyInit = lib.mkOrder 500 \"do something\";\n    zshConfig = lib.mkOrder 1000 \"do something\";\nin\n    lib.mkMerge [ zshConfigEarlyInit zshConfig ];</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "Extra local variables defined at the top of {file}.zshrc.", "example": "{\n  POWERLEVEL9K_LEFT_PROMPT_ELEMENTS = [\n    \"dir\"\n    \"vcs\"\n  ];\n}", "loc": ["programs", "zsh", "localVariables"], "readOnly": false, "title": "programs.zsh.localVariables", "type": "attribute set", "descriptionHTML": "<p>Extra local variables defined at the top of {file}<code>.zshrc</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "\"\"", "description": "Extra commands that should be added to {file}.zlogin.", "example": "", "loc": ["programs", "zsh", "loginExtra"], "readOnly": false, "title": "programs.zsh.loginExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be added to {file}<code>.zlogin</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "\"\"", "description": "Extra commands that should be added to {file}.zlogout.", "example": "", "loc": ["programs", "zsh", "logoutExtra"], "readOnly": false, "title": "programs.zsh.logoutExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be added to {file}<code>.zlogout</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "{ }", "description": "Options to configure oh-my-zsh.", "example": "", "loc": ["programs", "zsh", "oh-my-zsh"], "readOnly": false, "title": "programs.zsh.oh-my-zsh", "type": "submodule", "descriptionHTML": "<p>Options to configure oh-my-zsh.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "\"\"", "description": "Path to a custom oh-my-zsh package to override config of\noh-my-zsh. See https://github.com/robbyrussell/oh-my-zsh/wiki/Customization\nfor more information.", "example": "\"$HOME/my_customizations\"", "loc": ["programs", "zsh", "oh-my-zsh", "custom"], "readOnly": false, "title": "programs.zsh.oh-my-zsh.custom", "type": "string", "descriptionHTML": "<p>Path to a custom oh-my-zsh package to override config of\noh-my-zsh. See <a href=\"https://github.com/robbyrussell/oh-my-zsh/wiki/Customization\">https://github.com/robbyrussell/oh-my-zsh/wiki/Customization</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "false", "description": "Whether to enable oh-my-zsh.", "example": "true", "loc": ["programs", "zsh", "oh-my-zsh", "enable"], "readOnly": false, "title": "programs.zsh.oh-my-zsh.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable oh-my-zsh.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "\"\"", "description": "Extra settings for plugins.", "example": "''\n  zstyle :omz:plugins:ssh-agent identities id_rsa id_rsa2 id_github\n''", "loc": ["programs", "zsh", "oh-my-zsh", "extraConfig"], "readOnly": false, "title": "programs.zsh.oh-my-zsh.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra settings for plugins.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "pkgs.oh-my-zsh", "description": "The oh-my-zsh package to use.", "example": "", "loc": ["programs", "zsh", "oh-my-zsh", "package"], "readOnly": false, "title": "programs.zsh.oh-my-zsh.package", "type": "package", "descriptionHTML": "<p>The oh-my-zsh package to use.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "[ ]", "description": "List of oh-my-zsh plugins", "example": "[\n  \"git\"\n  \"sudo\"\n]", "loc": ["programs", "zsh", "oh-my-zsh", "plugins"], "readOnly": false, "title": "programs.zsh.oh-my-zsh.plugins", "type": "list of string", "descriptionHTML": "<p>List of oh-my-zsh plugins</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/oh-my-zsh.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/oh-my-zsh.nix"}], "default": "\"\"", "description": "Name of the theme to be used by oh-my-zsh.", "example": "\"robbyrussell\"", "loc": ["programs", "zsh", "oh-my-zsh", "theme"], "readOnly": false, "title": "programs.zsh.oh-my-zsh.theme", "type": "string", "descriptionHTML": "<p>Name of the theme to be used by oh-my-zsh.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "pkgs.zsh", "description": "The zsh package to use.", "example": "", "loc": ["programs", "zsh", "package"], "readOnly": false, "title": "programs.zsh.package", "type": "package", "descriptionHTML": "<p>The zsh package to use.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/default.nix"}], "default": "[ ]", "description": "Plugins to source in {file}.zshrc.", "example": "[\n  {\n    name = \"enhancd\";\n    file = \"init.sh\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"b4b4r07\";\n      repo = \"enhancd\";\n      rev = \"v2.2.1\";\n      sha256 = \"0iqa9j09fwm6nj5rpip87x3hnvbbz9w9ajgm6wkrd5fls8fn8i5g\";\n    };\n  }\n{\n  name = \"wd\";\n  src = pkgs.zsh-wd;\n  file = \"share/wd/wd.plugin.zsh\";\n  completions = [ \"share/zsh/site-functions\" ];\n}\n]\n", "loc": ["programs", "zsh", "plugins"], "readOnly": false, "title": "programs.zsh.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>Plugins to source in {file}<code>.zshrc</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/default.nix"}], "default": "[ ]", "description": "Paths of additional functions to add to {env}fpath.", "example": "", "loc": ["programs", "zsh", "plugins", "*", "completions"], "readOnly": false, "title": "programs.zsh.plugins.*.completions", "type": "list of string", "descriptionHTML": "<p>Paths of additional functions to add to {env}<code>fpath</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/default.nix"}], "default": "", "description": "The plugin script to source.\nRequired if the script name does not match {file}name.plugin.zsh\nusing the plugin {option}name from the plugin {option}src.", "example": "", "loc": ["programs", "zsh", "plugins", "*", "file"], "readOnly": false, "title": "programs.zsh.plugins.*.file", "type": "string", "descriptionHTML": "<p>The plugin script to source.\nRequired if the script name does not match {file}<code>name.plugin.zsh</code>\nusing the plugin {option}<code>name</code> from the plugin {option}<code>src</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/default.nix"}], "default": "", "description": "The name of the plugin.", "example": "", "loc": ["programs", "zsh", "plugins", "*", "name"], "readOnly": false, "title": "programs.zsh.plugins.*.name", "type": "string", "descriptionHTML": "<p>The name of the plugin.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/default.nix"}], "default": "", "description": "Path to the plugin folder.\nWill be added to {env}fpath and {env}PATH.", "example": "", "loc": ["programs", "zsh", "plugins", "*", "src"], "readOnly": false, "title": "programs.zsh.plugins.*.src", "type": "absolute path", "descriptionHTML": "<p>Path to the plugin folder.</p>\n<p>Will be added to {env}<code>fpath</code> and {env}<code>PATH</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "{ }", "description": "Options to configure prezto.", "example": "", "loc": ["programs", "zsh", "prezto"], "readOnly": false, "title": "programs.zsh.prezto", "type": "submodule", "descriptionHTML": "<p>Options to configure prezto.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the query found color.", "example": "\"fg=blue\"", "loc": ["programs", "zsh", "prezto", "autosuggestions", "color"], "readOnly": false, "title": "programs.zsh.prezto.autosuggestions.color", "type": "null or string", "descriptionHTML": "<p>Set the query found color.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "true", "description": "Set case-sensitivity for completion, history lookup, etc.", "example": "true", "loc": ["programs", "zsh", "prezto", "caseSensitive"], "readOnly": false, "title": "programs.zsh.prezto.caseSensitive", "type": "null or boolean", "descriptionHTML": "<p>Set case-sensitivity for completion, history lookup, etc.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "true", "description": "Color output (automatically set to false on dumb terminals).", "example": "false", "loc": ["programs", "zsh", "prezto", "color"], "readOnly": false, "title": "programs.zsh.prezto.color", "type": "null or boolean", "descriptionHTML": "<p>Color output (automatically set to <code>false</code> on dumb terminals).</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[ ]", "description": "Set the entries to ignore in static {file}/etc/hosts for\nhost completion.", "example": "[\n  \"0.0.0.0\"\n  \"127.0.0.1\"\n]", "loc": ["programs", "zsh", "prezto", "completions", "ignoredHosts"], "readOnly": false, "title": "programs.zsh.prezto.completions.ignoredHosts", "type": "list of string", "descriptionHTML": "<p>Set the entries to ignore in static {file}<code>/etc/hosts</code> for\nhost completion.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Automatically convert .... to ../..", "example": "true", "loc": ["programs", "zsh", "prezto", "editor", "dotExpansion"], "readOnly": false, "title": "programs.zsh.prezto.editor.dotExpansion", "type": "null or boolean", "descriptionHTML": "<p>Automatically convert <code>....</code> to <code>../..</code></p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "\"emacs\"", "description": "Set the key mapping style to emacs or vi.", "example": "\"vi\"", "loc": ["programs", "zsh", "prezto", "editor", "keymap"], "readOnly": false, "title": "programs.zsh.prezto.editor.keymap", "type": "null or one of \"emacs\", \"vi\"", "descriptionHTML": "<p>Set the key mapping style to <code>emacs</code> or <code>vi</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Allow the Zsh prompt context to be shown.", "example": "true", "loc": ["programs", "zsh", "prezto", "editor", "promptContext"], "readOnly": false, "title": "programs.zsh.prezto.editor.promptContext", "type": "null or boolean", "descriptionHTML": "<p>Allow the Zsh prompt context to be shown.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "false", "description": "Whether to enable prezto.", "example": "true", "loc": ["programs", "zsh", "prezto", "enable"], "readOnly": false, "title": "programs.zsh.prezto.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable prezto.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "\"\"", "description": "Additional configuration to add to {file}.zpreztorc.", "example": "", "loc": ["programs", "zsh", "prezto", "extraConfig"], "readOnly": false, "title": "programs.zsh.prezto.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add to {file}<code>.zpreztorc</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[ ]", "description": "Set the Zsh functions to load ({manpage}zshcontrib(1)).", "example": "[\n  \"zargs\"\n  \"zmv\"\n]", "loc": ["programs", "zsh", "prezto", "extraFunctions"], "readOnly": false, "title": "programs.zsh.prezto.extraFunctions", "type": "list of string", "descriptionHTML": "<p>Set the Zsh functions to load ({manpage}<code>zshcontrib(1)</code>).</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[ ]", "description": "Set the Zsh modules to load ({manpage}zshmodules(1)).", "example": "[\n  \"attr\"\n  \"stat\"\n]", "loc": ["programs", "zsh", "prezto", "extraModules"], "readOnly": false, "title": "programs.zsh.prezto.extraModules", "type": "list of string", "descriptionHTML": "<p>Set the Zsh modules to load ({manpage}<code>zshmodules(1)</code>).</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Ignore submodules when they are dirty, untracked, all,\nor none.", "example": "\"all\"", "loc": ["programs", "zsh", "prezto", "git", "submoduleIgnore"], "readOnly": false, "title": "programs.zsh.prezto.git.submoduleIgnore", "type": "null or one of \"dirty\", \"untracked\", \"all\", \"none\"", "descriptionHTML": "<p>Ignore submodules when they are <code>dirty</code>, <code>untracked</code>, <code>all</code>,\nor <code>none</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the command prefix on non-GNU systems.", "example": "\"g\"", "loc": ["programs", "zsh", "prezto", "gnuUtility", "prefix"], "readOnly": false, "title": "programs.zsh.prezto.gnuUtility.prefix", "type": "null or string", "descriptionHTML": "<p>Set the command prefix on non-GNU systems.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the query found color.", "example": "\"fg=blue\"", "loc": ["programs", "zsh", "prezto", "historySubstring", "foundColor"], "readOnly": false, "title": "programs.zsh.prezto.historySubstring.foundColor", "type": "null or string", "descriptionHTML": "<p>Set the query found color.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the search globbing flags.", "example": "", "loc": ["programs", "zsh", "prezto", "historySubstring", "globbingFlags"], "readOnly": false, "title": "programs.zsh.prezto.historySubstring.globbingFlags", "type": "null or string", "descriptionHTML": "<p>Set the search globbing flags.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the query not found color.", "example": "\"fg=red\"", "loc": ["programs", "zsh", "prezto", "historySubstring", "notFoundColor"], "readOnly": false, "title": "programs.zsh.prezto.historySubstring.notFoundColor", "type": "null or string", "descriptionHTML": "<p>Set the query not found color.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the keyword used by {command}mand to open man pages\nin Dash.app.", "example": "\"manpages\"", "loc": ["programs", "zsh", "prezto", "macOS", "dashKeyword"], "readOnly": false, "title": "programs.zsh.prezto.macOS.dashKeyword", "type": "null or string", "descriptionHTML": "<p>Set the keyword used by {command}<code>mand</code> to open man pages\nin Dash.app.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "pkgs.zsh-prezto", "description": "The prezto package to use.", "example": "", "loc": ["programs", "zsh", "prezto", "package"], "readOnly": false, "title": "programs.zsh.prezto.package", "type": "package", "descriptionHTML": "<p>The prezto package to use.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[ ]", "description": "Add additional directories to load prezto modules from.", "example": "[ \"${config.home.homeDirectory}/.zprezto-contrib\" ]", "loc": ["programs", "zsh", "prezto", "pmoduleDirs"], "readOnly": false, "title": "programs.zsh.prezto.pmoduleDirs", "type": "list of absolute path", "descriptionHTML": "<p>Add additional directories to load prezto modules from.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[\n  \"environment\"\n  \"terminal\"\n  \"editor\"\n  \"history\"\n  \"directory\"\n  \"spectrum\"\n  \"utility\"\n  \"completion\"\n  \"prompt\"\n]", "description": "Set the Prezto modules to load (browse modules). The order matters.", "example": "", "loc": ["programs", "zsh", "prezto", "pmodules"], "readOnly": false, "title": "programs.zsh.prezto.pmodules", "type": "list of string", "descriptionHTML": "<p>Set the Prezto modules to load (browse modules). The order matters.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the working directory prompt display length. By\ndefault, it is set to short. Set it to long (without ~\nexpansion) for longer or full (with ~ expansion) for\neven longer prompt display.", "example": "\"short\"", "loc": ["programs", "zsh", "prezto", "prompt", "pwdLength"], "readOnly": false, "title": "programs.zsh.prezto.prompt.pwdLength", "type": "null or one of \"short\", \"long\", \"full\"", "descriptionHTML": "<p>Set the working directory prompt display length. By\ndefault, it is set to <code>short</code>. Set it to <code>long</code> (without <code>~</code>\nexpansion) for longer or <code>full</code> (with <code>~</code> expansion) for\neven longer prompt display.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the prompt to display the return code along with an\nindicator for non-zero return codes. This is not supported by all prompts.", "example": "true", "loc": ["programs", "zsh", "prezto", "prompt", "showReturnVal"], "readOnly": false, "title": "programs.zsh.prezto.prompt.showReturnVal", "type": "null or boolean", "descriptionHTML": "<p>Set the prompt to display the return code along with an\nindicator for non-zero return codes. This is not supported by all prompts.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "\"sorin\"", "description": "Set the prompt theme to load. Setting it to random\nloads a random theme. Automatically set to off on dumb\nterminals.", "example": "\"pure\"", "loc": ["programs", "zsh", "prezto", "prompt", "theme"], "readOnly": false, "title": "programs.zsh.prezto.prompt.theme", "type": "null or string", "descriptionHTML": "<p>Set the prompt theme to load. Setting it to <code>random</code>\nloads a random theme. Automatically set to <code>off</code> on dumb\nterminals.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto switch to Python virtualenv on directory change.", "example": "true", "loc": ["programs", "zsh", "prezto", "python", "virtualenvAutoSwitch"], "readOnly": false, "title": "programs.zsh.prezto.python.virtualenvAutoSwitch", "type": "null or boolean", "descriptionHTML": "<p>Auto switch to Python virtualenv on directory change.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Automatically initialize virtualenvwrapper if pre-requisites are met.", "example": "true", "loc": ["programs", "zsh", "prezto", "python", "virtualenvInitialize"], "readOnly": false, "title": "programs.zsh.prezto.python.virtualenvInitialize", "type": "null or boolean", "descriptionHTML": "<p>Automatically initialize virtualenvwrapper if pre-requisites are met.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto switch the Ruby version on directory change.", "example": "true", "loc": ["programs", "zsh", "prezto", "ruby", "chrubyAutoSwitch"], "readOnly": false, "title": "programs.zsh.prezto.ruby.chrubyAutoSwitch", "type": "null or boolean", "descriptionHTML": "<p>Auto switch the Ruby version on directory change.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto start a session when Zsh is launched in a local terminal.", "example": "true", "loc": ["programs", "zsh", "prezto", "screen", "autoStartLocal"], "readOnly": false, "title": "programs.zsh.prezto.screen.autoStartLocal", "type": "null or boolean", "descriptionHTML": "<p>Auto start a session when Zsh is launched in a local terminal.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto start a session when Zsh is launched in a SSH connection.", "example": "true", "loc": ["programs", "zsh", "prezto", "screen", "autoStartRemote"], "readOnly": false, "title": "programs.zsh.prezto.screen.autoStartRemote", "type": "null or boolean", "descriptionHTML": "<p>Auto start a session when Zsh is launched in a SSH connection.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[ ]", "description": "Set the SSH identities to load into the agent.", "example": "[\n  \"id_rsa\"\n  \"id_rsa2\"\n  \"id_github\"\n]", "loc": ["programs", "zsh", "prezto", "ssh", "identities"], "readOnly": false, "title": "programs.zsh.prezto.ssh.identities", "type": "list of string", "descriptionHTML": "<p>Set the SSH identities to load into the agent.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "[ ]", "description": "Set syntax highlighters. By default, only the main\nhighlighter is enabled.", "example": "[\n  \"main\"\n  \"brackets\"\n  \"pattern\"\n  \"line\"\n  \"cursor\"\n  \"root\"\n]", "loc": ["programs", "zsh", "prezto", "syntaxHighlighting", "highlighters"], "readOnly": false, "title": "programs.zsh.prezto.syntaxHighlighting.highlighters", "type": "list of string", "descriptionHTML": "<p>Set syntax highlighters. By default, only the main\nhighlighter is enabled.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "{ }", "description": "Set syntax pattern styles.", "example": "{\n  \"rm*-rf*\" = \"fg=white,bold,bg=red\";\n}", "loc": ["programs", "zsh", "prezto", "syntaxHighlighting", "pattern"], "readOnly": false, "title": "programs.zsh.prezto.syntaxHighlighting.pattern", "type": "attribute set of string", "descriptionHTML": "<p>Set syntax pattern styles.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "{ }", "description": "Set syntax highlighting styles.", "example": "{\n  builtin = \"bg=blue\";\n  command = \"bg=blue\";\n  function = \"bg=blue\";\n}", "loc": ["programs", "zsh", "prezto", "syntaxHighlighting", "styles"], "readOnly": false, "title": "programs.zsh.prezto.syntaxHighlighting.styles", "type": "attribute set of string", "descriptionHTML": "<p>Set syntax highlighting styles.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto set the tab and window titles.", "example": "true", "loc": ["programs", "zsh", "prezto", "terminal", "autoTitle"], "readOnly": false, "title": "programs.zsh.prezto.terminal.autoTitle", "type": "null or boolean", "descriptionHTML": "<p>Auto set the tab and window titles.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the multiplexer title format.", "example": "\"%s\"", "loc": ["programs", "zsh", "prezto", "terminal", "multiplexerTitleFormat"], "readOnly": false, "title": "programs.zsh.prezto.terminal.multiplexerTitleFormat", "type": "null or string", "descriptionHTML": "<p>Set the multiplexer title format.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the tab title format.", "example": "\"%m: %s\"", "loc": ["programs", "zsh", "prezto", "terminal", "tabTitleFormat"], "readOnly": false, "title": "programs.zsh.prezto.terminal.tabTitleFormat", "type": "null or string", "descriptionHTML": "<p>Set the tab title format.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the window title format.", "example": "\"%n@%m: %s\"", "loc": ["programs", "zsh", "prezto", "terminal", "windowTitleFormat"], "readOnly": false, "title": "programs.zsh.prezto.terminal.windowTitleFormat", "type": "null or string", "descriptionHTML": "<p>Set the window title format.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto start a session when Zsh is launched in a local terminal.", "example": "true", "loc": ["programs", "zsh", "prezto", "tmux", "autoStartLocal"], "readOnly": false, "title": "programs.zsh.prezto.tmux.autoStartLocal", "type": "null or boolean", "descriptionHTML": "<p>Auto start a session when Zsh is launched in a local terminal.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Auto start a session when Zsh is launched in a SSH connection.", "example": "true", "loc": ["programs", "zsh", "prezto", "tmux", "autoStartRemote"], "readOnly": false, "title": "programs.zsh.prezto.tmux.autoStartRemote", "type": "null or boolean", "descriptionHTML": "<p>Auto start a session when Zsh is launched in a SSH connection.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Set the default session name.", "example": "\"YOUR DEFAULT SESSION NAME\"", "loc": ["programs", "zsh", "prezto", "tmux", "defaultSessionName"], "readOnly": false, "title": "programs.zsh.prezto.tmux.defaultSessionName", "type": "null or string", "descriptionHTML": "<p>Set the default session name.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Integrate with iTerm2.", "example": "true", "loc": ["programs", "zsh", "prezto", "tmux", "itermIntegration"], "readOnly": false, "title": "programs.zsh.prezto.tmux.itermIntegration", "type": "null or boolean", "descriptionHTML": "<p>Integrate with iTerm2.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/prezto.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/prezto.nix"}], "default": "null", "description": "Enabled safe options. This aliases {command}cp,\n{command}ln, {command}mv and {command}rm so that they\nprompt before deleting or overwriting files. Set to no to\ndisable this safer behavior.", "example": "true", "loc": ["programs", "zsh", "prezto", "utility", "safeOps"], "readOnly": false, "title": "programs.zsh.prezto.utility.safeOps", "type": "null or boolean", "descriptionHTML": "<p>Enabled safe options. This aliases {command}<code>cp</code>,\n{command}<code>ln</code>, {command}<code>mv</code> and {command}<code>rm</code> so that they\nprompt before deleting or overwriting files. Set to <code>no</code> to\ndisable this safer behavior.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "\"\"", "description": "Extra commands that should be added to {file}.zprofile.", "example": "", "loc": ["programs", "zsh", "profileExtra"], "readOnly": false, "title": "programs.zsh.profileExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra commands that should be added to {file}<code>.zprofile</code>.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "Environment variables that will be set for zsh session.", "example": "{\n  MAILCHECK = 30;\n}", "loc": ["programs", "zsh", "sessionVariables"], "readOnly": false, "title": "programs.zsh.sessionVariables", "type": "attribute set", "descriptionHTML": "<p>Environment variables that will be set for zsh session.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "[ ]", "description": "Configure zsh options. See\n{manpage}zshoptions(1).\nTo unset an option, prefix it with \"NO_\".", "example": "[\n  \"EXTENDED_HISTORY\"\n  \"RM_STAR_WAIT\"\n  \"NO_BEEP\"\n]", "loc": ["programs", "zsh", "setOptions"], "readOnly": false, "title": "programs.zsh.setOptions", "type": "list of string", "descriptionHTML": "<p>Configure zsh options. See\n{manpage}<code>zshoptions(1)</code>.</p>\n<p>To unset an option, prefix it with \"NO_\".</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs.", "example": "{\n  ll = \"ls -l\";\n  \"..\" = \"cd ..\";\n}\n", "loc": ["programs", "zsh", "shellAliases"], "readOnly": false, "title": "programs.zsh.shellAliases", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names in\nthis option) to command strings or directly to build outputs.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "Similar to ,\nbut are substituted anywhere on a line.", "example": "{\n  UUID = \"$(uuidgen | tr -d \\\\n)\";\n  G = \"| grep\";\n}\n", "loc": ["programs", "zsh", "shellGlobalAliases"], "readOnly": false, "title": "programs.zsh.shellGlobalAliases", "type": "attribute set of string", "descriptionHTML": "<p>Similar to <a href=\"#opt-programs.zsh.shellAliases\"></a>,\nbut are substituted anywhere on a line.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "Options related to zsh-syntax-highlighting.", "example": "", "loc": ["programs", "zsh", "syntaxHighlighting"], "readOnly": false, "title": "programs.zsh.syntaxHighlighting", "type": "submodule", "descriptionHTML": "<p>Options related to zsh-syntax-highlighting.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "false", "description": "Whether to enable zsh syntax highlighting.", "example": "true", "loc": ["programs", "zsh", "syntaxHighlighting", "enable"], "readOnly": false, "title": "programs.zsh.syntaxHighlighting.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable zsh syntax highlighting.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "[ ]", "description": "Highlighters to enable\nSee the list of highlighters: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md", "example": "[\n  \"brackets\"\n]", "loc": ["programs", "zsh", "syntaxHighlighting", "highlighters"], "readOnly": false, "title": "programs.zsh.syntaxHighlighting.highlighters", "type": "list of string", "descriptionHTML": "<p>Highlighters to enable\nSee the list of highlighters: <a href=\"https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md\">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters.md</a></p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "pkgs.zsh-syntax-highlighting", "description": "The zsh-syntax-highlighting package to use.", "example": "", "loc": ["programs", "zsh", "syntaxHighlighting", "package"], "readOnly": false, "title": "programs.zsh.syntaxHighlighting.package", "type": "package", "descriptionHTML": "<p>The zsh-syntax-highlighting package to use.</p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "Custom syntax highlighting for user-defined patterns.\nReference: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/pattern.md", "example": "{\n  \"rm -rf *\" = \"fg=white,bold,bg=red\";\n}", "loc": ["programs", "zsh", "syntaxHighlighting", "patterns"], "readOnly": false, "title": "programs.zsh.syntaxHighlighting.patterns", "type": "attribute set of string", "descriptionHTML": "<p>Custom syntax highlighting for user-defined patterns.\nReference: <a href=\"https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/pattern.md\">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/pattern.md</a></p>"}, {"declarations": [{"name": "<programs/zsh/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/default.nix"}], "default": "{ }", "description": "Custom styles for syntax highlighting.\nSee each highlighter style option: https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md", "example": "{\n  comment = \"fg=black,bold\";\n}", "loc": ["programs", "zsh", "syntaxHighlighting", "styles"], "readOnly": false, "title": "programs.zsh.syntaxHighlighting.styles", "type": "attribute set of string", "descriptionHTML": "<p>Custom styles for syntax highlighting.\nSee each highlighter style option: <a href=\"https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md\">https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/docs/highlighters/main.md</a></p>"}, {"declarations": [{"name": "<programs/zplug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zplug.nix"}], "default": "false", "description": "Whether to enable zplug - a zsh plugin manager.", "example": "true", "loc": ["programs", "zsh", "zplug", "enable"], "readOnly": false, "title": "programs.zsh.zplug.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable zplug - a zsh plugin manager.</p>"}, {"declarations": [{"name": "<programs/zplug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zplug.nix"}], "default": "[ ]", "description": "List of zplug plugins.", "example": "", "loc": ["programs", "zsh", "zplug", "plugins"], "readOnly": false, "title": "programs.zsh.zplug.plugins", "type": "list of (submodule)", "descriptionHTML": "<p>List of zplug plugins.</p>"}, {"declarations": [{"name": "<programs/zplug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zplug.nix"}], "default": "", "description": "The name of the plugin.", "example": "", "loc": ["programs", "zsh", "zplug", "plugins", "*", "name"], "readOnly": false, "title": "programs.zsh.zplug.plugins.*.name", "type": "string", "descriptionHTML": "<p>The name of the plugin.</p>"}, {"declarations": [{"name": "<programs/zplug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zplug.nix"}], "default": "[ ]", "description": "The plugin tags.", "example": "", "loc": ["programs", "zsh", "zplug", "plugins", "*", "tags"], "readOnly": false, "title": "programs.zsh.zplug.plugins.*.tags", "type": "list of string", "descriptionHTML": "<p>The plugin tags.</p>"}, {"declarations": [{"name": "<programs/zplug.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zplug.nix"}], "default": "\"~/.zplug\"", "description": "Path to zplug home directory.", "example": "", "loc": ["programs", "zsh", "zplug", "zplugHome"], "readOnly": false, "title": "programs.zsh.zplug.zplugHome", "type": "absolute path", "descriptionHTML": "<p>Path to zplug home directory.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/zprof.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/zprof.nix"}], "default": "false", "description": "Enable zprof in your zshrc.", "example": "", "loc": ["programs", "zsh", "zprof", "enable"], "readOnly": false, "title": "programs.zsh.zprof.enable", "type": "boolean", "descriptionHTML": "<p>Enable zprof in your zshrc.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/zsh-abbr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/zsh-abbr.nix"}], "default": "{ }", "description": "An attribute set that maps aliases (the top level attribute names\nin this option) to abbreviations. Abbreviations are expanded with\nthe longer phrase after they are entered.", "example": "{\n  gco = \"git checkout\";\n  l = \"less\";\n}", "loc": ["programs", "zsh", "zsh-abbr", "abbreviations"], "readOnly": false, "title": "programs.zsh.zsh-abbr.abbreviations", "type": "attribute set of string", "descriptionHTML": "<p>An attribute set that maps aliases (the top level attribute names\nin this option) to abbreviations. Abbreviations are expanded with\nthe longer phrase after they are entered.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/zsh-abbr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/zsh-abbr.nix"}], "default": "false", "description": "Whether to enable zsh-abbr - zsh manager for auto-expanding abbreviations.", "example": "true", "loc": ["programs", "zsh", "zsh-abbr", "enable"], "readOnly": false, "title": "programs.zsh.zsh-abbr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable zsh-abbr - zsh manager for auto-expanding abbreviations.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/zsh-abbr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/zsh-abbr.nix"}], "default": "{ }", "description": "Similar to ,\nbut are expanded anywhere on a line.", "example": "{\n  G = \"| grep\";\n  L = \"| less -R\";\n}", "loc": ["programs", "zsh", "zsh-abbr", "globalAbbreviations"], "readOnly": false, "title": "programs.zsh.zsh-abbr.globalAbbreviations", "type": "attribute set of string", "descriptionHTML": "<p>Similar to <a href=\"#opt-programs.zsh.zsh-abbr.abbreviations\"></a>,\nbut are expanded anywhere on a line.</p>"}, {"declarations": [{"name": "<programs/zsh/plugins/zsh-abbr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/zsh/plugins/zsh-abbr.nix"}], "default": "pkgs.zsh-abbr", "description": "The zsh-abbr package to use.", "example": "", "loc": ["programs", "zsh", "zsh-abbr", "package"], "readOnly": false, "title": "programs.zsh.zsh-abbr.package", "type": "package", "descriptionHTML": "<p>The zsh-abbr package to use.</p>"}, {"declarations": [{"name": "<misc/qt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/qt.nix"}], "default": "false", "description": "Whether to enable Qt 5 and 6 configuration.", "example": "true", "loc": ["qt", "enable"], "readOnly": false, "title": "qt.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Qt 5 and 6 configuration.</p>"}, {"declarations": [{"name": "<misc/qt/kconfig.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/qt/kconfig.nix"}], "default": "{ }", "description": "A set of values to be modified by {command}kwriteconfig6.\nThe example value would cause the following command to run in the\nactivation script:\nshell\nkwriteconfig6 --file $XDG_CONFIG_HOME/powermanagementprofilesrc \\\n              --group AC \\\n              --group HandleButtonEvents \\\n              --group lidAction \\\n              --key lidAction \\\n              32\nNote, null values will delete the corresponding entry instead of\ninserting any value.", "example": "{\n  powermanagementprofilesrc = {\n    AC = {\n      HandleButtonEvents = {\n        lidAction = 32;\n      };\n    };\n  };\n}", "loc": ["qt", "kde", "settings"], "readOnly": false, "title": "qt.kde.settings", "type": "attribute set of (KDE option value)", "descriptionHTML": "<p>A set of values to be modified by {command}<code>kwriteconfig6</code>.</p>\n<p>The example value would cause the following command to run in the\nactivation script:</p>\n<p><code>shell\nkwriteconfig6 --file $XDG_CONFIG_HOME/powermanagementprofilesrc \\\n              --group AC \\\n              --group HandleButtonEvents \\\n              --group lidAction \\\n              --key lidAction \\\n              32</code></p>\n<p>Note, <code>null</code> values will delete the corresponding entry instead of\ninserting any value.</p>"}, {"declarations": [{"name": "<misc/qt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/qt.nix"}], "default": "null", "description": "Deprecated. Use {option}qt.platformTheme.name instead.", "example": "", "loc": ["qt", "platformTheme"], "readOnly": false, "title": "qt.platformTheme", "type": "null or one of \"gtk\", \"gtk3\", \"gnome\", \"adwaita\", \"lxqt\", \"qtct\", \"kde\", \"kde6\" or (submodule)", "descriptionHTML": "<p>Deprecated. Use {option}<code>qt.platformTheme.name</code> instead.</p>"}, {"declarations": [{"name": "<misc/qt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/qt.nix"}], "default": "null", "description": "Style to use for Qt5/Qt6 applications. Case-insensitive.\nSome examples are\nadwaita, adwaita-dark, adwaita-highcontrast, adwaita-highcontrastinverse\n: Use the Adwaita style from\n  adwaita-qt\nbreeze\n: Use the Breeze style from\n  breeze\nbb10bright, bb10dark, cde, cleanlooks, gtk2, motif, plastique\n: Use styles from\n  qtstyleplugins\nkvantum\n: Use styles from\n  kvantum", "example": "\"adwaita-dark\"", "loc": ["qt", "style", "name"], "readOnly": false, "title": "qt.style.name", "type": "null or string", "descriptionHTML": "<p>Style to use for Qt5/Qt6 applications. Case-insensitive.</p>\n<p>Some examples are</p>\n<p><code>adwaita</code>, <code>adwaita-dark</code>, <code>adwaita-highcontrast</code>, <code>adwaita-highcontrastinverse</code>\n: Use the Adwaita style from\n  <a href=\"https://github.com/FedoraQt/adwaita-qt\"><code>adwaita-qt</code></a></p>\n<p><code>breeze</code>\n: Use the Breeze style from\n  <a href=\"https://github.com/KDE/breeze\"><code>breeze</code></a></p>\n<p><code>bb10bright</code>, <code>bb10dark</code>, <code>cde</code>, <code>cleanlooks</code>, <code>gtk2</code>, <code>motif</code>, <code>plastique</code>\n: Use styles from\n  <a href=\"https://github.com/qt/qtstyleplugins\"><code>qtstyleplugins</code></a></p>\n<p><code>kvantum</code>\n: Use styles from\n  <a href=\"https://github.com/tsujan/Kvantum\"><code>kvantum</code></a></p>"}, {"declarations": [{"name": "<misc/qt.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/qt.nix"}], "default": "null", "description": "Theme package to be used in Qt5/Qt6 applications.\nAuto-detected from {option}qt.style.name if possible.\nSee its documentation for available options.", "example": "pkgs.adwaita-qt", "loc": ["qt", "style", "package"], "readOnly": false, "title": "qt.style.package", "type": "null or package or list of package", "descriptionHTML": "<p>Theme package to be used in Qt5/Qt6 applications.\nAuto-detected from {option}<code>qt.style.name</code> if possible.\nSee its documentation for available options.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "false", "description": "Whether to enable ActivityWatch, an automated time tracker.", "example": "true", "loc": ["services", "activitywatch", "enable"], "readOnly": false, "title": "services.activitywatch.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ActivityWatch, an automated time tracker.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "[ ]", "description": "Additional arguments to be passed on to the ActivityWatch server.", "example": "[\n  \"--port\"\n  \"5999\"\n]", "loc": ["services", "activitywatch", "extraOptions"], "readOnly": false, "title": "services.activitywatch.extraOptions", "type": "list of string", "descriptionHTML": "<p>Additional arguments to be passed on to the ActivityWatch server.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "pkgs.activitywatch", "description": "Package containing the Rust implementation of ActivityWatch\nserver.", "example": "pkgs.aw-server-rust", "loc": ["services", "activitywatch", "package"], "readOnly": false, "title": "services.activitywatch.package", "type": "package", "descriptionHTML": "<p>Package containing <a href=\"https://github.com/ActivityWatch/aw-server-rust\">the Rust implementation of ActivityWatch\nserver</a>.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "{ }", "description": "Configuration for aw-server-rust to be generated at\n{file}$XDG_CONFIG_HOME/activitywatch/aw-server-rust/config.toml.", "example": "{\n  port = 3012;\n\n  custom_static = {\n    my-custom-watcher = \"${pkgs.my-custom-watcher}/share/my-custom-watcher/static\";\n    aw-keywatcher = \"${pkgs.aw-keywatcher}/share/aw-keywatcher/static\";\n  };\n}\n", "loc": ["services", "activitywatch", "settings"], "readOnly": false, "title": "services.activitywatch.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration for <code>aw-server-rust</code> to be generated at\n{file}<code>$XDG_CONFIG_HOME/activitywatch/aw-server-rust/config.toml</code>.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "{ }", "description": "Watchers to be included with the service alongside with their\nconfiguration.\nIf a configuration is set, a file will be generated in\n{file}$XDG_CONFIG_HOME/activitywatch/$WATCHER_NAME/$WATCHER_SETTINGS_FILENAME.\n::: {.note}\nThe watchers are run with the service manager and the settings format\nof the configuration is only assumed to be in TOML. Furthermore, it\nassumes the watcher program is using the official client libraries\nwhich has functions to store it in the appropriate location.\n:::", "example": "{\n  aw-watcher-afk = {\n    package = pkgs.activitywatch;\n    settings = {\n      timeout = 300;\n      poll_time = 2;\n    };\n  };\n\n  aw-watcher-windows = {\n    package = pkgs.activitywatch;\n    settings = {\n      poll_time = 1;\n      exclude_title = true;\n    };\n  };\n\n  my-custom-watcher = {\n    package = pkgs.my-custom-watcher;\n    executable = \"mcw\";\n    settings = {\n      hello = \"there\";\n      enable_greetings = true;\n      poll_time = 5;\n    };\n    settingsFilename = \"config.toml\";\n  };\n}\n", "loc": ["services", "activitywatch", "watchers"], "readOnly": false, "title": "services.activitywatch.watchers", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Watchers to be included with the service alongside with their\nconfiguration.</p>\n<p>If a configuration is set, a file will be generated in\n{file}<code>$XDG_CONFIG_HOME/activitywatch/$WATCHER_NAME/$WATCHER_SETTINGS_FILENAME</code>.</p>\n<p>::: {.note}\nThe watchers are run with the service manager and the settings format\nof the configuration is only assumed to be in TOML. Furthermore, it\nassumes the watcher program is using the official client libraries\nwhich has functions to store it in the appropriate location.\n:::</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "\"\u2039name\u203a\"", "description": "The name of the executable of the watcher. This is useful in case the\nwatcher name is different from the executable. By default, this\noption uses the watcher name.", "example": "", "loc": ["services", "activitywatch", "watchers", "<name>", "executable"], "readOnly": false, "title": "services.activitywatch.watchers.<name>.executable", "type": "string", "descriptionHTML": "<p>The name of the executable of the watcher. This is useful in case the\nwatcher name is different from the executable. By default, this\noption uses the watcher name.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "[ ]", "description": "Extra arguments to be passed to the watcher executable.", "example": "[\n  \"--host\"\n  \"127.0.0.1\"\n]", "loc": ["services", "activitywatch", "watchers", "<name>", "extraOptions"], "readOnly": false, "title": "services.activitywatch.watchers.<name>.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra arguments to be passed to the watcher executable.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "\"\u2039name\u203a\"", "description": "The name of the watcher. This will be used as the directory name for\n{file}$XDG_CONFIG_HOME/activitywatch/$NAME when\n{option}services.activitywatch.watchers.&lt;name&gt;.settings is set.", "example": "\"aw-watcher-afk\"", "loc": ["services", "activitywatch", "watchers", "<name>", "name"], "readOnly": false, "title": "services.activitywatch.watchers.<name>.name", "type": "string", "descriptionHTML": "<p>The name of the watcher. This will be used as the directory name for\n{file}<code>$XDG_CONFIG_HOME/activitywatch/$NAME</code> when\n{option}<code>services.activitywatch.watchers.&lt;name&gt;.settings</code> is set.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "pkgs.activitywatch", "description": "The activitywatch package to use. The derivation containing the watcher executable.", "example": "", "loc": ["services", "activitywatch", "watchers", "<name>", "package"], "readOnly": false, "title": "services.activitywatch.watchers.<name>.package", "type": "package", "descriptionHTML": "<p>The activitywatch package to use. The derivation containing the watcher executable.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "{ }", "description": "The settings for the individual watcher in TOML format. If set, a\nfile will be generated at\n{file}$XDG_CONFIG_HOME/activitywatch/$NAME/$FILENAME.\nTo set the basename of the settings file, see\n.", "example": "{\n  poll_time = 2;\n  timeout = 300;\n}", "loc": ["services", "activitywatch", "watchers", "<name>", "settings"], "readOnly": false, "title": "services.activitywatch.watchers.<name>.settings", "type": "TOML value", "descriptionHTML": "<p>The settings for the individual watcher in TOML format. If set, a\nfile will be generated at\n{file}<code>$XDG_CONFIG_HOME/activitywatch/$NAME/$FILENAME</code>.</p>\n<p>To set the basename of the settings file, see\n<a href=\"#opt-services.activitywatch.watchers._name_.settingsFilename\"></a>.</p>"}, {"declarations": [{"name": "<services/activitywatch.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/activitywatch.nix"}], "default": "\"\u2039name\u203a.toml\"", "description": "The filename of the generated settings file. By default, this uses\nthe watcher name to be generated at\n{file}$XDG_CONFIG_HOME/activitywatch/$NAME/$NAME.toml.\nThis is useful in case the watcher requires a different name for the\nconfiguration file.", "example": "\"config.toml\"", "loc": ["services", "activitywatch", "watchers", "<name>", "settingsFilename"], "readOnly": false, "title": "services.activitywatch.watchers.<name>.settingsFilename", "type": "string", "descriptionHTML": "<p>The filename of the generated settings file. By default, this uses\nthe watcher name to be generated at\n{file}<code>$XDG_CONFIG_HOME/activitywatch/$NAME/$NAME.toml</code>.</p>\n<p>This is useful in case the watcher requires a different name for the\nconfiguration file.</p>"}, {"declarations": [{"name": "<services/amberol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/amberol.nix"}], "default": "false", "description": "Whether to enable Amberol music player as a daemon.\nNote, it is necessary to add\nnix\nprograms.dconf.enable = true;\nto your system configuration for the daemon to work correctly.", "example": "true", "loc": ["services", "amberol", "enable"], "readOnly": false, "title": "services.amberol.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Amberol music player as a daemon.</p>\n<p>Note, it is necessary to add\n<code>nix\nprograms.dconf.enable = true;</code>\nto your system configuration for the daemon to work correctly.</p>"}, {"declarations": [{"name": "<services/amberol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/amberol.nix"}], "default": "true", "description": "UI recoloring using the album art.", "example": "", "loc": ["services", "amberol", "enableRecoloring"], "readOnly": false, "title": "services.amberol.enableRecoloring", "type": "boolean", "descriptionHTML": "<p>UI recoloring using the album art.</p>"}, {"declarations": [{"name": "<services/amberol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/amberol.nix"}], "default": "pkgs.amberol", "description": "The amberol package to use.", "example": "", "loc": ["services", "amberol", "package"], "readOnly": false, "title": "services.amberol.package", "type": "package", "descriptionHTML": "<p>The amberol package to use.</p>"}, {"declarations": [{"name": "<services/amberol.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/amberol.nix"}], "default": "\"track\"", "description": "ReplayGain mode.", "example": "", "loc": ["services", "amberol", "replaygain"], "readOnly": false, "title": "services.amberol.replaygain", "type": "one of \"album\", \"track\", \"off\"", "descriptionHTML": "<p>ReplayGain mode.</p>"}, {"declarations": [{"name": "<services/arrpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/arrpc.nix"}], "default": "false", "description": "Whether to enable arrpc.", "example": "true", "loc": ["services", "arrpc", "enable"], "readOnly": false, "title": "services.arrpc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable arrpc.</p>"}, {"declarations": [{"name": "<services/arrpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/arrpc.nix"}], "default": "pkgs.arrpc", "description": "The arrpc package to use.", "example": "", "loc": ["services", "arrpc", "package"], "readOnly": false, "title": "services.arrpc.package", "type": "package", "descriptionHTML": "<p>The arrpc package to use.</p>"}, {"declarations": [{"name": "<services/arrpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/arrpc.nix"}], "default": "\"graphical-session.target\"", "description": "Systemd target to bind to.", "example": "\"sway-session.target\"", "loc": ["services", "arrpc", "systemdTarget"], "readOnly": false, "title": "services.arrpc.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/autorandr.nix"}], "default": "false", "description": "Whether to enable the Autorandr systemd service.\nThis module is complementary to {option}programs.autorandr\nwhich handles the configuration (profiles).", "example": "true", "loc": ["services", "autorandr", "enable"], "readOnly": false, "title": "services.autorandr.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Autorandr systemd service.\nThis module is complementary to {option}<code>programs.autorandr</code>\nwhich handles the configuration (profiles).</p>"}, {"declarations": [{"name": "<services/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/autorandr.nix"}], "default": "[ ]", "description": "Extra options to pass to Autorandr.", "example": "[\n  \"--force\"\n]", "loc": ["services", "autorandr", "extraOptions"], "readOnly": false, "title": "services.autorandr.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra options to pass to Autorandr.</p>"}, {"declarations": [{"name": "<services/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/autorandr.nix"}], "default": "false", "description": "Treat outputs as connected even if their lids are closed.", "example": "", "loc": ["services", "autorandr", "ignoreLid"], "readOnly": false, "title": "services.autorandr.ignoreLid", "type": "boolean", "descriptionHTML": "<p>Treat outputs as connected even if their lids are closed.</p>"}, {"declarations": [{"name": "<services/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/autorandr.nix"}], "default": "false", "description": "Match displays based on edid instead of name.", "example": "", "loc": ["services", "autorandr", "matchEdid"], "readOnly": false, "title": "services.autorandr.matchEdid", "type": "boolean", "descriptionHTML": "<p>Match displays based on edid instead of name.</p>"}, {"declarations": [{"name": "<services/autorandr.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/autorandr.nix"}], "default": "pkgs.autorandr", "description": "The autorandr package to use.", "example": "", "loc": ["services", "autorandr", "package"], "readOnly": false, "title": "services.autorandr.package", "type": "package", "descriptionHTML": "<p>The autorandr package to use.</p>"}, {"declarations": [{"name": "<services/avizo.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/avizo.nix"}], "default": "false", "description": "Whether to enable avizo, a simple notification daemon.", "example": "true", "loc": ["services", "avizo", "enable"], "readOnly": false, "title": "services.avizo.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable avizo, a simple notification daemon.</p>"}, {"declarations": [{"name": "<services/avizo.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/avizo.nix"}], "default": "pkgs.avizo", "description": "The avizo package to use.", "example": "pkgs.avizo.overrideAttrs (final: prev: {\n  patchPhase = \"cp ${./images}/*.png data/images/\";\n})\n", "loc": ["services", "avizo", "package"], "readOnly": false, "title": "services.avizo.package", "type": "package", "descriptionHTML": "<p>The avizo package to use.</p>"}, {"declarations": [{"name": "<services/avizo.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/avizo.nix"}], "default": "{ }", "description": "The settings that will be written to the avizo configuration file.", "example": "{\n  default = {\n    time = 1.0;\n    y-offset = 0.5;\n    fade-in = 0.1;\n    fade-out = 0.2;\n    padding = 10;\n  };\n}\n", "loc": ["services", "avizo", "settings"], "readOnly": false, "title": "services.avizo.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>The settings that will be written to the avizo configuration file.</p>"}, {"declarations": [{"name": "<services/barrier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/barrier.nix"}], "default": "false", "description": "Whether to enable Barrier Client daemon.", "example": "true", "loc": ["services", "barrier", "client", "enable"], "readOnly": false, "title": "services.barrier.client.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Barrier Client daemon.</p>"}, {"declarations": [{"name": "<services/barrier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/barrier.nix"}], "default": "true", "description": "Whether to enable crypto (SSL) plugin.", "example": "true", "loc": ["services", "barrier", "client", "enableCrypto"], "readOnly": false, "title": "services.barrier.client.enableCrypto", "type": "boolean", "descriptionHTML": "<p>Whether to enable crypto (SSL) plugin.</p>"}, {"declarations": [{"name": "<services/barrier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/barrier.nix"}], "default": "false", "description": "Whether to enable file drag &amp; drop.", "example": "true", "loc": ["services", "barrier", "client", "enableDragDrop"], "readOnly": false, "title": "services.barrier.client.enableDragDrop", "type": "boolean", "descriptionHTML": "<p>Whether to enable file drag &amp; drop.</p>"}, {"declarations": [{"name": "<services/barrier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/barrier.nix"}], "default": "[ \"-f\" ]", "description": "Additional flags to pass to {command}barrierc.\nSee {command}barrierc --help.", "example": "", "loc": ["services", "barrier", "client", "extraFlags"], "readOnly": false, "title": "services.barrier.client.extraFlags", "type": "list of string", "descriptionHTML": "<p>Additional flags to pass to {command}<code>barrierc</code>.\nSee {command}<code>barrierc --help</code>.</p>"}, {"declarations": [{"name": "<services/barrier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/barrier.nix"}], "default": "null", "description": "Screen name of client. Defaults to hostname.", "example": "", "loc": ["services", "barrier", "client", "name"], "readOnly": false, "title": "services.barrier.client.name", "type": "null or string", "descriptionHTML": "<p>Screen name of client. Defaults to hostname.</p>"}, {"declarations": [{"name": "<services/barrier.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/barrier.nix"}], "default": "", "description": "Server to connect to formatted as\n&lt;host&gt;[:&lt;port&gt;].\nPort defaults to 24800.", "example": "", "loc": ["services", "barrier", "client", "server"], "readOnly": false, "title": "services.barrier.client.server", "type": "string", "descriptionHTML": "<p>Server to connect to formatted as\n<code>&lt;host&gt;[:&lt;port&gt;]</code>.\nPort defaults to <code>24800</code>.</p>"}, {"declarations": [{"name": "<services/batsignal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/batsignal.nix"}], "default": "false", "description": "Whether to enable Batsignal Battery Daemon.", "example": "true", "loc": ["services", "batsignal", "enable"], "readOnly": false, "title": "services.batsignal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Batsignal Battery Daemon.</p>"}, {"declarations": [{"name": "<services/batsignal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/batsignal.nix"}], "default": "[ ]", "description": "Extra arguments to be passed to the batsignal executable.", "example": "", "loc": ["services", "batsignal", "extraArgs"], "readOnly": false, "title": "services.batsignal.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to be passed to the batsignal executable.</p>"}, {"declarations": [{"name": "<services/batsignal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/batsignal.nix"}], "default": "pkgs.batsignal", "description": "The batsignal package to use.", "example": "", "loc": ["services", "batsignal", "package"], "readOnly": false, "title": "services.batsignal.package", "type": "package", "descriptionHTML": "<p>The batsignal package to use.</p>"}, {"declarations": [{"name": "<services/betterlockscreen.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/betterlockscreen.nix"}], "default": "[ ]", "description": "List of arguments appended to ./betterlockscreen --lock [args]", "example": "", "loc": ["services", "betterlockscreen", "arguments"], "readOnly": false, "title": "services.betterlockscreen.arguments", "type": "list of string", "descriptionHTML": "<p>List of arguments appended to <code>./betterlockscreen --lock [args]</code></p>"}, {"declarations": [{"name": "<services/betterlockscreen.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/betterlockscreen.nix"}], "default": "false", "description": "Whether to enable betterlockscreen, a screen-locker module.", "example": "true", "loc": ["services", "betterlockscreen", "enable"], "readOnly": false, "title": "services.betterlockscreen.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable betterlockscreen, a screen-locker module.</p>"}, {"declarations": [{"name": "<services/betterlockscreen.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/betterlockscreen.nix"}], "default": "10", "description": "Value used for {option}services.screen-locker.inactiveInterval.", "example": "", "loc": ["services", "betterlockscreen", "inactiveInterval"], "readOnly": false, "title": "services.betterlockscreen.inactiveInterval", "type": "signed integer", "descriptionHTML": "<p>Value used for {option}<code>services.screen-locker.inactiveInterval</code>.</p>"}, {"declarations": [{"name": "<services/betterlockscreen.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/betterlockscreen.nix"}], "default": "pkgs.betterlockscreen", "description": "The betterlockscreen package to use.", "example": "", "loc": ["services", "betterlockscreen", "package"], "readOnly": false, "title": "services.betterlockscreen.package", "type": "package", "descriptionHTML": "<p>The betterlockscreen package to use.</p>"}, {"declarations": [{"name": "<services/blanket.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/blanket.nix"}], "default": "false", "description": "Whether to enable blanket.", "example": "true", "loc": ["services", "blanket", "enable"], "readOnly": false, "title": "services.blanket.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable blanket.</p>"}, {"declarations": [{"name": "<services/blanket.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/blanket.nix"}], "default": "pkgs.blanket", "description": "The blanket package to use.", "example": "", "loc": ["services", "blanket", "package"], "readOnly": false, "title": "services.blanket.package", "type": "package", "descriptionHTML": "<p>The blanket package to use.</p>"}, {"declarations": [{"name": "<services/blueman-applet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/blueman-applet.nix"}], "default": "false", "description": "Whether to enable the Blueman applet.\nNote that for the applet to work, the blueman service should\nbe enabled system-wide. You can enable it in the system\nconfiguration using\nnix\nservices.blueman.enable = true;", "example": "true", "loc": ["services", "blueman-applet", "enable"], "readOnly": false, "title": "services.blueman-applet.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Blueman applet.</p>\n<p>Note that for the applet to work, the <code>blueman</code> service should\nbe enabled system-wide. You can enable it in the system\nconfiguration using\n<code>nix\nservices.blueman.enable = true;</code></p>"}, {"declarations": [{"name": "<services/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/borgmatic.nix"}], "default": "false", "description": "Whether to enable Borgmatic service.", "example": "true", "loc": ["services", "borgmatic", "enable"], "readOnly": false, "title": "services.borgmatic.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Borgmatic service.</p>"}, {"declarations": [{"name": "<services/borgmatic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/borgmatic.nix"}], "default": "\"hourly\"", "description": "How often to run borgmatic when\nservices.borgmatic.enable = true.\nThis value is passed to the systemd timer configuration as\nthe onCalendar option. See\n{manpage}systemd.time(7)\nfor more information about the format.\nOn Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}systemd.time(7).", "example": "", "loc": ["services", "borgmatic", "frequency"], "readOnly": false, "title": "services.borgmatic.frequency", "type": "string", "descriptionHTML": "<p>How often to run borgmatic when\n<code>services.borgmatic.enable = true</code>.\nThis value is passed to the systemd timer configuration as\nthe onCalendar option. See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>\n<p>On Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "\"${config.xdg.configHome}/cachix-agent.token\"", "description": "Required file that needs to contain\nCACHIX_AGENT_TOKEN=....", "example": "", "loc": ["services", "cachix-agent", "credentialsFile"], "readOnly": false, "title": "services.cachix-agent.credentialsFile", "type": "absolute path", "descriptionHTML": "<p>Required file that needs to contain\n<code>CACHIX_AGENT_TOKEN=...</code>.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "false", "description": "Whether to enable Cachix Deploy Agent: https://docs.cachix.org/deploy/.", "example": "true", "loc": ["services", "cachix-agent", "enable"], "readOnly": false, "title": "services.cachix-agent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Cachix Deploy Agent: <a href=\"https://docs.cachix.org/deploy/\">https://docs.cachix.org/deploy/</a>.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "null", "description": "Cachix URI to use.", "example": "", "loc": ["services", "cachix-agent", "host"], "readOnly": false, "title": "services.cachix-agent.host", "type": "null or string", "descriptionHTML": "<p>Cachix URI to use.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "", "description": "The unique agent name.", "example": "", "loc": ["services", "cachix-agent", "name"], "readOnly": false, "title": "services.cachix-agent.name", "type": "string", "descriptionHTML": "<p>The unique agent name.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "pkgs.cachix", "description": "The cachix package to use.", "example": "", "loc": ["services", "cachix-agent", "package"], "readOnly": false, "title": "services.cachix-agent.package", "type": "package", "descriptionHTML": "<p>The cachix package to use.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "\"home-manager\"", "description": "The Nix profile name.", "example": "", "loc": ["services", "cachix-agent", "profile"], "readOnly": false, "title": "services.cachix-agent.profile", "type": "string", "descriptionHTML": "<p>The Nix profile name.</p>"}, {"declarations": [{"name": "<services/cachix-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cachix-agent.nix"}], "default": "false", "description": "Whether to enable verbose output.", "example": "true", "loc": ["services", "cachix-agent", "verbose"], "readOnly": false, "title": "services.cachix-agent.verbose", "type": "boolean", "descriptionHTML": "<p>Whether to enable verbose output.</p>"}, {"declarations": [{"name": "<services/caffeine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/caffeine.nix"}], "default": "false", "description": "Whether to enable Caffeine service.", "example": "true", "loc": ["services", "caffeine", "enable"], "readOnly": false, "title": "services.caffeine.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Caffeine service.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "ID of the battery to monitor. List with {command}cbatticon -p.\nDefaults to the first entry in the list.", "example": "", "loc": ["services", "cbatticon", "batteryId"], "readOnly": false, "title": "services.cbatticon.batteryId", "type": "null or string", "descriptionHTML": "<p>ID of the battery to monitor. List with {command}<code>cbatticon -p</code>.\nDefaults to the first entry in the list.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Command to execute when the critical battery level is reached.", "example": "''\n  notify-send \"battery critical!\"\n''", "loc": ["services", "cbatticon", "commandCriticalLevel"], "readOnly": false, "title": "services.cbatticon.commandCriticalLevel", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Command to execute when the critical battery level is reached.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Command to execute when left clicking on the tray icon.", "example": "", "loc": ["services", "cbatticon", "commandLeftClick"], "readOnly": false, "title": "services.cbatticon.commandLeftClick", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Command to execute when left clicking on the tray icon.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Critical level percentage of the battery in percent (without\nthe percent symbol).", "example": "5", "loc": ["services", "cbatticon", "criticalLevelPercent"], "readOnly": false, "title": "services.cbatticon.criticalLevelPercent", "type": "null or integer between 0 and 100 (both inclusive)", "descriptionHTML": "<p>Critical level percentage of the battery in percent (without\nthe percent symbol).</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "false", "description": "Whether to enable cbatticon.", "example": "true", "loc": ["services", "cbatticon", "enable"], "readOnly": false, "title": "services.cbatticon.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable cbatticon.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Hide the notification popups.", "example": "", "loc": ["services", "cbatticon", "hideNotification"], "readOnly": false, "title": "services.cbatticon.hideNotification", "type": "null or boolean", "descriptionHTML": "<p>Hide the notification popups.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Icon type to display in the system tray.", "example": "\"symbolic\"", "loc": ["services", "cbatticon", "iconType"], "readOnly": false, "title": "services.cbatticon.iconType", "type": "null or one of \"standard\", \"notification\", \"symbolic\"", "descriptionHTML": "<p>Icon type to display in the system tray.</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Low level percentage of the battery in percent (without the\npercent symbol).", "example": "20", "loc": ["services", "cbatticon", "lowLevelPercent"], "readOnly": false, "title": "services.cbatticon.lowLevelPercent", "type": "null or integer between 0 and 100 (both inclusive)", "descriptionHTML": "<p>Low level percentage of the battery in percent (without the\npercent symbol).</p>"}, {"declarations": [{"name": "<services/cbatticon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cbatticon.nix"}], "default": "null", "description": "Number of seconds between updates of the battery information.", "example": "5", "loc": ["services", "cbatticon", "updateIntervalSeconds"], "readOnly": false, "title": "services.cbatticon.updateIntervalSeconds", "type": "null or (positive integer, meaning >0)", "descriptionHTML": "<p>Number of seconds between updates of the battery information.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "{ }", "description": "Configuration settings for clipcatctl. All available options can be found\nhere: https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration.", "example": "''\n  {\n    server_endpoint = \"/run/user/<user-id>/clipcat/grpc.sock\";\n    log = {\n      file_path = \"/path/to/log/file\";\n      emit_journald = true;\n      emit_stdout = false;\n      emit_stderr = false;\n      level = \"INFO\";\n    };\n  }\n''", "loc": ["services", "clipcat", "ctlSettings"], "readOnly": false, "title": "services.clipcat.ctlSettings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for clipcatctl. All available options can be found\nhere: <a href=\"https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration\">https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration</a>.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "{\n  daemonize = true;\n}", "description": "Configuration settings for clipcatd. All available options can be found\nhere: https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration.", "example": "''\n  {\n    daemonize = true;\n    max_history = 50;\n    history_file_path = \"/home/<username>/.cache/clipcat/clipcatd-history\";\n    pid_file = \"/run/user/<user-id>/clipcatd.pid\";\n    primary_threshold_ms = 5000;\n    log = {\n      file_path = \"/path/to/log/file\";\n      emit_journald = true;\n      emit_stdout = false;\n      emit_stderr = false;\n      level = \"INFO\";\n    };\n  }\n''", "loc": ["services", "clipcat", "daemonSettings"], "readOnly": false, "title": "services.clipcat.daemonSettings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for clipcatd. All available options can be found\nhere: <a href=\"https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration\">https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration</a>.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "false", "description": "Whether to enable clipcat.", "example": "true", "loc": ["services", "clipcat", "enable"], "readOnly": false, "title": "services.clipcat.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable clipcat.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "true", "description": "Enable clipcat's Systemd Unit.", "example": "false", "loc": ["services", "clipcat", "enableSystemdUnit"], "readOnly": false, "title": "services.clipcat.enableSystemdUnit", "type": "boolean", "descriptionHTML": "<p>Enable clipcat's Systemd Unit.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["services", "clipcat", "enableZshIntegration"], "readOnly": false, "title": "services.clipcat.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "{ }", "description": "Configuration settings for clipcat-menu. All available options can be found\nhere: https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration.", "example": "''\n  {\n    server_endpoint = \"/run/user/<user-id>/clipcat/grpc.sock\";\n    finder = \"rofi\";\n    rofi = {\n      line_length = 100;\n      menu_length = 30;\n      menu_prompt = \"Clipcat\";\n      extra_arguments = [\n        \"-mesg\"\n        \"Please select a clip\"\n      ];\n    };\n    dmenu = {\n      line_length = 100;\n      menu_length = 30;\n      menu_prompt = \"Clipcat\";\n    };\n  }\n''", "loc": ["services", "clipcat", "menuSettings"], "readOnly": false, "title": "services.clipcat.menuSettings", "type": "TOML value", "descriptionHTML": "<p>Configuration settings for clipcat-menu. All available options can be found\nhere: <a href=\"https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration\">https://github.com/xrelkd/clipcat?tab=readme-ov-file#configuration</a>.</p>"}, {"declarations": [{"name": "<services/clipcat.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipcat.nix"}], "default": "pkgs.clipcat", "description": "The clipcat package to use.", "example": "", "loc": ["services", "clipcat", "package"], "readOnly": false, "title": "services.clipcat.package", "type": "package", "descriptionHTML": "<p>The clipcat package to use.</p>"}, {"declarations": [{"name": "<services/cliphist.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cliphist.nix"}], "default": "true", "description": "Store images in clipboard history.", "example": "", "loc": ["services", "cliphist", "allowImages"], "readOnly": false, "title": "services.cliphist.allowImages", "type": "boolean", "descriptionHTML": "<p>Store images in clipboard history.</p>"}, {"declarations": [{"name": "<services/cliphist.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cliphist.nix"}], "default": "false", "description": "Whether to enable cliphist, a clipboard history \u201cmanager\u201d for wayland.", "example": "true", "loc": ["services", "cliphist", "enable"], "readOnly": false, "title": "services.cliphist.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable cliphist, a clipboard history \u201cmanager\u201d for wayland.</p>"}, {"declarations": [{"name": "<services/cliphist.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cliphist.nix"}], "default": "[\n  \"-max-dedupe-search\"\n  \"10\"\n  \"-max-items\"\n  \"500\"\n]", "description": "Flags to append to the cliphist command.", "example": "", "loc": ["services", "cliphist", "extraOptions"], "readOnly": false, "title": "services.cliphist.extraOptions", "type": "list of string", "descriptionHTML": "<p>Flags to append to the cliphist command.</p>"}, {"declarations": [{"name": "<services/cliphist.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cliphist.nix"}], "default": "pkgs.cliphist", "description": "The cliphist package to use.", "example": "", "loc": ["services", "cliphist", "package"], "readOnly": false, "title": "services.cliphist.package", "type": "package", "descriptionHTML": "<p>The cliphist package to use.</p>"}, {"declarations": [{"name": "<services/cliphist.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/cliphist.nix"}], "default": "[\n  \"graphical-session.target\"\n]", "description": "The systemd targets that will automatically start the cliphist service.\nWhen setting this value to [\"sway-session.target\"],\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.\nNote: A single string value is deprecated, please use a list.", "example": "\"sway-session.target\"", "loc": ["services", "cliphist", "systemdTargets"], "readOnly": false, "title": "services.cliphist.systemdTargets", "type": "(list of string) or string", "descriptionHTML": "<p>The systemd targets that will automatically start the cliphist service.</p>\n<p>When setting this value to <code>[\"sway-session.target\"]</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>\n<p>Note: A single string value is deprecated, please use a list.</p>"}, {"declarations": [{"name": "<services/clipman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipman.nix"}], "default": "false", "description": "Whether to enable clipman, a simple clipboard manager for Wayland.", "example": "true", "loc": ["services", "clipman", "enable"], "readOnly": false, "title": "services.clipman.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable clipman, a simple clipboard manager for Wayland.</p>"}, {"declarations": [{"name": "<services/clipman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipman.nix"}], "default": "pkgs.clipman", "description": "The clipman package to use.", "example": "", "loc": ["services", "clipman", "package"], "readOnly": false, "title": "services.clipman.package", "type": "package", "descriptionHTML": "<p>The clipman package to use.</p>"}, {"declarations": [{"name": "<services/clipman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipman.nix"}], "default": "config.wayland.systemd.target", "description": "The systemd target that will automatically start the clipman service.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["services", "clipman", "systemdTarget"], "readOnly": false, "title": "services.clipman.systemdTarget", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start the clipman service.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<services/clipmenu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipmenu.nix"}], "default": "false", "description": "Whether to enable clipmenu, the clipboard management daemon.", "example": "true", "loc": ["services", "clipmenu", "enable"], "readOnly": false, "title": "services.clipmenu.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable clipmenu, the clipboard management daemon.</p>"}, {"declarations": [{"name": "<services/clipmenu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipmenu.nix"}], "default": "null", "description": "Launcher command, if not set, {command}dmenu\nwill be used by default.", "example": "\"rofi\"", "loc": ["services", "clipmenu", "launcher"], "readOnly": false, "title": "services.clipmenu.launcher", "type": "null or string", "descriptionHTML": "<p>Launcher command, if not set, {command}<code>dmenu</code>\nwill be used by default.</p>"}, {"declarations": [{"name": "<services/clipmenu.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipmenu.nix"}], "default": "pkgs.clipmenu", "description": "The clipmenu package to use.", "example": "", "loc": ["services", "clipmenu", "package"], "readOnly": false, "title": "services.clipmenu.package", "type": "package", "descriptionHTML": "<p>The clipmenu package to use.</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "false", "description": "Allow duplicates", "example": "", "loc": ["services", "clipse", "allowDuplicates"], "readOnly": false, "title": "services.clipse.allowDuplicates", "type": "boolean", "descriptionHTML": "<p>Allow duplicates</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "false", "description": "Whether to enable Enable clipse clipboard manager.", "example": "true", "loc": ["services", "clipse", "enable"], "readOnly": false, "title": "services.clipse.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Enable clipse clipboard manager.</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "100", "description": "Number of history lines to keep.", "example": "", "loc": ["services", "clipse", "historySize"], "readOnly": false, "title": "services.clipse.historySize", "type": "signed integer", "descriptionHTML": "<p>Number of history lines to keep.</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "2", "description": "Height cut", "example": "", "loc": ["services", "clipse", "imageDisplay", "heightCut"], "readOnly": false, "title": "services.clipse.imageDisplay.heightCut", "type": "signed integer", "descriptionHTML": "<p>Height cut</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "9", "description": "Image scaling factor X", "example": "", "loc": ["services", "clipse", "imageDisplay", "scaleX"], "readOnly": false, "title": "services.clipse.imageDisplay.scaleX", "type": "signed integer", "descriptionHTML": "<p>Image scaling factor X</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "9", "description": "Image scaling factor Y", "example": "", "loc": ["services", "clipse", "imageDisplay", "scaleY"], "readOnly": false, "title": "services.clipse.imageDisplay.scaleY", "type": "signed integer", "descriptionHTML": "<p>Image scaling factor Y</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "\"basic\"", "description": "Preview image method", "example": "", "loc": ["services", "clipse", "imageDisplay", "type"], "readOnly": false, "title": "services.clipse.imageDisplay.type", "type": "one of \"basic\", \"kitty\", \"sixel\"", "descriptionHTML": "<p>Preview image method</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "{ }", "description": "Custom key bindings", "example": " {\n   \"choose\": \"enter\",\n   \"clearSelected\": \"S\",\n   \"down\": \"down\",\n   \"end\": \"end\",\n   \"filter\": \"/\",\n   \"home\": \"home\",\n   \"more\": \"?\",\n   \"nextPage\": \"right\",\n   \"prevPage\": \"left\",\n   \"preview\": \"t\",\n   \"quit\": \"q\",\n   \"remove\": \"x\",\n   \"selectDown\": \"ctrl+down\",\n   \"selectSingle\": \"s\",\n   \"selectUp\": \"ctrl+up\",\n   \"togglePin\": \"p\",\n   \"togglePinned\": \"tab\",\n   \"up\": \"up\",\n   \"yankFilter\": \"ctrl+s\"\n}\n", "loc": ["services", "clipse", "keyBindings"], "readOnly": false, "title": "services.clipse.keyBindings", "type": "JSON value", "descriptionHTML": "<p>Custom key bindings</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "pkgs.clipse", "description": "The clipse package to use.", "example": "", "loc": ["services", "clipse", "package"], "readOnly": false, "title": "services.clipse.package", "type": "null or package", "descriptionHTML": "<p>The clipse package to use.</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "\"graphical-session.target\"", "description": "The systemd target that will automatically start the clipse service.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["services", "clipse", "systemdTarget"], "readOnly": false, "title": "services.clipse.systemdTarget", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start the clipse service.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<services/clipse.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/clipse.nix"}], "default": "{\n  useCustomTheme = false;\n}", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/clipse/custom_theme.json.", "example": "{\n  useCustomTheme = true;\n  DimmedDesc = \"#ffffff\";\n  DimmedTitle = \"#ffffff\";\n  FilteredMatch = \"#ffffff\";\n  NormalDesc = \"#ffffff\";\n  NormalTitle = \"#ffffff\";\n  SelectedDesc = \"#ffffff\";\n  SelectedTitle = \"#ffffff\";\n  SelectedBorder = \"#ffffff\";\n  SelectedDescBorder = \"#ffffff\";\n  TitleFore = \"#ffffff\";\n  Titleback = \"#434C5E\";\n  StatusMsg = \"#ffffff\";\n  PinIndicatorColor = \"#ff0000\";\n};\n", "loc": ["services", "clipse", "theme"], "readOnly": false, "title": "services.clipse.theme", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/clipse/custom_theme.json</code>.</p>"}, {"declarations": [{"name": "<services/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/comodoro.nix"}], "default": "false", "description": "Whether to enable Comodoro server.", "example": "true", "loc": ["services", "comodoro", "enable"], "readOnly": false, "title": "services.comodoro.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Comodoro server.</p>"}, {"declarations": [{"name": "<services/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/comodoro.nix"}], "default": "{ }", "description": "Extra environment variables to be exported in the service.", "example": "{\n  \"PASSWORD_STORE_DIR\" = \"~/.password-store\";\n}\n", "loc": ["services", "comodoro", "environment"], "readOnly": false, "title": "services.comodoro.environment", "type": "attribute set of string", "descriptionHTML": "<p>Extra environment variables to be exported in the service.</p>"}, {"declarations": [{"name": "<services/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/comodoro.nix"}], "default": "pkgs.comodoro", "description": "The comodoro package to use.", "example": "", "loc": ["services", "comodoro", "package"], "readOnly": false, "title": "services.comodoro.package", "type": "package", "descriptionHTML": "<p>The comodoro package to use.</p>"}, {"declarations": [{"name": "<services/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/comodoro.nix"}], "default": "", "description": "Use configuration from the given preset as defined in the configuration file.", "example": "", "loc": ["services", "comodoro", "preset"], "readOnly": false, "title": "services.comodoro.preset", "type": "non-empty string", "descriptionHTML": "<p>Use configuration from the given preset as defined in the configuration file.</p>"}, {"declarations": [{"name": "<services/comodoro.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/comodoro.nix"}], "default": "", "description": "Define protocols the server should use to accept requests.", "example": "", "loc": ["services", "comodoro", "protocols"], "readOnly": false, "title": "services.comodoro.protocols", "type": "non-empty (list of non-empty string)", "descriptionHTML": "<p>Define protocols the server should use to accept requests.</p>"}, {"declarations": [{"name": "<services/conky.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/conky.nix"}], "default": "false", "description": "Whether to enable Conky, a light-weight system monitor.", "example": "true", "loc": ["services", "conky", "enable"], "readOnly": false, "title": "services.conky.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Conky, a light-weight system monitor.</p>"}, {"declarations": [{"name": "<services/conky.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/conky.nix"}], "default": "\"\"", "description": "Configuration used by the Conky daemon. Check\nhttps://github.com/brndnmtthws/conky/wiki/Configurations for\noptions. If not set, the default configuration, as described by\n{command}conky --print-config, will be used.", "example": "", "loc": ["services", "conky", "extraConfig"], "readOnly": false, "title": "services.conky.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Configuration used by the Conky daemon. Check\n<a href=\"https://github.com/brndnmtthws/conky/wiki/Configurations\">https://github.com/brndnmtthws/conky/wiki/Configurations</a> for\noptions. If not set, the default configuration, as described by\n{command}<code>conky --print-config</code>, will be used.</p>"}, {"declarations": [{"name": "<services/conky.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/conky.nix"}], "default": "pkgs.conky", "description": "The conky package to use.", "example": "", "loc": ["services", "conky", "package"], "readOnly": false, "title": "services.conky.package", "type": "package", "descriptionHTML": "<p>The conky package to use.</p>"}, {"declarations": [{"name": "<services/copyq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/copyq.nix"}], "default": "false", "description": "Whether to enable CopyQ, a clipboard manager with advanced features.", "example": "true", "loc": ["services", "copyq", "enable"], "readOnly": false, "title": "services.copyq.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable CopyQ, a clipboard manager with advanced features.</p>"}, {"declarations": [{"name": "<services/copyq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/copyq.nix"}], "default": "true", "description": "Force the CopyQ to use the X backend on wayland", "example": "false", "loc": ["services", "copyq", "forceXWayland"], "readOnly": false, "title": "services.copyq.forceXWayland", "type": "boolean", "descriptionHTML": "<p>Force the CopyQ to use the X backend on wayland</p>"}, {"declarations": [{"name": "<services/copyq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/copyq.nix"}], "default": "pkgs.copyq", "description": "The copyq package to use.", "example": "", "loc": ["services", "copyq", "package"], "readOnly": false, "title": "services.copyq.package", "type": "package", "descriptionHTML": "<p>The copyq package to use.</p>"}, {"declarations": [{"name": "<services/copyq.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/copyq.nix"}], "default": "\"graphical-session.target\"", "description": "The systemd target that will automatically start the CopyQ service.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["services", "copyq", "systemdTarget"], "readOnly": false, "title": "services.copyq.systemdTarget", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start the CopyQ service.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<services/darkman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/darkman.nix"}], "default": "{ }", "description": "Scripts to run when switching to \"dark mode\".\nMultiline strings are interpreted as Bash shell scripts and a shebang is\nnot required.", "example": "{\n  gtk-theme = ''\n    ${pkgs.dconf}/bin/dconf write \\\n        /org/gnome/desktop/interface/color-scheme \"'prefer-dark'\"\n  '';\n  my-python-script = pkgs.writers.writePython3 \"my-python-script\" { } ''\n    print('Do something!')\n  '';\n}\n", "loc": ["services", "darkman", "darkModeScripts"], "readOnly": false, "title": "services.darkman.darkModeScripts", "type": "attribute set of (absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Scripts to run when switching to \"dark mode\".</p>\n<p>Multiline strings are interpreted as Bash shell scripts and a shebang is\nnot required.</p>"}, {"declarations": [{"name": "<services/darkman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/darkman.nix"}], "default": "false", "description": "Whether to enable darkman, a tool that automatically switches dark-mode on and off based on\nthe time of the day.", "example": "true", "loc": ["services", "darkman", "enable"], "readOnly": false, "title": "services.darkman.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable darkman, a tool that automatically switches dark-mode on and off based on\nthe time of the day.</p>"}, {"declarations": [{"name": "<services/darkman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/darkman.nix"}], "default": "{ }", "description": "Scripts to run when switching to \"light mode\".\nMultiline strings are interpreted as Bash shell scripts and a shebang is\nnot required.", "example": "{\n  gtk-theme = ''\n    ${pkgs.dconf}/bin/dconf write \\\n        /org/gnome/desktop/interface/color-scheme \"'prefer-light'\"\n  '';\n  my-python-script = pkgs.writers.writePython3 \"my-python-script\" { } ''\n    print('Do something!')\n  '';\n}\n", "loc": ["services", "darkman", "lightModeScripts"], "readOnly": false, "title": "services.darkman.lightModeScripts", "type": "attribute set of (absolute path or strings concatenated with \"\\n\")", "descriptionHTML": "<p>Scripts to run when switching to \"light mode\".</p>\n<p>Multiline strings are interpreted as Bash shell scripts and a shebang is\nnot required.</p>"}, {"declarations": [{"name": "<services/darkman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/darkman.nix"}], "default": "pkgs.darkman", "description": "The darkman package to use.", "example": "", "loc": ["services", "darkman", "package"], "readOnly": false, "title": "services.darkman.package", "type": "null or package", "descriptionHTML": "<p>The darkman package to use.</p>"}, {"declarations": [{"name": "<services/darkman.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/darkman.nix"}], "default": "{ }", "description": "Settings for the {command}darkman command. See\nhttps://darkman.whynothugo.nl/#CONFIGURATION for details.", "example": "{\n  lat = 52.3;\n  lng = 4.8;\n  usegeoclue = true;\n}\n", "loc": ["services", "darkman", "settings"], "readOnly": false, "title": "services.darkman.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Settings for the {command}<code>darkman</code> command. See\n<a href=\"https://darkman.whynothugo.nl/#CONFIGURATION\">https://darkman.whynothugo.nl/#CONFIGURATION</a> for details.</p>"}, {"declarations": [{"name": "<services/davmail.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/davmail.nix"}], "default": "false", "description": "Whether to enable DavMail, an MS Exchange gateway..", "example": "true", "loc": ["services", "davmail", "enable"], "readOnly": false, "title": "services.davmail.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable DavMail, an MS Exchange gateway..</p>"}, {"declarations": [{"name": "<services/davmail.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/davmail.nix"}], "default": "false", "description": "Whether DavMail pretends to be Outlook.", "example": "true", "loc": ["services", "davmail", "imitateOutlook"], "readOnly": false, "title": "services.davmail.imitateOutlook", "type": "boolean", "descriptionHTML": "<p>Whether DavMail pretends to be Outlook.</p>"}, {"declarations": [{"name": "<services/davmail.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/davmail.nix"}], "default": "pkgs.davmail", "description": "The davmail package to use.", "example": "", "loc": ["services", "davmail", "package"], "readOnly": false, "title": "services.davmail.package", "type": "package", "descriptionHTML": "<p>The davmail package to use.</p>"}, {"declarations": [{"name": "<services/davmail.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/davmail.nix"}], "default": "{ }", "description": "Davmail configuration. Refer to\nhttp://davmail.sourceforge.net/serversetup.html\nand http://davmail.sourceforge.net/advanced.html\nfor details on supported values.", "example": "{\n  \"davmail.allowRemote\" = true;\n  \"davmail.bindAddress\" = \"10.0.1.2\";\n  \"davmail.caldavAutoSchedule\" = false;\n  \"davmail.folderSizeLimit\" = 10;\n  \"davmail.imapPort\" = 55555;\n  \"davmail.smtpSaveInSent\" = true;\n  \"davmail.url\" = \"https://outlook.office365.com/EWS/Exchange.asmx\";\n  \"log4j.logger.rootLogger\" = \"DEBUG\";\n}", "loc": ["services", "davmail", "settings"], "readOnly": false, "title": "services.davmail.settings", "type": "attribute set of (string, package, bool, int or float)", "descriptionHTML": "<p>Davmail configuration. Refer to\n<a href=\"http://davmail.sourceforge.net/serversetup.html\">http://davmail.sourceforge.net/serversetup.html</a>\nand <a href=\"http://davmail.sourceforge.net/advanced.html\">http://davmail.sourceforge.net/advanced.html</a>\nfor details on supported values.</p>"}, {"declarations": [{"name": "<services/devilspie2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/devilspie2.nix"}], "default": "\"\"", "description": "Content of file placed in the devilspie2 config directory.", "example": "''\n  if (get_window_class() == \"Gnome-terminal\") then\n      make_always_on_top();\n  end\n''", "loc": ["services", "devilspie2", "config"], "readOnly": false, "title": "services.devilspie2.config", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Content of file placed in the devilspie2 config directory.</p>"}, {"declarations": [{"name": "<services/devilspie2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/devilspie2.nix"}], "default": "false", "description": "Whether to enable Devilspie2, a window matching utility, allowing the user to\nperform scripted actions on windows as they are created.", "example": "true", "loc": ["services", "devilspie2", "enable"], "readOnly": false, "title": "services.devilspie2.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Devilspie2, a window matching utility, allowing the user to\nperform scripted actions on windows as they are created.</p>"}, {"declarations": [{"name": "<services/dropbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dropbox.nix"}], "default": "false", "description": "Whether to enable Dropbox daemon.", "example": "true", "loc": ["services", "dropbox", "enable"], "readOnly": false, "title": "services.dropbox.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Dropbox daemon.</p>"}, {"declarations": [{"name": "<services/dropbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dropbox.nix"}], "default": "\"${config.home.homeDirectory}/Dropbox\"", "description": "Where to put the Dropbox directory.", "example": "", "loc": ["services", "dropbox", "path"], "readOnly": false, "title": "services.dropbox.path", "type": "absolute path", "descriptionHTML": "<p>Where to put the Dropbox directory.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "null", "description": "Path to the configuration file read by dunst.\nNote that the configuration generated by Home Manager will be\nwritten to {file}$XDG_CONFIG_HOME/dunst/dunstrc\nregardless. This allows using a mutable configuration file generated\nfrom the immutable one, useful in scenarios where live reloading is\ndesired.", "example": "", "loc": ["services", "dunst", "configFile"], "readOnly": false, "title": "services.dunst.configFile", "type": "null or string or absolute path", "descriptionHTML": "<p>Path to the configuration file read by dunst.</p>\n<p>Note that the configuration generated by Home Manager will be\nwritten to {file}<code>$XDG_CONFIG_HOME/dunst/dunstrc</code>\nregardless. This allows using a mutable configuration file generated\nfrom the immutable one, useful in scenarios where live reloading is\ndesired.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "false", "description": "Whether to enable the dunst notification daemon.", "example": "true", "loc": ["services", "dunst", "enable"], "readOnly": false, "title": "services.dunst.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the dunst notification daemon.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "{\n  name = \"hicolor\";\n  package = <derivation hicolor-icon-theme-0.18>;\n  size = \"32x32\";\n}", "description": "Set the icon theme.", "example": "", "loc": ["services", "dunst", "iconTheme"], "readOnly": false, "title": "services.dunst.iconTheme", "type": "submodule", "descriptionHTML": "<p>Set the icon theme.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "", "description": "The name of the theme within the package.", "example": "\"Adwaita\"", "loc": ["services", "dunst", "iconTheme", "name"], "readOnly": false, "title": "services.dunst.iconTheme.name", "type": "string", "descriptionHTML": "<p>The name of the theme within the package.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "", "description": "Package providing the theme.", "example": "pkgs.adwaita-icon-theme", "loc": ["services", "dunst", "iconTheme", "package"], "readOnly": false, "title": "services.dunst.iconTheme.package", "type": "package", "descriptionHTML": "<p>Package providing the theme.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "\"32x32\"", "description": "The desired icon size.", "example": "\"16x16\"", "loc": ["services", "dunst", "iconTheme", "size"], "readOnly": false, "title": "services.dunst.iconTheme.size", "type": "string", "descriptionHTML": "<p>The desired icon size.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "pkgs.dunst", "description": "The dunst package to use.", "example": "", "loc": ["services", "dunst", "package"], "readOnly": false, "title": "services.dunst.package", "type": "package", "descriptionHTML": "<p>The dunst package to use.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/dunst/dunstrc.", "example": "{\n  global = {\n    width = 300;\n    height = 300;\n    offset = \"30x50\";\n    origin = \"top-right\";\n    transparency = 10;\n    frame_color = \"#eceff1\";\n    font = \"Droid Sans 9\";\n  };\n\n  urgency_normal = {\n    background = \"#37474f\";\n    foreground = \"#eceff1\";\n    timeout = 10;\n  };\n};\n", "loc": ["services", "dunst", "settings"], "readOnly": false, "title": "services.dunst.settings", "type": "attribute set of attribute set of (string or boolean or signed integer or list of string)", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/dunst/dunstrc</code>.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "", "description": "Paths where dunst will look for icons.", "example": "", "loc": ["services", "dunst", "settings", "global", "icon_path"], "readOnly": false, "title": "services.dunst.settings.global.icon_path", "type": "strings concatenated with \":\"", "descriptionHTML": "<p>Paths where dunst will look for icons.</p>"}, {"declarations": [{"name": "<services/dunst.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dunst.nix"}], "default": "\"\"", "description": "Set the service's {env}WAYLAND_DISPLAY environment variable.", "example": "", "loc": ["services", "dunst", "waylandDisplay"], "readOnly": false, "title": "services.dunst.waylandDisplay", "type": "string", "descriptionHTML": "<p>Set the service's {env}<code>WAYLAND_DISPLAY</code> environment variable.</p>"}, {"declarations": [{"name": "<services/dwm-status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dwm-status.nix"}], "default": "false", "description": "Whether to enable dwm-status user service.", "example": "true", "loc": ["services", "dwm-status", "enable"], "readOnly": false, "title": "services.dwm-status.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable dwm-status user service.</p>"}, {"declarations": [{"name": "<services/dwm-status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dwm-status.nix"}], "default": "{ }", "description": "Extra config of dwm-status.", "example": "{\n  separator = \"#\";\n\n  battery = {\n    notifier_levels = [ 2 5 10 15 20 ];\n  };\n\n  time = {\n    format = \"%H:%M\";\n  };\n}\n", "loc": ["services", "dwm-status", "extraConfig"], "readOnly": false, "title": "services.dwm-status.extraConfig", "type": "JSON value", "descriptionHTML": "<p>Extra config of dwm-status.</p>"}, {"declarations": [{"name": "<services/dwm-status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dwm-status.nix"}], "default": "", "description": "List of enabled features in order.", "example": "", "loc": ["services", "dwm-status", "order"], "readOnly": false, "title": "services.dwm-status.order", "type": "list of (one of \"audio\", \"backlight\", \"battery\", \"cpu_load\", \"network\", \"time\")", "descriptionHTML": "<p>List of enabled features in order.</p>"}, {"declarations": [{"name": "<services/dwm-status.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/dwm-status.nix"}], "default": "pkgs.dwm-status", "description": "The dwm-status package to use.", "example": "pkgs.dwm-status.override { enableAlsaUtils = false; }", "loc": ["services", "dwm-status", "package"], "readOnly": false, "title": "services.dwm-status.package", "type": "package", "descriptionHTML": "<p>The dwm-status package to use.</p>"}, {"declarations": [{"name": "<services/easyeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/easyeffects.nix"}], "default": "false", "description": "Whether to enable Easyeffects daemon.\nNote, it is necessary to add\nnix\nprograms.dconf.enable = true;\nto your system configuration for the daemon to work correctly.", "example": "true", "loc": ["services", "easyeffects", "enable"], "readOnly": false, "title": "services.easyeffects.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Easyeffects daemon.\nNote, it is necessary to add\n<code>nix\nprograms.dconf.enable = true;</code>\nto your system configuration for the daemon to work correctly.</p>"}, {"declarations": [{"name": "<services/easyeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/easyeffects.nix"}], "default": "{ }", "description": "List of presets to import to easyeffects.\nPresets are written to input and output folder in $XDG_CONFIG_HOME/easyeffects.\nTop level block (input/output) determines the folder the file is written to.\nSee community presets at:\nhttps://github.com/wwmm/easyeffects/wiki/Community-Presets", "example": "{\n  my-preset = {\n    input = {\n      blocklist = [\n\n      ];\n      \"plugins_order\" = [\n        \"rnnoise#0\"\n      ];\n      \"rnnoise#0\" = {\n        bypass = false;\n        \"enable-vad\" = false;\n        \"input-gain\" = 0.0;\n        \"model-path\" = \"\";\n        \"output-gain\" = 0.0;\n        release = 20.0;\n        \"vad-thres\" = 50.0;\n        wet = 0.0;\n      };\n    };\n  };\n};\n", "loc": ["services", "easyeffects", "extraPresets"], "readOnly": false, "title": "services.easyeffects.extraPresets", "type": "null or (attribute set of EasyEffects input or output JSON preset)", "descriptionHTML": "<p>List of presets to import to easyeffects.\nPresets are written to input and output folder in <code>$XDG_CONFIG_HOME/easyeffects</code>.\nTop level block (input/output) determines the folder the file is written to.</p>\n<p>See community presets at:\nhttps://github.com/wwmm/easyeffects/wiki/Community-Presets</p>"}, {"declarations": [{"name": "<services/easyeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/easyeffects.nix"}], "default": "pkgs.easyeffects", "description": "The easyeffects package to use.", "example": "", "loc": ["services", "easyeffects", "package"], "readOnly": false, "title": "services.easyeffects.package", "type": "package", "descriptionHTML": "<p>The easyeffects package to use.</p>"}, {"declarations": [{"name": "<services/easyeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/easyeffects.nix"}], "default": "\"\"", "description": "Which preset to use when starting easyeffects.\nWill likely need to launch easyeffects to initially create preset.", "example": "", "loc": ["services", "easyeffects", "preset"], "readOnly": false, "title": "services.easyeffects.preset", "type": "string", "descriptionHTML": "<p>Which preset to use when starting easyeffects.\nWill likely need to launch easyeffects to initially create preset.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "[\n  \"-c\"\n]", "description": "Command-line arguments to pass to {command}emacsclient.", "example": "", "loc": ["services", "emacs", "client", "arguments"], "readOnly": false, "title": "services.emacs.client.arguments", "type": "list of string", "descriptionHTML": "<p>Command-line arguments to pass to {command}<code>emacsclient</code>.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "false", "description": "Whether to enable generation of Emacs client desktop file.", "example": "true", "loc": ["services", "emacs", "client", "enable"], "readOnly": false, "title": "services.emacs.client.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable generation of Emacs client desktop file.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "false", "description": "Whether to configure {command}emacsclient as the default\neditor using the {env}EDITOR environment variable.", "example": "true", "loc": ["services", "emacs", "defaultEditor"], "readOnly": false, "title": "services.emacs.defaultEditor", "type": "boolean", "descriptionHTML": "<p>Whether to configure {command}<code>emacsclient</code> as the default\neditor using the {env}<code>EDITOR</code> environment variable.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "false", "description": "Whether to enable the Emacs daemon.", "example": "true", "loc": ["services", "emacs", "enable"], "readOnly": false, "title": "services.emacs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Emacs daemon.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to {command}emacs.", "example": "[\n  \"-f\"\n  \"exwm-enable\"\n]", "loc": ["services", "emacs", "extraOptions"], "readOnly": false, "title": "services.emacs.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to {command}<code>emacs</code>.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "if config.programs.emacs.enable then config.programs.emacs.finalPackage\nelse pkgs.emacs\n", "description": "The Emacs package to use.", "example": "", "loc": ["services", "emacs", "package"], "readOnly": false, "title": "services.emacs.package", "type": "package", "descriptionHTML": "<p>The Emacs package to use.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "false", "description": "Whether to enable systemd socket activation for the Emacs service.", "example": "true", "loc": ["services", "emacs", "socketActivation", "enable"], "readOnly": false, "title": "services.emacs.socketActivation.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable systemd socket activation for the Emacs service.</p>"}, {"declarations": [{"name": "<services/emacs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/emacs.nix"}], "default": "!config.services.emacs.socketActivation.enable", "description": "Whether to launch Emacs service with the systemd user session. If it is\ntrue, Emacs service is started by\ndefault.target. If it is\n\"graphical\", Emacs service is started by\ngraphical-session.target.", "example": "\"graphical\"", "loc": ["services", "emacs", "startWithUserSession"], "readOnly": false, "title": "services.emacs.startWithUserSession", "type": "boolean or value \"graphical\" (singular enum)", "descriptionHTML": "<p>Whether to launch Emacs service with the systemd user session. If it is\n<code>true</code>, Emacs service is started by\n<code>default.target</code>. If it is\n<code>\"graphical\"</code>, Emacs service is started by\n<code>graphical-session.target</code>.</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "{\n  default = { };\n}", "description": "The Espanso configuration to use. See\nhttps://espanso.org/docs/configuration/basics/\nfor a description of available options.", "example": "{\n  default = {\n    show_notifications = false;\n  };\n  vscode = {\n    filter_title = \"Visual Studio Code$\";\n    backend = \"Clipboard\";\n  };\n};\n", "loc": ["services", "espanso", "configs"], "readOnly": false, "title": "services.espanso.configs", "type": "YAML 1.1 value", "descriptionHTML": "<p>The Espanso configuration to use. See\n<a href=\"https://espanso.org/docs/configuration/basics/\">https://espanso.org/docs/configuration/basics/</a>\nfor a description of available options.</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "false", "description": "Whether to enable Espanso: cross platform text expander in Rust.", "example": "true", "loc": ["services", "espanso", "enable"], "readOnly": false, "title": "services.espanso.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Espanso: cross platform text expander in Rust.</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "{\n  default = {\n    matches = [ ];\n  };\n}", "description": "The Espanso matches to use. See\nhttps://espanso.org/docs/matches/basics/\nfor a description of available options.", "example": "{\n  base = {\n    matches = [\n      {\n        trigger = \":now\";\n        replace = \"It's {{currentdate}} {{currenttime}}\";\n      }\n      {\n        trigger = \":hello\";\n        replace = \"line1\\nline2\";\n      }\n      {\n        regex = \":hi(?P<person>.*)\\\\.\";\n        replace = \"Hi {{person}}!\";\n      }\n    ];\n  };\n  global_vars = {\n    global_vars = [\n      {\n        name = \"currentdate\";\n        type = \"date\";\n        params = {format = \"%d/%m/%Y\";};\n      }\n      {\n        name = \"currenttime\";\n        type = \"date\";\n        params = {format = \"%R\";};\n      }\n    ];\n  };\n};\n", "loc": ["services", "espanso", "matches"], "readOnly": false, "title": "services.espanso.matches", "type": "YAML 1.1 value", "descriptionHTML": "<p>The Espanso matches to use. See\n<a href=\"https://espanso.org/docs/matches/basics/\">https://espanso.org/docs/matches/basics/</a>\nfor a description of available options.</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "pkgs.espanso", "description": "The espanso package to use.", "example": "", "loc": ["services", "espanso", "package"], "readOnly": false, "title": "services.espanso.package", "type": "package", "descriptionHTML": "<p>The espanso package to use.</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "pkgs.espanso-wayland", "description": "The espanso-wayland package to use. Which espanso package to use when running under wayland.", "example": "", "loc": ["services", "espanso", "package-wayland"], "readOnly": false, "title": "services.espanso.package-wayland", "type": "null or package", "descriptionHTML": "<p>The espanso-wayland package to use. Which <code>espanso</code> package to use when running under wayland.</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "\"`true` on linux\"", "description": "Whether to enable wayland support on linux", "example": "", "loc": ["services", "espanso", "waylandSupport"], "readOnly": false, "title": "services.espanso.waylandSupport", "type": "boolean", "descriptionHTML": "<p>Whether to enable wayland support on linux</p>"}, {"declarations": [{"name": "<services/espanso.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/espanso.nix"}], "default": "\"`true` on linux\"", "description": "Whether to enable x11 support on linux", "example": "", "loc": ["services", "espanso", "x11Support"], "readOnly": false, "title": "services.espanso.x11Support", "type": "boolean", "descriptionHTML": "<p>Whether to enable x11 support on linux</p>"}, {"declarations": [{"name": "<services/etesync-dav.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/etesync-dav.nix"}], "default": "false", "description": "Whether to enable etesync-dav.", "example": "true", "loc": ["services", "etesync-dav", "enable"], "readOnly": false, "title": "services.etesync-dav.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable etesync-dav.</p>"}, {"declarations": [{"name": "<services/etesync-dav.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/etesync-dav.nix"}], "default": "pkgs.etesync-dav", "description": "The etesync-dav package to use.", "example": "", "loc": ["services", "etesync-dav", "package"], "readOnly": false, "title": "services.etesync-dav.package", "type": "package", "descriptionHTML": "<p>The etesync-dav package to use.</p>"}, {"declarations": [{"name": "<services/etesync-dav.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/etesync-dav.nix"}], "default": "\"https://api.etebase.com/partner/etesync/\"", "description": "The URL to the etesync server.", "example": "", "loc": ["services", "etesync-dav", "serverUrl"], "readOnly": false, "title": "services.etesync-dav.serverUrl", "type": "string", "descriptionHTML": "<p>The URL to the etesync server.</p>"}, {"declarations": [{"name": "<services/etesync-dav.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/etesync-dav.nix"}], "default": "{ }", "description": "Settings for etesync-dav, passed as environment variables.", "example": "{\n  ETESYNC_LISTEN_ADDRESS = \"localhost\";\n  ETESYNC_LISTEN_PORT = 37358;\n}\n", "loc": ["services", "etesync-dav", "settings"], "readOnly": false, "title": "services.etesync-dav.settings", "type": "attribute set of (string or signed integer)", "descriptionHTML": "<p>Settings for etesync-dav, passed as environment variables.</p>"}, {"declarations": [{"name": "<services/flameshot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/flameshot.nix"}], "default": "false", "description": "Whether to enable Flameshot.", "example": "true", "loc": ["services", "flameshot", "enable"], "readOnly": false, "title": "services.flameshot.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Flameshot.</p>"}, {"declarations": [{"name": "<services/flameshot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/flameshot.nix"}], "default": "pkgs.flameshot", "description": "The flameshot package to use.", "example": "", "loc": ["services", "flameshot", "package"], "readOnly": false, "title": "services.flameshot.package", "type": "package", "descriptionHTML": "<p>The flameshot package to use.</p>"}, {"declarations": [{"name": "<services/flameshot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/flameshot.nix"}], "default": "{ }", "description": "Configuration to use for Flameshot. See\nhttps://github.com/flameshot-org/flameshot/blob/master/flameshot.example.ini\nfor available options.", "example": "{\n  General = {\n    disabledTrayIcon = true;\n    showStartupLaunchMessage = false;\n  };\n}", "loc": ["services", "flameshot", "settings"], "readOnly": false, "title": "services.flameshot.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration to use for Flameshot. See\n<a href=\"https://github.com/flameshot-org/flameshot/blob/master/flameshot.example.ini\">https://github.com/flameshot-org/flameshot/blob/master/flameshot.example.ini</a>\nfor available options.</p>"}, {"declarations": [{"name": "<services/fluidsynth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fluidsynth.nix"}], "default": "false", "description": "Whether to enable fluidsynth midi synthesizer.", "example": "true", "loc": ["services", "fluidsynth", "enable"], "readOnly": false, "title": "services.fluidsynth.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fluidsynth midi synthesizer.</p>"}, {"declarations": [{"name": "<services/fluidsynth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fluidsynth.nix"}], "default": "[ ]", "description": "Extra arguments, added verbatim to the fluidsynth command. See\n{manpage}fluidsynth.conf(1).", "example": "[\n  \"--sample-rate 96000\"\n]", "loc": ["services", "fluidsynth", "extraOptions"], "readOnly": false, "title": "services.fluidsynth.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra arguments, added verbatim to the fluidsynth command. See\n{manpage}<code>fluidsynth.conf(1)</code>.</p>"}, {"declarations": [{"name": "<services/fluidsynth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fluidsynth.nix"}], "default": "\"${pkgs.soundfont-fluid}/share/soundfonts/FluidR3_GM2-2.sf2\";\n", "description": "The soundfont file to use, in SoundFont 2 format.", "example": "", "loc": ["services", "fluidsynth", "soundFont"], "readOnly": false, "title": "services.fluidsynth.soundFont", "type": "absolute path", "descriptionHTML": "<p>The soundfont file to use, in SoundFont 2 format.</p>"}, {"declarations": [{"name": "<services/fluidsynth.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fluidsynth.nix"}], "default": "\"pulseaudio\"", "description": "The systemd sound service to depend on.", "example": "\"pipewire-pulse\"", "loc": ["services", "fluidsynth", "soundService"], "readOnly": false, "title": "services.fluidsynth.soundService", "type": "one of \"jack\", \"pipewire-pulse\", \"pulseaudio\"", "descriptionHTML": "<p>The systemd sound service to depend on.</p>"}, {"declarations": [{"name": "<services/fnott.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fnott.nix"}], "default": "\"$XDG_CONFIG_HOME/fnott/fnott.ini\"", "description": "Path to the configuration file read by fnott.\nNote that environment variables in the path won't be properly expanded.\nThe configuration specified under\n{option}services.fnott.settings will be generated and\nwritten to {file}$XDG_CONFIG_HOME/fnott/fnott.ini\nregardless of this option. This allows using a mutable configuration file\ngenerated from the immutable one, useful in scenarios where live reloading is desired.", "example": "", "loc": ["services", "fnott", "configFile"], "readOnly": false, "title": "services.fnott.configFile", "type": "string or absolute path", "descriptionHTML": "<p>Path to the configuration file read by fnott.</p>\n<p>Note that environment variables in the path won't be properly expanded.</p>\n<p>The configuration specified under\n{option}<code>services.fnott.settings</code> will be generated and\nwritten to {file}<code>$XDG_CONFIG_HOME/fnott/fnott.ini</code>\nregardless of this option. This allows using a mutable configuration file\ngenerated from the immutable one, useful in scenarios where live reloading is desired.</p>"}, {"declarations": [{"name": "<services/fnott.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fnott.nix"}], "default": "false", "description": "Whether to enable fnott, a lightweight Wayland notification daemon for wlroots-based compositors\n.", "example": "true", "loc": ["services", "fnott", "enable"], "readOnly": false, "title": "services.fnott.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable fnott, a lightweight Wayland notification daemon for wlroots-based compositors\n.</p>"}, {"declarations": [{"name": "<services/fnott.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fnott.nix"}], "default": "[ ]", "description": "Extra arguments to use for executing fnott.", "example": "[\n  \"-s\"\n]", "loc": ["services", "fnott", "extraFlags"], "readOnly": false, "title": "services.fnott.extraFlags", "type": "list of string", "descriptionHTML": "<p>Extra arguments to use for executing fnott.</p>"}, {"declarations": [{"name": "<services/fnott.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fnott.nix"}], "default": "pkgs.fnott", "description": "The fnott package to use.", "example": "", "loc": ["services", "fnott", "package"], "readOnly": false, "title": "services.fnott.package", "type": "package", "descriptionHTML": "<p>The fnott package to use.</p>"}, {"declarations": [{"name": "<services/fnott.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fnott.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/fnott/fnott.ini.\nSee\n{manpage}fnott.ini(5) for a list of available options and https://codeberg.org/dnkl/fnott/src/branch/master/fnott.ini\nfor an example configuration.", "example": "{\n  main = {\n    notification-margin = 5;\n  };\n\n  low = {\n    timeout = 5;\n    title-font = \"Dina:weight=bold:slant=italic\";\n    title-color = \"ffffff\";\n  };\n}\n", "loc": ["services", "fnott", "settings"], "readOnly": false, "title": "services.fnott.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/fnott/fnott.ini</code>.</p>\n<p>See\n{manpage}<code>fnott.ini(5)</code> for a list of available options and <a href=\"https://codeberg.org/dnkl/fnott/src/branch/master/fnott.ini\">https://codeberg.org/dnkl/fnott/src/branch/master/fnott.ini</a>\nfor an example configuration.</p>"}, {"declarations": [{"name": "<services/fusuma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fusuma.nix"}], "default": "false", "description": "Whether to enable the fusuma systemd service to automatically enable touchpad gesture.", "example": "true", "loc": ["services", "fusuma", "enable"], "readOnly": false, "title": "services.fusuma.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the fusuma systemd service to automatically enable touchpad gesture.</p>"}, {"declarations": [{"name": "<services/fusuma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fusuma.nix"}], "default": "pkgs.xdotool pkgs.coreutils pkgs.xorg.xprop", "description": "Extra packages needs to bring to the scope of fusuma service.", "example": "with pkgs; [ xdotool coreutils xorg.xprop ];\n", "loc": ["services", "fusuma", "extraPackages"], "readOnly": false, "title": "services.fusuma.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages needs to bring to the scope of fusuma service.</p>"}, {"declarations": [{"name": "<services/fusuma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fusuma.nix"}], "default": "pkgs.fusuma", "description": "The fusuma package to use.", "example": "", "loc": ["services", "fusuma", "package"], "readOnly": false, "title": "services.fusuma.package", "type": "package", "descriptionHTML": "<p>The fusuma package to use.</p>"}, {"declarations": [{"name": "<services/fusuma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/fusuma.nix"}], "default": "", "description": "YAML config that will override the default fusuma configuration.", "example": "{\n  threshold = {\n    swipe = 0.1;\n  };\n  interval = {\n    swipe = 0.7;\n  };\n  swipe = {\n    \"3\" = {\n      left = {\n        # GNOME: Switch to left workspace\n        command = \"xdotool key ctrl+alt+Right\";\n      };\n    };\n  };\n};\n", "loc": ["services", "fusuma", "settings"], "readOnly": false, "title": "services.fusuma.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>YAML config that will override the default fusuma configuration.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "null", "description": "Set the time interval of dawn manually.\nThe times must be specified as HH:MM in 24-hour format.", "example": "\"6:00-7:45\"", "loc": ["services", "gammastep", "dawnTime"], "readOnly": false, "title": "services.gammastep.dawnTime", "type": "null or string", "descriptionHTML": "<p>Set the time interval of dawn manually.\nThe times must be specified as HH:MM in 24-hour format.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "null", "description": "Set the time interval of dusk manually.\nThe times must be specified as HH:MM in 24-hour format.", "example": "\"18:35-20:15\"", "loc": ["services", "gammastep", "duskTime"], "readOnly": false, "title": "services.gammastep.duskTime", "type": "null or string", "descriptionHTML": "<p>Set the time interval of dusk manually.\nThe times must be specified as HH:MM in 24-hour format.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "false", "description": "Whether to enable Gammastep.", "example": "true", "loc": ["services", "gammastep", "enable"], "readOnly": false, "title": "services.gammastep.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Gammastep.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "false", "description": "Whether to enable verbose service logging.", "example": "true", "loc": ["services", "gammastep", "enableVerboseLogging"], "readOnly": false, "title": "services.gammastep.enableVerboseLogging", "type": "boolean", "descriptionHTML": "<p>Whether to enable verbose service logging.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "null", "description": "Your current latitude, between -90.0 and\n90.0. Must be provided along with\nlongitude.", "example": "", "loc": ["services", "gammastep", "latitude"], "readOnly": false, "title": "services.gammastep.latitude", "type": "null or string or floating point number", "descriptionHTML": "<p>Your current latitude, between <code>-90.0</code> and\n<code>90.0</code>. Must be provided along with\nlongitude.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "null", "description": "Your current longitude, between -180.0 and\n180.0. Must be provided along with\nlatitude.", "example": "", "loc": ["services", "gammastep", "longitude"], "readOnly": false, "title": "services.gammastep.longitude", "type": "null or string or floating point number", "descriptionHTML": "<p>Your current longitude, between <code>-180.0</code> and\n<code>180.0</code>. Must be provided along with\nlatitude.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "pkgs.gammastep", "description": "Gammastep derivation to use.", "example": "", "loc": ["services", "gammastep", "package"], "readOnly": false, "title": "services.gammastep.package", "type": "package", "descriptionHTML": "<p>Gammastep derivation to use.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "\"manual\"", "description": "The location provider to use for determining your location. If set to\nmanual you must also provide latitude/longitude.\nIf set to geoclue2, you must also enable the global\ngeoclue2 service.", "example": "", "loc": ["services", "gammastep", "provider"], "readOnly": false, "title": "services.gammastep.provider", "type": "one of \"manual\", \"geoclue2\"", "descriptionHTML": "<p>The location provider to use for determining your location. If set to\n<code>manual</code> you must also provide latitude/longitude.\nIf set to <code>geoclue2</code>, you must also enable the global\ngeoclue2 service.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "{ }", "description": "The configuration to pass to Gammastep.\nAvailable options for Gammastep described in\n{manpage}gammastep(1).", "example": "{\n  general = {\n    adjustment-method = \"randr\";\n  };\n  randr = {\n    screen = 0;\n  };\n};\n", "loc": ["services", "gammastep", "settings"], "readOnly": false, "title": "services.gammastep.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>The configuration to pass to Gammastep.\nAvailable options for Gammastep described in\n{manpage}<code>gammastep(1)</code>.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "5500", "description": "Colour temperature to use during the day, between\n1000 and 25000 K.", "example": "", "loc": ["services", "gammastep", "temperature", "day"], "readOnly": false, "title": "services.gammastep.temperature.day", "type": "signed integer", "descriptionHTML": "<p>Colour temperature to use during the day, between\n<code>1000</code> and <code>25000</code> K.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "3700", "description": "Colour temperature to use at night, between\n1000 and 25000 K.", "example": "", "loc": ["services", "gammastep", "temperature", "night"], "readOnly": false, "title": "services.gammastep.temperature.night", "type": "signed integer", "descriptionHTML": "<p>Colour temperature to use at night, between\n<code>1000</code> and <code>25000</code> K.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/gammastep.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/gammastep.nix"}], "default": "false", "description": "Start the gammastep-indicator tray applet.", "example": "true", "loc": ["services", "gammastep", "tray"], "readOnly": false, "title": "services.gammastep.tray", "type": "boolean", "descriptionHTML": "<p>Start the gammastep-indicator tray applet.</p>"}, {"declarations": [{"name": "<services/getmail.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/getmail.nix"}], "default": "false", "description": "Whether to enable the getmail systemd service to automatically retrieve mail.", "example": "true", "loc": ["services", "getmail", "enable"], "readOnly": false, "title": "services.getmail.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the getmail systemd service to automatically retrieve mail.</p>"}, {"declarations": [{"name": "<services/getmail.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/getmail.nix"}], "default": "\"*:0/5\"", "description": "The refresh frequency. Check man systemd.time for\nmore information on the syntax. If you use a gpg-agent in\ncombination with the passwordCommand, keep the poll\nfrequency below the cache-ttl value (as set by the\ndefault) to avoid pinentry asking\npermanently for a password.", "example": "\"hourly\"", "loc": ["services", "getmail", "frequency"], "readOnly": false, "title": "services.getmail.frequency", "type": "string", "descriptionHTML": "<p>The refresh frequency. Check <code>man systemd.time</code> for\nmore information on the syntax. If you use a gpg-agent in\ncombination with the passwordCommand, keep the poll\nfrequency below the cache-ttl value (as set by the\n<code>default</code>) to avoid pinentry asking\npermanently for a password.</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "false", "description": "Whether to enable git-sync services.", "example": "true", "loc": ["services", "git-sync", "enable"], "readOnly": false, "title": "services.git-sync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable git-sync services.</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "pkgs.git-sync", "description": "The git-sync package to use.", "example": "", "loc": ["services", "git-sync", "package"], "readOnly": false, "title": "services.git-sync.package", "type": "package", "descriptionHTML": "<p>The git-sync package to use.</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "", "description": "The repositories that should be synchronized.", "example": "{\n  xyz = {\n    path = \"${config.home.homeDirectory}/foo/home-manager\";\n    uri = \"git@github.com:nix-community/home-manager.git\";\n    interval = 1000;\n  };\n}\n", "loc": ["services", "git-sync", "repositories"], "readOnly": false, "title": "services.git-sync.repositories", "type": "attribute set of (submodule)", "descriptionHTML": "<p>The repositories that should be synchronized.</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "[ ]", "description": "Extra packages available to git-sync.", "example": "with pkgs; [ git-crypt ]", "loc": ["services", "git-sync", "repositories", "<name>", "extraPackages"], "readOnly": false, "title": "services.git-sync.repositories.<name>.extraPackages", "type": "list of package", "descriptionHTML": "<p>Extra packages available to git-sync.</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "500", "description": "The interval, specified in seconds, at which the synchronization will\nbe triggered even without filesystem changes.", "example": "", "loc": ["services", "git-sync", "repositories", "<name>", "interval"], "readOnly": false, "title": "services.git-sync.repositories.<name>.interval", "type": "signed integer", "descriptionHTML": "<p>The interval, specified in seconds, at which the synchronization will\nbe triggered even without filesystem changes.</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "", "description": "The path at which to sync the repository", "example": "", "loc": ["services", "git-sync", "repositories", "<name>", "path"], "readOnly": false, "title": "services.git-sync.repositories.<name>.path", "type": "absolute path", "descriptionHTML": "<p>The path at which to sync the repository</p>"}, {"declarations": [{"name": "<services/git-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/git-sync.nix"}], "default": "", "description": "The URI of the remote to be synchronized. This is only used in the\nevent that the directory does not already exist. See\nhttps://git-scm.com/docs/git-clone#_git_urls\nfor the supported URIs.\nThis option is not supported on Darwin.", "example": "\"git+ssh://user@example.com:/~[user]/path/to/repo.git\"", "loc": ["services", "git-sync", "repositories", "<name>", "uri"], "readOnly": false, "title": "services.git-sync.repositories.<name>.uri", "type": "string", "descriptionHTML": "<p>The URI of the remote to be synchronized. This is only used in the\nevent that the directory does not already exist. See\n<a href=\"https://git-scm.com/docs/git-clone#_git_urls\">https://git-scm.com/docs/git-clone#_git_urls</a>\nfor the supported URIs.</p>\n<p>This option is not supported on Darwin.</p>"}, {"declarations": [{"name": "<services/glance.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/glance.nix"}], "default": "false", "description": "Whether to enable glance.", "example": "true", "loc": ["services", "glance", "enable"], "readOnly": false, "title": "services.glance.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable glance.</p>"}, {"declarations": [{"name": "<services/glance.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/glance.nix"}], "default": "pkgs.glance", "description": "The glance package to use.", "example": "", "loc": ["services", "glance", "package"], "readOnly": false, "title": "services.glance.package", "type": "package", "descriptionHTML": "<p>The glance package to use.</p>"}, {"declarations": [{"name": "<services/glance.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/glance.nix"}], "default": "{\n  pages = [\n    {\n      columns = [\n        {\n          size = \"full\";\n          widgets = [\n            {\n              type = \"calendar\";\n            }\n          ];\n        }\n      ];\n      name = \"Calendar\";\n    }\n  ];\n}", "description": "Configuration written to a yaml file that is read by glance. See\nhttps://github.com/glanceapp/glance/blob/main/docs/configuration.md\nfor more.", "example": "{\n  pages = [\n    {\n      columns = [\n        {\n          size = \"full\";\n          widgets = [\n            {\n              type = \"calendar\";\n            }\n            {\n              location = \"London, United Kingdom\";\n              type = \"weather\";\n            }\n          ];\n        }\n      ];\n      name = \"Home\";\n    }\n  ];\n  server = {\n    port = 5678;\n  };\n}", "loc": ["services", "glance", "settings"], "readOnly": false, "title": "services.glance.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to a yaml file that is read by glance. See\n<a href=\"https://github.com/glanceapp/glance/blob/main/docs/configuration.md\">https://github.com/glanceapp/glance/blob/main/docs/configuration.md</a>\nfor more.</p>"}, {"declarations": [{"name": "<services/gnome-keyring.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gnome-keyring.nix"}], "default": "[ ]", "description": "The GNOME keyring components to start. If empty then the\ndefault set of components will be started.", "example": "", "loc": ["services", "gnome-keyring", "components"], "readOnly": false, "title": "services.gnome-keyring.components", "type": "list of (one of \"pkcs11\", \"secrets\", \"ssh\")", "descriptionHTML": "<p>The GNOME keyring components to start. If empty then the\ndefault set of components will be started.</p>"}, {"declarations": [{"name": "<services/gnome-keyring.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gnome-keyring.nix"}], "default": "false", "description": "Whether to enable GNOME Keyring.", "example": "true", "loc": ["services", "gnome-keyring", "enable"], "readOnly": false, "title": "services.gnome-keyring.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GNOME Keyring.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "null", "description": "Set the time a cache entry is valid to the given number of\nseconds.", "example": "", "loc": ["services", "gpg-agent", "defaultCacheTtl"], "readOnly": false, "title": "services.gpg-agent.defaultCacheTtl", "type": "null or signed integer", "descriptionHTML": "<p>Set the time a cache entry is valid to the given number of\nseconds.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "null", "description": "Set the time a cache entry used for SSH keys is valid to the\ngiven number of seconds.", "example": "", "loc": ["services", "gpg-agent", "defaultCacheTtlSsh"], "readOnly": false, "title": "services.gpg-agent.defaultCacheTtlSsh", "type": "null or signed integer", "descriptionHTML": "<p>Set the time a cache entry used for SSH keys is valid to the\ngiven number of seconds.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "false", "description": "Whether to enable GnuPG private key agent.", "example": "true", "loc": ["services", "gpg-agent", "enable"], "readOnly": false, "title": "services.gpg-agent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GnuPG private key agent.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "[](#opt-home.shell.enableBashIntegration)", "description": "Whether to enable Bash integration.", "example": "false", "loc": ["services", "gpg-agent", "enableBashIntegration"], "readOnly": false, "title": "services.gpg-agent.enableBashIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Bash integration.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "false", "description": "Whether to enable extra socket of the GnuPG key agent (useful for GPG\nAgent forwarding).", "example": "", "loc": ["services", "gpg-agent", "enableExtraSocket"], "readOnly": false, "title": "services.gpg-agent.enableExtraSocket", "type": "boolean", "descriptionHTML": "<p>Whether to enable extra socket of the GnuPG key agent (useful for GPG\nAgent forwarding).</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "[](#opt-home.shell.enableFishIntegration)", "description": "Whether to enable Fish integration.", "example": "false", "loc": ["services", "gpg-agent", "enableFishIntegration"], "readOnly": false, "title": "services.gpg-agent.enableFishIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fish integration.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "[](#opt-home.shell.enableNushellIntegration)", "description": "Whether to enable Nushell integration.", "example": "false", "loc": ["services", "gpg-agent", "enableNushellIntegration"], "readOnly": false, "title": "services.gpg-agent.enableNushellIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nushell integration.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "true", "description": "Make use of the scdaemon tool. This option has the effect of\nenabling the ability to do smartcard operations. When\ndisabled, this option passes\n{option}disable-scdaemon setting to gpg-agent.", "example": "", "loc": ["services", "gpg-agent", "enableScDaemon"], "readOnly": false, "title": "services.gpg-agent.enableScDaemon", "type": "boolean", "descriptionHTML": "<p>Make use of the scdaemon tool. This option has the effect of\nenabling the ability to do smartcard operations. When\ndisabled, this option passes\n{option}<code>disable-scdaemon</code> setting to gpg-agent.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "false", "description": "Whether to use the GnuPG key agent for SSH keys.", "example": "", "loc": ["services", "gpg-agent", "enableSshSupport"], "readOnly": false, "title": "services.gpg-agent.enableSshSupport", "type": "boolean", "descriptionHTML": "<p>Whether to use the GnuPG key agent for SSH keys.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "[](#opt-home.shell.enableZshIntegration)", "description": "Whether to enable Zsh integration.", "example": "false", "loc": ["services", "gpg-agent", "enableZshIntegration"], "readOnly": false, "title": "services.gpg-agent.enableZshIntegration", "type": "boolean", "descriptionHTML": "<p>Whether to enable Zsh integration.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "\"\"", "description": "Extra configuration lines to append to the gpg-agent\nconfiguration file.", "example": "''\n  allow-emacs-pinentry\n  allow-loopback-pinentry\n''", "loc": ["services", "gpg-agent", "extraConfig"], "readOnly": false, "title": "services.gpg-agent.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to append to the gpg-agent\nconfiguration file.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "true", "description": "Tell the pinentry to grab the keyboard and mouse. This\noption should in general be used to avoid X-sniffing\nattacks. When disabled, this option passes\n{option}no-grab setting to gpg-agent.", "example": "", "loc": ["services", "gpg-agent", "grabKeyboardAndMouse"], "readOnly": false, "title": "services.gpg-agent.grabKeyboardAndMouse", "type": "boolean", "descriptionHTML": "<p>Tell the pinentry to grab the keyboard and mouse. This\noption should in general be used to avoid X-sniffing\nattacks. When disabled, this option passes\n{option}<code>no-grab</code> setting to gpg-agent.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "null", "description": "Set the maximum time a cache entry is valid to n seconds. After this\ntime a cache entry will be expired even if it has been accessed\nrecently or has been set using gpg-preset-passphrase. The default is\n2 hours (7200 seconds).", "example": "", "loc": ["services", "gpg-agent", "maxCacheTtl"], "readOnly": false, "title": "services.gpg-agent.maxCacheTtl", "type": "null or signed integer", "descriptionHTML": "<p>Set the maximum time a cache entry is valid to n seconds. After this\ntime a cache entry will be expired even if it has been accessed\nrecently or has been set using gpg-preset-passphrase. The default is\n2 hours (7200 seconds).</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "null", "description": "Set the maximum time a cache entry used for SSH keys is valid to n\nseconds. After this time a cache entry will be expired even if it has\nbeen accessed recently or has been set using gpg-preset-passphrase.\nThe default is 2 hours (7200 seconds).", "example": "", "loc": ["services", "gpg-agent", "maxCacheTtlSsh"], "readOnly": false, "title": "services.gpg-agent.maxCacheTtlSsh", "type": "null or signed integer", "descriptionHTML": "<p>Set the maximum time a cache entry used for SSH keys is valid to n\nseconds. After this time a cache entry will be expired even if it has\nbeen accessed recently or has been set using gpg-preset-passphrase.\nThe default is 2 hours (7200 seconds).</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "false", "description": "Tell Pinentry not to enable features which use an external cache for\npassphrases.\nSome desktop environments prefer to unlock all credentials with one\nmaster password and may have installed a Pinentry which employs an\nadditional external cache to implement such a policy. By using this\noption the Pinentry is advised not to make use of such a cache and\ninstead always ask the user for the requested passphrase.", "example": "", "loc": ["services", "gpg-agent", "noAllowExternalCache"], "readOnly": false, "title": "services.gpg-agent.noAllowExternalCache", "type": "boolean", "descriptionHTML": "<p>Tell Pinentry not to enable features which use an external cache for\npassphrases.</p>\n<p>Some desktop environments prefer to unlock all credentials with one\nmaster password and may have installed a Pinentry which employs an\nadditional external cache to implement such a policy. By using this\noption the Pinentry is advised not to make use of such a cache and\ninstead always ask the user for the requested passphrase.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "null", "description": "The pinentry-gnome3 package to use. Which pinentry interface to use. If not null, it sets\n{option}pinentry-program in {file}gpg-agent.conf. Beware that\npinentry-gnome3 may not work on non-GNOME systems. You can fix it by\nadding the following to your configuration:\nnix\nhome.packages = [ pkgs.gcr ];", "example": "", "loc": ["services", "gpg-agent", "pinentry", "package"], "readOnly": false, "title": "services.gpg-agent.pinentry.package", "type": "null or package", "descriptionHTML": "<p>The pinentry-gnome3 package to use. Which pinentry interface to use. If not <code>null</code>, it sets\n{option}<code>pinentry-program</code> in {file}<code>gpg-agent.conf</code>. Beware that\n<code>pinentry-gnome3</code> may not work on non-GNOME systems. You can fix it by\nadding the following to your configuration:\n<code>nix\nhome.packages = [ pkgs.gcr ];</code></p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "", "description": "Which program to search for in the configured pinentry.package.", "example": "\"pinentry-wayprompt\"", "loc": ["services", "gpg-agent", "pinentry", "program"], "readOnly": false, "title": "services.gpg-agent.pinentry.program", "type": "null or string", "descriptionHTML": "<p>Which program to search for in the configured <code>pinentry.package</code>.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "null", "description": "Which GPG keys (by keygrip) to expose as SSH keys.", "example": "", "loc": ["services", "gpg-agent", "sshKeys"], "readOnly": false, "title": "services.gpg-agent.sshKeys", "type": "null or (list of string)", "descriptionHTML": "<p>Which GPG keys (by keygrip) to expose as SSH keys.</p>"}, {"declarations": [{"name": "<services/gpg-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gpg-agent.nix"}], "default": "false", "description": "Whether to produce verbose output.", "example": "", "loc": ["services", "gpg-agent", "verbose"], "readOnly": false, "title": "services.gpg-agent.verbose", "type": "boolean", "descriptionHTML": "<p>Whether to produce verbose output.</p>"}, {"declarations": [{"name": "<services/grobi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/grobi.nix"}], "default": "false", "description": "Whether to enable the grobi display setup daemon.", "example": "true", "loc": ["services", "grobi", "enable"], "readOnly": false, "title": "services.grobi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the grobi display setup daemon.</p>"}, {"declarations": [{"name": "<services/grobi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/grobi.nix"}], "default": "[ ]", "description": "Commands to be run after an output configuration was\nchanged. The Nix value declared here will be translated to\nJSON and written to the {option}execute_after key\nin {file}$XDG_CONFIG_HOME/grobi.conf.", "example": "[\n  \"setxkbmap dvorak\"\n]", "loc": ["services", "grobi", "executeAfter"], "readOnly": false, "title": "services.grobi.executeAfter", "type": "list of string", "descriptionHTML": "<p>Commands to be run after an output configuration was\nchanged. The Nix value declared here will be translated to\nJSON and written to the {option}<code>execute_after</code> key\nin {file}<code>$XDG_CONFIG_HOME/grobi.conf</code>.</p>"}, {"declarations": [{"name": "<services/grobi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/grobi.nix"}], "default": "[ ]", "description": "These are the rules grobi tries to match to the current\noutput configuration. The rules are evaluated top to bottom,\nthe first matching rule is applied and processing stops. See\nhttps://github.com/fd0/grobi/blob/master/doc/grobi.conf\nfor more information. The Nix value declared here will be\ntranslated to JSON and written to the {option}rules\nkey in {file}$XDG_CONFIG_HOME/grobi.conf.", "example": "[\n  {\n    name = \"Home\";\n    outputs_connected = [ \"DP-2\" ];\n    configure_single = \"DP-2\";\n    primary = true;\n    atomic = true;\n    execute_after = [\n      \"${pkgs.xorg.xrandr}/bin/xrandr --dpi 96\"\n      \"${pkgs.xmonad-with-packages}/bin/xmonad --restart\";\n    ];\n  }\n  {\n    name = \"Mobile\";\n    outputs_disconnected = [ \"DP-2\" ];\n    configure_single = \"eDP-1\";\n    primary = true;\n    atomic = true;\n    execute_after = [\n      \"${pkgs.xorg.xrandr}/bin/xrandr --dpi 120\"\n      \"${pkgs.xmonad-with-packages}/bin/xmonad --restart\";\n    ];\n  }\n]\n", "loc": ["services", "grobi", "rules"], "readOnly": false, "title": "services.grobi.rules", "type": "list of attribute set of (string or boolean or signed integer or list of string)", "descriptionHTML": "<p>These are the rules grobi tries to match to the current\noutput configuration. The rules are evaluated top to bottom,\nthe first matching rule is applied and processing stops. See\n<a href=\"https://github.com/fd0/grobi/blob/master/doc/grobi.conf\">https://github.com/fd0/grobi/blob/master/doc/grobi.conf</a>\nfor more information. The Nix value declared here will be\ntranslated to JSON and written to the {option}<code>rules</code>\nkey in {file}<code>$XDG_CONFIG_HOME/grobi.conf</code>.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "false", "description": "Whether to enable Gromit-MPX annotation tool.", "example": "true", "loc": ["services", "gromit-mpx", "enable"], "readOnly": false, "title": "services.gromit-mpx.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Gromit-MPX annotation tool.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "\"F9\"", "description": "A keysym or raw keycode that toggles the activation state of\ngromit-mpx.  Set to null to disable the\nhotkey in which case you'll have to activate gromit-mpx\nmanually using the command line.", "example": "\"Insert\"", "loc": ["services", "gromit-mpx", "hotKey"], "readOnly": false, "title": "services.gromit-mpx.hotKey", "type": "null or string or (positive integer, meaning >0)", "descriptionHTML": "<p>A keysym or raw keycode that toggles the activation state of\ngromit-mpx.  Set to <code>null</code> to disable the\nhotkey in which case you'll have to activate gromit-mpx\nmanually using the command line.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "0.75", "description": "Opacity of the drawing overlay.", "example": "1.0", "loc": ["services", "gromit-mpx", "opacity"], "readOnly": false, "title": "services.gromit-mpx.opacity", "type": "float between 0.0 and 1.0 (inclusive)", "descriptionHTML": "<p>Opacity of the drawing overlay.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "pkgs.gromit-mpx", "description": "The gromit-mpx package to use.", "example": "", "loc": ["services", "gromit-mpx", "package"], "readOnly": false, "title": "services.gromit-mpx.package", "type": "package", "descriptionHTML": "<p>The gromit-mpx package to use.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "[\n  {\n    color = \"red\";\n    device = \"default\";\n    size = 5;\n    type = \"pen\";\n  }\n  {\n    color = \"blue\";\n    device = \"default\";\n    modifiers = [\n      \"SHIFT\"\n    ];\n    size = 5;\n    type = \"pen\";\n  }\n  {\n    color = \"yellow\";\n    device = \"default\";\n    modifiers = [\n      \"CONTROL\"\n    ];\n    size = 5;\n    type = \"pen\";\n  }\n  {\n    arrowSize = 1;\n    color = \"green\";\n    device = \"default\";\n    modifiers = [\n      \"2\"\n    ];\n    size = 6;\n    type = \"pen\";\n  }\n  {\n    device = \"default\";\n    modifiers = [\n      \"3\"\n    ];\n    size = 75;\n    type = \"eraser\";\n  }\n]", "description": "Tool definitions for gromit-mpx to use.", "example": "", "loc": ["services", "gromit-mpx", "tools"], "readOnly": false, "title": "services.gromit-mpx.tools", "type": "list of (submodule)", "descriptionHTML": "<p>Tool definitions for gromit-mpx to use.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "null", "description": "If not null, automatically draw an arrow\nat the end of a stroke with the given size.", "example": "2", "loc": ["services", "gromit-mpx", "tools", "*", "arrowSize"], "readOnly": false, "title": "services.gromit-mpx.tools.*.arrowSize", "type": "null or (positive integer, meaning >0)", "descriptionHTML": "<p>If not <code>null</code>, automatically draw an arrow\nat the end of a stroke with the given size.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "\"red\"", "description": "The stroke (or recolor) color of the tool.", "example": "\"#ff00ff\"", "loc": ["services", "gromit-mpx", "tools", "*", "color"], "readOnly": false, "title": "services.gromit-mpx.tools.*.color", "type": "string", "descriptionHTML": "<p>The stroke (or recolor) color of the tool.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "", "description": "Use this tool with the given xinput device.  The device with\nthe name default works with any input.", "example": "\"default\"", "loc": ["services", "gromit-mpx", "tools", "*", "device"], "readOnly": false, "title": "services.gromit-mpx.tools.*.device", "type": "string", "descriptionHTML": "<p>Use this tool with the given xinput device.  The device with\nthe name default works with any input.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "[ ]", "description": "Only activate this tool if the given modifiers are also active.", "example": "[\n  \"SHIFT\"\n]", "loc": ["services", "gromit-mpx", "tools", "*", "modifiers"], "readOnly": false, "title": "services.gromit-mpx.tools.*.modifiers", "type": "list of (one of \"1\", \"2\", \"3\", \"4\", \"5\", \"SHIFT\", \"CONTROL\", \"ALT\", \"META\")", "descriptionHTML": "<p>Only activate this tool if the given modifiers are also active.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "5", "description": "The tool size.", "example": "3", "loc": ["services", "gromit-mpx", "tools", "*", "size"], "readOnly": false, "title": "services.gromit-mpx.tools.*.size", "type": "positive integer, meaning >0", "descriptionHTML": "<p>The tool size.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "\"pen\"", "description": "Which type of tool this is.", "example": "\"eraser\"", "loc": ["services", "gromit-mpx", "tools", "*", "type"], "readOnly": false, "title": "services.gromit-mpx.tools.*.type", "type": "one of \"pen\", \"eraser\", \"recolor\"", "descriptionHTML": "<p>Which type of tool this is.</p>"}, {"declarations": [{"name": "<services/gromit-mpx.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/gromit-mpx.nix"}], "default": "\"F10\"", "description": "A keysym or raw keycode that causes gromit-mpx to undo the\nlast stroke.  Use this key along with the shift key to redo an\nundone stoke.  Set to null to disable the\nundo hotkey.", "example": "", "loc": ["services", "gromit-mpx", "undoKey"], "readOnly": false, "title": "services.gromit-mpx.undoKey", "type": "null or string or (positive integer, meaning >0)", "descriptionHTML": "<p>A keysym or raw keycode that causes gromit-mpx to undo the\nlast stroke.  Use this key along with the shift key to redo an\nundone stoke.  Set to <code>null</code> to disable the\nundo hotkey.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-expire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-expire.nix"}], "default": "false", "description": "Whether to enable the Home Manager expire service that periodically expire your\nold Home Manager generations.", "example": "true", "loc": ["services", "home-manager", "autoExpire", "enable"], "readOnly": false, "title": "services.home-manager.autoExpire.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Home Manager expire service that periodically expire your\nold Home Manager generations.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-expire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-expire.nix"}], "default": "\"monthly\"", "description": "The interval at which the Home Manager auto expire is run.\nThis value is passed to the systemd timer configuration\nas the OnCalendar option.\nThe format is described in {manpage}systemd.time(7).\nOn Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}systemd.time(7).", "example": "\"weekly\"", "loc": ["services", "home-manager", "autoExpire", "frequency"], "readOnly": false, "title": "services.home-manager.autoExpire.frequency", "type": "string", "descriptionHTML": "<p>The interval at which the Home Manager auto expire is run.</p>\n<p>This value is passed to the systemd timer configuration\nas the <code>OnCalendar</code> option.</p>\n<p>The format is described in {manpage}<code>systemd.time(7)</code>.</p>\n<p>On Darwin it must be one of: hourly, daily, weekly, monthly, semiannually, annually, which are implemented as defined in {manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-expire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-expire.nix"}], "default": "false", "description": "Whether to enable to cleanup Nix store when the Home Manager expire service runs.\nIt will use nix-collect-garbage to cleanup the store,\nremoving all unreachable store objects from the current user\n(i.e.: not only the expired Home Manager generations).\nThis may not be what you want, this is why this option is disabled\nby default.", "example": "true", "loc": ["services", "home-manager", "autoExpire", "store", "cleanup"], "readOnly": false, "title": "services.home-manager.autoExpire.store.cleanup", "type": "boolean", "descriptionHTML": "<p>Whether to enable to cleanup Nix store when the Home Manager expire service runs.</p>\n<p>It will use <code>nix-collect-garbage</code> to cleanup the store,\nremoving all unreachable store objects from the current user\n(i.e.: not only the expired Home Manager generations).</p>\n<p>This may not be what you want, this is why this option is disabled\nby default.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-expire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-expire.nix"}], "default": "\"\"", "description": "Options given to nix-collect-garbage when the service runs.", "example": "\"--delete-older-than 30d\"", "loc": ["services", "home-manager", "autoExpire", "store", "options"], "readOnly": false, "title": "services.home-manager.autoExpire.store.options", "type": "string", "descriptionHTML": "<p>Options given to <code>nix-collect-garbage</code> when the service runs.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-expire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-expire.nix"}], "default": "\"-30 days\"", "description": "Remove generations older than TIMESTAMP where TIMESTAMP is\ninterpreted as in the -d argument of the date tool.", "example": "\"-7 days\"", "loc": ["services", "home-manager", "autoExpire", "timestamp"], "readOnly": false, "title": "services.home-manager.autoExpire.timestamp", "type": "string", "descriptionHTML": "<p>Remove generations older than <code>TIMESTAMP</code> where <code>TIMESTAMP</code> is\ninterpreted as in the -d argument of the date tool.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-upgrade.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-upgrade.nix"}], "default": "false", "description": "Whether to enable the Home Manager upgrade service that periodically updates your Nix\nchannels before running home-manager switch.", "example": "true", "loc": ["services", "home-manager", "autoUpgrade", "enable"], "readOnly": false, "title": "services.home-manager.autoUpgrade.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Home Manager upgrade service that periodically updates your Nix\nchannels before running <code>home-manager switch</code>.</p>"}, {"declarations": [{"name": "<services/home-manager-auto-upgrade.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/home-manager-auto-upgrade.nix"}], "default": "", "description": "The interval at which the Home Manager auto upgrade is run.\nThis value is passed to the systemd timer configuration\nas the OnCalendar option.\nThe format is described in\n{manpage}systemd.time(7).", "example": "\"weekly\"", "loc": ["services", "home-manager", "autoUpgrade", "frequency"], "readOnly": false, "title": "services.home-manager.autoUpgrade.frequency", "type": "string", "descriptionHTML": "<p>The interval at which the Home Manager auto upgrade is run.\nThis value is passed to the systemd timer configuration\nas the <code>OnCalendar</code> option.\nThe format is described in\n{manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<services/hound.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hound.nix"}], "default": "\"$XDG_DATA_HOME/hound\"", "description": "The Hound database path.", "example": "", "loc": ["services", "hound", "databasePath"], "readOnly": false, "title": "services.hound.databasePath", "type": "absolute path", "descriptionHTML": "<p>The Hound database path.</p>"}, {"declarations": [{"name": "<services/hound.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hound.nix"}], "default": "false", "description": "Whether to enable hound.", "example": "true", "loc": ["services", "hound", "enable"], "readOnly": false, "title": "services.hound.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable hound.</p>"}, {"declarations": [{"name": "<services/hound.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hound.nix"}], "default": "\"localhost:6080\"", "description": "Listen address of the Hound daemon.", "example": "", "loc": ["services", "hound", "listenAddress"], "readOnly": false, "title": "services.hound.listenAddress", "type": "string", "descriptionHTML": "<p>Listen address of the Hound daemon.</p>"}, {"declarations": [{"name": "<services/hound.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hound.nix"}], "default": "2", "description": "Limit the amount of concurrent indexers.", "example": "", "loc": ["services", "hound", "maxConcurrentIndexers"], "readOnly": false, "title": "services.hound.maxConcurrentIndexers", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Limit the amount of concurrent indexers.</p>"}, {"declarations": [{"name": "<services/hound.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hound.nix"}], "default": "{ }", "description": "The repository configuration.", "example": "{\n  SomeGitRepo = {\n    url = \"https://www.github.com/YourOrganization/RepoOne.git\";\n    ms-between-poll = 10000;\n    exclude-dot-files = true;\n  };\n}\n", "loc": ["services", "hound", "repositories"], "readOnly": false, "title": "services.hound.repositories", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>The repository configuration.</p>"}, {"declarations": [{"name": "<services/hypridle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hypridle.nix"}], "default": "false", "description": "Whether to enable Hypridle, Hyprland's idle daemon.", "example": "true", "loc": ["services", "hypridle", "enable"], "readOnly": false, "title": "services.hypridle.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Hypridle, Hyprland's idle daemon.</p>"}, {"declarations": [{"name": "<services/hypridle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hypridle.nix"}], "default": "[\n  \"$\"\n]", "description": "List of prefix of attributes to source at the top of the config.", "example": "[\n  \"$\"\n]", "loc": ["services", "hypridle", "importantPrefixes"], "readOnly": false, "title": "services.hypridle.importantPrefixes", "type": "list of string", "descriptionHTML": "<p>List of prefix of attributes to source at the top of the config.</p>"}, {"declarations": [{"name": "<services/hypridle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hypridle.nix"}], "default": "pkgs.hypridle", "description": "The hypridle package to use.", "example": "", "loc": ["services", "hypridle", "package"], "readOnly": false, "title": "services.hypridle.package", "type": "null or package", "descriptionHTML": "<p>The hypridle package to use.</p>"}, {"declarations": [{"name": "<services/hypridle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hypridle.nix"}], "default": "{ }", "description": "Hypridle configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See https://wiki.hypr.land/Hypr-Ecosystem/hypridle/ for more examples.", "example": "{\n  general = {\n    after_sleep_cmd = \"hyprctl dispatch dpms on\";\n    ignore_dbus_inhibit = false;\n    lock_cmd = \"hyprlock\";\n  };\n\n  listener = [\n    {\n      timeout = 900;\n      on-timeout = \"hyprlock\";\n    }\n    {\n      timeout = 1200;\n      on-timeout = \"hyprctl dispatch dpms off\";\n      on-resume = \"hyprctl dispatch dpms on\";\n    }\n  ];\n}\n", "loc": ["services", "hypridle", "settings"], "readOnly": false, "title": "services.hypridle.settings", "type": "Hypridle configuration value", "descriptionHTML": "<p>Hypridle configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See <a href=\"https://wiki.hypr.land/Hypr-Ecosystem/hypridle/\">https://wiki.hypr.land/Hypr-Ecosystem/hypridle/</a> for more examples.</p>"}, {"declarations": [{"name": "<services/hypridle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hypridle.nix"}], "default": "config.wayland.systemd.target", "description": "Systemd target to bind to.", "example": "\"hyprland-session.target\"", "loc": ["services", "hypridle", "systemdTarget"], "readOnly": false, "title": "services.hypridle.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/hyprpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprpaper.nix"}], "default": "false", "description": "Whether to enable Hyprpaper, Hyprland's wallpaper daemon.", "example": "true", "loc": ["services", "hyprpaper", "enable"], "readOnly": false, "title": "services.hyprpaper.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Hyprpaper, Hyprland's wallpaper daemon.</p>"}, {"declarations": [{"name": "<services/hyprpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprpaper.nix"}], "default": "[\n  \"$\"\n]", "description": "List of prefix of attributes to source at the top of the config.", "example": "[\n  \"$\"\n]", "loc": ["services", "hyprpaper", "importantPrefixes"], "readOnly": false, "title": "services.hyprpaper.importantPrefixes", "type": "list of string", "descriptionHTML": "<p>List of prefix of attributes to source at the top of the config.</p>"}, {"declarations": [{"name": "<services/hyprpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprpaper.nix"}], "default": "pkgs.hyprpaper", "description": "The hyprpaper package to use.", "example": "", "loc": ["services", "hyprpaper", "package"], "readOnly": false, "title": "services.hyprpaper.package", "type": "null or package", "descriptionHTML": "<p>The hyprpaper package to use.</p>"}, {"declarations": [{"name": "<services/hyprpaper.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprpaper.nix"}], "default": "{ }", "description": "hyprpaper configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See https://wiki.hypr.land/Hypr-Ecosystem/hyprpaper/ for more examples.", "example": "{\n  ipc = \"on\";\n  splash = false;\n  splash_offset = 2.0;\n\n  preload =\n    [ \"/share/wallpapers/buttons.png\" \"/share/wallpapers/cat_pacman.png\" ];\n\n  wallpaper = [\n    \"DP-3,/share/wallpapers/buttons.png\"\n    \"DP-1,/share/wallpapers/cat_pacman.png\"\n  ];\n}\n", "loc": ["services", "hyprpaper", "settings"], "readOnly": false, "title": "services.hyprpaper.settings", "type": "Hyprpaper configuration value", "descriptionHTML": "<p>hyprpaper configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See <a href=\"https://wiki.hypr.land/Hypr-Ecosystem/hyprpaper/\">https://wiki.hypr.land/Hypr-Ecosystem/hyprpaper/</a> for more examples.</p>"}, {"declarations": [{"name": "<services/hyprpolkitagent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprpolkitagent.nix"}], "default": "false", "description": "Whether to enable Hyprland Policykit Agent.", "example": "true", "loc": ["services", "hyprpolkitagent", "enable"], "readOnly": false, "title": "services.hyprpolkitagent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Hyprland Policykit Agent.</p>"}, {"declarations": [{"name": "<services/hyprpolkitagent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprpolkitagent.nix"}], "default": "pkgs.hyprpolkitagent", "description": "The hyprpolkitagent package to use.", "example": "", "loc": ["services", "hyprpolkitagent", "package"], "readOnly": false, "title": "services.hyprpolkitagent.package", "type": "package", "descriptionHTML": "<p>The hyprpolkitagent package to use.</p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "false", "description": "Whether to enable hyprshell.", "example": "true", "loc": ["services", "hyprshell", "enable"], "readOnly": false, "title": "services.hyprshell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable hyprshell.</p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "pkgs.hyprshell", "description": "The hyprshell package to use.", "example": "", "loc": ["services", "hyprshell", "package"], "readOnly": false, "title": "services.hyprshell.package", "type": "null or package", "descriptionHTML": "<p>The hyprshell package to use.</p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "{ }", "description": "Configuration settings for hyprshell. All the avaiblable\noptions can be found here: https://github.com/H3rmt/hyprshell/blob/hyprshell-release/CONFIGURE.md#config-options", "example": "", "loc": ["services", "hyprshell", "settings"], "readOnly": false, "title": "services.hyprshell.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration settings for hyprshell. All the avaiblable\noptions can be found here: <a href=\"https://github.com/H3rmt/hyprshell/blob/hyprshell-release/CONFIGURE.md#config-options\">https://github.com/H3rmt/hyprshell/blob/hyprshell-release/CONFIGURE.md#config-options</a></p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "\"\"", "description": "CSS file for customizing hyprshell. All the available\noptions can be found here: https://github.com/H3rmt/hyprshell/blob/hyprshell-release/CONFIGURE.md#css", "example": "", "loc": ["services", "hyprshell", "style"], "readOnly": false, "title": "services.hyprshell.style", "type": "absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>CSS file for customizing hyprshell. All the available\noptions can be found here: <a href=\"https://github.com/H3rmt/hyprshell/blob/hyprshell-release/CONFIGURE.md#css\">https://github.com/H3rmt/hyprshell/blob/hyprshell-release/CONFIGURE.md#css</a></p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "\"\"", "description": "Arguments to pass to the hyprshell service", "example": "\"-vv\"", "loc": ["services", "hyprshell", "systemd", "args"], "readOnly": false, "title": "services.hyprshell.systemd.args", "type": "string", "descriptionHTML": "<p>Arguments to pass to the hyprshell service</p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "true", "description": "Whether to enable the hyprshell Systemd service.", "example": "true", "loc": ["services", "hyprshell", "systemd", "enable"], "readOnly": false, "title": "services.hyprshell.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the hyprshell Systemd service.</p>"}, {"declarations": [{"name": "<services/hyprshell.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprshell.nix"}], "default": "\"graphical-session.target\"", "description": "The Systemd target that will start the hyprshell service", "example": "", "loc": ["services", "hyprshell", "systemd", "target"], "readOnly": false, "title": "services.hyprshell.systemd.target", "type": "string", "descriptionHTML": "<p>The Systemd target that will start the hyprshell service</p>"}, {"declarations": [{"name": "<services/hyprsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprsunset.nix"}], "default": "false", "description": "Whether to enable Hyprsunset, Hyprland's blue-light filter.", "example": "true", "loc": ["services", "hyprsunset", "enable"], "readOnly": false, "title": "services.hyprsunset.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Hyprsunset, Hyprland's blue-light filter.</p>"}, {"declarations": [{"name": "<services/hyprsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprsunset.nix"}], "default": "[ ]", "description": "Additional command-line arguments to pass to hyprsunset.", "example": "[\n  \"--identity\"\n]", "loc": ["services", "hyprsunset", "extraArgs"], "readOnly": false, "title": "services.hyprsunset.extraArgs", "type": "list of string", "descriptionHTML": "<p>Additional command-line arguments to pass to <code>hyprsunset</code>.</p>"}, {"declarations": [{"name": "<services/hyprsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprsunset.nix"}], "default": "pkgs.hyprsunset", "description": "The hyprsunset package to use.", "example": "", "loc": ["services", "hyprsunset", "package"], "readOnly": false, "title": "services.hyprsunset.package", "type": "package", "descriptionHTML": "<p>The hyprsunset package to use.</p>"}, {"declarations": [{"name": "<services/hyprsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprsunset.nix"}], "default": "{ }", "description": "Set of transitions for different times of day (e.g., sunrise, sunset)", "example": "{\n  sunrise = {\n    calendar = \"*-*-* 06:00:00\";\n    requests = [\n      [ \"temperature\" \"6500\" ]\n      [ \"gamma 100\" ]\n    ];\n  };\n  sunset = {\n    calendar = \"*-*-* 19:00:00\";\n    requests = [\n      [ \"temperature\" \"3500\" ]\n    ];\n  };\n}\n", "loc": ["services", "hyprsunset", "transitions"], "readOnly": false, "title": "services.hyprsunset.transitions", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Set of transitions for different times of day (e.g., sunrise, sunset)</p>"}, {"declarations": [{"name": "<services/hyprsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprsunset.nix"}], "default": "", "description": "Systemd calendar expression for when to run this transition.", "example": "\"*-*-* 06:00:00\"", "loc": ["services", "hyprsunset", "transitions", "<name>", "calendar"], "readOnly": false, "title": "services.hyprsunset.transitions.<name>.calendar", "type": "string", "descriptionHTML": "<p>Systemd calendar expression for when to run this transition.</p>"}, {"declarations": [{"name": "<services/hyprsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/hyprsunset.nix"}], "default": "[ ]", "description": "List of requests to pass to hyprctl hyprsunset for this transition. Each inner list represents a separate command.", "example": "[\n  [ \"temperature\" \"3500\" ]\n]\n", "loc": ["services", "hyprsunset", "transitions", "<name>", "requests"], "readOnly": false, "title": "services.hyprsunset.transitions.<name>.requests", "type": "list of list of string", "descriptionHTML": "<p>List of requests to pass to <code>hyprctl hyprsunset</code> for this transition. Each inner list represents a separate command.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "false", "description": "Whether to enable imapnotify.", "example": "true", "loc": ["services", "imapnotify", "enable"], "readOnly": false, "title": "services.imapnotify.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable imapnotify.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "pkgs.goimapnotify", "description": "The goimapnotify package to use.", "example": "pkgs.imapnotify", "loc": ["services", "imapnotify", "package"], "readOnly": false, "title": "services.imapnotify.package", "type": "package", "descriptionHTML": "<p>The goimapnotify package to use.</p>"}, {"declarations": [{"name": "<services/imapnotify/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/imapnotify/default.nix"}], "default": "[ ]", "description": "List of packages to provide in PATH for the imapnotify service.\nNote, this does not apply to the Darwin launchd service.", "example": "", "loc": ["services", "imapnotify", "path"], "readOnly": false, "title": "services.imapnotify.path", "type": "list of package", "descriptionHTML": "<p>List of packages to provide in PATH for the imapnotify service.</p>\n<p>Note, this does not apply to the Darwin launchd service.</p>"}, {"declarations": [{"name": "<services/jankyborders.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jankyborders.nix"}], "default": "false", "description": "Whether to enable jankyborders.", "example": "true", "loc": ["services", "jankyborders", "enable"], "readOnly": false, "title": "services.jankyborders.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable jankyborders.</p>"}, {"declarations": [{"name": "<services/jankyborders.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jankyborders.nix"}], "default": "${config.home.homeDirectory}/Library/Logs/jankyborders/err.log", "description": "Absolute path to log all stderr output.", "example": "\"/Users/khaneliman/Library/Logs/jankyborders.log\"", "loc": ["services", "jankyborders", "errorLogFile"], "readOnly": false, "title": "services.jankyborders.errorLogFile", "type": "null or absolute path or string", "descriptionHTML": "<p>Absolute path to log all stderr output.</p>"}, {"declarations": [{"name": "<services/jankyborders.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jankyborders.nix"}], "default": "${config.home.homeDirectory}/Library/Logs/jankyborders/out.log", "description": "Absolute path to log all stdout output.", "example": "\"/Users/khaneliman/Library/Logs/jankyborders.log\"", "loc": ["services", "jankyborders", "outLogFile"], "readOnly": false, "title": "services.jankyborders.outLogFile", "type": "null or absolute path or string", "descriptionHTML": "<p>Absolute path to log all stdout output.</p>"}, {"declarations": [{"name": "<services/jankyborders.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jankyborders.nix"}], "default": "pkgs.jankyborders", "description": "The jankyborders package to use.", "example": "", "loc": ["services", "jankyborders", "package"], "readOnly": false, "title": "services.jankyborders.package", "type": "package", "descriptionHTML": "<p>The jankyborders package to use.</p>"}, {"declarations": [{"name": "<services/jankyborders.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jankyborders.nix"}], "default": "{ }", "description": "Configuration settings to passed to borders in\n{file}$XDG_CONFIG_HOME/borders/bordersc. See\nhttps://github.com/FelixKratz/JankyBorders\nfor the documentation.", "example": "        {\n          style=round;\n\t        width=6.0;\n\t        hidpi=\"off\";\n\t        active_color=\"0xffe2e2e3\";\n\t        inactive_color=\"0xff414550\";\n        }\n", "loc": ["services", "jankyborders", "settings"], "readOnly": false, "title": "services.jankyborders.settings", "type": "attribute set of anything", "descriptionHTML": "<p>Configuration settings to passed to <code>borders</code> in\n{file}<code>$XDG_CONFIG_HOME/borders/bordersc</code>. See\n<a href=\"https://github.com/FelixKratz/JankyBorders\">https://github.com/FelixKratz/JankyBorders</a>\nfor the documentation.</p>"}, {"declarations": [{"name": "<services/jellyfin-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jellyfin-mpv-shim.nix"}], "default": "false", "description": "Whether to enable Jellyfin mpv shim.", "example": "true", "loc": ["services", "jellyfin-mpv-shim", "enable"], "readOnly": false, "title": "services.jellyfin-mpv-shim.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Jellyfin mpv shim.</p>"}, {"declarations": [{"name": "<services/jellyfin-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jellyfin-mpv-shim.nix"}], "default": "null", "description": "mpv input bindings to use for jellyfin-mpv-shim.\nIf null, jellyfin-mpv-shim will use its default input configuration.", "example": "{\n          WHEEL_UP = \"seek 10\";\n          WHEEL_DOWN = \"seek -10\";\n        }", "loc": ["services", "jellyfin-mpv-shim", "mpvBindings"], "readOnly": false, "title": "services.jellyfin-mpv-shim.mpvBindings", "type": "null or (attribute set of string)", "descriptionHTML": "<p>mpv input bindings to use for jellyfin-mpv-shim.\nIf null, jellyfin-mpv-shim will use its default input configuration.</p>"}, {"declarations": [{"name": "<services/jellyfin-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jellyfin-mpv-shim.nix"}], "default": "null", "description": "mpv configuration options to use for jellyfin-mpv-shim.\nIf null, jellyfin-mpv-shim will use its default mpv configuration.", "example": "{\n          profile = \"gpu-hq\";\n          force-window = true;\n        }", "loc": ["services", "jellyfin-mpv-shim", "mpvConfig"], "readOnly": false, "title": "services.jellyfin-mpv-shim.mpvConfig", "type": "null or (attribute set of (string or signed integer or boolean or floating point number))", "descriptionHTML": "<p>mpv configuration options to use for jellyfin-mpv-shim.\nIf null, jellyfin-mpv-shim will use its default mpv configuration.</p>"}, {"declarations": [{"name": "<services/jellyfin-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jellyfin-mpv-shim.nix"}], "default": "pkgs.jellyfin-mpv-shim", "description": "The jellyfin-mpv-shim package to use.", "example": "", "loc": ["services", "jellyfin-mpv-shim", "package"], "readOnly": false, "title": "services.jellyfin-mpv-shim.package", "type": "package", "descriptionHTML": "<p>The jellyfin-mpv-shim package to use.</p>"}, {"declarations": [{"name": "<services/jellyfin-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/jellyfin-mpv-shim.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/jellyfin-mpv-shim/conf.json. See\nhttps://github.com/jellyfin/jellyfin-mpv-shim#configuration\nfor the configuration documentation.", "example": "{\n  allow_transcode_to_h265 = false;\n  always_transcode = false;\n  audio_output = \"hdmi\";\n  auto_play = true;\n  fullscreen = true;\n  player_name = \"mpv-shim\";\n}\n", "loc": ["services", "jellyfin-mpv-shim", "settings"], "readOnly": false, "title": "services.jellyfin-mpv-shim.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/jellyfin-mpv-shim/conf.json</code>. See\n<a href=\"https://github.com/jellyfin/jellyfin-mpv-shim#configuration\">https://github.com/jellyfin/jellyfin-mpv-shim#configuration</a>\nfor the configuration documentation.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "false", "description": "Whether to enable kanshi, a Wayland daemon that automatically configures outputs.", "example": "true", "loc": ["services", "kanshi", "enable"], "readOnly": false, "title": "services.kanshi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable kanshi, a Wayland daemon that automatically configures outputs.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "\"\"", "description": "Extra configuration lines to append to the kanshi\nconfiguration file.", "example": "", "loc": ["services", "kanshi", "extraConfig"], "readOnly": false, "title": "services.kanshi.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to append to the kanshi\nconfiguration file.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "pkgs.kanshi", "description": "The kanshi package to use.", "example": "", "loc": ["services", "kanshi", "package"], "readOnly": false, "title": "services.kanshi.package", "type": "package", "descriptionHTML": "<p>The kanshi package to use.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "{ }", "description": "Attribute set of profiles.", "example": "{\n  undocked = {\n    outputs = [\n      {\n        criteria = \"eDP-1\";\n      }\n    ];\n  };\n  docked = {\n    outputs = [\n      {\n        criteria = \"eDP-1\";\n      }\n      {\n        criteria = \"Some Company ASDF 4242\";\n        transform = \"90\";\n      }\n    ];\n  };\n}\n", "loc": ["services", "kanshi", "profiles"], "readOnly": false, "title": "services.kanshi.profiles", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of profiles.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "[ ]", "description": "Commands executed after the profile is successfully applied.\nNote that if you provide multiple commands, they will be\nexecuted asynchronously with no guaranteed ordering.", "example": "\"[ \\${pkg.sway}/bin/swaymsg workspace 1, move workspace to eDP-1 ]\"", "loc": ["services", "kanshi", "profiles", "<name>", "exec"], "readOnly": false, "title": "services.kanshi.profiles.<name>.exec", "type": "(list of string) or string convertible to it", "descriptionHTML": "<p>Commands executed after the profile is successfully applied.\nNote that if you provide multiple commands, they will be\nexecuted asynchronously with no guaranteed ordering.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "\"\"", "description": "Profile name", "example": "", "loc": ["services", "kanshi", "profiles", "<name>", "name"], "readOnly": false, "title": "services.kanshi.profiles.<name>.name", "type": "string", "descriptionHTML": "<p>Profile name</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "[ ]", "description": "Outputs configuration.", "example": "", "loc": ["services", "kanshi", "profiles", "<name>", "outputs"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs", "type": "list of (submodule)", "descriptionHTML": "<p>Outputs configuration.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "Enables or disables adaptive synchronization\n(aka. Variable Refresh Rate).", "example": "true", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "adaptiveSync"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.adaptiveSync", "type": "null or boolean", "descriptionHTML": "<p>Enables or disables adaptive synchronization\n(aka. Variable Refresh Rate).</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "Defines an alias for the output", "example": "\"laptopMonitor\"", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "alias"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.alias", "type": "null or string", "descriptionHTML": "<p>Defines an alias for the output</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "", "description": "The criteria can either be an output name, an output description or \"*\".\nThe latter can be used to match any output.\nOn\n{manpage}sway(1),\noutput names and descriptions can be obtained via\nswaymsg -t get_outputs.", "example": "", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "criteria"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.criteria", "type": "string", "descriptionHTML": "<p>The criteria can either be an output name, an output description or \"*\".\nThe latter can be used to match any output.</p>\n<p>On\n{manpage}<code>sway(1)</code>,\noutput names and descriptions can be obtained via\n<code>swaymsg -t get_outputs</code>.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "&lt;width&gt;x&lt;height&gt;[@&lt;rate&gt;[Hz]]\nConfigures the specified output to use the specified mode.\nModes are a combination of width and height (in pixels) and\na refresh rate (in Hz) that your display can be configured to use.", "example": "\"1920x1080@60Hz\"", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "mode"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.mode", "type": "null or string", "descriptionHTML": "<p>&lt;width&gt;x&lt;height&gt;[@&lt;rate&gt;[Hz]]</p>\n<p>Configures the specified output to use the specified mode.\nModes are a combination of width and height (in pixels) and\na refresh rate (in Hz) that your display can be configured to use.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "&lt;x&gt;,&lt;y&gt;\nPlaces the output at the specified position in the global coordinates\nspace.", "example": "\"1600,0\"", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "position"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.position", "type": "null or string", "descriptionHTML": "<p>&lt;x&gt;,&lt;y&gt;</p>\n<p>Places the output at the specified position in the global coordinates\nspace.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "Scales the output by the specified scale factor.", "example": "2", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "scale"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.scale", "type": "null or floating point number", "descriptionHTML": "<p>Scales the output by the specified scale factor.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "Enables or disables the specified output.", "example": "", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "status"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.status", "type": "null or one of \"enable\", \"disable\"", "descriptionHTML": "<p>Enables or disables the specified output.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "null", "description": "Sets the output transform.", "example": "", "loc": ["services", "kanshi", "profiles", "<name>", "outputs", "*", "transform"], "readOnly": false, "title": "services.kanshi.profiles.<name>.outputs.*.transform", "type": "null or one of \"normal\", \"90\", \"180\", \"270\", \"flipped\", \"flipped-90\", \"flipped-180\", \"flipped-270\"", "descriptionHTML": "<p>Sets the output transform.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "[ ]", "description": "Ordered list of directives.\nSee kanshi(5) for informations.", "example": "[\n  { include = \"path/to/included/files\"; }\n  { output.criteria = \"eDP-1\";\n    output.scale = 2;\n  }\n  { profile.name = \"undocked\";\n    profile.outputs = [\n      {\n        criteria = \"eDP-1\";\n      }\n    ];\n  }\n  { profile.name = \"docked\";\n    profile.outputs = [\n      {\n        criteria = \"eDP-1\";\n      }\n      {\n        criteria = \"Some Company ASDF 4242\";\n        transform = \"90\";\n      }\n    ];\n  }\n]\n", "loc": ["services", "kanshi", "settings"], "readOnly": false, "title": "services.kanshi.settings", "type": "list of attribute-tagged union", "descriptionHTML": "<p>Ordered list of directives.\nSee kanshi(5) for informations.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "", "description": "Include as another file from path.\nExpands shell syntax (see wordexp(3) for details).", "example": "", "loc": ["services", "kanshi", "settings", "*", "include"], "readOnly": false, "title": "services.kanshi.settings.*.include", "type": "string", "descriptionHTML": "<p>Include as another file from <em>path</em>.\nExpands shell syntax (see <em>wordexp</em>(3) for details).</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "", "description": "output attribute set.", "example": "", "loc": ["services", "kanshi", "settings", "*", "output"], "readOnly": false, "title": "services.kanshi.settings.*.output", "type": "submodule", "descriptionHTML": "<p>output attribute set.</p>"}, {"declarations": [], "default": "null", "description": "Enables or disables adaptive synchronization\n(aka. Variable Refresh Rate).", "example": "true", "loc": ["services", "kanshi", "settings", "*", "output", "adaptiveSync"], "readOnly": false, "title": "services.kanshi.settings.*.output.adaptiveSync", "type": "null or boolean", "descriptionHTML": "<p>Enables or disables adaptive synchronization\n(aka. Variable Refresh Rate).</p>"}, {"declarations": [], "default": "null", "description": "Defines an alias for the output", "example": "\"laptopMonitor\"", "loc": ["services", "kanshi", "settings", "*", "output", "alias"], "readOnly": false, "title": "services.kanshi.settings.*.output.alias", "type": "null or string", "descriptionHTML": "<p>Defines an alias for the output</p>"}, {"declarations": [], "default": "", "description": "The criteria can either be an output name, an output description or \"*\".\nThe latter can be used to match any output.\nOn\n{manpage}sway(1),\noutput names and descriptions can be obtained via\nswaymsg -t get_outputs.", "example": "", "loc": ["services", "kanshi", "settings", "*", "output", "criteria"], "readOnly": false, "title": "services.kanshi.settings.*.output.criteria", "type": "string", "descriptionHTML": "<p>The criteria can either be an output name, an output description or \"*\".\nThe latter can be used to match any output.</p>\n<p>On\n{manpage}<code>sway(1)</code>,\noutput names and descriptions can be obtained via\n<code>swaymsg -t get_outputs</code>.</p>"}, {"declarations": [], "default": "null", "description": "&lt;width&gt;x&lt;height&gt;[@&lt;rate&gt;[Hz]]\nConfigures the specified output to use the specified mode.\nModes are a combination of width and height (in pixels) and\na refresh rate (in Hz) that your display can be configured to use.", "example": "\"1920x1080@60Hz\"", "loc": ["services", "kanshi", "settings", "*", "output", "mode"], "readOnly": false, "title": "services.kanshi.settings.*.output.mode", "type": "null or string", "descriptionHTML": "<p>&lt;width&gt;x&lt;height&gt;[@&lt;rate&gt;[Hz]]</p>\n<p>Configures the specified output to use the specified mode.\nModes are a combination of width and height (in pixels) and\na refresh rate (in Hz) that your display can be configured to use.</p>"}, {"declarations": [], "default": "null", "description": "&lt;x&gt;,&lt;y&gt;\nPlaces the output at the specified position in the global coordinates\nspace.", "example": "\"1600,0\"", "loc": ["services", "kanshi", "settings", "*", "output", "position"], "readOnly": false, "title": "services.kanshi.settings.*.output.position", "type": "null or string", "descriptionHTML": "<p>&lt;x&gt;,&lt;y&gt;</p>\n<p>Places the output at the specified position in the global coordinates\nspace.</p>"}, {"declarations": [], "default": "null", "description": "Scales the output by the specified scale factor.", "example": "2", "loc": ["services", "kanshi", "settings", "*", "output", "scale"], "readOnly": false, "title": "services.kanshi.settings.*.output.scale", "type": "null or floating point number", "descriptionHTML": "<p>Scales the output by the specified scale factor.</p>"}, {"declarations": [], "default": "null", "description": "Enables or disables the specified output.", "example": "", "loc": ["services", "kanshi", "settings", "*", "output", "status"], "readOnly": false, "title": "services.kanshi.settings.*.output.status", "type": "null or one of \"enable\", \"disable\"", "descriptionHTML": "<p>Enables or disables the specified output.</p>"}, {"declarations": [], "default": "null", "description": "Sets the output transform.", "example": "", "loc": ["services", "kanshi", "settings", "*", "output", "transform"], "readOnly": false, "title": "services.kanshi.settings.*.output.transform", "type": "null or one of \"normal\", \"90\", \"180\", \"270\", \"flipped\", \"flipped-90\", \"flipped-180\", \"flipped-270\"", "descriptionHTML": "<p>Sets the output transform.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "", "description": "profile attribute set.", "example": "", "loc": ["services", "kanshi", "settings", "*", "profile"], "readOnly": false, "title": "services.kanshi.settings.*.profile", "type": "submodule", "descriptionHTML": "<p>profile attribute set.</p>"}, {"declarations": [], "default": "[ ]", "description": "Commands executed after the profile is successfully applied.\nNote that if you provide multiple commands, they will be\nexecuted asynchronously with no guaranteed ordering.", "example": "\"[ \\${pkg.sway}/bin/swaymsg workspace 1, move workspace to eDP-1 ]\"", "loc": ["services", "kanshi", "settings", "*", "profile", "exec"], "readOnly": false, "title": "services.kanshi.settings.*.profile.exec", "type": "(list of string) or string convertible to it", "descriptionHTML": "<p>Commands executed after the profile is successfully applied.\nNote that if you provide multiple commands, they will be\nexecuted asynchronously with no guaranteed ordering.</p>"}, {"declarations": [], "default": "\"\"", "description": "Profile name", "example": "", "loc": ["services", "kanshi", "settings", "*", "profile", "name"], "readOnly": false, "title": "services.kanshi.settings.*.profile.name", "type": "string", "descriptionHTML": "<p>Profile name</p>"}, {"declarations": [], "default": "[ ]", "description": "Outputs configuration.", "example": "", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs", "type": "list of (submodule)", "descriptionHTML": "<p>Outputs configuration.</p>"}, {"declarations": [], "default": "null", "description": "Enables or disables adaptive synchronization\n(aka. Variable Refresh Rate).", "example": "true", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "adaptiveSync"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.adaptiveSync", "type": "null or boolean", "descriptionHTML": "<p>Enables or disables adaptive synchronization\n(aka. Variable Refresh Rate).</p>"}, {"declarations": [], "default": "null", "description": "Defines an alias for the output", "example": "\"laptopMonitor\"", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "alias"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.alias", "type": "null or string", "descriptionHTML": "<p>Defines an alias for the output</p>"}, {"declarations": [], "default": "", "description": "The criteria can either be an output name, an output description or \"*\".\nThe latter can be used to match any output.\nOn\n{manpage}sway(1),\noutput names and descriptions can be obtained via\nswaymsg -t get_outputs.", "example": "", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "criteria"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.criteria", "type": "string", "descriptionHTML": "<p>The criteria can either be an output name, an output description or \"*\".\nThe latter can be used to match any output.</p>\n<p>On\n{manpage}<code>sway(1)</code>,\noutput names and descriptions can be obtained via\n<code>swaymsg -t get_outputs</code>.</p>"}, {"declarations": [], "default": "null", "description": "&lt;width&gt;x&lt;height&gt;[@&lt;rate&gt;[Hz]]\nConfigures the specified output to use the specified mode.\nModes are a combination of width and height (in pixels) and\na refresh rate (in Hz) that your display can be configured to use.", "example": "\"1920x1080@60Hz\"", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "mode"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.mode", "type": "null or string", "descriptionHTML": "<p>&lt;width&gt;x&lt;height&gt;[@&lt;rate&gt;[Hz]]</p>\n<p>Configures the specified output to use the specified mode.\nModes are a combination of width and height (in pixels) and\na refresh rate (in Hz) that your display can be configured to use.</p>"}, {"declarations": [], "default": "null", "description": "&lt;x&gt;,&lt;y&gt;\nPlaces the output at the specified position in the global coordinates\nspace.", "example": "\"1600,0\"", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "position"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.position", "type": "null or string", "descriptionHTML": "<p>&lt;x&gt;,&lt;y&gt;</p>\n<p>Places the output at the specified position in the global coordinates\nspace.</p>"}, {"declarations": [], "default": "null", "description": "Scales the output by the specified scale factor.", "example": "2", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "scale"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.scale", "type": "null or floating point number", "descriptionHTML": "<p>Scales the output by the specified scale factor.</p>"}, {"declarations": [], "default": "null", "description": "Enables or disables the specified output.", "example": "", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "status"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.status", "type": "null or one of \"enable\", \"disable\"", "descriptionHTML": "<p>Enables or disables the specified output.</p>"}, {"declarations": [], "default": "null", "description": "Sets the output transform.", "example": "", "loc": ["services", "kanshi", "settings", "*", "profile", "outputs", "*", "transform"], "readOnly": false, "title": "services.kanshi.settings.*.profile.outputs.*.transform", "type": "null or one of \"normal\", \"90\", \"180\", \"270\", \"flipped\", \"flipped-90\", \"flipped-180\", \"flipped-270\"", "descriptionHTML": "<p>Sets the output transform.</p>"}, {"declarations": [{"name": "<services/kanshi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kanshi.nix"}], "default": "config.wayland.systemd.target", "description": "Systemd target to bind to.", "example": "", "loc": ["services", "kanshi", "systemdTarget"], "readOnly": false, "title": "services.kanshi.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/kbfs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kbfs.nix"}], "default": "false", "description": "Whether to enable Keybase File System.", "example": "true", "loc": ["services", "kbfs", "enable"], "readOnly": false, "title": "services.kbfs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Keybase File System.</p>"}, {"declarations": [{"name": "<services/kbfs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kbfs.nix"}], "default": "[ ]", "description": "Additional flags to pass to the Keybase filesystem on launch.", "example": "[\n  \"-label kbfs\"\n  \"-mount-type normal\"\n]", "loc": ["services", "kbfs", "extraFlags"], "readOnly": false, "title": "services.kbfs.extraFlags", "type": "list of string", "descriptionHTML": "<p>Additional flags to pass to the Keybase filesystem on launch.</p>"}, {"declarations": [{"name": "<services/kbfs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kbfs.nix"}], "default": "\"keybase\"", "description": "Mount point for the Keybase filesystem, relative to\n{env}HOME.", "example": "", "loc": ["services", "kbfs", "mountPoint"], "readOnly": false, "title": "services.kbfs.mountPoint", "type": "string", "descriptionHTML": "<p>Mount point for the Keybase filesystem, relative to\n{env}<code>HOME</code>.</p>"}, {"declarations": [{"name": "<services/kdeconnect.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kdeconnect.nix"}], "default": "false", "description": "Whether to enable KDE connect.", "example": "true", "loc": ["services", "kdeconnect", "enable"], "readOnly": false, "title": "services.kdeconnect.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable KDE connect.</p>"}, {"declarations": [{"name": "<services/kdeconnect.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kdeconnect.nix"}], "default": "false", "description": "Whether to enable kdeconnect-indicator service.", "example": "", "loc": ["services", "kdeconnect", "indicator"], "readOnly": false, "title": "services.kdeconnect.indicator", "type": "boolean", "descriptionHTML": "<p>Whether to enable kdeconnect-indicator service.</p>"}, {"declarations": [{"name": "<services/kdeconnect.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/kdeconnect.nix"}], "default": "pkgs.kdePackages.kdeconnect-kde", "description": "The kdeconnect-kde package to use.", "example": "pkgs.plasma5Packages.kdeconnect-kde", "loc": ["services", "kdeconnect", "package"], "readOnly": false, "title": "services.kdeconnect.package", "type": "package", "descriptionHTML": "<p>The kdeconnect-kde package to use.</p>"}, {"declarations": [{"name": "<services/keybase.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/keybase.nix"}], "default": "false", "description": "Whether to enable Keybase.", "example": "true", "loc": ["services", "keybase", "enable"], "readOnly": false, "title": "services.keybase.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Keybase.</p>"}, {"declarations": [{"name": "<services/keynav.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/keynav.nix"}], "default": "false", "description": "Whether to enable keynav.", "example": "true", "loc": ["services", "keynav", "enable"], "readOnly": false, "title": "services.keynav.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable keynav.</p>"}, {"declarations": [{"name": "<services/librespot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/librespot.nix"}], "default": "false", "description": "Whether to enable Librespot (Spotify Connect speaker daemon).", "example": "true", "loc": ["services", "librespot", "enable"], "readOnly": false, "title": "services.librespot.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Librespot (Spotify Connect speaker daemon).</p>"}, {"declarations": [{"name": "<services/librespot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/librespot.nix"}], "default": "pkgs.librespot", "description": "The librespot package to use.", "example": "", "loc": ["services", "librespot", "package"], "readOnly": false, "title": "services.librespot.package", "type": "package", "descriptionHTML": "<p>The librespot package to use.</p>"}, {"declarations": [{"name": "<services/librespot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/librespot.nix"}], "default": "{ }", "description": "Command-line arguments to pass to librespot.\nBoolean values render as a flag if true, and nothing if false.\nNull values are ignored.\nAll other values are rendered as options with an argument.", "example": "", "loc": ["services", "librespot", "settings"], "readOnly": false, "title": "services.librespot.settings", "type": "attribute set of (null or boolean or string or signed integer or absolute path)", "descriptionHTML": "<p>Command-line arguments to pass to librespot.</p>\n<p>Boolean values render as a flag if true, and nothing if false.\nNull values are ignored.\nAll other values are rendered as options with an argument.</p>"}, {"declarations": [{"name": "<services/librespot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/librespot.nix"}], "default": "\"$XDG_CACHE_HOME/librespot\"", "description": "Path to a directory where files will be cached after downloading.", "example": "", "loc": ["services", "librespot", "settings", "cache"], "readOnly": false, "title": "services.librespot.settings.cache", "type": "null or absolute path", "descriptionHTML": "<p>Path to a directory where files will be cached after downloading.</p>"}, {"declarations": [{"name": "<services/librespot.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/librespot.nix"}], "default": "\"$XDG_STATE_HOME/librespot\"", "description": "Path to a directory where system files (credentials, volume) will be cached.", "example": "", "loc": ["services", "librespot", "settings", "system-cache"], "readOnly": false, "title": "services.librespot.settings.system-cache", "type": "null or absolute path", "descriptionHTML": "<p>Path to a directory where system files (credentials, volume) will be cached.</p>"}, {"declarations": [{"name": "<services/lieer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lieer.nix"}], "default": "false", "description": "Whether to enable lieer Gmail synchronization service.", "example": "true", "loc": ["services", "lieer", "enable"], "readOnly": false, "title": "services.lieer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lieer Gmail synchronization service.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "null", "description": "Path to the assets directory.", "example": "", "loc": ["services", "linux-wallpaperengine", "assetsPath"], "readOnly": false, "title": "services.linux-wallpaperengine.assetsPath", "type": "null or absolute path", "descriptionHTML": "<p>Path to the assets directory.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "null", "description": "Clamping mode for all wallpapers.", "example": "", "loc": ["services", "linux-wallpaperengine", "clamping"], "readOnly": false, "title": "services.linux-wallpaperengine.clamping", "type": "null or one of \"clamp\", \"border\", \"repeat\"", "descriptionHTML": "<p>Clamping mode for all wallpapers.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "false", "description": "Whether to enable linux-wallpaperengine, an implementation of Wallpaper Engine functionality.", "example": "true", "loc": ["services", "linux-wallpaperengine", "enable"], "readOnly": false, "title": "services.linux-wallpaperengine.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable linux-wallpaperengine, an implementation of Wallpaper Engine functionality.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "pkgs.linux-wallpaperengine", "description": "The linux-wallpaperengine package to use.", "example": "", "loc": ["services", "linux-wallpaperengine", "package"], "readOnly": false, "title": "services.linux-wallpaperengine.package", "type": "package", "descriptionHTML": "<p>The linux-wallpaperengine package to use.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "[ ]", "description": "Define wallpapers.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers", "type": "list of (submodule)", "descriptionHTML": "<p>Define wallpapers.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "true", "description": "Automute when another app is playing sound.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "audio", "automute"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.audio.automute", "type": "boolean", "descriptionHTML": "<p>Automute when another app is playing sound.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "true", "description": "Enables audio processing for background.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "audio", "processing"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.audio.processing", "type": "boolean", "descriptionHTML": "<p>Enables audio processing for background.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "false", "description": "Mutes all sound of the wallpaper.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "audio", "silent"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.audio.silent", "type": "boolean", "descriptionHTML": "<p>Mutes all sound of the wallpaper.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "[ ]", "description": "Extra arguments to pass to the linux-wallpaperengine command for this wallpaper.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "extraOptions"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to the linux-wallpaperengine command for this wallpaper.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "null", "description": "Limits the FPS to a given number.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "fps"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.fps", "type": "null or signed integer", "descriptionHTML": "<p>Limits the FPS to a given number.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "", "description": "Which monitor to display the wallpaper.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "monitor"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.monitor", "type": "string", "descriptionHTML": "<p>Which monitor to display the wallpaper.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "null", "description": "Scaling mode for this wallpaper.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "scaling"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.scaling", "type": "null or one of \"stretch\", \"fit\", \"fill\", \"default\"", "descriptionHTML": "<p>Scaling mode for this wallpaper.</p>"}, {"declarations": [{"name": "<services/linux-wallpaperengine.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/linux-wallpaperengine.nix"}], "default": "", "description": "Wallpaper ID to be used.", "example": "", "loc": ["services", "linux-wallpaperengine", "wallpapers", "*", "wallpaperId"], "readOnly": false, "title": "services.linux-wallpaperengine.wallpapers.*.wallpaperId", "type": "string", "descriptionHTML": "<p>Wallpaper ID to be used.</p>"}, {"declarations": [{"name": "<services/listenbrainz-mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/listenbrainz-mpd.nix"}], "default": "false", "description": "Whether to enable listenbrainz-mpd.", "example": "true", "loc": ["services", "listenbrainz-mpd", "enable"], "readOnly": false, "title": "services.listenbrainz-mpd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable listenbrainz-mpd.</p>"}, {"declarations": [{"name": "<services/listenbrainz-mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/listenbrainz-mpd.nix"}], "default": "pkgs.listenbrainz-mpd", "description": "The listenbrainz-mpd package to use.", "example": "", "loc": ["services", "listenbrainz-mpd", "package"], "readOnly": false, "title": "services.listenbrainz-mpd.package", "type": "null or package", "descriptionHTML": "<p>The listenbrainz-mpd package to use.</p>"}, {"declarations": [{"name": "<services/listenbrainz-mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/listenbrainz-mpd.nix"}], "default": "{ }", "description": "Configuration for listenbrainz-mpd written to\n{file}$XDG_CONFIG_HOME/listenbrainz-mpd/config.toml.", "example": "{\n  submission = {\n    token_file = \"/run/secrets/listenbrainz-mpd\";\n  };\n}", "loc": ["services", "listenbrainz-mpd", "settings"], "readOnly": false, "title": "services.listenbrainz-mpd.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration for listenbrainz-mpd written to\n{file}<code>$XDG_CONFIG_HOME/listenbrainz-mpd/config.toml</code>.</p>"}, {"declarations": [{"name": "<services/lorri.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lorri.nix"}], "default": "false", "description": "Whether to enable lorri build daemon.", "example": "true", "loc": ["services", "lorri", "enable"], "readOnly": false, "title": "services.lorri.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable lorri build daemon.</p>"}, {"declarations": [{"name": "<services/lorri.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lorri.nix"}], "default": "false", "description": "Whether to enable lorri build notifications.", "example": "true", "loc": ["services", "lorri", "enableNotifications"], "readOnly": false, "title": "services.lorri.enableNotifications", "type": "boolean", "descriptionHTML": "<p>Whether to enable lorri build notifications.</p>"}, {"declarations": [{"name": "<services/lorri.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lorri.nix"}], "default": "pkgs.nix", "description": "Which nix package to use.", "example": "pkgs.nixVersions.unstable", "loc": ["services", "lorri", "nixPackage"], "readOnly": false, "title": "services.lorri.nixPackage", "type": "package", "descriptionHTML": "<p>Which nix package to use.</p>"}, {"declarations": [{"name": "<services/lorri.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lorri.nix"}], "default": "pkgs.lorri", "description": "The lorri package to use.", "example": "", "loc": ["services", "lorri", "package"], "readOnly": false, "title": "services.lorri.package", "type": "package", "descriptionHTML": "<p>The lorri package to use.</p>"}, {"declarations": [{"name": "<services/ludusavi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ludusavi.nix"}], "default": "false", "description": "Send a notification message after a successful backup.", "example": "", "loc": ["services", "ludusavi", "backupNotification"], "readOnly": false, "title": "services.ludusavi.backupNotification", "type": "boolean", "descriptionHTML": "<p>Send a notification message after a successful backup.</p>"}, {"declarations": [{"name": "<services/ludusavi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ludusavi.nix"}], "default": "null", "description": "Path to a Ludusavi config.yaml. Mutually exclusive with the settings option.\nSee https://github.com/mtkennerly/ludusavi/blob/master/docs/help/configuration-file.md for available options.", "example": "", "loc": ["services", "ludusavi", "configFile"], "readOnly": false, "title": "services.ludusavi.configFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to a Ludusavi <code>config.yaml</code>. Mutually exclusive with the <code>settings</code> option.\nSee https://github.com/mtkennerly/ludusavi/blob/master/docs/help/configuration-file.md for available options.</p>"}, {"declarations": [{"name": "<services/ludusavi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ludusavi.nix"}], "default": "false", "description": "Whether to enable Ludusavi game backup tool.", "example": "true", "loc": ["services", "ludusavi", "enable"], "readOnly": false, "title": "services.ludusavi.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Ludusavi game backup tool.</p>"}, {"declarations": [{"name": "<services/ludusavi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ludusavi.nix"}], "default": "\"daily\"", "description": "How often to run ludusavi. This value is passed to the systemd\ntimer configuration as the onCalendar option.  See\n{manpage}systemd.time(7)\nfor more information about the format.", "example": "\"*-*-* 8:00:00\"", "loc": ["services", "ludusavi", "frequency"], "readOnly": false, "title": "services.ludusavi.frequency", "type": "string", "descriptionHTML": "<p>How often to run ludusavi. This value is passed to the systemd\ntimer configuration as the onCalendar option.  See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>"}, {"declarations": [{"name": "<services/ludusavi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ludusavi.nix"}], "default": "pkgs.ludusavi", "description": "The ludusavi package to use.", "example": "", "loc": ["services", "ludusavi", "package"], "readOnly": false, "title": "services.ludusavi.package", "type": "package", "descriptionHTML": "<p>The ludusavi package to use.</p>"}, {"declarations": [{"name": "<services/ludusavi.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ludusavi.nix"}], "default": "{\n  backup = {\n    path = \"$XDG_STATE_HOME/backups/ludusavi\";\n  };\n  manifest = {\n    url = \"https://raw.githubusercontent.com/mtkennerly/ludusavi-manifest/master/data/manifest.yaml\";\n  };\n  restore = {\n    path = \"$XDG_STATE_HOME/backups/ludusavi\";\n  };\n  roots = [ ];\n}", "description": "Ludusavi configuration as an attribute set. See\nhttps://github.com/mtkennerly/ludusavi#configuration-file\nfor available options.", "example": "{\n  backup = {\n    path = \"~/.local/state/backups/ludusavi\";\n  };\n  language = \"en-US\";\n  restore = {\n    path = \"~/.local/state/backups/ludusavi\";\n  };\n  roots = [\n    {\n      path = \"~/.local/share/Steam\";\n      store = \"steam\";\n    }\n  ];\n  theme = \"light\";\n}", "loc": ["services", "ludusavi", "settings"], "readOnly": false, "title": "services.ludusavi.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Ludusavi configuration as an attribute set. See\nhttps://github.com/mtkennerly/ludusavi#configuration-file\nfor available options.</p>"}, {"declarations": [{"name": "<services/lxqt-policykit-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lxqt-policykit-agent.nix"}], "default": "false", "description": "Whether to enable LXQT Policykit Agent.", "example": "true", "loc": ["services", "lxqt-policykit-agent", "enable"], "readOnly": false, "title": "services.lxqt-policykit-agent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable LXQT Policykit Agent.</p>"}, {"declarations": [{"name": "<services/lxqt-policykit-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/lxqt-policykit-agent.nix"}], "default": "pkgs.lxqt.lxqt-policykit", "description": "The lxqt-policykit package to use.", "example": "", "loc": ["services", "lxqt-policykit-agent", "package"], "readOnly": false, "title": "services.lxqt-policykit-agent.package", "type": "package", "descriptionHTML": "<p>The lxqt-policykit package to use.</p>"}, {"declarations": [{"name": "<services/macos-remap-keys/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/macos-remap-keys/default.nix"}], "default": "false", "description": "Whether to enable macOS key remapping service.", "example": "true", "loc": ["services", "macos-remap-keys", "enable"], "readOnly": false, "title": "services.macos-remap-keys.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable macOS key remapping service.</p>"}, {"declarations": [{"name": "<services/macos-remap-keys/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/macos-remap-keys/default.nix"}], "default": "{ }", "description": "Mapping of keyboard keys to remap", "example": "{\n  Capslock = \"Escape\";\n  SquareBracketOpen = \"SquareBracketClose\";\n}", "loc": ["services", "macos-remap-keys", "keyboard"], "readOnly": false, "title": "services.macos-remap-keys.keyboard", "type": "attribute set of string", "descriptionHTML": "<p>Mapping of keyboard keys to remap</p>"}, {"declarations": [{"name": "<services/macos-remap-keys/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/macos-remap-keys/default.nix"}], "default": "{ }", "description": "Mapping of keypad keys to remap", "example": "{\n  Enter = \"Equal\";\n  Plus = \"Minus\";\n}", "loc": ["services", "macos-remap-keys", "keypad"], "readOnly": false, "title": "services.macos-remap-keys.keypad", "type": "attribute set of string", "descriptionHTML": "<p>Mapping of keypad keys to remap</p>"}, {"declarations": [{"name": "<services/mako.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mako.nix"}], "default": "false", "description": "Whether to enable mako.", "example": "true", "loc": ["services", "mako", "enable"], "readOnly": false, "title": "services.mako.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mako.</p>"}, {"declarations": [{"name": "<services/mako.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mako.nix"}], "default": "\"\"", "description": "Additional configuration lines to inject directly into the generated config file.", "example": "[urgency=low]\nborder-color=#b8bb26\n", "loc": ["services", "mako", "extraConfig"], "readOnly": false, "title": "services.mako.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration lines to inject directly into the generated config file.</p>"}, {"declarations": [{"name": "<services/mako.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mako.nix"}], "default": "pkgs.mako", "description": "The mako package to use.", "example": "", "loc": ["services", "mako", "package"], "readOnly": false, "title": "services.mako.package", "type": "package", "descriptionHTML": "<p>The mako package to use.</p>"}, {"declarations": [{"name": "<services/mako.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mako.nix"}], "default": "{ }", "description": "Configuration settings for mako. Can include both global settings and sections.\nAll available options can be found here:\nhttps://github.com/emersion/mako/blob/master/doc/mako.5.scd.", "example": "{\n  \"actionable=true\" = {\n    anchor = \"top-left\";\n  };\n  actions = true;\n  anchor = \"top-right\";\n  background-color = \"#000000\";\n  border-color = \"#FFFFFF\";\n  border-radius = 0;\n  default-timeout = 0;\n  font = \"monospace 10\";\n  height = 100;\n  icons = true;\n  ignore-timeout = false;\n  layer = \"top\";\n  margin = 10;\n  markup = true;\n  width = 300;\n}", "loc": ["services", "mako", "settings"], "readOnly": false, "title": "services.mako.settings", "type": "attribute set of (INI atom (null, bool, int, float or string) or attribute set of (INI atom (null, bool, int, float or string)))", "descriptionHTML": "<p>Configuration settings for mako. Can include both global settings and sections.\nAll available options can be found here:\n<a href=\"https://github.com/emersion/mako/blob/master/doc/mako.5.scd\">https://github.com/emersion/mako/blob/master/doc/mako.5.scd</a>.</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "null", "description": "Optional configuration file to link to use instead of\nthe default file ({file}~/.mbsyncrc).", "example": "", "loc": ["services", "mbsync", "configFile"], "readOnly": false, "title": "services.mbsync.configFile", "type": "null or absolute path", "descriptionHTML": "<p>Optional configuration file to link to use instead of\nthe default file ({file}<code>~/.mbsyncrc</code>).</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "false", "description": "Whether to enable mbsync.", "example": "true", "loc": ["services", "mbsync", "enable"], "readOnly": false, "title": "services.mbsync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mbsync.</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "\"*:0/5\"", "description": "How often to run mbsync.  This value is passed to the systemd\ntimer configuration as the onCalendar option.  See\n{manpage}systemd.time(7)\nfor more information about the format.", "example": "", "loc": ["services", "mbsync", "frequency"], "readOnly": false, "title": "services.mbsync.frequency", "type": "string", "descriptionHTML": "<p>How often to run mbsync.  This value is passed to the systemd\ntimer configuration as the onCalendar option.  See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "pkgs.isync", "description": "The isync package to use.", "example": "", "loc": ["services", "mbsync", "package"], "readOnly": false, "title": "services.mbsync.package", "type": "package", "descriptionHTML": "<p>The isync package to use.</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "null", "description": "An optional command to run after mbsync executes successfully.\nThis is useful for running mailbox indexing tools.", "example": "\"\\${pkgs.mu}/bin/mu index\"", "loc": ["services", "mbsync", "postExec"], "readOnly": false, "title": "services.mbsync.postExec", "type": "null or string", "descriptionHTML": "<p>An optional command to run after mbsync executes successfully.\nThis is useful for running mailbox indexing tools.</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "null", "description": "An optional command to run before mbsync executes.  This is\nuseful for creating the directories mbsync is going to use.", "example": "\"mkdir -p %h/mail\"", "loc": ["services", "mbsync", "preExec"], "readOnly": false, "title": "services.mbsync.preExec", "type": "null or string", "descriptionHTML": "<p>An optional command to run before mbsync executes.  This is\nuseful for creating the directories mbsync is going to use.</p>"}, {"declarations": [{"name": "<services/mbsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mbsync.nix"}], "default": "true", "description": "Whether mbsync should produce verbose output.", "example": "", "loc": ["services", "mbsync", "verbose"], "readOnly": false, "title": "services.mbsync.verbose", "type": "boolean", "descriptionHTML": "<p>Whether mbsync should produce verbose output.</p>"}, {"declarations": [{"name": "<services/megasync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/megasync.nix"}], "default": "false", "description": "Whether to enable Megasync client.", "example": "true", "loc": ["services", "megasync", "enable"], "readOnly": false, "title": "services.megasync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Megasync client.</p>"}, {"declarations": [{"name": "<services/megasync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/megasync.nix"}], "default": "false", "description": "Force Megasync to run on wayland", "example": "true", "loc": ["services", "megasync", "forceWayland"], "readOnly": false, "title": "services.megasync.forceWayland", "type": "boolean", "descriptionHTML": "<p>Force Megasync to run on wayland</p>"}, {"declarations": [{"name": "<services/megasync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/megasync.nix"}], "default": "pkgs.megasync", "description": "The megasync package to use.", "example": "", "loc": ["services", "megasync", "package"], "readOnly": false, "title": "services.megasync.package", "type": "package", "descriptionHTML": "<p>The megasync package to use.</p>"}, {"declarations": [{"name": "<services/mopidy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mopidy.nix"}], "default": "false", "description": "Whether to enable Mopidy music player daemon.", "example": "true", "loc": ["services", "mopidy", "enable"], "readOnly": false, "title": "services.mopidy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Mopidy music player daemon.</p>"}, {"declarations": [{"name": "<services/mopidy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mopidy.nix"}], "default": "[ ]", "description": "Mopidy extensions that should be loaded by the service.", "example": "with pkgs; [ mopidy-spotify mopidy-mpd mopidy-mpris ]", "loc": ["services", "mopidy", "extensionPackages"], "readOnly": false, "title": "services.mopidy.extensionPackages", "type": "list of package", "descriptionHTML": "<p>Mopidy extensions that should be loaded by the service.</p>"}, {"declarations": [{"name": "<services/mopidy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mopidy.nix"}], "default": "[ ]", "description": "Extra configuration files read by Mopidy when the service starts.\nLater files in the list override earlier configuration files and\nstructured settings.", "example": "", "loc": ["services", "mopidy", "extraConfigFiles"], "readOnly": false, "title": "services.mopidy.extraConfigFiles", "type": "list of absolute path", "descriptionHTML": "<p>Extra configuration files read by Mopidy when the service starts.\nLater files in the list override earlier configuration files and\nstructured settings.</p>"}, {"declarations": [{"name": "<services/mopidy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mopidy.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/mopidy/mopidy.conf.\nSee https://docs.mopidy.com/en/latest/config/ for\nmore details.", "example": "{\n  file = {\n    media_dirs = [\n      \"$XDG_MUSIC_DIR|Music\"\n      \"~/library|Library\"\n    ];\n    follow_symlinks = true;\n    excluded_file_extensions = [\n      \".html\"\n      \".zip\"\n      \".jpg\"\n      \".jpeg\"\n      \".png\"\n    ];\n  };\n\n  # Please don't put your mopidy-spotify configuration in the public. :)\n  # Think of your Spotify Premium subscription!\n  spotify = {\n    client_id = \"CLIENT_ID\";\n    client_secret = \"CLIENT_SECRET\";\n  };\n}\n", "loc": ["services", "mopidy", "settings"], "readOnly": false, "title": "services.mopidy.settings", "type": "attribute set of attribute set of (Mopidy config value)", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/mopidy/mopidy.conf</code>.</p>\n<p>See <a href=\"https://docs.mopidy.com/en/latest/config/\">https://docs.mopidy.com/en/latest/config/</a> for\nmore details.</p>"}, {"declarations": [{"name": "<services/mpd-discord-rpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-discord-rpc.nix"}], "default": "false", "description": "Whether to enable the mpd-discord-rpc service.", "example": "true", "loc": ["services", "mpd-discord-rpc", "enable"], "readOnly": false, "title": "services.mpd-discord-rpc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the mpd-discord-rpc service.</p>"}, {"declarations": [{"name": "<services/mpd-discord-rpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-discord-rpc.nix"}], "default": "pkgs.mpd-discord-rpc", "description": "The mpd-discord-rpc package to use.", "example": "", "loc": ["services", "mpd-discord-rpc", "package"], "readOnly": false, "title": "services.mpd-discord-rpc.package", "type": "package", "descriptionHTML": "<p>The mpd-discord-rpc package to use.</p>"}, {"declarations": [{"name": "<services/mpd-discord-rpc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-discord-rpc.nix"}], "default": "{ }", "description": "Configuration included in config.toml.\nFor available options see https://github.com/JakeStanger/mpd-discord-rpc#configuration", "example": "{\n  hosts = [ \"localhost:6600\" ];\n  format = {\n    details = \"$title\";\n    state = \"On $album by $artist\";\n  };\n}\n", "loc": ["services", "mpd-discord-rpc", "settings"], "readOnly": false, "title": "services.mpd-discord-rpc.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration included in <code>config.toml</code>.\nFor available options see <a href=\"https://github.com/JakeStanger/mpd-discord-rpc#configuration\">https://github.com/JakeStanger/mpd-discord-rpc#configuration</a></p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "false", "description": "Whether to enable mpd-mpris: An implementation of the MPRIS protocol for MPD.", "example": "true", "loc": ["services", "mpd-mpris", "enable"], "readOnly": false, "title": "services.mpd-mpris.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpd-mpris: An implementation of the MPRIS protocol for MPD.</p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "null", "description": "The address where MPD is listening for connections.", "example": "\"192.168.1.1\"", "loc": ["services", "mpd-mpris", "mpd", "host"], "readOnly": false, "title": "services.mpd-mpris.mpd.host", "type": "null or string", "descriptionHTML": "<p>The address where MPD is listening for connections.</p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "null", "description": "The network used to dial to the MPD server. Check\nhttps://golang.org/pkg/net/#Dial\nfor available values (most common are \"tcp\" and \"unix\")", "example": "", "loc": ["services", "mpd-mpris", "mpd", "network"], "readOnly": false, "title": "services.mpd-mpris.mpd.network", "type": "null or string", "descriptionHTML": "<p>The network used to dial to the MPD server. Check\n<a href=\"https://golang.org/pkg/net/#Dial\">https://golang.org/pkg/net/#Dial</a>\nfor available values (most common are \"tcp\" and \"unix\")</p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "null", "description": "The password to connect to MPD.", "example": "", "loc": ["services", "mpd-mpris", "mpd", "password"], "readOnly": false, "title": "services.mpd-mpris.mpd.password", "type": "null or string", "descriptionHTML": "<p>The password to connect to MPD.</p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "null", "description": "The port number where MPD is listening for connections.", "example": "", "loc": ["services", "mpd-mpris", "mpd", "port"], "readOnly": false, "title": "services.mpd-mpris.mpd.port", "type": "null or 16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port number where MPD is listening for connections.</p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "config.services.mpd.enable", "description": "Whether to configure for the local MPD daemon. If\ntrue the network,\nhost, and port\nsettings are ignored.", "example": "", "loc": ["services", "mpd-mpris", "mpd", "useLocal"], "readOnly": false, "title": "services.mpd-mpris.mpd.useLocal", "type": "boolean", "descriptionHTML": "<p>Whether to configure for the local MPD daemon. If\n<code>true</code> the <code>network</code>,\n<code>host</code>, and <code>port</code>\nsettings are ignored.</p>"}, {"declarations": [{"name": "<services/mpd-mpris.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd-mpris.nix"}], "default": "pkgs.mpd-mpris", "description": "The mpd-mpris package to use.", "example": "", "loc": ["services", "mpd-mpris", "package"], "readOnly": false, "title": "services.mpd-mpris.package", "type": "package", "descriptionHTML": "<p>The mpd-mpris package to use.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "\"$XDG_DATA_HOME/mpd\"", "description": "The directory where MPD stores its state, tag cache,\nplaylists etc.", "example": "", "loc": ["services", "mpd", "dataDir"], "readOnly": false, "title": "services.mpd.dataDir", "type": "absolute path", "descriptionHTML": "<p>The directory where MPD stores its state, tag cache,\nplaylists etc.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "\"\\${dataDir}/tag_cache\"", "description": "The path to MPD's database. If set to\nnull the parameter is omitted from the\nconfiguration.", "example": "", "loc": ["services", "mpd", "dbFile"], "readOnly": false, "title": "services.mpd.dbFile", "type": "null or string", "descriptionHTML": "<p>The path to MPD's database. If set to\n<code>null</code> the parameter is omitted from the\nconfiguration.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "false", "description": "Whether to enable MPD, the music player daemon.", "example": "", "loc": ["services", "mpd", "enable"], "readOnly": false, "title": "services.mpd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable MPD, the music player daemon.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to MPD.", "example": "[\n  \"--verbose\"\n]", "loc": ["services", "mpd", "extraArgs"], "readOnly": false, "title": "services.mpd.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to MPD.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "\"\"", "description": "Extra directives added to to the end of MPD's configuration\nfile, {file}mpd.conf. Basic configuration\nlike file location and uid/gid is added automatically to the\nbeginning of the file. For available options see\n{manpage}mpd.conf(5).", "example": "", "loc": ["services", "mpd", "extraConfig"], "readOnly": false, "title": "services.mpd.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra directives added to to the end of MPD's configuration\nfile, {file}<code>mpd.conf</code>. Basic configuration\nlike file location and uid/gid is added automatically to the\nbeginning of the file. For available options see\n{manpage}<code>mpd.conf(5)</code>.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "${home.homeDirectory}/music    if state version < 22.11\n${xdg.userDirs.music}          if xdg.userDirs.enable == true\nundefined                      otherwise\n", "description": "The directory where mpd reads music from.\nIf  is\ntrue then the defined XDG music directory is used.\nOtherwise, you must explicitly specify a value.", "example": "", "loc": ["services", "mpd", "musicDirectory"], "readOnly": false, "title": "services.mpd.musicDirectory", "type": "absolute path or string", "descriptionHTML": "<p>The directory where mpd reads music from.</p>\n<p>If <a href=\"#opt-xdg.userDirs.enable\"></a> is\n<code>true</code> then the defined XDG music directory is used.\nOtherwise, you must explicitly specify a value.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "\"127.0.0.1\"", "description": "The address for the daemon to listen on.\nUse any to listen on all addresses.", "example": "\"any\"", "loc": ["services", "mpd", "network", "listenAddress"], "readOnly": false, "title": "services.mpd.network.listenAddress", "type": "string", "descriptionHTML": "<p>The address for the daemon to listen on.\nUse <code>any</code> to listen on all addresses.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "6600", "description": "The TCP port on which the the daemon will listen.", "example": "", "loc": ["services", "mpd", "network", "port"], "readOnly": false, "title": "services.mpd.network.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The TCP port on which the the daemon will listen.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "false", "description": "Enable systemd socket activation. This is only supported on Linux.", "example": "", "loc": ["services", "mpd", "network", "startWhenNeeded"], "readOnly": false, "title": "services.mpd.network.startWhenNeeded", "type": "boolean", "descriptionHTML": "<p>Enable systemd socket activation. This is only supported on Linux.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "pkgs.mpd", "description": "The mpd package to use.", "example": "", "loc": ["services", "mpd", "package"], "readOnly": false, "title": "services.mpd.package", "type": "package", "descriptionHTML": "<p>The mpd package to use.</p>"}, {"declarations": [{"name": "<services/mpd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpd.nix"}], "default": "\"\\${dataDir}/playlists\"", "description": "The directory where mpd stores playlists.", "example": "", "loc": ["services", "mpd", "playlistDirectory"], "readOnly": false, "title": "services.mpd.playlistDirectory", "type": "absolute path", "descriptionHTML": "<p>The directory where mpd stores playlists.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "false", "description": "Whether to enable mpDris2 the MPD to MPRIS2 bridge.", "example": "true", "loc": ["services", "mpdris2", "enable"], "readOnly": false, "title": "services.mpdris2.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpDris2 the MPD to MPRIS2 bridge.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "\"config.services.mpd.network.listenAddress\"", "description": "The address where MPD is listening for connections.", "example": "\"192.168.1.1\"", "loc": ["services", "mpdris2", "mpd", "host"], "readOnly": false, "title": "services.mpdris2.mpd.host", "type": "string", "descriptionHTML": "<p>The address where MPD is listening for connections.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "\"config.services.mpd.musicDirectory\"", "description": "If set, mpDris2 will use this directory to access music artwork.", "example": "", "loc": ["services", "mpdris2", "mpd", "musicDirectory"], "readOnly": false, "title": "services.mpdris2.mpd.musicDirectory", "type": "null or absolute path", "descriptionHTML": "<p>If set, mpDris2 will use this directory to access music artwork.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "null", "description": "The password to connect to MPD.", "example": "", "loc": ["services", "mpdris2", "mpd", "password"], "readOnly": false, "title": "services.mpdris2.mpd.password", "type": "null or string", "descriptionHTML": "<p>The password to connect to MPD.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "\"config.services.mpd.network.port\"", "description": "The port number where MPD is listening for connections.", "example": "", "loc": ["services", "mpdris2", "mpd", "port"], "readOnly": false, "title": "services.mpdris2.mpd.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port number where MPD is listening for connections.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "false", "description": "Whether to enable multimedia key support.", "example": "true", "loc": ["services", "mpdris2", "multimediaKeys"], "readOnly": false, "title": "services.mpdris2.multimediaKeys", "type": "boolean", "descriptionHTML": "<p>Whether to enable multimedia key support.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "false", "description": "Whether to enable song change notifications.", "example": "true", "loc": ["services", "mpdris2", "notifications"], "readOnly": false, "title": "services.mpdris2.notifications", "type": "boolean", "descriptionHTML": "<p>Whether to enable song change notifications.</p>"}, {"declarations": [{"name": "<services/mpdris2.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdris2.nix"}], "default": "pkgs.mpdris2", "description": "The mpdris2 package to use.", "example": "", "loc": ["services", "mpdris2", "package"], "readOnly": false, "title": "services.mpdris2.package", "type": "package", "descriptionHTML": "<p>The mpdris2 package to use.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "false", "description": "Whether to enable mpdscribble, an MPD client which submits info about tracks being played to\nLast.fm (formerly AudioScrobbler)\n.", "example": "true", "loc": ["services", "mpdscribble", "enable"], "readOnly": false, "title": "services.mpdscribble.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable mpdscribble, an MPD client which submits info about tracks being played to\nLast.fm (formerly AudioScrobbler)\n.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "{ }", "description": "Endpoints to scrobble to.\nIf the endpoint is one of \"jamendo\", \"last.fm\", \"libre.fm\", \"listenbrainz\" the url is set automatically.", "example": "{\n  \"last.fm\" = {\n    passwordFile = \"/run/secrets/lastfm_password\";\n    username = \"foo\";\n  };\n}", "loc": ["services", "mpdscribble", "endpoints"], "readOnly": false, "title": "services.mpdscribble.endpoints", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Endpoints to scrobble to.\nIf the endpoint is one of \"jamendo\", \"last.fm\", \"libre.fm\", \"listenbrainz\" the url is set automatically.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "", "description": "File containing the password, either as MD5SUM or cleartext.", "example": "", "loc": ["services", "mpdscribble", "endpoints", "<name>", "passwordFile"], "readOnly": false, "title": "services.mpdscribble.endpoints.<name>.passwordFile", "type": "null or string", "descriptionHTML": "<p>File containing the password, either as MD5SUM or cleartext.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "\"\"", "description": "The url endpoint where the scrobble API is listening.", "example": "", "loc": ["services", "mpdscribble", "endpoints", "<name>", "url"], "readOnly": false, "title": "services.mpdscribble.endpoints.<name>.url", "type": "string", "descriptionHTML": "<p>The url endpoint where the scrobble API is listening.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "", "description": "Username for the scrobble service.", "example": "", "loc": ["services", "mpdscribble", "endpoints", "<name>", "username"], "readOnly": false, "title": "services.mpdscribble.endpoints.<name>.username", "type": "string", "descriptionHTML": "<p>Username for the scrobble service.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "if config.services.mpd.network.listenAddress != \"any\"\nthen config.services.mpd.network.listenAddress\nelse \"localhost\"\n", "description": "Host for the mpdscribble daemon to search for a mpd daemon on.", "example": "", "loc": ["services", "mpdscribble", "host"], "readOnly": false, "title": "services.mpdscribble.host", "type": "string", "descriptionHTML": "<p>Host for the mpdscribble daemon to search for a mpd daemon on.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "600", "description": "How often should mpdscribble save the journal file? [seconds]", "example": "60", "loc": ["services", "mpdscribble", "journalInterval"], "readOnly": false, "title": "services.mpdscribble.journalInterval", "type": "signed integer", "descriptionHTML": "<p>How often should mpdscribble save the journal file? [seconds]</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "pkgs.mpdscribble", "description": "The mpdscribble package to use.", "example": "", "loc": ["services", "mpdscribble", "package"], "readOnly": false, "title": "services.mpdscribble.package", "type": "package", "descriptionHTML": "<p>The mpdscribble package to use.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "null", "description": "File containing the password for the mpd daemon.", "example": "", "loc": ["services", "mpdscribble", "passwordFile"], "readOnly": false, "title": "services.mpdscribble.passwordFile", "type": "null or string", "descriptionHTML": "<p>File containing the password for the mpd daemon.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "config.services.mpd.network.port", "description": "Port for the mpdscribble daemon to search for a mpd daemon on.", "example": "", "loc": ["services", "mpdscribble", "port"], "readOnly": false, "title": "services.mpdscribble.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Port for the mpdscribble daemon to search for a mpd daemon on.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "null", "description": "HTTP proxy URL.", "example": "", "loc": ["services", "mpdscribble", "proxy"], "readOnly": false, "title": "services.mpdscribble.proxy", "type": "null or string", "descriptionHTML": "<p>HTTP proxy URL.</p>"}, {"declarations": [{"name": "<services/mpdscribble.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpdscribble.nix"}], "default": "1", "description": "Log level for the mpdscribble daemon.", "example": "", "loc": ["services", "mpdscribble", "verbose"], "readOnly": false, "title": "services.mpdscribble.verbose", "type": "signed integer", "descriptionHTML": "<p>Log level for the mpdscribble daemon.</p>"}, {"declarations": [{"name": "<services/mpris-proxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/mpris-proxy.nix"}], "default": "false", "description": "Whether to enable a proxy forwarding Bluetooth MIDI controls via MPRIS2 to control media players.", "example": "true", "loc": ["services", "mpris-proxy", "enable"], "readOnly": false, "title": "services.mpris-proxy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable a proxy forwarding Bluetooth MIDI controls via MPRIS2 to control media players.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "{ }", "description": "Muchsync remotes to synchronise with.", "example": "{\n  server = {\n    frequency = \"*:0/10\";\n    remote.host = \"server.tld\";\n  };\n}\n", "loc": ["services", "muchsync", "remotes"], "readOnly": false, "title": "services.muchsync.remotes", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Muchsync remotes to synchronise with.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "\"*:0/5\"", "description": "How often to run {command}muchsync. This\nvalue is passed to the systemd timer configuration as the\nOnCalendar option. See\n{manpage}systemd.time(7)\nfor more information about the format.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "frequency"], "readOnly": false, "title": "services.muchsync.remotes.<name>.frequency", "type": "string", "descriptionHTML": "<p>How often to run {command}<code>muchsync</code>. This\nvalue is passed to the systemd timer configuration as the\n<code>OnCalendar</code> option. See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "false", "description": "Check for locally modified files.\nWithout this option, muchsync assumes that files in a maildir are\nnever edited.\n{option}checkForModifiedFiles disables certain\noptimizations so as to make muchsync at least check the timestamp on\nevery file, which will detect modified files at the cost of a longer\nstartup time.\nThis option is useful if your software regularly modifies the\ncontents of mail files (e.g., because you are running offlineimap\nwith \"synclabels = yes\").", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "local", "checkForModifiedFiles"], "readOnly": false, "title": "services.muchsync.remotes.<name>.local.checkForModifiedFiles", "type": "boolean", "descriptionHTML": "<p>Check for locally modified files.\nWithout this option, muchsync assumes that files in a maildir are\nnever edited.</p>\n<p>{option}<code>checkForModifiedFiles</code> disables certain\noptimizations so as to make muchsync at least check the timestamp on\nevery file, which will detect modified files at the cost of a longer\nstartup time.</p>\n<p>This option is useful if your software regularly modifies the\ncontents of mail files (e.g., because you are running offlineimap\nwith \"synclabels = yes\").</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "true", "description": "Whether to begin the synchronisation by running\n{command}notmuch new locally.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "local", "importNew"], "readOnly": false, "title": "services.muchsync.remotes.<name>.local.importNew", "type": "boolean", "descriptionHTML": "<p>Whether to begin the synchronisation by running\n{command}<code>notmuch new</code> locally.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "false", "description": "Check for modified files on the remote side.\nWithout this option, muchsync assumes that files in a maildir are\nnever edited.\n{option}checkForModifiedFiles disables certain\noptimizations so as to make muchsync at least check the timestamp on\nevery file, which will detect modified files at the cost of a longer\nstartup time.\nThis option is useful if your software regularly modifies the\ncontents of mail files (e.g., because you are running offlineimap\nwith \"synclabels = yes\").", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "remote", "checkForModifiedFiles"], "readOnly": false, "title": "services.muchsync.remotes.<name>.remote.checkForModifiedFiles", "type": "boolean", "descriptionHTML": "<p>Check for modified files on the remote side.\nWithout this option, muchsync assumes that files in a maildir are\nnever edited.</p>\n<p>{option}<code>checkForModifiedFiles</code> disables certain\noptimizations so as to make muchsync at least check the timestamp on\nevery file, which will detect modified files at the cost of a longer\nstartup time.</p>\n<p>This option is useful if your software regularly modifies the\ncontents of mail files (e.g., because you are running offlineimap\nwith \"synclabels = yes\").</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "", "description": "Remote SSH\u00a0host to synchronize with.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "remote", "host"], "readOnly": false, "title": "services.muchsync.remotes.<name>.remote.host", "type": "string", "descriptionHTML": "<p>Remote SSH\u00a0host to synchronize with.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "true", "description": "Whether to begin the synchronisation by running\n{command}notmuch new on the remote side.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "remote", "importNew"], "readOnly": false, "title": "services.muchsync.remotes.<name>.remote.importNew", "type": "boolean", "descriptionHTML": "<p>Whether to begin the synchronisation by running\n{command}<code>notmuch new</code> on the remote side.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "\"$PATH/muchsync\"", "description": "Specifies the path to muchsync on the server.\nOrdinarily, muchsync should be in the default PATH on the server\nso this option is not required.\nHowever, this option is useful if you have to install muchsync in\na non-standard place or wish to test development versions of the\ncode.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "remote", "muchsyncPath"], "readOnly": false, "title": "services.muchsync.remotes.<name>.remote.muchsyncPath", "type": "string", "descriptionHTML": "<p>Specifies the path to muchsync on the server.\nOrdinarily, muchsync should be in the default PATH on the server\nso this option is not required.\nHowever, this option is useful if you have to install muchsync in\na non-standard place or wish to test development versions of the\ncode.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "\"ssh -CTaxq\"", "description": "Specifies a command line to pass to {command}/bin/sh\nto execute a command on another machine.\nNote that because this string is passed to the shell,\nspecial characters including spaces may need to be escaped.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "sshCommand"], "readOnly": false, "title": "services.muchsync.remotes.<name>.sshCommand", "type": "string", "descriptionHTML": "<p>Specifies a command line to pass to {command}<code>/bin/sh</code>\nto execute a command on another machine.</p>\n<p>Note that because this string is passed to the shell,\nspecial characters including spaces may need to be escaped.</p>"}, {"declarations": [{"name": "<services/muchsync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/muchsync.nix"}], "default": "true", "description": "Whether to propagate local changes to the remote.", "example": "", "loc": ["services", "muchsync", "remotes", "<name>", "upload"], "readOnly": false, "title": "services.muchsync.remotes.<name>.upload", "type": "boolean", "descriptionHTML": "<p>Whether to propagate local changes to the remote.</p>"}, {"declarations": [{"name": "<services/network-manager-applet.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/network-manager-applet.nix"}], "default": "false", "description": "Whether to enable the Network Manager applet (nm-applet).", "example": "true", "loc": ["services", "network-manager-applet", "enable"], "readOnly": false, "title": "services.network-manager-applet.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Network Manager applet (nm-applet).</p>"}, {"declarations": [{"name": "<services/nextcloud-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nextcloud-client.nix"}], "default": "false", "description": "Whether to enable Nextcloud Client.", "example": "true", "loc": ["services", "nextcloud-client", "enable"], "readOnly": false, "title": "services.nextcloud-client.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Nextcloud Client.</p>"}, {"declarations": [{"name": "<services/nextcloud-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nextcloud-client.nix"}], "default": "pkgs.nextcloud-client", "description": "The nextcloud-client package to use.", "example": "", "loc": ["services", "nextcloud-client", "package"], "readOnly": false, "title": "services.nextcloud-client.package", "type": "package", "descriptionHTML": "<p>The nextcloud-client package to use.</p>"}, {"declarations": [{"name": "<services/nextcloud-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/nextcloud-client.nix"}], "default": "false", "description": "Whether to start the Nextcloud client in the background.", "example": "", "loc": ["services", "nextcloud-client", "startInBackground"], "readOnly": false, "title": "services.nextcloud-client.startInBackground", "type": "boolean", "descriptionHTML": "<p>Whether to start the Nextcloud client in the background.</p>"}, {"declarations": [{"name": "<services/notify-osd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/notify-osd.nix"}], "default": "false", "description": "Whether to enable notify-osd.", "example": "true", "loc": ["services", "notify-osd", "enable"], "readOnly": false, "title": "services.notify-osd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable notify-osd.</p>"}, {"declarations": [{"name": "<services/notify-osd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/notify-osd.nix"}], "default": "pkgs.notify-osd", "description": "The notify-osd package to use.", "example": "", "loc": ["services", "notify-osd", "package"], "readOnly": false, "title": "services.notify-osd.package", "type": "package", "descriptionHTML": "<p>The notify-osd package to use.</p>"}, {"declarations": [{"name": "<services/ollama.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ollama.nix"}], "default": "null", "description": "What interface to use for hardware acceleration.\n\nnull: default behavior\nif nixpkgs.config.rocmSupport is enabled, uses \"rocm\"\nif nixpkgs.config.cudaSupport is enabled, uses \"cuda\"\notherwise defaults to false\nfalse: disable GPU, only use CPU\n\"rocm\": supported by most modern AMD GPUs\nmay require overriding gpu type with services.ollama.rocmOverrideGfx\n    if rocm doesn't detect your AMD gpu\n\"cuda\": supported by most modern NVIDIA GPUs", "example": "\"rocm\"", "loc": ["services", "ollama", "acceleration"], "readOnly": false, "title": "services.ollama.acceleration", "type": "null or one of false, \"rocm\", \"cuda\"", "descriptionHTML": "<p>What interface to use for hardware acceleration.</p>\n<ul>\n<li><code>null</code>: default behavior</li>\n<li>if <code>nixpkgs.config.rocmSupport</code> is enabled, uses <code>\"rocm\"</code></li>\n<li>if <code>nixpkgs.config.cudaSupport</code> is enabled, uses <code>\"cuda\"</code></li>\n<li>otherwise defaults to <code>false</code></li>\n<li><code>false</code>: disable GPU, only use CPU</li>\n<li><code>\"rocm\"</code>: supported by most modern AMD GPUs</li>\n<li>may require overriding gpu type with <code>services.ollama.rocmOverrideGfx</code>\n    if rocm doesn't detect your AMD gpu</li>\n<li><code>\"cuda\"</code>: supported by most modern NVIDIA GPUs</li>\n</ul>"}, {"declarations": [{"name": "<services/ollama.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ollama.nix"}], "default": "false", "description": "Whether to enable ollama server for local large language models.", "example": "true", "loc": ["services", "ollama", "enable"], "readOnly": false, "title": "services.ollama.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable ollama server for local large language models.</p>"}, {"declarations": [{"name": "<services/ollama.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ollama.nix"}], "default": "{ }", "description": "Set arbitrary environment variables for the ollama service.\nBe aware that these are only seen by the ollama server (systemd service),\nnot normal invocations like ollama run.\nSince ollama run is mostly a shell around the ollama server, this is usually sufficient.", "example": "{\n  HIP_VISIBLE_DEVICES = \"0,1\";\n  OLLAMA_LLM_LIBRARY = \"cpu\";\n}", "loc": ["services", "ollama", "environmentVariables"], "readOnly": false, "title": "services.ollama.environmentVariables", "type": "attribute set of string", "descriptionHTML": "<p>Set arbitrary environment variables for the ollama service.</p>\n<p>Be aware that these are only seen by the ollama server (systemd service),\nnot normal invocations like <code>ollama run</code>.\nSince <code>ollama run</code> is mostly a shell around the ollama server, this is usually sufficient.</p>"}, {"declarations": [{"name": "<services/ollama.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ollama.nix"}], "default": "\"127.0.0.1\"", "description": "The host address which the ollama server HTTP interface listens to.", "example": "\"[::]\"", "loc": ["services", "ollama", "host"], "readOnly": false, "title": "services.ollama.host", "type": "string", "descriptionHTML": "<p>The host address which the ollama server HTTP interface listens to.</p>"}, {"declarations": [{"name": "<services/ollama.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ollama.nix"}], "default": "pkgs.ollama", "description": "The ollama package to use.", "example": "", "loc": ["services", "ollama", "package"], "readOnly": false, "title": "services.ollama.package", "type": "package", "descriptionHTML": "<p>The ollama package to use.</p>"}, {"declarations": [{"name": "<services/ollama.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ollama.nix"}], "default": "11434", "description": "Which port the ollama server listens to.", "example": "11111", "loc": ["services", "ollama", "port"], "readOnly": false, "title": "services.ollama.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>Which port the ollama server listens to.</p>"}, {"declarations": [{"name": "<services/opensnitch-ui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/opensnitch-ui.nix"}], "default": "false", "description": "Whether to enable Opensnitch client.", "example": "true", "loc": ["services", "opensnitch-ui", "enable"], "readOnly": false, "title": "services.opensnitch-ui.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Opensnitch client.</p>"}, {"declarations": [{"name": "<services/opensnitch-ui.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/opensnitch-ui.nix"}], "default": "pkgs.opensnitch-ui", "description": "The opensnitch-ui package to use.", "example": "", "loc": ["services", "opensnitch-ui", "package"], "readOnly": false, "title": "services.opensnitch-ui.package", "type": "package", "descriptionHTML": "<p>The opensnitch-ui package to use.</p>"}, {"declarations": [{"name": "<services/osmscout-server.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/osmscout-server.nix"}], "default": "false", "description": "Whether to enable OSM Scout Server.", "example": "true", "loc": ["services", "osmscout-server", "enable"], "readOnly": false, "title": "services.osmscout-server.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable OSM Scout Server.</p>"}, {"declarations": [{"name": "<services/osmscout-server.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/osmscout-server.nix"}], "default": "\"127.0.0.1\"", "description": "The address for the server to listen on.", "example": "", "loc": ["services", "osmscout-server", "network", "listenAddress"], "readOnly": false, "title": "services.osmscout-server.network.listenAddress", "type": "string", "descriptionHTML": "<p>The address for the server to listen on.</p>"}, {"declarations": [{"name": "<services/osmscout-server.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/osmscout-server.nix"}], "default": "8553", "description": "The TCP port on which the server will listen.", "example": "", "loc": ["services", "osmscout-server", "network", "port"], "readOnly": false, "title": "services.osmscout-server.network.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The TCP port on which the server will listen.</p>"}, {"declarations": [{"name": "<services/osmscout-server.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/osmscout-server.nix"}], "default": "true", "description": "Enable systemd socket activation.", "example": "", "loc": ["services", "osmscout-server", "network", "startWhenNeeded"], "readOnly": false, "title": "services.osmscout-server.network.startWhenNeeded", "type": "boolean", "descriptionHTML": "<p>Enable systemd socket activation.</p>"}, {"declarations": [{"name": "<services/osmscout-server.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/osmscout-server.nix"}], "default": "pkgs.osmscout-server", "description": "The osmscout-server package to use.", "example": "", "loc": ["services", "osmscout-server", "package"], "readOnly": false, "title": "services.osmscout-server.package", "type": "package", "descriptionHTML": "<p>The osmscout-server package to use.</p>"}, {"declarations": [{"name": "<services/owncloud-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/owncloud-client.nix"}], "default": "false", "description": "Whether to enable Owncloud Client.", "example": "true", "loc": ["services", "owncloud-client", "enable"], "readOnly": false, "title": "services.owncloud-client.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Owncloud Client.</p>"}, {"declarations": [{"name": "<services/owncloud-client.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/owncloud-client.nix"}], "default": "pkgs.owncloud-client", "description": "The owncloud-client package to use.", "example": "", "loc": ["services", "owncloud-client", "package"], "readOnly": false, "title": "services.owncloud-client.package", "type": "package", "descriptionHTML": "<p>The owncloud-client package to use.</p>"}, {"declarations": [{"name": "<services/pantalaimon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pantalaimon.nix"}], "default": "false", "description": "Whether to enable Pantalaimon, an E2EE aware proxy daemon for matrix clients.", "example": "true", "loc": ["services", "pantalaimon", "enable"], "readOnly": false, "title": "services.pantalaimon.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Pantalaimon, an E2EE aware proxy daemon for matrix clients.</p>"}, {"declarations": [{"name": "<services/pantalaimon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pantalaimon.nix"}], "default": "pkgs.pantalaimon", "description": "The pantalaimon package to use.", "example": "", "loc": ["services", "pantalaimon", "package"], "readOnly": false, "title": "services.pantalaimon.package", "type": "package", "descriptionHTML": "<p>The pantalaimon package to use.</p>"}, {"declarations": [{"name": "<services/pantalaimon.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pantalaimon.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/pantalaimon/pantalaimon.conf.\nSee https://github.com/matrix-org/pantalaimon/blob/master/docs/manpantalaimon.5.md or\n{manpage}pantalaimon(5)\nfor options.", "example": "{\n  Default = {\n    LogLevel = \"Debug\";\n    SSL = true;\n  };\n  local-matrix = {\n    Homeserver = \"https://matrix.org\";\n    ListenAddress = \"127.0.0.1\";\n    ListenPort = 8008;\n  };\n}\n", "loc": ["services", "pantalaimon", "settings"], "readOnly": false, "title": "services.pantalaimon.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/pantalaimon/pantalaimon.conf</code>.</p>\n<p>See <a href=\"https://github.com/matrix-org/pantalaimon/blob/master/docs/manpantalaimon.5.md\">https://github.com/matrix-org/pantalaimon/blob/master/docs/manpantalaimon.5.md</a> or\n{manpage}<code>pantalaimon(5)</code>\nfor options.</p>"}, {"declarations": [{"name": "<services/parcellite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/parcellite.nix"}], "default": "false", "description": "Whether to enable Parcellite.", "example": "true", "loc": ["services", "parcellite", "enable"], "readOnly": false, "title": "services.parcellite.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Parcellite.</p>"}, {"declarations": [{"name": "<services/parcellite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/parcellite.nix"}], "default": "[ ]", "description": "Command line arguments passed to Parcellite.", "example": "[\n  \"--no-icon\"\n]", "loc": ["services", "parcellite", "extraOptions"], "readOnly": false, "title": "services.parcellite.extraOptions", "type": "list of string", "descriptionHTML": "<p>Command line arguments passed to Parcellite.</p>"}, {"declarations": [{"name": "<services/parcellite.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/parcellite.nix"}], "default": "pkgs.parcellite", "description": "The parcellite package to use.", "example": "pkgs.clipit", "loc": ["services", "parcellite", "package"], "readOnly": false, "title": "services.parcellite.package", "type": "package", "descriptionHTML": "<p>The parcellite package to use.</p>"}, {"declarations": [{"name": "<services/pass-secret-service.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pass-secret-service.nix"}], "default": "false", "description": "Whether to enable Pass libsecret service.", "example": "true", "loc": ["services", "pass-secret-service", "enable"], "readOnly": false, "title": "services.pass-secret-service.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Pass libsecret service.</p>"}, {"declarations": [{"name": "<services/pass-secret-service.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pass-secret-service.nix"}], "default": "pkgs.pass-secret-service", "description": "The pass-secret-service package to use.", "example": "", "loc": ["services", "pass-secret-service", "package"], "readOnly": false, "title": "services.pass-secret-service.package", "type": "package", "descriptionHTML": "<p>The pass-secret-service package to use.</p>"}, {"declarations": [{"name": "<services/pass-secret-service.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pass-secret-service.nix"}], "default": "\"$HOME/.password-store\"", "description": "Absolute path to password store. Defaults to\n{file}$HOME/.password-store if the\n{option}programs.password-store module is not enabled, and\n{option}programs.password-store.settings.PASSWORD_STORE_DIR if it is.", "example": "\"/home/user/.local/share/password-store\"", "loc": ["services", "pass-secret-service", "storePath"], "readOnly": false, "title": "services.pass-secret-service.storePath", "type": "null or string", "descriptionHTML": "<p>Absolute path to password store. Defaults to\n{file}<code>$HOME/.password-store</code> if the\n{option}<code>programs.password-store</code> module is not enabled, and\n{option}<code>programs.password-store.settings.PASSWORD_STORE_DIR</code> if it is.</p>"}, {"declarations": [{"name": "<services/pasystray.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pasystray.nix"}], "default": "false", "description": "Whether to enable PulseAudio system tray.", "example": "true", "loc": ["services", "pasystray", "enable"], "readOnly": false, "title": "services.pasystray.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable PulseAudio system tray.</p>"}, {"declarations": [{"name": "<services/pasystray.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pasystray.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to {command}pasystray.", "example": "", "loc": ["services", "pasystray", "extraOptions"], "readOnly": false, "title": "services.pasystray.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to {command}<code>pasystray</code>.</p>"}, {"declarations": [{"name": "<services/pbgopy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pbgopy.nix"}], "default": "\"24h\"", "description": "The TTL for the cache. Use \"0s\" to disable it.", "example": "\"10m\"", "loc": ["services", "pbgopy", "cache", "ttl"], "readOnly": false, "title": "services.pbgopy.cache.ttl", "type": "string", "descriptionHTML": "<p>The TTL for the cache. Use <code>\"0s\"</code> to disable it.</p>"}, {"declarations": [{"name": "<services/pbgopy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pbgopy.nix"}], "default": "false", "description": "Whether to enable pbgopy.", "example": "true", "loc": ["services", "pbgopy", "enable"], "readOnly": false, "title": "services.pbgopy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable pbgopy.</p>"}, {"declarations": [{"name": "<services/pbgopy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pbgopy.nix"}], "default": "null", "description": "Basic HTTP authentication's username and password. Both the username and\npassword are escaped.", "example": "\"user:pass\"", "loc": ["services", "pbgopy", "httpAuth"], "readOnly": false, "title": "services.pbgopy.httpAuth", "type": "null or string", "descriptionHTML": "<p>Basic HTTP authentication's username and password. Both the username and\npassword are escaped.</p>"}, {"declarations": [{"name": "<services/pbgopy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pbgopy.nix"}], "default": "9090", "description": "The port to host the pbgopy server on.", "example": "8080", "loc": ["services", "pbgopy", "port"], "readOnly": false, "title": "services.pbgopy.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port to host the pbgopy server on.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "1.0", "description": "Opacity of active windows.", "example": "0.8", "loc": ["services", "picom", "activeOpacity"], "readOnly": false, "title": "services.picom.activeOpacity", "type": "integer or floating point number between 0 and 1 (both inclusive)", "descriptionHTML": "<p>Opacity of active windows.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "\"xrender\"", "description": "Backend to use: egl, glx, xrender or xr_glx_hybrid.", "example": "", "loc": ["services", "picom", "backend"], "readOnly": false, "title": "services.picom.backend", "type": "one of \"egl\", \"glx\", \"xrender\", \"xr_glx_hybrid\"", "descriptionHTML": "<p>Backend to use: <code>egl</code>, <code>glx</code>, <code>xrender</code> or <code>xr_glx_hybrid</code>.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "false", "description": "Whether to enable Picom X11 compositor.", "example": "true", "loc": ["services", "picom", "enable"], "readOnly": false, "title": "services.picom.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Picom X11 compositor.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "[ ]", "description": "Extra arguments to be passed to the picom executable.", "example": "[ \"--legacy-backends\" ]", "loc": ["services", "picom", "extraArgs"], "readOnly": false, "title": "services.picom.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to be passed to the picom executable.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "false", "description": "Fade windows in and out.", "example": "", "loc": ["services", "picom", "fade"], "readOnly": false, "title": "services.picom.fade", "type": "boolean", "descriptionHTML": "<p>Fade windows in and out.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "10", "description": "Time between fade animation step (in ms).", "example": "5", "loc": ["services", "picom", "fadeDelta"], "readOnly": false, "title": "services.picom.fadeDelta", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Time between fade animation step (in ms).</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "[ ]", "description": "List of conditions of windows that should not be faded.\nSee picom(1) man page for more examples.", "example": "[\n  \"window_type *= 'menu'\"\n  \"name ~= 'Firefox$'\"\n  \"focused = 1\"\n]", "loc": ["services", "picom", "fadeExclude"], "readOnly": false, "title": "services.picom.fadeExclude", "type": "list of string", "descriptionHTML": "<p>List of conditions of windows that should not be faded.\nSee <code>picom(1)</code> man page for more examples.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "[\n  0.028\n  0.03\n]", "description": "Opacity change between fade steps (in and out).", "example": "[\n  0.04\n  0.04\n]", "loc": ["services", "picom", "fadeSteps"], "readOnly": false, "title": "services.picom.fadeSteps", "type": "pair of integer or floating point number between 0.01 and 1 (both inclusive)", "descriptionHTML": "<p>Opacity change between fade steps (in and out).</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "1.0", "description": "Opacity of inactive windows.", "example": "0.8", "loc": ["services", "picom", "inactiveOpacity"], "readOnly": false, "title": "services.picom.inactiveOpacity", "type": "integer or floating point number between 0.1 and 1 (both inclusive)", "descriptionHTML": "<p>Opacity of inactive windows.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "1.0", "description": "Opacity of dropdown and popup menu.", "example": "0.8", "loc": ["services", "picom", "menuOpacity"], "readOnly": false, "title": "services.picom.menuOpacity", "type": "integer or floating point number between 0 and 1 (both inclusive)", "descriptionHTML": "<p>Opacity of dropdown and popup menu.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "[ ]", "description": "Rules that control the opacity of windows, in format PERCENT:PATTERN.", "example": "[\n  \"95:class_g = 'URxvt' && !_NET_WM_STATE@:32a\"\n  \"0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'\"\n]", "loc": ["services", "picom", "opacityRules"], "readOnly": false, "title": "services.picom.opacityRules", "type": "list of string", "descriptionHTML": "<p>Rules that control the opacity of windows, in format PERCENT:PATTERN.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "pkgs.picom", "description": "The picom package to use.", "example": "", "loc": ["services", "picom", "package"], "readOnly": false, "title": "services.picom.package", "type": "package", "descriptionHTML": "<p>The picom package to use.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "{ }", "description": "Picom settings. Use this option to configure Picom settings not exposed\nin a NixOS option or to bypass one. For the available options see the\nCONFIGURATION FILES section at picom(1).", "example": "blur =\n  { method = \"gaussian\";\n    size = 10;\n    deviation = 5.0;\n  };\n", "loc": ["services", "picom", "settings"], "readOnly": false, "title": "services.picom.settings", "type": "libconfig configuration. The format consists of an attributes\nset (called a group) of settings. Each setting can be a scalar type\n(boolean, integer, floating point number or string), a list of\nscalars or a group itself\n", "descriptionHTML": "<p>Picom settings. Use this option to configure Picom settings not exposed\nin a NixOS option or to bypass one. For the available options see the\nCONFIGURATION FILES section at <code>picom(1)</code>.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "false", "description": "Draw window shadows.", "example": "", "loc": ["services", "picom", "shadow"], "readOnly": false, "title": "services.picom.shadow", "type": "boolean", "descriptionHTML": "<p>Draw window shadows.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "[ ]", "description": "List of conditions of windows that should have no shadow.\nSee picom(1) man page for more examples.", "example": "[\n  \"window_type *= 'menu'\"\n  \"name ~= 'Firefox$'\"\n  \"focused = 1\"\n]", "loc": ["services", "picom", "shadowExclude"], "readOnly": false, "title": "services.picom.shadowExclude", "type": "list of string", "descriptionHTML": "<p>List of conditions of windows that should have no shadow.\nSee <code>picom(1)</code> man page for more examples.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "[\n  -15\n  -15\n]", "description": "Left and right offset for shadows (in pixels).", "example": "[\n  -10\n  -15\n]", "loc": ["services", "picom", "shadowOffsets"], "readOnly": false, "title": "services.picom.shadowOffsets", "type": "pair of signed integer", "descriptionHTML": "<p>Left and right offset for shadows (in pixels).</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "0.75", "description": "Window shadows opacity.", "example": "0.8", "loc": ["services", "picom", "shadowOpacity"], "readOnly": false, "title": "services.picom.shadowOpacity", "type": "integer or floating point number between 0 and 1 (both inclusive)", "descriptionHTML": "<p>Window shadows opacity.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "false", "description": "Enable vertical synchronization.", "example": "", "loc": ["services", "picom", "vSync"], "readOnly": false, "title": "services.picom.vSync", "type": "boolean", "descriptionHTML": "<p>Enable vertical synchronization.</p>"}, {"declarations": [{"name": "<services/picom.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/picom.nix"}], "default": "{\n  popup_menu = { opacity = config.services.picom.menuOpacity; };\n  dropdown_menu = { opacity = config.services.picom.menuOpacity; };\n}\n", "description": "Rules for specific window types.", "example": "{ }", "loc": ["services", "picom", "wintypes"], "readOnly": false, "title": "services.picom.wintypes", "type": "attribute set", "descriptionHTML": "<p>Rules for specific window types.</p>"}, {"declarations": [{"name": "<services/plan9port.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/plan9port.nix"}], "default": "false", "description": "Whether to enable the Plan 9 file system access to host fonts.", "example": "true", "loc": ["services", "plan9port", "fontsrv", "enable"], "readOnly": false, "title": "services.plan9port.fontsrv.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Plan 9 file system access to host fonts.</p>"}, {"declarations": [{"name": "<services/plan9port.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/plan9port.nix"}], "default": "false", "description": "Whether to enable the Plan 9 file system for interprocess messaging.", "example": "true", "loc": ["services", "plan9port", "plumber", "enable"], "readOnly": false, "title": "services.plan9port.plumber.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Plan 9 file system for interprocess messaging.</p>"}, {"declarations": [{"name": "<services/playerctld.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/playerctld.nix"}], "default": "false", "description": "Whether to enable playerctld daemon.", "example": "true", "loc": ["services", "playerctld", "enable"], "readOnly": false, "title": "services.playerctld.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable playerctld daemon.</p>"}, {"declarations": [{"name": "<services/playerctld.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/playerctld.nix"}], "default": "pkgs.playerctl", "description": "The playerctl package to use.", "example": "", "loc": ["services", "playerctld", "package"], "readOnly": false, "title": "services.playerctld.package", "type": "package", "descriptionHTML": "<p>The playerctl package to use.</p>"}, {"declarations": [{"name": "<services/plex-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/plex-mpv-shim.nix"}], "default": "false", "description": "Whether to enable Plex mpv shim.", "example": "true", "loc": ["services", "plex-mpv-shim", "enable"], "readOnly": false, "title": "services.plex-mpv-shim.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Plex mpv shim.</p>"}, {"declarations": [{"name": "<services/plex-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/plex-mpv-shim.nix"}], "default": "pkgs.plex-mpv-shim", "description": "The plex-mpv-shim package to use.", "example": "", "loc": ["services", "plex-mpv-shim", "package"], "readOnly": false, "title": "services.plex-mpv-shim.package", "type": "package", "descriptionHTML": "<p>The plex-mpv-shim package to use.</p>"}, {"declarations": [{"name": "<services/plex-mpv-shim.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/plex-mpv-shim.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/plex-mpv-shim/config.json. See\nhttps://github.com/iwalton3/plex-mpv-shim/blob/master/README.md\nfor the configuration documentation.", "example": "{\n  adaptive_transcode = false;\n  allow_http = false;\n  always_transcode = false;\n  audio_ac3passthrough = false;\n  audio_dtspassthrough = false;\n  auto_play = true;\n  auto_transcode = true;\n}\n", "loc": ["services", "plex-mpv-shim", "settings"], "readOnly": false, "title": "services.plex-mpv-shim.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/plex-mpv-shim/config.json</code>. See\n<a href=\"https://github.com/iwalton3/plex-mpv-shim/blob/master/README.md\">https://github.com/iwalton3/plex-mpv-shim/blob/master/README.md</a>\nfor the configuration documentation.</p>"}, {"declarations": [{"name": "<services/podman-linux/services.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/services.nix"}], "default": "false", "description": "Automatically update the podman images.", "example": "", "loc": ["services", "podman", "autoUpdate", "enable"], "readOnly": false, "title": "services.podman.autoUpdate.enable", "type": "boolean", "descriptionHTML": "<p>Automatically update the podman images.</p>"}, {"declarations": [{"name": "<services/podman-linux/services.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/services.nix"}], "default": "\"Sun *-*-* 00:00\"", "description": "The systemd OnCalendar expression for the update. See\n{manpage}systemd.time(7) for a description of the format.", "example": "", "loc": ["services", "podman", "autoUpdate", "onCalendar"], "readOnly": false, "title": "services.podman.autoUpdate.onCalendar", "type": "string", "descriptionHTML": "<p>The systemd <code>OnCalendar</code> expression for the update. See\n{manpage}<code>systemd.time(7)</code> for a description of the format.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "{ }", "description": "Defines Podman build quadlet configurations.", "example": "", "loc": ["services", "podman", "builds"], "readOnly": false, "title": "services.podman.builds", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Defines Podman build quadlet configurations.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "null", "description": "Path of the authentication file.", "example": "", "loc": ["services", "podman", "builds", "<name>", "authFile"], "readOnly": false, "title": "services.podman.builds.<name>.authFile", "type": "null or absolute path", "descriptionHTML": "<p>Path of the authentication file.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "true", "description": "Whether to start the build on boot. Requires user lingering.", "example": "", "loc": ["services", "podman", "builds", "<name>", "autoStart"], "readOnly": false, "title": "services.podman.builds.<name>.autoStart", "type": "boolean", "descriptionHTML": "<p>Whether to start the build on boot. Requires user lingering.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "\"Service for build \\${name}\"", "description": "The description of the build.", "example": "\"My Build\"", "loc": ["services", "podman", "builds", "<name>", "description"], "readOnly": false, "title": "services.podman.builds.<name>.description", "type": "null or string", "descriptionHTML": "<p>The description of the build.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "{ }", "description": "Environment variables to set in the build.", "example": "{\n  VAR1 = \"0:100\";\n  VAR2 = true;\n  VAR3 = 5;\n}\n", "loc": ["services", "podman", "builds", "<name>", "environment"], "readOnly": false, "title": "services.podman.builds.<name>.environment", "type": "attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))", "descriptionHTML": "<p>Environment variables to set in the build.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "{ }", "description": "INI sections and values to populate the Build Quadlet.", "example": "{\n  Build = {\n    Arch = \"aarch64\";\n  };\n  Service = {\n    TimeoutStartSec = 15;\n  };\n}\n", "loc": ["services", "podman", "builds", "<name>", "extraConfig"], "readOnly": false, "title": "services.podman.builds.<name>.extraConfig", "type": "attribute set of attribute set of ((attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))) or list of (null or boolean or signed integer or string or absolute path) or null or boolean or signed integer or string or absolute path)", "descriptionHTML": "<p>INI sections and values to populate the Build Quadlet.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "[ ]", "description": "Extra arguments to pass to the podman build command.", "example": "[\n  \"--retries 5\"\n]", "loc": ["services", "podman", "builds", "<name>", "extraPodmanArgs"], "readOnly": false, "title": "services.podman.builds.<name>.extraPodmanArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to the podman build command.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "", "description": "Path to a Containerfile which contains instructions to build the image.", "example": "`\"xdg.configFile.\"containerfiles/my-img/Containerfile\"`\nor\n`\"https://github.com/.../my-img/Containerfile\"`\n", "loc": ["services", "podman", "builds", "<name>", "file"], "readOnly": false, "title": "services.podman.builds.<name>.file", "type": "string", "descriptionHTML": "<p>Path to a Containerfile which contains instructions to build the image.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "{ }", "description": "The labels to apply to the build.", "example": "{\n  app = \"myapp\";\n  some-label = \"somelabel\";\n}", "loc": ["services", "podman", "builds", "<name>", "labels"], "readOnly": false, "title": "services.podman.builds.<name>.labels", "type": "attribute set of string", "descriptionHTML": "<p>The labels to apply to the build.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "[ ]", "description": "Name associated with the build.\nFirst tag will always be \"homemanager/<name>\".", "example": "", "loc": ["services", "podman", "builds", "<name>", "tags"], "readOnly": false, "title": "services.podman.builds.<name>.tags", "type": "list of string", "descriptionHTML": "<p>Name associated with the build.\nFirst tag will always be \"homemanager/<name>\".</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "true", "description": "Require HTTPS and verification of certificates when contacting registries.", "example": "", "loc": ["services", "podman", "builds", "<name>", "tlsVerify"], "readOnly": false, "title": "services.podman.builds.<name>.tlsVerify", "type": "boolean", "descriptionHTML": "<p>Require HTTPS and verification of certificates when contacting registries.</p>"}, {"declarations": [{"name": "<services/podman-linux/builds.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/builds.nix"}], "default": "null", "description": "WorkingDirectory of the systemd unit file.", "example": "", "loc": ["services", "podman", "builds", "<name>", "workingDirectory"], "readOnly": false, "title": "services.podman.builds.<name>.workingDirectory", "type": "null or absolute path", "descriptionHTML": "<p>WorkingDirectory of the systemd unit file.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "{ }", "description": "Defines Podman container quadlet configurations.", "example": "", "loc": ["services", "podman", "containers"], "readOnly": false, "title": "services.podman.containers", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Defines Podman container quadlet configurations.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "The capabilities to add to the container.", "example": "[\n  \"CAP_DAC_OVERRIDE\"\n  \"CAP_IPC_OWNER\"\n]", "loc": ["services", "podman", "containers", "<name>", "addCapabilities"], "readOnly": false, "title": "services.podman.containers.<name>.addCapabilities", "type": "list of string", "descriptionHTML": "<p>The capabilities to add to the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "true", "description": "Whether to start the container on boot (requires user lingering).", "example": "", "loc": ["services", "podman", "containers", "<name>", "autoStart"], "readOnly": false, "title": "services.podman.containers.<name>.autoStart", "type": "boolean", "descriptionHTML": "<p>Whether to start the container on boot (requires user lingering).</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "The autoupdate policy for the container.", "example": "\"registry\"", "loc": ["services", "podman", "containers", "<name>", "autoUpdate"], "readOnly": false, "title": "services.podman.containers.<name>.autoUpdate", "type": "one of <null>, \"registry\", \"local\"", "descriptionHTML": "<p>The autoupdate policy for the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "The description of the container.", "example": "\"My Container\"", "loc": ["services", "podman", "containers", "<name>", "description"], "readOnly": false, "title": "services.podman.containers.<name>.description", "type": "null or string", "descriptionHTML": "<p>The description of the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "The devices to mount into the container", "example": "[\n  \"/dev/<host>:/dev/<container>\"\n]", "loc": ["services", "podman", "containers", "<name>", "devices"], "readOnly": false, "title": "services.podman.containers.<name>.devices", "type": "list of string", "descriptionHTML": "<p>The devices to mount into the container</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "The capabilities to drop from the container.", "example": "[\n  \"CAP_DAC_OVERRIDE\"\n  \"CAP_IPC_OWNER\"\n]", "loc": ["services", "podman", "containers", "<name>", "dropCapabilities"], "readOnly": false, "title": "services.podman.containers.<name>.dropCapabilities", "type": "list of string", "descriptionHTML": "<p>The capabilities to drop from the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "The container entrypoint.", "example": "\"/foo.sh\"", "loc": ["services", "podman", "containers", "<name>", "entrypoint"], "readOnly": false, "title": "services.podman.containers.<name>.entrypoint", "type": "null or string", "descriptionHTML": "<p>The container entrypoint.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "{ }", "description": "Environment variables to set in the container.", "example": "{\n  VAR1 = \"0:100\";\n  VAR2 = true;\n  VAR3 = 5;\n}\n", "loc": ["services", "podman", "containers", "<name>", "environment"], "readOnly": false, "title": "services.podman.containers.<name>.environment", "type": "attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))", "descriptionHTML": "<p>Environment variables to set in the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "Paths to files containing container environment variables.", "example": "[\n  \"/etc/environment\"\n  \"/etc/other-env\"\n]", "loc": ["services", "podman", "containers", "<name>", "environmentFile"], "readOnly": false, "title": "services.podman.containers.<name>.environmentFile", "type": "list of string", "descriptionHTML": "<p>Paths to files containing container environment variables.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "The command to run after the container start.", "example": "\"sleep inf\"", "loc": ["services", "podman", "containers", "<name>", "exec"], "readOnly": false, "title": "services.podman.containers.<name>.exec", "type": "null or string", "descriptionHTML": "<p>The command to run after the container start.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "{ }", "description": "INI sections and values to populate the Container Quadlet.", "example": "{\n  Container = {\n    User = 1000;\n  };\n  Service = {\n    TimeoutStartSec = 15;\n  };\n}\n", "loc": ["services", "podman", "containers", "<name>", "extraConfig"], "readOnly": false, "title": "services.podman.containers.<name>.extraConfig", "type": "attribute set of attribute set of ((attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))) or list of (null or boolean or signed integer or string or absolute path) or null or boolean or signed integer or string or absolute path)", "descriptionHTML": "<p>INI sections and values to populate the Container Quadlet.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "Extra arguments to pass to the podman run command.", "example": "[\n  \"--security-opt=no-new-privileges\"\n  \"--security-opt=seccomp=unconfined\"\n]", "loc": ["services", "podman", "containers", "<name>", "extraPodmanArgs"], "readOnly": false, "title": "services.podman.containers.<name>.extraPodmanArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to the podman run command.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "The group ID inside the container.", "example": "", "loc": ["services", "podman", "containers", "<name>", "group"], "readOnly": false, "title": "services.podman.containers.<name>.group", "type": "null or signed integer or string", "descriptionHTML": "<p>The group ID inside the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "", "description": "The container image.", "example": "\"registry.access.redhat.com/ubi9-minimal:latest\"", "loc": ["services", "podman", "containers", "<name>", "image"], "readOnly": false, "title": "services.podman.containers.<name>.image", "type": "string", "descriptionHTML": "<p>The container image.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "Set an IPv4 address for the container.", "example": "", "loc": ["services", "podman", "containers", "<name>", "ip4"], "readOnly": false, "title": "services.podman.containers.<name>.ip4", "type": "null or string", "descriptionHTML": "<p>Set an IPv4 address for the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "Set an IPv6 address for the container.", "example": "", "loc": ["services", "podman", "containers", "<name>", "ip6"], "readOnly": false, "title": "services.podman.containers.<name>.ip6", "type": "null or string", "descriptionHTML": "<p>Set an IPv6 address for the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "{ }", "description": "The labels to apply to the container.", "example": "{\n  app = \"myapp\";\n  some-label = \"somelabel\";\n}", "loc": ["services", "podman", "containers", "<name>", "labels"], "readOnly": false, "title": "services.podman.containers.<name>.labels", "type": "attribute set of string", "descriptionHTML": "<p>The labels to apply to the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "The network mode or network/s to connect the container to. Equivalent\nto podman run --network=&lt;option&gt;.", "example": "`\"host\"`\nor\n`\"bridge_network_1\"`\nor\n`[ \"bridge_network_1\" \"bridge_network_2\" ]`\n", "loc": ["services", "podman", "containers", "<name>", "network"], "readOnly": false, "title": "services.podman.containers.<name>.network", "type": "string or list of string", "descriptionHTML": "<p>The network mode or network/s to connect the container to. Equivalent\nto <code>podman run --network=&lt;option&gt;</code>.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "Network aliases for the container.", "example": "[\n  \"mycontainer\"\n  \"web\"\n]", "loc": ["services", "podman", "containers", "<name>", "networkAlias"], "readOnly": false, "title": "services.podman.containers.<name>.networkAlias", "type": "list of string", "descriptionHTML": "<p>Network aliases for the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "A mapping of ports between host and container", "example": "[\n  \"8080:80\"\n  \"8443:443\"\n]", "loc": ["services", "podman", "containers", "<name>", "ports"], "readOnly": false, "title": "services.podman.containers.<name>.ports", "type": "list of string", "descriptionHTML": "<p>A mapping of ports between host and container</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "The user ID inside the container.", "example": "", "loc": ["services", "podman", "containers", "<name>", "user"], "readOnly": false, "title": "services.podman.containers.<name>.user", "type": "null or signed integer or string", "descriptionHTML": "<p>The user ID inside the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "null", "description": "Use a user namespace for the container.", "example": "", "loc": ["services", "podman", "containers", "<name>", "userNS"], "readOnly": false, "title": "services.podman.containers.<name>.userNS", "type": "null or string", "descriptionHTML": "<p>Use a user namespace for the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/containers.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/containers.nix"}], "default": "[ ]", "description": "The volumes to mount into the container.", "example": "[\n  \"/tmp:/tmp\"\n  \"/var/run/test.secret:/etc/secret:ro\"\n]", "loc": ["services", "podman", "containers", "<name>", "volumes"], "readOnly": false, "title": "services.podman.containers.<name>.volumes", "type": "list of string", "descriptionHTML": "<p>The volumes to mount into the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "false", "description": "Whether to enable Podman, a daemonless container engine.", "example": "true", "loc": ["services", "podman", "enable"], "readOnly": false, "title": "services.podman.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Podman, a daemonless container engine.</p>"}, {"declarations": [{"name": "<services/podman-linux/options.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/options.nix"}], "default": "false", "description": "Whether to enable type checks for podman quadlets.", "example": "true", "loc": ["services", "podman", "enableTypeChecks"], "readOnly": false, "title": "services.podman.enableTypeChecks", "type": "boolean", "descriptionHTML": "<p>Whether to enable type checks for podman quadlets.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "{ }", "description": "Defines Podman image quadlet configurations.", "example": "", "loc": ["services", "podman", "images"], "readOnly": false, "title": "services.podman.images", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Defines Podman image quadlet configurations.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "null", "description": "Path of the authentication file used to connect to registry.", "example": "", "loc": ["services", "podman", "images", "<name>", "authFile"], "readOnly": false, "title": "services.podman.images.<name>.authFile", "type": "null or absolute path", "descriptionHTML": "<p>Path of the authentication file used to connect to registry.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "true", "description": "Whether to pull the image on boot. Requires user lingering.", "example": "", "loc": ["services", "podman", "images", "<name>", "autoStart"], "readOnly": false, "title": "services.podman.images.<name>.autoStart", "type": "boolean", "descriptionHTML": "<p>Whether to pull the image on boot. Requires user lingering.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "null", "description": "Path of certificates (*.{crt,cert,key}) used to connect to registry.", "example": "", "loc": ["services", "podman", "images", "<name>", "certDir"], "readOnly": false, "title": "services.podman.images.<name>.certDir", "type": "null or absolute path", "descriptionHTML": "<p>Path of certificates (*.{crt,cert,key}) used to connect to registry.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "null", "description": "Path to key used for decryption of images.", "example": "", "loc": ["services", "podman", "images", "<name>", "decryptionKeyFile"], "readOnly": false, "title": "services.podman.images.<name>.decryptionKeyFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to key used for decryption of images.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "\"Service for image \\${name}\"", "description": "The description of the image.", "example": "\"My Image\"", "loc": ["services", "podman", "images", "<name>", "description"], "readOnly": false, "title": "services.podman.images.<name>.description", "type": "null or string", "descriptionHTML": "<p>The description of the image.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "{ }", "description": "INI sections and values to populate the Image Quadlet.", "example": "{\n  Image = {\n    ContainersConfModule = \"/etc/nvd.conf\";\n  };\n}\n", "loc": ["services", "podman", "images", "<name>", "extraConfig"], "readOnly": false, "title": "services.podman.images.<name>.extraConfig", "type": "attribute set of attribute set of ((attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))) or list of (null or boolean or signed integer or string or absolute path) or null or boolean or signed integer or string or absolute path)", "descriptionHTML": "<p>INI sections and values to populate the Image Quadlet.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "[ ]", "description": "Extra arguments to pass to the podman image pull command.", "example": "[\n  \"--os=linux\"\n]", "loc": ["services", "podman", "images", "<name>", "extraPodmanArgs"], "readOnly": false, "title": "services.podman.images.<name>.extraPodmanArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to the podman image pull command.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "", "description": "Image to pull.", "example": "\"quay.io/centos/centos:latest\"", "loc": ["services", "podman", "images", "<name>", "image"], "readOnly": false, "title": "services.podman.images.<name>.image", "type": "string", "descriptionHTML": "<p>Image to pull.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "null", "description": "Password used to connect to registry. (Will be visible in nix store)", "example": "\"P@ssw0rd\"", "loc": ["services", "podman", "images", "<name>", "password"], "readOnly": false, "title": "services.podman.images.<name>.password", "type": "null or string", "descriptionHTML": "<p>Password used to connect to registry. (Will be visible in nix store)</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "null", "description": "FQIN of referenced Image when source is a file or directory archive.", "example": "\"quay.io/centos/centos:latest\"", "loc": ["services", "podman", "images", "<name>", "tag"], "readOnly": false, "title": "services.podman.images.<name>.tag", "type": "null or string", "descriptionHTML": "<p>FQIN of referenced Image when source is a file or directory archive.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "true", "description": "Require HTTPS and verification of certificates when contacting registries.", "example": "", "loc": ["services", "podman", "images", "<name>", "tlsVerify"], "readOnly": false, "title": "services.podman.images.<name>.tlsVerify", "type": "boolean", "descriptionHTML": "<p>Require HTTPS and verification of certificates when contacting registries.</p>"}, {"declarations": [{"name": "<services/podman-linux/images.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/images.nix"}], "default": "null", "description": "Username used to connect to registry.", "example": "\"bob\"", "loc": ["services", "podman", "images", "<name>", "username"], "readOnly": false, "title": "services.podman.images.<name>.username", "type": "null or string", "descriptionHTML": "<p>Username used to connect to registry.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "{ }", "description": "Defines Podman network quadlet configurations.", "example": "", "loc": ["services", "podman", "networks"], "readOnly": false, "title": "services.podman.networks", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Defines Podman network quadlet configurations.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "true", "description": "Whether to start the network on boot (requires user lingering).", "example": "", "loc": ["services", "podman", "networks", "<name>", "autoStart"], "readOnly": false, "title": "services.podman.networks.<name>.autoStart", "type": "boolean", "descriptionHTML": "<p>Whether to start the network on boot (requires user lingering).</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "null", "description": "The description of the network.", "example": "\"My Network\"", "loc": ["services", "podman", "networks", "<name>", "description"], "readOnly": false, "title": "services.podman.networks.<name>.description", "type": "null or string", "descriptionHTML": "<p>The description of the network.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "null", "description": "The network driver to use.", "example": "\"bridge\"", "loc": ["services", "podman", "networks", "<name>", "driver"], "readOnly": false, "title": "services.podman.networks.<name>.driver", "type": "null or string", "descriptionHTML": "<p>The network driver to use.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "{ }", "description": "INI sections and values to populate the Network Quadlet", "example": "{\n  Network = {\n    ContainerConfModule = \"/etc/nvd.conf\";\n  };\n  Service = {\n    TimeoutStartSec = 30;\n  };\n}\n", "loc": ["services", "podman", "networks", "<name>", "extraConfig"], "readOnly": false, "title": "services.podman.networks.<name>.extraConfig", "type": "attribute set of attribute set of ((attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))) or list of (null or boolean or signed integer or string or absolute path) or null or boolean or signed integer or string or absolute path)", "descriptionHTML": "<p>INI sections and values to populate the Network Quadlet</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "[ ]", "description": "Extra arguments to pass to the podman network create command.", "example": "[\n  \"--dns=192.168.55.1\"\n  \"--ipam-driver\"\n]", "loc": ["services", "podman", "networks", "<name>", "extraPodmanArgs"], "readOnly": false, "title": "services.podman.networks.<name>.extraPodmanArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to the podman network create command.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "null", "description": "The gateway IP to use for the network.", "example": "\"192.168.20.1\"", "loc": ["services", "podman", "networks", "<name>", "gateway"], "readOnly": false, "title": "services.podman.networks.<name>.gateway", "type": "null or string", "descriptionHTML": "<p>The gateway IP to use for the network.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "null", "description": "Whether the network should be internal", "example": "", "loc": ["services", "podman", "networks", "<name>", "internal"], "readOnly": false, "title": "services.podman.networks.<name>.internal", "type": "null or boolean", "descriptionHTML": "<p>Whether the network should be internal</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "{ }", "description": "The labels to apply to the network.", "example": "{\n  app = \"myapp\";\n  some-label = \"somelabel\";\n}", "loc": ["services", "podman", "networks", "<name>", "labels"], "readOnly": false, "title": "services.podman.networks.<name>.labels", "type": "attribute set of string", "descriptionHTML": "<p>The labels to apply to the network.</p>"}, {"declarations": [{"name": "<services/podman-linux/networks.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/networks.nix"}], "default": "null", "description": "The subnet to use for the network.", "example": "\"192.168.20.0/24\"", "loc": ["services", "podman", "networks", "<name>", "subnet"], "readOnly": false, "title": "services.podman.networks.<name>.subnet", "type": "null or string", "descriptionHTML": "<p>The subnet to use for the network.</p>"}, {"declarations": [{"name": "<services/podman-linux/options.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/options.nix"}], "default": "pkgs.podman", "description": "The podman package to use.", "example": "", "loc": ["services", "podman", "package"], "readOnly": false, "title": "services.podman.package", "type": "package", "descriptionHTML": "<p>The podman package to use.</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "{ }", "description": "containers.conf configuration", "example": "", "loc": ["services", "podman", "settings", "containers"], "readOnly": false, "title": "services.podman.settings.containers", "type": "TOML value", "descriptionHTML": "<p>containers.conf configuration</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "[ ]", "description": "mounts.conf configuration", "example": "", "loc": ["services", "podman", "settings", "mounts"], "readOnly": false, "title": "services.podman.settings.mounts", "type": "list of string", "descriptionHTML": "<p>mounts.conf configuration</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "{ }", "description": "Signature verification policy file.\nIf this option is empty the default policy file from\nskopeo will be used.", "example": "{\n  default = [ { type = \"insecureAcceptAnything\"; } ];\n  transports = {\n    docker-daemon = {\n      \"\" = [ { type = \"insecureAcceptAnything\"; } ];\n    };\n  };\n}\n", "loc": ["services", "podman", "settings", "policy"], "readOnly": false, "title": "services.podman.settings.policy", "type": "attribute set", "descriptionHTML": "<p>Signature verification policy file.\nIf this option is empty the default policy file from\n<code>skopeo</code> will be used.</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "[ ]", "description": "List of blocked repositories.", "example": "", "loc": ["services", "podman", "settings", "registries", "block"], "readOnly": false, "title": "services.podman.settings.registries.block", "type": "list of string", "descriptionHTML": "<p>List of blocked repositories.</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "[ ]", "description": "List of insecure repositories.", "example": "", "loc": ["services", "podman", "settings", "registries", "insecure"], "readOnly": false, "title": "services.podman.settings.registries.insecure", "type": "list of string", "descriptionHTML": "<p>List of insecure repositories.</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "[\n  \"docker.io\"\n]", "description": "List of repositories to search.", "example": "", "loc": ["services", "podman", "settings", "registries", "search"], "readOnly": false, "title": "services.podman.settings.registries.search", "type": "list of string", "descriptionHTML": "<p>List of repositories to search.</p>"}, {"declarations": [{"name": "<services/podman-linux/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/default.nix"}], "default": "", "description": "storage.conf configuration", "example": "", "loc": ["services", "podman", "settings", "storage"], "readOnly": false, "title": "services.podman.settings.storage", "type": "TOML value", "descriptionHTML": "<p>storage.conf configuration</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "{ }", "description": "Defines Podman volume quadlet configurations.", "example": "", "loc": ["services", "podman", "volumes"], "readOnly": false, "title": "services.podman.volumes", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Defines Podman volume quadlet configurations.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "true", "description": "Whether to create the volume on boot.", "example": "", "loc": ["services", "podman", "volumes", "<name>", "autoStart"], "readOnly": false, "title": "services.podman.volumes.<name>.autoStart", "type": "boolean", "descriptionHTML": "<p>Whether to create the volume on boot.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "true", "description": "Copy content of the image located at the mountpoint of the volume on first run.", "example": "", "loc": ["services", "podman", "volumes", "<name>", "copy"], "readOnly": false, "title": "services.podman.volumes.<name>.copy", "type": "boolean", "descriptionHTML": "<p>Copy content of the image located at the mountpoint of the volume on first run.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "\"Service for volume \\${name}\"", "description": "The description of the volume.", "example": "\"My Volume\"", "loc": ["services", "podman", "volumes", "<name>", "description"], "readOnly": false, "title": "services.podman.volumes.<name>.description", "type": "null or string", "descriptionHTML": "<p>The description of the volume.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "null", "description": "The path of a device which is mounted for the volume.", "example": "\"tmpfs\"", "loc": ["services", "podman", "volumes", "<name>", "device"], "readOnly": false, "title": "services.podman.volumes.<name>.device", "type": "null or string", "descriptionHTML": "<p>The path of a device which is mounted for the volume.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "null", "description": "The volume driver to use.", "example": "\"image\"", "loc": ["services", "podman", "volumes", "<name>", "driver"], "readOnly": false, "title": "services.podman.volumes.<name>.driver", "type": "null or string", "descriptionHTML": "<p>The volume driver to use.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "{ }", "description": "INI sections and values to populate the Volume Quadlet.", "example": "{\n  Volume = {\n    ContainerConfModule = \"/etc/nvd.conf\";\n  };\n}\n", "loc": ["services", "podman", "volumes", "<name>", "extraConfig"], "readOnly": false, "title": "services.podman.volumes.<name>.extraConfig", "type": "attribute set of attribute set of ((attribute set of (null or boolean or signed integer or string or absolute path or list of (null or boolean or signed integer or string or absolute path))) or list of (null or boolean or signed integer or string or absolute path) or null or boolean or signed integer or string or absolute path)", "descriptionHTML": "<p>INI sections and values to populate the Volume Quadlet.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "[ ]", "description": "Extra arguments to pass to the podman volume create command.", "example": "[\n  \"--opt copy\"\n]", "loc": ["services", "podman", "volumes", "<name>", "extraPodmanArgs"], "readOnly": false, "title": "services.podman.volumes.<name>.extraPodmanArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to the podman volume create command.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "null", "description": "The group ID owning the volume inside the container.", "example": "", "loc": ["services", "podman", "volumes", "<name>", "group"], "readOnly": false, "title": "services.podman.volumes.<name>.group", "type": "null or signed integer or string", "descriptionHTML": "<p>The group ID owning the volume inside the container.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "null", "description": "Specifies the image the volume is based on when Driver is set to the image.", "example": "\"quay.io/centos/centos:latest\"", "loc": ["services", "podman", "volumes", "<name>", "image"], "readOnly": false, "title": "services.podman.volumes.<name>.image", "type": "null or string", "descriptionHTML": "<p>Specifies the image the volume is based on when Driver is set to the image.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "{ }", "description": "The labels to apply to the volume.", "example": "{\n  app = \"myapp\";\n  some-label = \"somelabel\";\n}", "loc": ["services", "podman", "volumes", "<name>", "labels"], "readOnly": false, "title": "services.podman.volumes.<name>.labels", "type": "attribute set of string", "descriptionHTML": "<p>The labels to apply to the volume.</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "true", "description": "Whether the volume should be preserved if it is removed from the configuration.\nSetting this to false will cause the volume to be deleted if the volume is removed from the configuration", "example": "", "loc": ["services", "podman", "volumes", "<name>", "preserve"], "readOnly": false, "title": "services.podman.volumes.<name>.preserve", "type": "boolean", "descriptionHTML": "<p>Whether the volume should be preserved if it is removed from the configuration.\nSetting this to false will cause the volume to be deleted if the volume is removed from the configuration</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "null", "description": "Filesystem type of Device. (used as -t in mount commands)", "example": "\"tmpfs\"", "loc": ["services", "podman", "volumes", "<name>", "type"], "readOnly": false, "title": "services.podman.volumes.<name>.type", "type": "null or string", "descriptionHTML": "<p>Filesystem type of Device. (used as -t in mount commands)</p>"}, {"declarations": [{"name": "<services/podman-linux/volumes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/podman-linux/volumes.nix"}], "default": "null", "description": "The user ID owning the volume inside the container.", "example": "", "loc": ["services", "podman", "volumes", "<name>", "user"], "readOnly": false, "title": "services.podman.volumes.<name>.user", "type": "null or signed integer or string", "descriptionHTML": "<p>The user ID owning the volume inside the container.</p>"}, {"declarations": [{"name": "<services/polkit-gnome.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polkit-gnome.nix"}], "default": "false", "description": "Whether to enable GNOME Policykit Agent.", "example": "true", "loc": ["services", "polkit-gnome", "enable"], "readOnly": false, "title": "services.polkit-gnome.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable GNOME Policykit Agent.</p>"}, {"declarations": [{"name": "<services/polkit-gnome.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polkit-gnome.nix"}], "default": "pkgs.polkit_gnome", "description": "The polkit_gnome package to use.", "example": "", "loc": ["services", "polkit-gnome", "package"], "readOnly": false, "title": "services.polkit-gnome.package", "type": "package", "descriptionHTML": "<p>The polkit_gnome package to use.</p>"}, {"declarations": [{"name": "<services/polybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polybar.nix"}], "default": "{ }", "description": "Polybar configuration. Can be either path to a file, or set of attributes\nthat will be used to create the final configuration.\nSee also {option}services.polybar.settings for a more nix-friendly format.", "example": "{\n  \"bar/top\" = {\n    monitor = \"\\${env:MONITOR:eDP1}\";\n    width = \"100%\";\n    height = \"3%\";\n    radius = 0;\n    modules-center = \"date\";\n  };\n\n  \"module/date\" = {\n    type = \"internal/date\";\n    internal = 5;\n    date = \"%d.%m.%y\";\n    time = \"%H:%M\";\n    label = \"%time%  %date%\";\n  };\n}\n", "loc": ["services", "polybar", "config"], "readOnly": false, "title": "services.polybar.config", "type": "(attribute set of attribute set of (string or boolean or signed integer or list of string)) or absolute path convertible to it", "descriptionHTML": "<p>Polybar configuration. Can be either path to a file, or set of attributes\nthat will be used to create the final configuration.\nSee also {option}<code>services.polybar.settings</code> for a more nix-friendly format.</p>"}, {"declarations": [{"name": "<services/polybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polybar.nix"}], "default": "false", "description": "Whether to enable Polybar status bar.", "example": "true", "loc": ["services", "polybar", "enable"], "readOnly": false, "title": "services.polybar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Polybar status bar.</p>"}, {"declarations": [{"name": "<services/polybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polybar.nix"}], "default": "\"\"", "description": "Additional configuration to add.", "example": "''\n  [module/date]\n  type = internal/date\n  interval = 5\n  date = \"%d.%m.%y\"\n  time = %H:%M\n  format-prefix-foreground = \\''${colors.foreground-alt}\n  label = %time%  %date%\n''", "loc": ["services", "polybar", "extraConfig"], "readOnly": false, "title": "services.polybar.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<services/polybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polybar.nix"}], "default": "pkgs.polybar", "description": "The polybar package to use.", "example": "pkgs.polybar.override {\n  i3GapsSupport = true;\n  alsaSupport = true;\n  iwSupport = true;\n  githubSupport = true;\n}\n", "loc": ["services", "polybar", "package"], "readOnly": false, "title": "services.polybar.package", "type": "package", "descriptionHTML": "<p>The polybar package to use.</p>"}, {"declarations": [{"name": "<services/polybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polybar.nix"}], "default": "", "description": "This script will be used to start the polybars.\nSet all necessary environment variables here and start all bars.\nIt can be assumed that {command}polybar executable is in the {env}PATH.\nNote, this script must start all bars in the background and then terminate.", "example": "\"polybar bar &\"", "loc": ["services", "polybar", "script"], "readOnly": false, "title": "services.polybar.script", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>This script will be used to start the polybars.\nSet all necessary environment variables here and start all bars.\nIt can be assumed that {command}<code>polybar</code> executable is in the {env}<code>PATH</code>.</p>\n<p>Note, this script must start all bars in the background and then terminate.</p>"}, {"declarations": [{"name": "<services/polybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/polybar.nix"}], "default": "{ }", "description": "Polybar configuration. This takes a nix attrset and converts it to the\nstrange data format that polybar uses.\nEach entry will be converted to a section in the output file.\nSeveral things are treated specially: nested keys are converted\nto dash-separated keys; the special text key is ignored as a nested key,\nto allow mixing different levels of nesting; and lists are converted to\npolybar's foo-0, foo-1, ... format.\nFor example:\nnix\n\"module/volume\" = {\n  type = \"internal/pulseaudio\";\n  format.volume = \"&lt;ramp-volume&gt; &lt;label-volume&gt;\";\n  label.muted.text = \"\ud83d\udd07\";\n  label.muted.foreground = \"#666\";\n  ramp.volume = [\"\ud83d\udd08\" \"\ud83d\udd09\" \"\ud83d\udd0a\"];\n  click.right = \"pavucontrol &amp;\";\n}\nbecomes:\nini\n[module/volume]\ntype=internal/pulseaudio\nformat-volume=&lt;ramp-volume&gt; &lt;label-volume&gt;\nlabel-muted=\ud83d\udd07\nlabel-muted-foreground=#666\nramp-volume-0=\ud83d\udd08\nramp-volume-1=\ud83d\udd09\nramp-volume-2=\ud83d\udd0a\nclick-right=pavucontrol &amp;", "example": "{\n  \"module/volume\" = {\n    type = \"internal/pulseaudio\";\n    format.volume = \"<ramp-volume> <label-volume>\";\n    label.muted.text = \"\ud83d\udd07\";\n    label.muted.foreground = \"#666\";\n    ramp.volume = [\"\ud83d\udd08\" \"\ud83d\udd09\" \"\ud83d\udd0a\"];\n    click.right = \"pavucontrol &\";\n  };\n}\n", "loc": ["services", "polybar", "settings"], "readOnly": false, "title": "services.polybar.settings", "type": "attribute set of attribute sets", "descriptionHTML": "<p>Polybar configuration. This takes a nix attrset and converts it to the\nstrange data format that polybar uses.\nEach entry will be converted to a section in the output file.\nSeveral things are treated specially: nested keys are converted\nto dash-separated keys; the special <code>text</code> key is ignored as a nested key,\nto allow mixing different levels of nesting; and lists are converted to\npolybar's <code>foo-0, foo-1, ...</code> format.</p>\n<p>For example:\n<code>nix\n\"module/volume\" = {\n  type = \"internal/pulseaudio\";\n  format.volume = \"&lt;ramp-volume&gt; &lt;label-volume&gt;\";\n  label.muted.text = \"\ud83d\udd07\";\n  label.muted.foreground = \"#666\";\n  ramp.volume = [\"\ud83d\udd08\" \"\ud83d\udd09\" \"\ud83d\udd0a\"];\n  click.right = \"pavucontrol &amp;\";\n}</code>\nbecomes:\n<code>ini\n[module/volume]\ntype=internal/pulseaudio\nformat-volume=&lt;ramp-volume&gt; &lt;label-volume&gt;\nlabel-muted=\ud83d\udd07\nlabel-muted-foreground=#666\nramp-volume-0=\ud83d\udd08\nramp-volume-1=\ud83d\udd09\nramp-volume-2=\ud83d\udd0a\nclick-right=pavucontrol &amp;</code></p>"}, {"declarations": [{"name": "<services/poweralertd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/poweralertd.nix"}], "default": "false", "description": "Whether to enable the Upower-powered power alertd.", "example": "true", "loc": ["services", "poweralertd", "enable"], "readOnly": false, "title": "services.poweralertd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the Upower-powered power alertd.</p>"}, {"declarations": [{"name": "<services/poweralertd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/poweralertd.nix"}], "default": "[ ]", "description": "Extra command line arguments to pass to poweralertd.", "example": "[\n  \"-s\"\n  \"-S\"\n]", "loc": ["services", "poweralertd", "extraArgs"], "readOnly": false, "title": "services.poweralertd.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra command line arguments to pass to poweralertd.</p>"}, {"declarations": [{"name": "<services/psd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/psd.nix"}], "default": "5", "description": "Maximum number of crash recovery snapshots to keep (the oldest ones are deleted first).", "example": "", "loc": ["services", "psd", "backupLimit"], "readOnly": false, "title": "services.psd.backupLimit", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Maximum number of crash recovery snapshots to keep (the oldest ones are deleted first).</p>"}, {"declarations": [{"name": "<services/psd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/psd.nix"}], "default": "[ ]", "description": "A list of browsers to sync. An empty list will enable all browsers to be managed by profile-sync-daemon.\nAvailable choices are:\nchromium chromium-dev conkeror.mozdev.org epiphany falkon firefox firefox-trunk google-chrome google-chrome-beta google-chrome-unstable heftig-aurora icecat inox luakit midori opera opera-beta opera-developer opera-legacy otter-browser qupzilla qutebrowser palemoon rekonq seamonkey surf vivaldi vivaldi-snapshot", "example": "[\n  \"chromium\"\n  \"google-chrome\"\n  \"firefox\"\n]", "loc": ["services", "psd", "browsers"], "readOnly": false, "title": "services.psd.browsers", "type": "list of string", "descriptionHTML": "<p>A list of browsers to sync. An empty list will enable all browsers to be managed by profile-sync-daemon.</p>\n<p>Available choices are:\nchromium chromium-dev conkeror.mozdev.org epiphany falkon firefox firefox-trunk google-chrome google-chrome-beta google-chrome-unstable heftig-aurora icecat inox luakit midori opera opera-beta opera-developer opera-legacy otter-browser qupzilla qutebrowser palemoon rekonq seamonkey surf vivaldi vivaldi-snapshot</p>"}, {"declarations": [{"name": "<services/psd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/psd.nix"}], "default": "false", "description": "Whether to enable Profile-sync-daemon service.", "example": "true", "loc": ["services", "psd", "enable"], "readOnly": false, "title": "services.psd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Profile-sync-daemon service.</p>"}, {"declarations": [{"name": "<services/psd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/psd.nix"}], "default": "\"1h\"", "description": "The amount of time to wait before syncing browser profiles back to the\ndisk.\nTakes a systemd time span, see {manpage}systemd.time(7). The time unit\ndefaults to seconds if omitted.", "example": "\"1h 30min\"", "loc": ["services", "psd", "resyncTimer"], "readOnly": false, "title": "services.psd.resyncTimer", "type": "string", "descriptionHTML": "<p>The amount of time to wait before syncing browser profiles back to the\ndisk.</p>\n<p>Takes a systemd time span, see {manpage}<code>systemd.time(7)</code>. The time unit\ndefaults to seconds if omitted.</p>"}, {"declarations": [{"name": "<services/psd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/psd.nix"}], "default": "true", "description": "Whether to completly enable or disable the crash recovery feature.", "example": "", "loc": ["services", "psd", "useBackup"], "readOnly": false, "title": "services.psd.useBackup", "type": "boolean", "descriptionHTML": "<p>Whether to completly enable or disable the crash recovery feature.</p>"}, {"declarations": [{"name": "<services/pueue.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pueue.nix"}], "default": "false", "description": "Whether to enable Pueue, CLI process scheduler and manager.", "example": "true", "loc": ["services", "pueue", "enable"], "readOnly": false, "title": "services.pueue.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Pueue, CLI process scheduler and manager.</p>"}, {"declarations": [{"name": "<services/pueue.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pueue.nix"}], "default": "pkgs.pueue", "description": "The pueue package to use.", "example": "", "loc": ["services", "pueue", "package"], "readOnly": false, "title": "services.pueue.package", "type": "null or package", "descriptionHTML": "<p>The pueue package to use.</p>"}, {"declarations": [{"name": "<services/pueue.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pueue.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/pueue/pueue.yml.", "example": "{\n  daemon = {\n    default_parallel_tasks = 2;\n  };\n}\n", "loc": ["services", "pueue", "settings"], "readOnly": false, "title": "services.pueue.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/pueue/pueue.yml</code>.</p>"}, {"declarations": [{"name": "<services/pulseeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pulseeffects.nix"}], "default": "false", "description": "Whether to enable Pulseeffects daemon\nNote, it is necessary to add\nnix\nprograms.dconf.enable = true;\nto your system configuration for the daemon to work correctly.", "example": "true", "loc": ["services", "pulseeffects", "enable"], "readOnly": false, "title": "services.pulseeffects.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Pulseeffects daemon\nNote, it is necessary to add\n<code>nix\nprograms.dconf.enable = true;</code>\nto your system configuration for the daemon to work correctly.</p>"}, {"declarations": [{"name": "<services/pulseeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pulseeffects.nix"}], "default": "pkgs.pulseeffects-legacy", "description": "The pulseeffects-legacy package to use.", "example": "", "loc": ["services", "pulseeffects", "package"], "readOnly": false, "title": "services.pulseeffects.package", "type": "package", "descriptionHTML": "<p>The pulseeffects-legacy package to use.</p>"}, {"declarations": [{"name": "<services/pulseeffects.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/pulseeffects.nix"}], "default": "\"\"", "description": "Which preset to use when starting pulseeffects.\nWill likely need to launch pulseeffects to initially create preset.", "example": "", "loc": ["services", "pulseeffects", "preset"], "readOnly": false, "title": "services.pulseeffects.preset", "type": "string", "descriptionHTML": "<p>Which preset to use when starting pulseeffects.\nWill likely need to launch pulseeffects to initially create preset.</p>"}, {"declarations": [{"name": "<services/random-background.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/random-background.nix"}], "default": "\"fill\"", "description": "Display background images according to this option.", "example": "", "loc": ["services", "random-background", "display"], "readOnly": false, "title": "services.random-background.display", "type": "one of \"center\", \"fill\", \"max\", \"scale\", \"tile\"", "descriptionHTML": "<p>Display background images according to this option.</p>"}, {"declarations": [{"name": "<services/random-background.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/random-background.nix"}], "default": "false", "description": "Whether to enable random desktop background.\nNote, if you are using NixOS and have set up a custom\ndesktop manager session for Home Manager, then the session\nconfiguration must have the bgSupport\noption set to true or the background\nimage set by this module may be overwritten.", "example": "true", "loc": ["services", "random-background", "enable"], "readOnly": false, "title": "services.random-background.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable random desktop background.</p>\n<p>Note, if you are using NixOS and have set up a custom\ndesktop manager session for Home Manager, then the session\nconfiguration must have the <code>bgSupport</code>\noption set to <code>true</code> or the background\nimage set by this module may be overwritten.</p>"}, {"declarations": [{"name": "<services/random-background.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/random-background.nix"}], "default": "true", "description": "Will place a separate image per screen when enabled,\notherwise a single image will be stretched across all\nscreens.", "example": "", "loc": ["services", "random-background", "enableXinerama"], "readOnly": false, "title": "services.random-background.enableXinerama", "type": "boolean", "descriptionHTML": "<p>Will place a separate image per screen when enabled,\notherwise a single image will be stretched across all\nscreens.</p>"}, {"declarations": [{"name": "<services/random-background.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/random-background.nix"}], "default": "", "description": "The directory of images from which a background should be\nchosen. Should be formatted in a way understood by systemd,\ne.g., '%h' is the home directory.", "example": "\"%h/backgrounds\"", "loc": ["services", "random-background", "imageDirectory"], "readOnly": false, "title": "services.random-background.imageDirectory", "type": "string", "descriptionHTML": "<p>The directory of images from which a background should be\nchosen. Should be formatted in a way understood by systemd,\ne.g., '%h' is the home directory.</p>"}, {"declarations": [{"name": "<services/random-background.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/random-background.nix"}], "default": "null", "description": "The duration between changing background image, set to null\nto only set background when logging in. Should be formatted\nas a duration understood by systemd.", "example": "\"1h\"", "loc": ["services", "random-background", "interval"], "readOnly": false, "title": "services.random-background.interval", "type": "null or string", "descriptionHTML": "<p>The duration between changing background image, set to null\nto only set background when logging in. Should be formatted\nas a duration understood by systemd.</p>"}, {"declarations": [{"name": "<services/recoll.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/recoll.nix"}], "default": "${config.home.homeDirectory}/.recoll", "description": "The directory to contain Recoll configuration files. This will be set\nas {env}RECOLL_CONFDIR.", "example": "${config.xdg.configHome}/recoll", "loc": ["services", "recoll", "configDir"], "readOnly": false, "title": "services.recoll.configDir", "type": "string", "descriptionHTML": "<p>The directory to contain Recoll configuration files. This will be set\nas {env}<code>RECOLL_CONFDIR</code>.</p>"}, {"declarations": [{"name": "<services/recoll.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/recoll.nix"}], "default": "false", "description": "Whether to enable Recoll file index service.", "example": "true", "loc": ["services", "recoll", "enable"], "readOnly": false, "title": "services.recoll.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Recoll file index service.</p>"}, {"declarations": [{"name": "<services/recoll.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/recoll.nix"}], "default": "pkgs.recoll", "description": "The recoll package to use.", "example": "(pkgs.recoll.override { withGui = false; })", "loc": ["services", "recoll", "package"], "readOnly": false, "title": "services.recoll.package", "type": "package", "descriptionHTML": "<p>The recoll package to use.</p>"}, {"declarations": [{"name": "<services/recoll.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/recoll.nix"}], "default": "{ }", "description": "The configuration to be written at {file}$RECOLL_CONFDIR/recoll.conf.\nSee {manpage}recoll.conf(5) for more details about the configuration.", "example": "{\n  nocjk = true;\n  loglevel = 5;\n  topdirs = [ \"~/Downloads\" \"~/Documents\" \"~/projects\" ];\n\n  \"~/Downloads\" = {\n    \"skippedNames+\" = [ \"*.iso\" ];\n  };\n\n  \"~/projects\" = {\n    \"skippedNames+\" = [ \"node_modules\" \"target\" \"result\" ];\n  };\n}\n", "loc": ["services", "recoll", "settings"], "readOnly": false, "title": "services.recoll.settings", "type": "attribute set of (Recoll config value)", "descriptionHTML": "<p>The configuration to be written at {file}<code>$RECOLL_CONFDIR/recoll.conf</code>.</p>\n<p>See {manpage}<code>recoll.conf(5)</code> for more details about the configuration.</p>"}, {"declarations": [{"name": "<services/recoll.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/recoll.nix"}], "default": "\"hourly\"", "description": "When or how often the periodic update should run. Must be the format\ndescribed from {manpage}systemd.time(7).", "example": "\"00/2:00\"", "loc": ["services", "recoll", "startAt"], "readOnly": false, "title": "services.recoll.startAt", "type": "string", "descriptionHTML": "<p>When or how often the periodic update should run. Must be the format\ndescribed from {manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "null", "description": "Set the time interval of dawn manually.\nThe times must be specified as HH:MM in 24-hour format.", "example": "\"6:00-7:45\"", "loc": ["services", "redshift", "dawnTime"], "readOnly": false, "title": "services.redshift.dawnTime", "type": "null or string", "descriptionHTML": "<p>Set the time interval of dawn manually.\nThe times must be specified as HH:MM in 24-hour format.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "null", "description": "Set the time interval of dusk manually.\nThe times must be specified as HH:MM in 24-hour format.", "example": "\"18:35-20:15\"", "loc": ["services", "redshift", "duskTime"], "readOnly": false, "title": "services.redshift.duskTime", "type": "null or string", "descriptionHTML": "<p>Set the time interval of dusk manually.\nThe times must be specified as HH:MM in 24-hour format.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "false", "description": "Whether to enable Redshift.", "example": "true", "loc": ["services", "redshift", "enable"], "readOnly": false, "title": "services.redshift.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Redshift.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "false", "description": "Whether to enable verbose service logging.", "example": "true", "loc": ["services", "redshift", "enableVerboseLogging"], "readOnly": false, "title": "services.redshift.enableVerboseLogging", "type": "boolean", "descriptionHTML": "<p>Whether to enable verbose service logging.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "null", "description": "Your current latitude, between -90.0 and\n90.0. Must be provided along with\nlongitude.", "example": "", "loc": ["services", "redshift", "latitude"], "readOnly": false, "title": "services.redshift.latitude", "type": "null or string or floating point number", "descriptionHTML": "<p>Your current latitude, between <code>-90.0</code> and\n<code>90.0</code>. Must be provided along with\nlongitude.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "null", "description": "Your current longitude, between -180.0 and\n180.0. Must be provided along with\nlatitude.", "example": "", "loc": ["services", "redshift", "longitude"], "readOnly": false, "title": "services.redshift.longitude", "type": "null or string or floating point number", "descriptionHTML": "<p>Your current longitude, between <code>-180.0</code> and\n<code>180.0</code>. Must be provided along with\nlatitude.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "pkgs.redshift", "description": "Redshift derivation to use.", "example": "", "loc": ["services", "redshift", "package"], "readOnly": false, "title": "services.redshift.package", "type": "package", "descriptionHTML": "<p>Redshift derivation to use.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "\"manual\"", "description": "The location provider to use for determining your location. If set to\nmanual you must also provide latitude/longitude.\nIf set to geoclue2, you must also enable the global\ngeoclue2 service.", "example": "", "loc": ["services", "redshift", "provider"], "readOnly": false, "title": "services.redshift.provider", "type": "one of \"manual\", \"geoclue2\"", "descriptionHTML": "<p>The location provider to use for determining your location. If set to\n<code>manual</code> you must also provide latitude/longitude.\nIf set to <code>geoclue2</code>, you must also enable the global\ngeoclue2 service.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "{ }", "description": "The configuration to pass to Redshift.\nAvailable options for Redshift described in\n{manpage}redshift(1).", "example": "{\n  redshift = {\n    adjustment-method = \"randr\";\n  };\n  randr = {\n    screen = 0;\n  };\n};\n", "loc": ["services", "redshift", "settings"], "readOnly": false, "title": "services.redshift.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>The configuration to pass to Redshift.\nAvailable options for Redshift described in\n{manpage}<code>redshift(1)</code>.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "5500", "description": "Colour temperature to use during the day, between\n1000 and 25000 K.", "example": "", "loc": ["services", "redshift", "temperature", "day"], "readOnly": false, "title": "services.redshift.temperature.day", "type": "signed integer", "descriptionHTML": "<p>Colour temperature to use during the day, between\n<code>1000</code> and <code>25000</code> K.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "3700", "description": "Colour temperature to use at night, between\n1000 and 25000 K.", "example": "", "loc": ["services", "redshift", "temperature", "night"], "readOnly": false, "title": "services.redshift.temperature.night", "type": "signed integer", "descriptionHTML": "<p>Colour temperature to use at night, between\n<code>1000</code> and <code>25000</code> K.</p>"}, {"declarations": [{"name": "<services/redshift-gammastep/redshift.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/redshift-gammastep/redshift.nix"}], "default": "false", "description": "Start the redshift-gtk tray applet.", "example": "true", "loc": ["services", "redshift", "tray"], "readOnly": false, "title": "services.redshift.tray", "type": "boolean", "descriptionHTML": "<p>Start the redshift-gtk tray applet.</p>"}, {"declarations": [{"name": "<services/remmina.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/remmina.nix"}], "default": "true", "description": "Whether to enable Remmina RDP file open option.", "example": "true", "loc": ["services", "remmina", "addRdpMimeTypeAssoc"], "readOnly": false, "title": "services.remmina.addRdpMimeTypeAssoc", "type": "boolean", "descriptionHTML": "<p>Whether to enable Remmina RDP file open option.</p>"}, {"declarations": [{"name": "<services/remmina.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/remmina.nix"}], "default": "false", "description": "Whether to enable Remmina.", "example": "true", "loc": ["services", "remmina", "enable"], "readOnly": false, "title": "services.remmina.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Remmina.</p>"}, {"declarations": [{"name": "<services/remmina.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/remmina.nix"}], "default": "pkgs.remmina", "description": "The remmina package to use.", "example": "", "loc": ["services", "remmina", "package"], "readOnly": false, "title": "services.remmina.package", "type": "package", "descriptionHTML": "<p>The remmina package to use.</p>"}, {"declarations": [{"name": "<services/remmina.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/remmina.nix"}], "default": "true", "description": "Whether to enable systemd Remmina service.", "example": "true", "loc": ["services", "remmina", "systemdService", "enable"], "readOnly": false, "title": "services.remmina.systemdService.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable systemd Remmina service.</p>"}, {"declarations": [{"name": "<services/remmina.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/remmina.nix"}], "default": "[\n  \"--icon\"\n]", "description": "Startup flags documented in the manpage to run at service startup.", "example": "", "loc": ["services", "remmina", "systemdService", "startupFlags"], "readOnly": false, "title": "services.remmina.systemdService.startupFlags", "type": "list of string", "descriptionHTML": "<p>Startup flags documented in the manpage to run at service startup.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "{ }", "description": "Periodic backups to create with Restic.", "example": "{\n  localbackup = {\n    exclude = [\n      \"/home/*/.cache\"\n    ];\n    initialize = true;\n    passwordFile = \"/etc/nixos/secrets/restic-password\";\n    paths = [\n      \"/home\"\n    ];\n    repository = \"/mnt/backup-hdd\";\n  };\n  remotebackup = {\n    extraOptions = [\n      \"sftp.command='ssh backup@host -i /etc/nixos/secrets/backup-private-key -s sftp'\"\n    ];\n    passwordFile = \"/etc/nixos/secrets/restic-password\";\n    paths = [\n      \"/home\"\n    ];\n    repository = \"sftp:backup@host:/backups/home\";\n    timerConfig = {\n      OnCalendar = \"00:05\";\n      RandomizedDelaySec = \"5h\";\n    };\n  };\n}", "loc": ["services", "restic", "backups"], "readOnly": false, "title": "services.restic.backups", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Periodic backups to create with Restic.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "A script that must run after finishing the backup process.", "example": "", "loc": ["services", "restic", "backups", "<name>", "backupCleanupCommand"], "readOnly": false, "title": "services.restic.backups.<name>.backupCleanupCommand", "type": "null or string", "descriptionHTML": "<p>A script that must run after finishing the backup process.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "A script that must run before starting the backup process.", "example": "", "loc": ["services", "restic", "backups", "<name>", "backupPrepareCommand"], "readOnly": false, "title": "services.restic.backups.<name>.backupPrepareCommand", "type": "null or string", "descriptionHTML": "<p>A script that must run before starting the backup process.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "[ ]", "description": "A list of options for 'restic check'.", "example": "[\n  \"--with-cache\"\n]", "loc": ["services", "restic", "backups", "<name>", "checkOpts"], "readOnly": false, "title": "services.restic.backups.<name>.checkOpts", "type": "list of string", "descriptionHTML": "<p>A list of options for 'restic check'.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "true", "description": "Whether to generate and add a script to the system path, that has the\nsame environment variables set as the systemd service. This can be used\nto e.g. mount snapshots or perform other opterations, without having to\nmanually specify most options.", "example": "", "loc": ["services", "restic", "backups", "<name>", "createWrapper"], "readOnly": false, "title": "services.restic.backups.<name>.createWrapper", "type": "boolean", "descriptionHTML": "<p>Whether to generate and add a script to the system path, that has the\nsame environment variables set as the systemd service. This can be used\nto e.g. mount snapshots or perform other opterations, without having to\nmanually specify most options.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "A script that produces a list of files to back up. The results of\nthis command, along with the paths specified via {option}paths,\nare given to the '--files-from' option.", "example": "\"find /home/alice/git -type d -name .git\"", "loc": ["services", "restic", "backups", "<name>", "dynamicFilesFrom"], "readOnly": false, "title": "services.restic.backups.<name>.dynamicFilesFrom", "type": "null or string", "descriptionHTML": "<p>A script that produces a list of files to back up. The results of\nthis command, along with the paths specified via {option}<code>paths</code>,\nare given to the '--files-from' option.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "A file containing the credentials to access the repository, in the\nformat of an EnvironmentFile as described by {manpage}systemd.exec(5).\nSee https://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html\nfor the specific credentials you will need for your backend.", "example": "", "loc": ["services", "restic", "backups", "<name>", "environmentFile"], "readOnly": false, "title": "services.restic.backups.<name>.environmentFile", "type": "null or string", "descriptionHTML": "<p>A file containing the credentials to access the repository, in the\nformat of an EnvironmentFile as described by {manpage}<code>systemd.exec(5)</code>.\nSee <a href=\"https://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html\">https://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html</a>\nfor the specific credentials you will need for your backend.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "[ ]", "description": "Patterns to exclude when backing up. See\nhttps://restic.readthedocs.io/en/stable/040_backup.html#excluding-files for\ndetails on syntax.", "example": "[\n  \"/var/cache\"\n  \"/home/*/.cache\"\n  \".git\"\n]", "loc": ["services", "restic", "backups", "<name>", "exclude"], "readOnly": false, "title": "services.restic.backups.<name>.exclude", "type": "list of string", "descriptionHTML": "<p>Patterns to exclude when backing up. See\n<a href=\"https://restic.readthedocs.io/en/stable/040_backup.html#excluding-files\">https://restic.readthedocs.io/en/stable/040_backup.html#excluding-files</a> for\ndetails on syntax.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "[ ]", "description": "Extra arguments passed to restic backup.", "example": "[\n  \"--cleanup-cache\"\n  \"--exclude-file=/etc/nixos/restic-ignore\"\n]", "loc": ["services", "restic", "backups", "<name>", "extraBackupArgs"], "readOnly": false, "title": "services.restic.backups.<name>.extraBackupArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments passed to restic backup.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "[ ]", "description": "Extra extended options to be passed to the restic -o flag. See the restic\ndocumentation for more details.", "example": "[\n  \"sftp.command='ssh backup@192.168.1.100 -i /home/user/.ssh/id_rsa -s sftp'\"\n]", "loc": ["services", "restic", "backups", "<name>", "extraOptions"], "readOnly": false, "title": "services.restic.backups.<name>.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra extended options to be passed to the restic <code>-o</code> flag. See the restic\ndocumentation for more details.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "false", "description": "Prevents the system from sleeping while backing up. This uses systemd-inhibit\nto block system idling so you may need to enable polkitd with\n{option}security.polkit.enable.", "example": "true", "loc": ["services", "restic", "backups", "<name>", "inhibitsSleep"], "readOnly": false, "title": "services.restic.backups.<name>.inhibitsSleep", "type": "boolean", "descriptionHTML": "<p>Prevents the system from sleeping while backing up. This uses systemd-inhibit\nto block system idling so you may need to enable polkitd with\n{option}<code>security.polkit.enable</code>.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "false", "description": "Create the repository if it does not already exist.", "example": "", "loc": ["services", "restic", "backups", "<name>", "initialize"], "readOnly": false, "title": "services.restic.backups.<name>.initialize", "type": "boolean", "descriptionHTML": "<p>Create the repository if it does not already exist.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "pkgs.restic", "description": "The restic package to use.", "example": "", "loc": ["services", "restic", "backups", "<name>", "package"], "readOnly": false, "title": "services.restic.backups.<name>.package", "type": "package", "descriptionHTML": "<p>The restic package to use.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "", "description": "A file containing the repository password.", "example": "\"/etc/nixos/restic-password\"", "loc": ["services", "restic", "backups", "<name>", "passwordFile"], "readOnly": false, "title": "services.restic.backups.<name>.passwordFile", "type": "string", "descriptionHTML": "<p>A file containing the repository password.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "[ ]", "description": "Paths to back up, alongside those defined by the {option}dynamicFilesFrom\noption. If left empty and {option}dynamicFilesFrom is also not specified, no\nbackup command will be run. This can be used to create a prune-only job.", "example": "[\n  \"/var/lib/postgresql\"\n  \"/home/user/backup\"\n]", "loc": ["services", "restic", "backups", "<name>", "paths"], "readOnly": false, "title": "services.restic.backups.<name>.paths", "type": "list of string", "descriptionHTML": "<p>Paths to back up, alongside those defined by the {option}<code>dynamicFilesFrom</code>\noption. If left empty and {option}<code>dynamicFilesFrom</code> is also not specified, no\nbackup command will be run. This can be used to create a prune-only job.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "Controls the frequency of progress reporting.", "example": "0.1", "loc": ["services", "restic", "backups", "<name>", "progressFps"], "readOnly": false, "title": "services.restic.backups.<name>.progressFps", "type": "null or (nonnegative integer or floating point number, meaning >=0)", "descriptionHTML": "<p>Controls the frequency of progress reporting.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "[ ]", "description": "A list of policy options for 'restic forget --prune', to automatically\nprune old snapshots. See\nhttps://restic.readthedocs.io/en/latest/060_forget.html#removing-snapshots-according-to-a-policy\nfor a full list of options.\nNote: The 'forget' command is run after the 'backup' command, so keep\nthat in mind when constructing the --keep-* options.", "example": "[\n  \"--keep-daily 7\"\n  \"--keep-weekly 5\"\n  \"--keep-monthly 12\"\n  \"--keep-yearly 75\"\n]", "loc": ["services", "restic", "backups", "<name>", "pruneOpts"], "readOnly": false, "title": "services.restic.backups.<name>.pruneOpts", "type": "list of string", "descriptionHTML": "<p>A list of policy options for 'restic forget --prune', to automatically\nprune old snapshots. See\n<a href=\"https://restic.readthedocs.io/en/latest/060_forget.html#removing-snapshots-according-to-a-policy\">https://restic.readthedocs.io/en/latest/060_forget.html#removing-snapshots-according-to-a-policy</a>\nfor a full list of options.</p>\n<p>Note: The 'forget' command is run <em>after</em> the 'backup' command, so keep\nthat in mind when constructing the --keep-* options.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "{ }", "description": "Options to pass to rclone to control its behavior. See\nhttps://rclone.org/docs/#options for available options. When specifying\noption names, strip the leading --. To set a flag such as\n--drive-use-trash, which does not take a value, set the value to the\nBoolean true.", "example": "{\n  bwlimit = \"10M\";\n  drive-use-trash = true;\n}", "loc": ["services", "restic", "backups", "<name>", "rcloneOptions"], "readOnly": false, "title": "services.restic.backups.<name>.rcloneOptions", "type": "attribute set of (string or boolean)", "descriptionHTML": "<p>Options to pass to rclone to control its behavior. See\n<a href=\"https://rclone.org/docs/#options\">https://rclone.org/docs/#options</a> for available options. When specifying\noption names, strip the leading <code>--</code>. To set a flag such as\n<code>--drive-use-trash</code>, which does not take a value, set the value to the\nBoolean <code>true</code>.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "Repository to backup to. This should be in the form of a backend specification as\ndetailed here\nhttps://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html.\nIf your using the rclone backend, you can configure your remotes with\n{option}programs.rclone.remotes then use them in your backend specification.", "example": "\"sftp:backup@192.168.1.100:/backups/\u2039name\u203a\"", "loc": ["services", "restic", "backups", "<name>", "repository"], "readOnly": false, "title": "services.restic.backups.<name>.repository", "type": "null or string", "descriptionHTML": "<p>Repository to backup to. This should be in the form of a backend specification as\ndetailed here\n<a href=\"https://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html\">https://restic.readthedocs.io/en/stable/030_preparing_a_new_repo.html</a>.</p>\n<p>If your using the rclone backend, you can configure your remotes with\n{option}<code>programs.rclone.remotes</code> then use them in your backend specification.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "null", "description": "Path to a file containing the repository location to backup to. This should be\nin the same form as the {option}repository option.", "example": "", "loc": ["services", "restic", "backups", "<name>", "repositoryFile"], "readOnly": false, "title": "services.restic.backups.<name>.repositoryFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to a file containing the repository location to backup to. This should be\nin the same form as the {option}<code>repository</code> option.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "lib.length config.checkOpts > 0 || lib.length config.pruneOpts > 0", "description": "Whether to run 'restic check' with the provided checkOpts options.", "example": "true", "loc": ["services", "restic", "backups", "<name>", "runCheck"], "readOnly": false, "title": "services.restic.backups.<name>.runCheck", "type": "boolean", "descriptionHTML": "<p>Whether to run 'restic check' with the provided <code>checkOpts</code> options.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "pkgs.openssh", "description": "The openssh package to use.", "example": "", "loc": ["services", "restic", "backups", "<name>", "ssh-package"], "readOnly": false, "title": "services.restic.backups.<name>.ssh-package", "type": "package", "descriptionHTML": "<p>The openssh package to use.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "{\n  OnCalendar = \"daily\";\n  Persistent = true;\n}", "description": "When to run the backup. See {manpage}systemd.timer(5) for details. If null\nno timer is created and the backup will only run when explicitly started.", "example": "{\n  OnCalendar = \"00:05\";\n  Persistent = true;\n  RandomizedDelaySec = \"5h\";\n}", "loc": ["services", "restic", "backups", "<name>", "timerConfig"], "readOnly": false, "title": "services.restic.backups.<name>.timerConfig", "type": "null or (attribute set of (boolean or signed integer or string or absolute path or list of (boolean or signed integer or string or absolute path)))", "descriptionHTML": "<p>When to run the backup. See {manpage}<code>systemd.timer(5)</code> for details. If null\nno timer is created and the backup will only run when explicitly started.</p>"}, {"declarations": [{"name": "<services/restic.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/restic.nix"}], "default": "false", "description": "Whether to enable restic.", "example": "true", "loc": ["services", "restic", "enable"], "readOnly": false, "title": "services.restic.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable restic.</p>"}, {"declarations": [{"name": "<services/rsibreak.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/rsibreak.nix"}], "default": "false", "description": "Whether to enable rsibreak.", "example": "true", "loc": ["services", "rsibreak", "enable"], "readOnly": false, "title": "services.rsibreak.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable rsibreak.</p>"}, {"declarations": [{"name": "<services/safeeyes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/safeeyes.nix"}], "default": "false", "description": "Whether to enable The Safe Eyes OSGI service.", "example": "true", "loc": ["services", "safeeyes", "enable"], "readOnly": false, "title": "services.safeeyes.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable The Safe Eyes OSGI service.</p>"}, {"declarations": [{"name": "<services/safeeyes.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/safeeyes.nix"}], "default": "pkgs.safeeyes", "description": "The safeeyes package to use.", "example": "", "loc": ["services", "safeeyes", "package"], "readOnly": false, "title": "services.safeeyes.package", "type": "package", "descriptionHTML": "<p>The safeeyes package to use.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "false", "description": "Whether to enable screen locker for X session.", "example": "true", "loc": ["services", "screen-locker", "enable"], "readOnly": false, "title": "services.screen-locker.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable screen locker for X session.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "10", "description": "Inactive time interval in minutes after which session will be locked.\nThe minimum is 1 minute, and the maximum is 1 hour.\nIf {option}xautolock.enable is true, it will use this setting.\nSee https://linux.die.net/man/1/xautolock.\nOtherwise, this will be used with {command}xset to configure\nthe X server's screensaver timeout.", "example": "", "loc": ["services", "screen-locker", "inactiveInterval"], "readOnly": false, "title": "services.screen-locker.inactiveInterval", "type": "signed integer", "descriptionHTML": "<p>Inactive time interval in minutes after which session will be locked.\nThe minimum is 1 minute, and the maximum is 1 hour.\nIf {option}<code>xautolock.enable</code> is true, it will use this setting.\nSee <a href=\"https://linux.die.net/man/1/xautolock\">https://linux.die.net/man/1/xautolock</a>.\nOtherwise, this will be used with {command}<code>xset</code> to configure\nthe X server's screensaver timeout.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "", "description": "Locker command to run.", "example": "\"\\${pkgs.i3lock}/bin/i3lock -n -c 000000\"", "loc": ["services", "screen-locker", "lockCmd"], "readOnly": false, "title": "services.screen-locker.lockCmd", "type": "string", "descriptionHTML": "<p>Locker command to run.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "[ ]", "description": "Environment variables to source a with the locker command (lockCmd).", "example": "[\n  \"XSECURELOCK_PAM_SERVICE=xsecurelock\"\n]", "loc": ["services", "screen-locker", "lockCmdEnv"], "readOnly": false, "title": "services.screen-locker.lockCmdEnv", "type": "list of string", "descriptionHTML": "<p>Environment variables to source a with the locker command (lockCmd).</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "true", "description": "Whether to reset xautolock timers when awaking from sleep.\nNo effect if {option}xautolock.enable is false.", "example": "", "loc": ["services", "screen-locker", "xautolock", "detectSleep"], "readOnly": false, "title": "services.screen-locker.xautolock.detectSleep", "type": "boolean", "descriptionHTML": "<p>Whether to reset xautolock timers when awaking from sleep.\nNo effect if {option}<code>xautolock.enable</code> is false.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "true", "description": "Use xautolock for time-based locking.", "example": "", "loc": ["services", "screen-locker", "xautolock", "enable"], "readOnly": false, "title": "services.screen-locker.xautolock.enable", "type": "boolean", "descriptionHTML": "<p>Use xautolock for time-based locking.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to {command}xautolock.\nNo effect if {option}xautolock.enable is false.", "example": "", "loc": ["services", "screen-locker", "xautolock", "extraOptions"], "readOnly": false, "title": "services.screen-locker.xautolock.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to {command}<code>xautolock</code>.\nNo effect if {option}<code>xautolock.enable</code> is false.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "pkgs.xautolock", "description": "The xautolock package to use.", "example": "", "loc": ["services", "screen-locker", "xautolock", "package"], "readOnly": false, "title": "services.screen-locker.xautolock.package", "type": "package", "descriptionHTML": "<p>The xautolock package to use.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to {command}xss-lock.", "example": "", "loc": ["services", "screen-locker", "xss-lock", "extraOptions"], "readOnly": false, "title": "services.screen-locker.xss-lock.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to {command}<code>xss-lock</code>.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "pkgs.xss-lock", "description": "The xss-lock package to use.", "example": "", "loc": ["services", "screen-locker", "xss-lock", "package"], "readOnly": false, "title": "services.screen-locker.xss-lock.package", "type": "package", "descriptionHTML": "<p>The xss-lock package to use.</p>"}, {"declarations": [{"name": "<services/screen-locker.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/screen-locker.nix"}], "default": "600", "description": "The X server's screensaver cycle value expressed as seconds.\nThis will be used with {command}xset to configure\nthe cycle along with timeout.", "example": "", "loc": ["services", "screen-locker", "xss-lock", "screensaverCycle"], "readOnly": false, "title": "services.screen-locker.xss-lock.screensaverCycle", "type": "signed integer", "descriptionHTML": "<p>The X server's screensaver cycle value expressed as seconds.\nThis will be used with {command}<code>xset</code> to configure\nthe cycle along with timeout.</p>"}, {"declarations": [{"name": "<services/sctd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sctd.nix"}], "default": "4500", "description": "The base color temperature used by sctd, which should be between 2500 and 9000.\nSee\n{manpage}sctd(1)\nfor more details.", "example": "", "loc": ["services", "sctd", "baseTemperature"], "readOnly": false, "title": "services.sctd.baseTemperature", "type": "integer between 2500 and 9000 (both inclusive)", "descriptionHTML": "<p>The base color temperature used by sctd, which should be between 2500 and 9000.\nSee\n{manpage}<code>sctd(1)</code>\nfor more details.</p>"}, {"declarations": [{"name": "<services/sctd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sctd.nix"}], "default": "false", "description": "Whether to enable sctd.", "example": "true", "loc": ["services", "sctd", "enable"], "readOnly": false, "title": "services.sctd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sctd.</p>"}, {"declarations": [{"name": "<services/shikane.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/shikane.nix"}], "default": "false", "description": "Whether to enable shikane, A dynamic output configuration tool that automatically detects and configures connected outputs based on a set of profiles..", "example": "true", "loc": ["services", "shikane", "enable"], "readOnly": false, "title": "services.shikane.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable shikane, A dynamic output configuration tool that automatically detects and configures connected outputs based on a set of profiles..</p>"}, {"declarations": [{"name": "<services/shikane.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/shikane.nix"}], "default": "pkgs.shikane", "description": "The shikane package to use.", "example": "", "loc": ["services", "shikane", "package"], "readOnly": false, "title": "services.shikane.package", "type": "package", "descriptionHTML": "<p>The shikane package to use.</p>"}, {"declarations": [{"name": "<services/shikane.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/shikane.nix"}], "default": "{ }", "description": "Configuration written to\n<filename>$XDG_CONFIG_HOME/shikane/config.toml</filename>.\n</para><para>\nSee <link xlink:href=\"https://gitlab.com/w0lff/shikane/-/blob/master/docs/shikane.5.man.md\" />\nfor more information.", "example": "{\n  profile = [\n    {\n      name = \"external-monitor-default\";\n      output = [\n        {\n          match = \"eDP-1\";\n          enable = true;\n        }\n        {\n          match = \"HDMI-A-1\";\n          enable = true;\n          position = {\n            x = 1920;\n            y = 0;\n          };\n        }\n      ];\n    }\n    {\n      name = \"builtin-monitor-only\";\n      output = [\n        {\n          match = \"eDP-1\";\n          enable = true;\n        }\n      ];\n    }\n  ];\n}\n", "loc": ["services", "shikane", "settings"], "readOnly": false, "title": "services.shikane.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n<filename>$XDG_CONFIG_HOME/shikane/config.toml</filename>.\n</para><para>\nSee <link xlink:href=\"https://gitlab.com/w0lff/shikane/-/blob/master/docs/shikane.5.man.md\" />\nfor more information.</p>"}, {"declarations": [{"name": "<services/signaturepdf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/signaturepdf.nix"}], "default": "false", "description": "Whether to enable signaturepdf; signing, organizing, editing metadatas or compressing PDFs.", "example": "true", "loc": ["services", "signaturepdf", "enable"], "readOnly": false, "title": "services.signaturepdf.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable signaturepdf; signing, organizing, editing metadatas or compressing PDFs.</p>"}, {"declarations": [{"name": "<services/signaturepdf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/signaturepdf.nix"}], "default": "{ }", "description": "Additional configuration optional.", "example": "{\n  max_file_uploads = \"201\";\n  post_max_size = \"24M\";\n  upload_max_filesize = \"24M\";\n}", "loc": ["services", "signaturepdf", "extraConfig"], "readOnly": false, "title": "services.signaturepdf.extraConfig", "type": "attribute set of (string or signed integer or boolean or floating point number)", "descriptionHTML": "<p>Additional configuration optional.</p>"}, {"declarations": [{"name": "<services/signaturepdf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/signaturepdf.nix"}], "default": "pkgs.signaturepdf", "description": "The signaturepdf package to use.", "example": "", "loc": ["services", "signaturepdf", "package"], "readOnly": false, "title": "services.signaturepdf.package", "type": "package", "descriptionHTML": "<p>The signaturepdf package to use.</p>"}, {"declarations": [{"name": "<services/signaturepdf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/signaturepdf.nix"}], "default": "8080", "description": "The port on which the application runs", "example": "8081", "loc": ["services", "signaturepdf", "port"], "readOnly": false, "title": "services.signaturepdf.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port on which the application runs</p>"}, {"declarations": [{"name": "<services/skhd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/skhd.nix"}], "default": "null", "description": "Contents of skhd's configuration file. If empty (the default), the configuration file won't be managed.\nSee documentation\nand example.", "example": "''\n  # open terminal, blazingly fast compared to iTerm/Hyper\n  cmd - return : /Applications/kitty.app/Contents/MacOS/kitty --single-instance -d ~\n  \n  # open qutebrowser\n  cmd + shift - return : ~/Scripts/qtb.sh\n  \n  # open mpv\n  cmd - m : open -na /Applications/mpv.app $(pbpaste)\n''", "loc": ["services", "skhd", "config"], "readOnly": false, "title": "services.skhd.config", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Contents of skhd's configuration file. If empty (the default), the configuration file won't be managed.</p>\n<p>See <a href=\"https://github.com/koekeishiya/skhd\">documentation</a>\nand <a href=\"https://github.com/koekeishiya/skhd/blob/master/examples/skhdrc\">example</a>.</p>"}, {"declarations": [{"name": "<services/skhd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/skhd.nix"}], "default": "false", "description": "Whether to enable skhd.", "example": "true", "loc": ["services", "skhd", "enable"], "readOnly": false, "title": "services.skhd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable skhd.</p>"}, {"declarations": [{"name": "<services/skhd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/skhd.nix"}], "default": "${config.home.homeDirectory}/Library/Logs/skhd/err.log", "description": "Absolute path to log all stderr output.", "example": "\"/Users/khaneliman/Library/Logs/skhd.log\"", "loc": ["services", "skhd", "errorLogFile"], "readOnly": false, "title": "services.skhd.errorLogFile", "type": "null or absolute path or string", "descriptionHTML": "<p>Absolute path to log all stderr output.</p>"}, {"declarations": [{"name": "<services/skhd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/skhd.nix"}], "default": "${config.home.homeDirectory}/Library/Logs/skhd/out.log", "description": "Absolute path to log all stdout output.", "example": "\"/Users/khaneliman/Library/Logs/skhd.log\"", "loc": ["services", "skhd", "outLogFile"], "readOnly": false, "title": "services.skhd.outLogFile", "type": "null or absolute path or string", "descriptionHTML": "<p>Absolute path to log all stdout output.</p>"}, {"declarations": [{"name": "<services/skhd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/skhd.nix"}], "default": "pkgs.skhd", "description": "The skhd package to use.", "example": "", "loc": ["services", "skhd", "package"], "readOnly": false, "title": "services.skhd.package", "type": "package", "descriptionHTML": "<p>The skhd package to use.</p>"}, {"declarations": [{"name": "<services/snixembed.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/snixembed.nix"}], "default": "[ ]", "description": "List of other units that should be started after snixembed.", "example": "[\n  \"safeeyes.service\"\n]", "loc": ["services", "snixembed", "beforeUnits"], "readOnly": false, "title": "services.snixembed.beforeUnits", "type": "list of string", "descriptionHTML": "<p>List of other units that should be started after snixembed.</p>"}, {"declarations": [{"name": "<services/snixembed.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/snixembed.nix"}], "default": "false", "description": "Whether to enable snixembed: proxy StatusNotifierItems as XEmbedded systemtray-spec icons.", "example": "true", "loc": ["services", "snixembed", "enable"], "readOnly": false, "title": "services.snixembed.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable snixembed: proxy StatusNotifierItems as XEmbedded systemtray-spec icons.</p>"}, {"declarations": [{"name": "<services/snixembed.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/snixembed.nix"}], "default": "pkgs.snixembed", "description": "The snixembed package to use.", "example": "", "loc": ["services", "snixembed", "package"], "readOnly": false, "title": "services.snixembed.package", "type": "package", "descriptionHTML": "<p>The snixembed package to use.</p>"}, {"declarations": [{"name": "<services/spotifyd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/spotifyd.nix"}], "default": "false", "description": "Whether to enable SpotifyD connect.", "example": "true", "loc": ["services", "spotifyd", "enable"], "readOnly": false, "title": "services.spotifyd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable SpotifyD connect.</p>"}, {"declarations": [{"name": "<services/spotifyd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/spotifyd.nix"}], "default": "pkgs.spotifyd", "description": "The spotifyd package to use. Can be used to specify extensions.", "example": "(pkgs.spotifyd.override { withKeyring = true; })", "loc": ["services", "spotifyd", "package"], "readOnly": false, "title": "services.spotifyd.package", "type": "package", "descriptionHTML": "<p>The spotifyd package to use. Can be used to specify extensions.</p>"}, {"declarations": [{"name": "<services/spotifyd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/spotifyd.nix"}], "default": "{ }", "description": "Configuration for spotifyd", "example": "{\n  global = {\n    username = \"Alex\";\n    password = \"foo\";\n    device_name = \"nix\";\n  };\n}\n", "loc": ["services", "spotifyd", "settings"], "readOnly": false, "title": "services.spotifyd.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration for spotifyd</p>"}, {"declarations": [{"name": "<services/ssh-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/ssh-agent.nix"}], "default": "false", "description": "Whether to enable OpenSSH private key agent.", "example": "true", "loc": ["services", "ssh-agent", "enable"], "readOnly": false, "title": "services.ssh-agent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable OpenSSH private key agent.</p>"}, {"declarations": [{"name": "<services/stalonetray.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/stalonetray.nix"}], "default": "{ }", "description": "Stalonetray configuration as a set of attributes.", "example": "{\n  background = \"#cccccc\";\n  decorations = null;\n  geometry = \"3x1-600+0\";\n  icon_size = 30;\n  sticky = true;\n}", "loc": ["services", "stalonetray", "config"], "readOnly": false, "title": "services.stalonetray.config", "type": "attribute set of (null or string or boolean or signed integer)", "descriptionHTML": "<p>Stalonetray configuration as a set of attributes.</p>"}, {"declarations": [{"name": "<services/stalonetray.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/stalonetray.nix"}], "default": "false", "description": "Whether to enable Stalonetray system tray.", "example": "true", "loc": ["services", "stalonetray", "enable"], "readOnly": false, "title": "services.stalonetray.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Stalonetray system tray.</p>"}, {"declarations": [{"name": "<services/stalonetray.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/stalonetray.nix"}], "default": "\"\"", "description": "Additional configuration lines for stalonetrayrc.", "example": "''\n  geometry 3x1-600+0\n  decorations none\n  icon_size 30\n  sticky true\n  background \"#cccccc\"\n''", "loc": ["services", "stalonetray", "extraConfig"], "readOnly": false, "title": "services.stalonetray.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration lines for stalonetrayrc.</p>"}, {"declarations": [{"name": "<services/stalonetray.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/stalonetray.nix"}], "default": "pkgs.stalonetray", "description": "The stalonetray package to use.", "example": "", "loc": ["services", "stalonetray", "package"], "readOnly": false, "title": "services.stalonetray.package", "type": "package", "descriptionHTML": "<p>The stalonetray package to use.</p>"}, {"declarations": [{"name": "<services/status-notifier-watcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/status-notifier-watcher.nix"}], "default": "false", "description": "Whether to enable Status Notifier Watcher.", "example": "true", "loc": ["services", "status-notifier-watcher", "enable"], "readOnly": false, "title": "services.status-notifier-watcher.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Status Notifier Watcher.</p>"}, {"declarations": [{"name": "<services/status-notifier-watcher.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/status-notifier-watcher.nix"}], "default": "pkgs.haskellPackages.status-notifier-item", "description": "The status-notifier-item package to use.", "example": "", "loc": ["services", "status-notifier-watcher", "package"], "readOnly": false, "title": "services.status-notifier-watcher.package", "type": "package", "descriptionHTML": "<p>The status-notifier-item package to use.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "false", "description": "Whether to enable idle manager for Wayland.", "example": "true", "loc": ["services", "swayidle", "enable"], "readOnly": false, "title": "services.swayidle.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable idle manager for Wayland.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "[ ]", "description": "Run command on occurrence of a event.", "example": "[\n  { event = \"before-sleep\"; command = \"${pkgs.swaylock}/bin/swaylock -fF\"; }\n  { event = \"lock\"; command = \"lock\"; }\n]\n", "loc": ["services", "swayidle", "events"], "readOnly": false, "title": "services.swayidle.events", "type": "list of (submodule)", "descriptionHTML": "<p>Run command on occurrence of a event.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "", "description": "Command to run when event occurs.", "example": "", "loc": ["services", "swayidle", "events", "*", "command"], "readOnly": false, "title": "services.swayidle.events.*.command", "type": "string", "descriptionHTML": "<p>Command to run when event occurs.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "", "description": "Event name.", "example": "", "loc": ["services", "swayidle", "events", "*", "event"], "readOnly": false, "title": "services.swayidle.events.*.event", "type": "one of \"before-sleep\", \"after-resume\", \"lock\", \"unlock\"", "descriptionHTML": "<p>Event name.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "[\n  \"-w\"\n]", "description": "Extra arguments to pass to swayidle.", "example": "", "loc": ["services", "swayidle", "extraArgs"], "readOnly": false, "title": "services.swayidle.extraArgs", "type": "list of string", "descriptionHTML": "<p>Extra arguments to pass to swayidle.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "pkgs.swayidle", "description": "The swayidle package to use.", "example": "", "loc": ["services", "swayidle", "package"], "readOnly": false, "title": "services.swayidle.package", "type": "package", "descriptionHTML": "<p>The swayidle package to use.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "config.wayland.systemd.target", "description": "Systemd target to bind to.", "example": "\"sway-session.target\"", "loc": ["services", "swayidle", "systemdTarget"], "readOnly": false, "title": "services.swayidle.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "[ ]", "description": "List of commands to run after idle timeout.", "example": "[\n  { timeout = 60; command = \"${pkgs.swaylock}/bin/swaylock -fF\"; }\n  { timeout = 90; command = \"${pkgs.systemd}/bin/systemctl suspend\"; }\n]\n", "loc": ["services", "swayidle", "timeouts"], "readOnly": false, "title": "services.swayidle.timeouts", "type": "list of (submodule)", "descriptionHTML": "<p>List of commands to run after idle timeout.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "", "description": "Command to run after timeout seconds of inactivity.", "example": "", "loc": ["services", "swayidle", "timeouts", "*", "command"], "readOnly": false, "title": "services.swayidle.timeouts.*.command", "type": "string", "descriptionHTML": "<p>Command to run after timeout seconds of inactivity.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "null", "description": "Command to run when there is activity again.", "example": "", "loc": ["services", "swayidle", "timeouts", "*", "resumeCommand"], "readOnly": false, "title": "services.swayidle.timeouts.*.resumeCommand", "type": "null or string", "descriptionHTML": "<p>Command to run when there is activity again.</p>"}, {"declarations": [{"name": "<services/swayidle.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayidle.nix"}], "default": "", "description": "Timeout in seconds.", "example": "60", "loc": ["services", "swayidle", "timeouts", "*", "timeout"], "readOnly": false, "title": "services.swayidle.timeouts.*.timeout", "type": "positive integer, meaning >0", "descriptionHTML": "<p>Timeout in seconds.</p>"}, {"declarations": [{"name": "<services/swaync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swaync.nix"}], "default": "false", "description": "Whether to enable Swaync notification daemon.", "example": "true", "loc": ["services", "swaync", "enable"], "readOnly": false, "title": "services.swaync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Swaync notification daemon.</p>"}, {"declarations": [{"name": "<services/swaync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swaync.nix"}], "default": "pkgs.swaynotificationcenter", "description": "The swaynotificationcenter package to use.", "example": "", "loc": ["services", "swaync", "package"], "readOnly": false, "title": "services.swaync.package", "type": "package", "descriptionHTML": "<p>The swaynotificationcenter package to use.</p>"}, {"declarations": [{"name": "<services/swaync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swaync.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/swaync/config.json.\nSee\nhttps://github.com/ErikReider/SwayNotificationCenter/blob/main/src/configSchema.json\nfor the documentation.", "example": "{\n  positionX = \"right\";\n  positionY = \"top\";\n  layer = \"overlay\";\n  control-center-layer = \"top\";\n  layer-shell = true;\n  cssPriority = \"application\";\n  control-center-margin-top = 0;\n  control-center-margin-bottom = 0;\n  control-center-margin-right = 0;\n  control-center-margin-left = 0;\n  notification-2fa-action = true;\n  notification-inline-replies = false;\n  notification-icon-size = 64;\n  notification-body-image-height = 100;\n  notification-body-image-width = 200;\n};\n", "loc": ["services", "swaync", "settings"], "readOnly": false, "title": "services.swaync.settings", "type": "JSON value", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/swaync/config.json</code>.\nSee\n<a href=\"https://github.com/ErikReider/SwayNotificationCenter/blob/main/src/configSchema.json\">https://github.com/ErikReider/SwayNotificationCenter/blob/main/src/configSchema.json</a>\nfor the documentation.</p>"}, {"declarations": [{"name": "<services/swaync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swaync.nix"}], "default": "null", "description": "CSS style of the bar. See\nhttps://github.com/ErikReider/SwayNotificationCenter/blob/main/src/style.css\nfor the documentation.\nIf the value is set to a path literal, then the path will be used as the CSS file.", "example": "''\n  .notification-row {\n    outline: none;\n  }\n  \n  .notification-row:focus,\n  .notification-row:hover {\n    background: @noti-bg-focus;\n  }\n  \n  .notification {\n    border-radius: 12px;\n    margin: 6px 12px;\n    box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.3), 0 1px 3px 1px rgba(0, 0, 0, 0.7),\n      0 2px 6px 2px rgba(0, 0, 0, 0.3);\n    padding: 0;\n  }\n''", "loc": ["services", "swaync", "style"], "readOnly": false, "title": "services.swaync.style", "type": "null or absolute path or strings concatenated with \"\\n\"", "descriptionHTML": "<p>CSS style of the bar. See\n<a href=\"https://github.com/ErikReider/SwayNotificationCenter/blob/main/src/style.css\">https://github.com/ErikReider/SwayNotificationCenter/blob/main/src/style.css</a>\nfor the documentation.</p>\n<p>If the value is set to a path literal, then the path will be used as the CSS file.</p>"}, {"declarations": [{"name": "<services/swayosd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayosd.nix"}], "default": "null", "description": "X display to use.", "example": "\"eDP-1\"", "loc": ["services", "swayosd", "display"], "readOnly": false, "title": "services.swayosd.display", "type": "null or string", "descriptionHTML": "<p>X display to use.</p>"}, {"declarations": [{"name": "<services/swayosd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayosd.nix"}], "default": "false", "description": "Whether to enable swayosd, a GTK based on screen display for keyboard shortcuts like\ncaps-lock and volume.", "example": "true", "loc": ["services", "swayosd", "enable"], "readOnly": false, "title": "services.swayosd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable swayosd, a GTK based on screen display for keyboard shortcuts like\ncaps-lock and volume.</p>"}, {"declarations": [{"name": "<services/swayosd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayosd.nix"}], "default": "pkgs.swayosd", "description": "The swayosd package to use.", "example": "", "loc": ["services", "swayosd", "package"], "readOnly": false, "title": "services.swayosd.package", "type": "package", "descriptionHTML": "<p>The swayosd package to use.</p>"}, {"declarations": [{"name": "<services/swayosd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayosd.nix"}], "default": "null", "description": "Use a custom Stylesheet file instead of looking for one.", "example": "\"/etc/xdg/swayosd/style.css\"", "loc": ["services", "swayosd", "stylePath"], "readOnly": false, "title": "services.swayosd.stylePath", "type": "null or absolute path", "descriptionHTML": "<p>Use a custom Stylesheet file instead of looking for one.</p>"}, {"declarations": [{"name": "<services/swayosd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swayosd.nix"}], "default": "null", "description": "OSD margin from top edge (0.5 would be screen center).", "example": "1.0", "loc": ["services", "swayosd", "topMargin"], "readOnly": false, "title": "services.swayosd.topMargin", "type": "null or float between 0.0 and 1.0 (inclusive)", "descriptionHTML": "<p>OSD margin from top edge (0.5 would be screen center).</p>"}, {"declarations": [{"name": "<services/swww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swww.nix"}], "default": "false", "description": "Whether to enable swww, a Solution to your Wayland Wallpaper Woes.", "example": "true", "loc": ["services", "swww", "enable"], "readOnly": false, "title": "services.swww.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable swww, a Solution to your Wayland Wallpaper Woes.</p>"}, {"declarations": [{"name": "<services/swww.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/swww.nix"}], "default": "pkgs.swww", "description": "The swww package to use.", "example": "", "loc": ["services", "swww", "package"], "readOnly": false, "title": "services.swww.package", "type": "package", "descriptionHTML": "<p>The swww package to use.</p>"}, {"declarations": [{"name": "<services/sxhkd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sxhkd.nix"}], "default": "false", "description": "Whether to enable simple X hotkey daemon.", "example": "true", "loc": ["services", "sxhkd", "enable"], "readOnly": false, "title": "services.sxhkd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable simple X hotkey daemon.</p>"}, {"declarations": [{"name": "<services/sxhkd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sxhkd.nix"}], "default": "\"\"", "description": "Additional configuration to add.", "example": "super + {_,shift +} {1-9,0}\n  i3-msg {workspace,move container to workspace} {1-10}\n", "loc": ["services", "sxhkd", "extraConfig"], "readOnly": false, "title": "services.sxhkd.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional configuration to add.</p>"}, {"declarations": [{"name": "<services/sxhkd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sxhkd.nix"}], "default": "[ ]", "description": "Command line arguments to invoke {command}sxhkd with.", "example": "[ \"-m 1\" ]", "loc": ["services", "sxhkd", "extraOptions"], "readOnly": false, "title": "services.sxhkd.extraOptions", "type": "list of string", "descriptionHTML": "<p>Command line arguments to invoke {command}<code>sxhkd</code> with.</p>"}, {"declarations": [{"name": "<services/sxhkd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sxhkd.nix"}], "default": "{ }", "description": "An attribute set that assigns hotkeys to commands.", "example": "{\n  \"super + shift + {r,c}\" = \"i3-msg {restart,reload}\";\n  \"super + {s,w}\"         = \"i3-msg {stacking,tabbed}\";\n  \"super + F1\"            = pkgs.writeShellScript \"script\" \"echo $USER\";\n}\n", "loc": ["services", "sxhkd", "keybindings"], "readOnly": false, "title": "services.sxhkd.keybindings", "type": "attribute set of (null or string or absolute path)", "descriptionHTML": "<p>An attribute set that assigns hotkeys to commands.</p>"}, {"declarations": [{"name": "<services/sxhkd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/sxhkd.nix"}], "default": "pkgs.sxhkd", "description": "The sxhkd package to use. containing the sxhkd executable", "example": "", "loc": ["services", "sxhkd", "package"], "readOnly": false, "title": "services.sxhkd.package", "type": "package", "descriptionHTML": "<p>The sxhkd package to use. containing the sxhkd executable</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Overwrites the {env}all_proxy environment variable for the Syncthing\nprocess to the given value. This is normally used to let Syncthing\nconnect through a SOCKS5 proxy server. See\nhttps://docs.syncthing.net/users/proxying.html.", "example": "\"socks5://address.com:1234\"", "loc": ["services", "syncthing", "allProxy"], "readOnly": false, "title": "services.syncthing.allProxy", "type": "null or string", "descriptionHTML": "<p>Overwrites the {env}<code>all_proxy</code> environment variable for the Syncthing\nprocess to the given value. This is normally used to let Syncthing\nconnect through a SOCKS5 proxy server. See\n<a href=\"https://docs.syncthing.net/users/proxying.html\">https://docs.syncthing.net/users/proxying.html</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Path to the cert.pem file, which will be copied into Syncthing's\nconfig directory.", "example": "", "loc": ["services", "syncthing", "cert"], "readOnly": false, "title": "services.syncthing.cert", "type": "null or string", "descriptionHTML": "<p>Path to the <code>cert.pem</code> file, which will be copied into Syncthing's\nconfig directory.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "false", "description": "Whether to enable Syncthing, a self-hosted open-source alternative to Dropbox and Bittorrent Sync.\n.", "example": "true", "loc": ["services", "syncthing", "enable"], "readOnly": false, "title": "services.syncthing.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Syncthing, a self-hosted open-source alternative to Dropbox and Bittorrent Sync.\n.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "[ ]", "description": "Extra command-line arguments to pass to {command}syncthing", "example": "[\n  \"--reset-deltas\"\n]", "loc": ["services", "syncthing", "extraOptions"], "readOnly": false, "title": "services.syncthing.extraOptions", "type": "list of string", "descriptionHTML": "<p>Extra command-line arguments to pass to {command}<code>syncthing</code></p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "\"127.0.0.1:8384\"", "description": "The address to serve the web interface at.", "example": "", "loc": ["services", "syncthing", "guiAddress"], "readOnly": false, "title": "services.syncthing.guiAddress", "type": "string", "descriptionHTML": "<p>The address to serve the web interface at.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Path to the key.pem file, which will be copied into Syncthing's\nconfig directory.", "example": "", "loc": ["services", "syncthing", "key"], "readOnly": false, "title": "services.syncthing.key", "type": "null or string", "descriptionHTML": "<p>Path to the <code>key.pem</code> file, which will be copied into Syncthing's\nconfig directory.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "true", "description": "Whether to delete the devices which are not configured via the\ndevices option.\nIf set to false, devices added via the web\ninterface will persist and will have to be deleted manually.", "example": "", "loc": ["services", "syncthing", "overrideDevices"], "readOnly": false, "title": "services.syncthing.overrideDevices", "type": "boolean", "descriptionHTML": "<p>Whether to delete the devices which are not configured via the\n<a href=\"#opt-services.syncthing.settings.devices\">devices</a> option.\nIf set to <code>false</code>, devices added via the web\ninterface will persist and will have to be deleted manually.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "true", "description": "Whether to delete the folders which are not configured via the\nfolders option.\nIf set to false, folders added via the web\ninterface will persist and will have to be deleted manually.", "example": "", "loc": ["services", "syncthing", "overrideFolders"], "readOnly": false, "title": "services.syncthing.overrideFolders", "type": "boolean", "descriptionHTML": "<p>Whether to delete the folders which are not configured via the\n<a href=\"#opt-services.syncthing.settings.folders\">folders</a> option.\nIf set to <code>false</code>, folders added via the web\ninterface will persist and will have to be deleted manually.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "pkgs.syncthing", "description": "The syncthing package to use.", "example": "", "loc": ["services", "syncthing", "package"], "readOnly": false, "title": "services.syncthing.package", "type": "package", "descriptionHTML": "<p>The syncthing package to use.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Path to the gui password file.", "example": "", "loc": ["services", "syncthing", "passwordFile"], "readOnly": false, "title": "services.syncthing.passwordFile", "type": "null or absolute path", "descriptionHTML": "<p>Path to the gui password file.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "{ }", "description": "Extra configuration options for Syncthing.\nSee https://docs.syncthing.net/users/config.html.\nNote that this attribute set does not exactly match the documented\nXML format. Instead, this is the format of the JSON REST API. There\nare slight differences. For example, this XML:\nxml\n&lt;options&gt;\n  &lt;listenAddress&gt;default&lt;/listenAddress&gt;\n  &lt;minHomeDiskFree unit=\"%\"&gt;1&lt;/minHomeDiskFree&gt;\n&lt;/options&gt;\ncorresponds to the Nix code:\nnix\n{\n  options = {\n    listenAddresses = [\n      \"default\"\n    ];\n    minHomeDiskFree = {\n      unit = \"%\";\n      value = 1;\n    };\n  };\n}", "example": "{\n  gui = {\n    theme = \"black\";\n  };\n  options = {\n    localAnnounceEnabled = false;\n  };\n}", "loc": ["services", "syncthing", "settings"], "readOnly": false, "title": "services.syncthing.settings", "type": "JSON value", "descriptionHTML": "<p>Extra configuration options for Syncthing.\nSee <a href=\"https://docs.syncthing.net/users/config.html\">https://docs.syncthing.net/users/config.html</a>.\nNote that this attribute set does not exactly match the documented\nXML format. Instead, this is the format of the JSON REST API. There\nare slight differences. For example, this XML:\n<code>xml\n&lt;options&gt;\n  &lt;listenAddress&gt;default&lt;/listenAddress&gt;\n  &lt;minHomeDiskFree unit=\"%\"&gt;1&lt;/minHomeDiskFree&gt;\n&lt;/options&gt;</code>\ncorresponds to the Nix code:\n<code>nix\n{\n  options = {\n    listenAddresses = [\n      \"default\"\n    ];\n    minHomeDiskFree = {\n      unit = \"%\";\n      value = 1;\n    };\n  };\n}</code></p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "{ }", "description": "Peers/devices which Syncthing should communicate with.\nNote that you can still add devices manually, but those changes\nwill be reverted on restart if overrideDevices\nis enabled.", "example": "{\n  bigbox = {\n    addresses = [\n      \"tcp://192.168.0.10:51820\"\n    ];\n    id = \"7CFNTQM-IMTJBHJ-3UWRDIU-ZGQJFR6-VCXZ3NB-XUH3KZO-N52ITXR-LAIYUAU\";\n  };\n}", "loc": ["services", "syncthing", "settings", "devices"], "readOnly": false, "title": "services.syncthing.settings.devices", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>Peers/devices which Syncthing should communicate with.</p>\n<p>Note that you can still add devices manually, but those changes\nwill be reverted on restart if <a href=\"#opt-services.syncthing.overrideDevices\">overrideDevices</a>\nis enabled.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "false", "description": "Automatically create or share folders that this device advertises at the default path.\nSee https://docs.syncthing.net/users/config.html?highlight=autoaccept#config-file-format.", "example": "", "loc": ["services", "syncthing", "settings", "devices", "<name>", "autoAcceptFolders"], "readOnly": false, "title": "services.syncthing.settings.devices.<name>.autoAcceptFolders", "type": "boolean", "descriptionHTML": "<p>Automatically create or share folders that this device advertises at the default path.\nSee <a href=\"https://docs.syncthing.net/users/config.html?highlight=autoaccept#config-file-format\">https://docs.syncthing.net/users/config.html?highlight=autoaccept#config-file-format</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "", "description": "The device ID. See https://docs.syncthing.net/dev/device-ids.html.", "example": "", "loc": ["services", "syncthing", "settings", "devices", "<name>", "id"], "readOnly": false, "title": "services.syncthing.settings.devices.<name>.id", "type": "string", "descriptionHTML": "<p>The device ID. See <a href=\"https://docs.syncthing.net/dev/device-ids.html\">https://docs.syncthing.net/dev/device-ids.html</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "\"\u2039name\u203a\"", "description": "The name of the device.", "example": "", "loc": ["services", "syncthing", "settings", "devices", "<name>", "name"], "readOnly": false, "title": "services.syncthing.settings.devices.<name>.name", "type": "string", "descriptionHTML": "<p>The name of the device.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "{ }", "description": "Folders which should be shared by Syncthing.\nNote that you can still add folders manually, but those changes\nwill be reverted on restart if overrideFolders\nis enabled.", "example": "{\n  \"/home/user/sync\" = {\n    id = \"syncme\";\n    devices = [ \"bigbox\" ];\n  };\n}\n", "loc": ["services", "syncthing", "settings", "folders"], "readOnly": false, "title": "services.syncthing.settings.folders", "type": "attribute set of (JSON value)", "descriptionHTML": "<p>Folders which should be shared by Syncthing.</p>\n<p>Note that you can still add folders manually, but those changes\nwill be reverted on restart if <a href=\"#opt-services.syncthing.overrideFolders\">overrideFolders</a>\nis enabled.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "false", "description": "On Unix systems, tries to copy file/folder ownership from\nthe parent directory (the directory it\u2019s located in).\nRequires running Syncthing as a privileged user, or\ngranting it additional capabilities (e.g. CAP_CHOWN on\nLinux).", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "copyOwnershipFromParent"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.copyOwnershipFromParent", "type": "boolean", "descriptionHTML": "<p>On Unix systems, tries to copy file/folder ownership from\nthe parent directory (the directory it\u2019s located in).\nRequires running Syncthing as a privileged user, or\ngranting it additional capabilities (e.g. CAP_CHOWN on\nLinux).</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "[ ]", "description": "The devices this folder should be shared with. Each device must\nbe defined in the devices option.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "devices"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.devices", "type": "list of string", "descriptionHTML": "<p>The devices this folder should be shared with. Each device must\nbe defined in the <a href=\"#opt-services.syncthing.settings.devices\">devices</a> option.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "true", "description": "Whether to share this folder.\nThis option is useful when you want to define all folders\nin one place, but not every machine should share all folders.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "enable"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether to share this folder.\nThis option is useful when you want to define all folders\nin one place, but not every machine should share all folders.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "\"\u2039name\u203a\"", "description": "The ID of the folder. Must be the same on all devices.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "id"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.id", "type": "string", "descriptionHTML": "<p>The ID of the folder. Must be the same on all devices.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "\"\u2039name\u203a\"", "description": "The label of the folder.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "label"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.label", "type": "string", "descriptionHTML": "<p>The label of the folder.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "\"\u2039name\u203a\"", "description": "The path to the folder which should be shared.\nOnly absolute paths (starting with /) and paths relative to\nthe user's home directory (starting with ~/) are allowed.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "path"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.path", "type": "string starting with / or ~/", "descriptionHTML": "<p>The path to the folder which should be shared.\nOnly absolute paths (starting with <code>/</code>) and paths relative to\nthe user's home directory (starting with <code>~/</code>) are allowed.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "\"sendreceive\"", "description": "Controls how the folder is handled by Syncthing.\nSee https://docs.syncthing.net/users/config.html#config-option-folder.type.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "type"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.type", "type": "one of \"sendreceive\", \"sendonly\", \"receiveonly\", \"receiveencrypted\"", "descriptionHTML": "<p>Controls how the folder is handled by Syncthing.\nSee <a href=\"https://docs.syncthing.net/users/config.html#config-option-folder.type\">https://docs.syncthing.net/users/config.html#config-option-folder.type</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "How to keep changed/deleted files with Syncthing.\nThere are 4 different types of versioning with different parameters.\nSee https://docs.syncthing.net/users/versioning.html.", "example": "[\n  {\n    versioning = {\n      type = \"simple\";\n      params.keep = \"10\";\n    };\n  }\n  {\n    versioning = {\n      type = \"trashcan\";\n      params.cleanoutDays = \"1000\";\n    };\n  }\n  {\n    versioning = {\n      type = \"staggered\";\n      fsPath = \"/syncthing/backup\";\n      params = {\n        cleanInterval = \"3600\";\n        maxAge = \"31536000\";\n      };\n    };\n  }\n  {\n    versioning = {\n      type = \"external\";\n      params.versionsPath = pkgs.writers.writeBash \"backup\" ''\n        folderpath=\"$1\"\n        filepath=\"$2\"\n        rm -rf \"$folderpath/$filepath\"\n      '';\n    };\n  }\n]\n", "loc": ["services", "syncthing", "settings", "folders", "<name>", "versioning"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.versioning", "type": "null or (JSON value)", "descriptionHTML": "<p>How to keep changed/deleted files with Syncthing.\nThere are 4 different types of versioning with different parameters.\nSee <a href=\"https://docs.syncthing.net/users/versioning.html\">https://docs.syncthing.net/users/versioning.html</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "", "description": "The type of versioning.\nSee https://docs.syncthing.net/users/versioning.html.", "example": "", "loc": ["services", "syncthing", "settings", "folders", "<name>", "versioning", "type"], "readOnly": false, "title": "services.syncthing.settings.folders.<name>.versioning.type", "type": "one of \"external\", \"simple\", \"staggered\", \"trashcan\"", "descriptionHTML": "<p>The type of versioning.\nSee <a href=\"https://docs.syncthing.net/users/versioning.html\">https://docs.syncthing.net/users/versioning.html</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "{ }", "description": "The options element contains all other global configuration options", "example": "", "loc": ["services", "syncthing", "settings", "options"], "readOnly": false, "title": "services.syncthing.settings.options", "type": "JSON value", "descriptionHTML": "<p>The options element contains all other global configuration options</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Whether to apply bandwidth limits to devices in the same broadcast domain as the local device.", "example": "", "loc": ["services", "syncthing", "settings", "options", "limitBandwidthInLan"], "readOnly": false, "title": "services.syncthing.settings.options.limitBandwidthInLan", "type": "null or boolean", "descriptionHTML": "<p>Whether to apply bandwidth limits to devices in the same broadcast domain as the local device.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Whether to send announcements to the local LAN, also use such announcements to find other devices.", "example": "", "loc": ["services", "syncthing", "settings", "options", "localAnnounceEnabled"], "readOnly": false, "title": "services.syncthing.settings.options.localAnnounceEnabled", "type": "null or boolean", "descriptionHTML": "<p>Whether to send announcements to the local LAN, also use such announcements to find other devices.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "The port on which to listen and send IPv4 broadcast announcements to.", "example": "", "loc": ["services", "syncthing", "settings", "options", "localAnnouncePort"], "readOnly": false, "title": "services.syncthing.settings.options.localAnnouncePort", "type": "null or signed integer", "descriptionHTML": "<p>The port on which to listen and send IPv4 broadcast announcements to.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "This option controls how many folders may concurrently be in I/O-intensive operations such as syncing or scanning.\nThe mechanism is described in detail in a separate chapter.", "example": "", "loc": ["services", "syncthing", "settings", "options", "maxFolderConcurrency"], "readOnly": false, "title": "services.syncthing.settings.options.maxFolderConcurrency", "type": "null or signed integer", "descriptionHTML": "<p>This option controls how many folders may concurrently be in I/O-intensive operations such as syncing or scanning.\nThe mechanism is described in detail in a <a href=\"https://docs.syncthing.net/advanced/option-max-concurrency.html\">separate chapter</a>.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "When true, relays will be connected to and potentially used for device to device connections.", "example": "", "loc": ["services", "syncthing", "settings", "options", "relaysEnabled"], "readOnly": false, "title": "services.syncthing.settings.options.relaysEnabled", "type": "null or boolean", "descriptionHTML": "<p>When true, relays will be connected to and potentially used for device to device connections.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "null", "description": "Whether the user has accepted to submit anonymous usage data.\nThe default, 0, mean the user has not made a choice, and Syncthing will ask at some point in the future.\n\"-1\" means no, a number above zero means that that version of usage reporting has been accepted.", "example": "", "loc": ["services", "syncthing", "settings", "options", "urAccepted"], "readOnly": false, "title": "services.syncthing.settings.options.urAccepted", "type": "null or signed integer", "descriptionHTML": "<p>Whether the user has accepted to submit anonymous usage data.\nThe default, 0, mean the user has not made a choice, and Syncthing will ask at some point in the future.\n\"-1\" means no, a number above zero means that that version of usage reporting has been accepted.</p>"}, {"declarations": [{"name": "<services/syncthing.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/syncthing.nix"}], "default": "{\n  enable = false;\n}", "description": "Syncthing tray service configuration.", "example": "", "loc": ["services", "syncthing", "tray"], "readOnly": false, "title": "services.syncthing.tray", "type": "boolean or (submodule)", "descriptionHTML": "<p>Syncthing tray service configuration.</p>"}, {"declarations": [{"name": "<services/systembus-notify.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/systembus-notify.nix"}], "default": "false", "description": "Whether to enable systembus-notify - system bus notification daemon.", "example": "true", "loc": ["services", "systembus-notify", "enable"], "readOnly": false, "title": "services.systembus-notify.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable systembus-notify - system bus notification daemon.</p>"}, {"declarations": [{"name": "<services/taffybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/taffybar.nix"}], "default": "false", "description": "Whether to enable Taffybar.", "example": "true", "loc": ["services", "taffybar", "enable"], "readOnly": false, "title": "services.taffybar.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Taffybar.</p>"}, {"declarations": [{"name": "<services/taffybar.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/taffybar.nix"}], "default": "pkgs.taffybar", "description": "The taffybar package to use.", "example": "", "loc": ["services", "taffybar", "package"], "readOnly": false, "title": "services.taffybar.package", "type": "package", "descriptionHTML": "<p>The taffybar package to use.</p>"}, {"declarations": [{"name": "<services/tahoe-lafs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/tahoe-lafs.nix"}], "default": "false", "description": "Whether to enable Tahoe-LAFS.", "example": "true", "loc": ["services", "tahoe-lafs", "enable"], "readOnly": false, "title": "services.tahoe-lafs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Tahoe-LAFS.</p>"}, {"declarations": [{"name": "<services/taskwarrior-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/taskwarrior-sync.nix"}], "default": "false", "description": "Whether to enable Taskwarrior periodic sync.", "example": "true", "loc": ["services", "taskwarrior-sync", "enable"], "readOnly": false, "title": "services.taskwarrior-sync.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Taskwarrior periodic sync.</p>"}, {"declarations": [{"name": "<services/taskwarrior-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/taskwarrior-sync.nix"}], "default": "\"*:0/5\"", "description": "How often to run taskwarrior sync. This\nvalue is passed to the systemd timer configuration as the\nOnCalendar option. See\n{manpage}systemd.time(7)\nfor more information about the format.", "example": "", "loc": ["services", "taskwarrior-sync", "frequency"], "readOnly": false, "title": "services.taskwarrior-sync.frequency", "type": "string", "descriptionHTML": "<p>How often to run <code>taskwarrior sync</code>. This\nvalue is passed to the systemd timer configuration as the\n<code>OnCalendar</code> option. See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>"}, {"declarations": [{"name": "<services/taskwarrior-sync.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/taskwarrior-sync.nix"}], "default": "pkgs.taskwarrior", "description": "The taskwarrior package to use.", "example": "pkgs.taskwarrior3", "loc": ["services", "taskwarrior-sync", "package"], "readOnly": false, "title": "services.taskwarrior-sync.package", "type": "package", "descriptionHTML": "<p>The taskwarrior package to use.</p>"}, {"declarations": [{"name": "<services/tldr-update.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/tldr-update.nix"}], "default": "false", "description": "Whether to enable Automatic updates for the tldr CLI\n.", "example": "true", "loc": ["services", "tldr-update", "enable"], "readOnly": false, "title": "services.tldr-update.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Automatic updates for the tldr CLI\n.</p>"}, {"declarations": [{"name": "<services/tldr-update.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/tldr-update.nix"}], "default": "pkgs.tldr", "description": "The tldr package to use.", "example": "tlrc", "loc": ["services", "tldr-update", "package"], "readOnly": false, "title": "services.tldr-update.package", "type": "package", "descriptionHTML": "<p>The tldr package to use.</p>"}, {"declarations": [{"name": "<services/tldr-update.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/tldr-update.nix"}], "default": "\"weekly\"", "description": "Systemd timer period to create for scheduled {command}tldr --update.\nThe format is described in {manpage}systemd.time(7).", "example": "", "loc": ["services", "tldr-update", "period"], "readOnly": false, "title": "services.tldr-update.period", "type": "string", "descriptionHTML": "<p>Systemd timer period to create for scheduled {command}<code>tldr --update</code>.</p>\n<p>The format is described in {manpage}<code>systemd.time(7)</code>.</p>"}, {"declarations": [{"name": "<services/trayer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/trayer.nix"}], "default": "false", "description": "Whether to enable trayer, the lightweight GTK2+ systray for UNIX desktops.", "example": "true", "loc": ["services", "trayer", "enable"], "readOnly": false, "title": "services.trayer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable trayer, the lightweight GTK2+ systray for UNIX desktops.</p>"}, {"declarations": [{"name": "<services/trayer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/trayer.nix"}], "default": "pkgs.trayer", "description": "The trayer package to use.", "example": "", "loc": ["services", "trayer", "package"], "readOnly": false, "title": "services.trayer.package", "type": "package", "descriptionHTML": "<p>The trayer package to use.</p>"}, {"declarations": [{"name": "<services/trayer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/trayer.nix"}], "default": "{ }", "description": "Trayer configuration as a set of attributes. Further details can be\nfound in trayer's README.\n{var}SetDockType\n: boolean (default: true)\n{var}SetPartialStrut\n: boolean (default: true)\n{var}align\n: one of \"left\", \"right\", \"center\" (default: \"center\")\n{var}alpha\n: signed integer (default: 127)\n{var}distance\n: signed integer (default: 0)\n{var}distancefrom\n: one of \"left\", \"right\", \"top\", \"bottom\" (default: \"top\")\n{var}edge\n: one of \"left\", \"right\", \"top\", \"bottom\", \"none\" (default: \"bottom\")\n{var}expand\n: boolean (default: true)\n{var}height\n: signed integer (default: 26)\n{var}heighttype\n: one of \"request\", \"pixel\" (default: \"pixel\")\n{var}iconspacing\n: signed integer (default: 0)\n{var}margin\n: signed integer (default: 0)\n{var}monitor\n: unsigned integer, meaning >=0, or value \"primary\" (singular enum) (default: 0)\n{var}padding\n: signed integer (default: 0)\n{var}tint\n: string (default: \"0xFFFFFFFF\")\n{var}transparent\n: boolean (default: false)\n{var}width\n: signed integer (default: 100)\n{var}widthtype\n: one of \"request\", \"pixel\", \"percent\" (default: \"percent\")", "example": "{\n  edge = \"top\";\n  padding = 6;\n  SetDockType = true;\n  tint = \"0x282c34\";\n}\n", "loc": ["services", "trayer", "settings"], "readOnly": false, "title": "services.trayer.settings", "type": "attribute set of (null or string or boolean or signed integer)", "descriptionHTML": "<p>Trayer configuration as a set of attributes. Further details can be\nfound in <a href=\"https://github.com/sargon/trayer-srg/blob/master/README\">trayer's README</a>.</p>\n<p>{var}<code>SetDockType</code>\n: boolean (default: <code>true</code>)</p>\n<p>{var}<code>SetPartialStrut</code>\n: boolean (default: <code>true</code>)</p>\n<p>{var}<code>align</code>\n: one of \"left\", \"right\", \"center\" (default: <code>\"center\"</code>)</p>\n<p>{var}<code>alpha</code>\n: signed integer (default: <code>127</code>)</p>\n<p>{var}<code>distance</code>\n: signed integer (default: <code>0</code>)</p>\n<p>{var}<code>distancefrom</code>\n: one of \"left\", \"right\", \"top\", \"bottom\" (default: <code>\"top\"</code>)</p>\n<p>{var}<code>edge</code>\n: one of \"left\", \"right\", \"top\", \"bottom\", \"none\" (default: <code>\"bottom\"</code>)</p>\n<p>{var}<code>expand</code>\n: boolean (default: <code>true</code>)</p>\n<p>{var}<code>height</code>\n: signed integer (default: <code>26</code>)</p>\n<p>{var}<code>heighttype</code>\n: one of \"request\", \"pixel\" (default: <code>\"pixel\"</code>)</p>\n<p>{var}<code>iconspacing</code>\n: signed integer (default: <code>0</code>)</p>\n<p>{var}<code>margin</code>\n: signed integer (default: <code>0</code>)</p>\n<p>{var}<code>monitor</code>\n: unsigned integer, meaning &gt;=0, or value \"primary\" (singular enum) (default: <code>0</code>)</p>\n<p>{var}<code>padding</code>\n: signed integer (default: <code>0</code>)</p>\n<p>{var}<code>tint</code>\n: string (default: <code>\"0xFFFFFFFF\"</code>)</p>\n<p>{var}<code>transparent</code>\n: boolean (default: <code>false</code>)</p>\n<p>{var}<code>width</code>\n: signed integer (default: <code>100</code>)</p>\n<p>{var}<code>widthtype</code>\n: one of \"request\", \"pixel\", \"percent\" (default: <code>\"percent\"</code>)</p>"}, {"declarations": [{"name": "<services/trayscale.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/trayscale.nix"}], "default": "false", "description": "Whether to enable An unofficial GUI wrapper around the Tailscale CLI client..", "example": "true", "loc": ["services", "trayscale", "enable"], "readOnly": false, "title": "services.trayscale.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable An unofficial GUI wrapper around the Tailscale CLI client..</p>"}, {"declarations": [{"name": "<services/trayscale.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/trayscale.nix"}], "default": "true", "description": "Whether to hide the trayscale window on startup.", "example": "", "loc": ["services", "trayscale", "hideWindow"], "readOnly": false, "title": "services.trayscale.hideWindow", "type": "boolean", "descriptionHTML": "<p>Whether to hide the trayscale window on startup.</p>"}, {"declarations": [{"name": "<services/trayscale.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/trayscale.nix"}], "default": "pkgs.trayscale", "description": "The trayscale package to use.", "example": "", "loc": ["services", "trayscale", "package"], "readOnly": false, "title": "services.trayscale.package", "type": "package", "descriptionHTML": "<p>The trayscale package to use.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "3000", "description": "The time each notification remains visible, in milliseconds.", "example": "5000", "loc": ["services", "twmn", "duration"], "readOnly": false, "title": "services.twmn.duration", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The time each notification remains visible, in milliseconds.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "false", "description": "Whether to enable twmn, a tiling window manager notification daemon.", "example": "true", "loc": ["services", "twmn", "enable"], "readOnly": false, "title": "services.twmn.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable twmn, a tiling window manager notification daemon.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "{ }", "description": "Extra configuration options to add to the twmnd config file. See\nhttps://github.com/sboli/twmn/blob/master/README.md\nfor details.", "example": "{ main.activation_command = \"${pkgs.hello}/bin/hello\"; }", "loc": ["services", "twmn", "extraConfig"], "readOnly": false, "title": "services.twmn.extraConfig", "type": "attribute set", "descriptionHTML": "<p>Extra configuration options to add to the twmnd config file. See\n<a href=\"https://github.com/sboli/twmn/blob/master/README.md\">https://github.com/sboli/twmn/blob/master/README.md</a>\nfor details.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"127.0.0.1\"", "description": "Host address to listen on for notifications.", "example": "\"laptop.lan\"", "loc": ["services", "twmn", "host"], "readOnly": false, "title": "services.twmn.host", "type": "string", "descriptionHTML": "<p>Host address to listen on for notifications.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "null", "description": "Path to the critical notifications' icon.", "example": "", "loc": ["services", "twmn", "icons", "critical"], "readOnly": false, "title": "services.twmn.icons.critical", "type": "null or absolute path", "descriptionHTML": "<p>Path to the critical notifications' icon.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "null", "description": "Path to the informative notifications' icon.", "example": "", "loc": ["services", "twmn", "icons", "info"], "readOnly": false, "title": "services.twmn.icons.info", "type": "null or absolute path", "descriptionHTML": "<p>Path to the informative notifications' icon.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "null", "description": "Path to the warning notifications' icon.", "example": "", "loc": ["services", "twmn", "icons", "warning"], "readOnly": false, "title": "services.twmn.icons.warning", "type": "null or absolute path", "descriptionHTML": "<p>Path to the warning notifications' icon.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "9797", "description": "UDP port to listen on for notifications.", "example": "", "loc": ["services", "twmn", "port"], "readOnly": false, "title": "services.twmn.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>UDP port to listen on for notifications.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "null", "description": "Screen number to display notifications on when using a multi-head\ndesktop.", "example": "0", "loc": ["services", "twmn", "screen"], "readOnly": false, "title": "services.twmn.screen", "type": "null or signed integer", "descriptionHTML": "<p>Screen number to display notifications on when using a multi-head\ndesktop.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"\"", "description": "Command to execute to play a notification's sound.", "example": "", "loc": ["services", "twmn", "soundCommand"], "readOnly": false, "title": "services.twmn.soundCommand", "type": "string", "descriptionHTML": "<p>Command to execute to play a notification's sound.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"#999999\"", "description": "Notification's text color. RGB hex and keywords (e.g. lightgray)\nare supported.", "example": "\"lightgray\"", "loc": ["services", "twmn", "text", "color"], "readOnly": false, "title": "services.twmn.text.color", "type": "string", "descriptionHTML": "<p>Notification's text color. RGB hex and keywords (e.g. <code>lightgray</code>)\nare supported.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"Sans\"", "description": "Notification text's font family.", "example": "\"Noto Sans\"", "loc": ["services", "twmn", "text", "font", "family"], "readOnly": false, "title": "services.twmn.text.font.family", "type": "string", "descriptionHTML": "<p>Notification text's font family.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "null", "description": "The font package to use. Package providing the font to use for the notification text.\nThis package is only used if font.package is not null.", "example": "pkgs.dejavu_fonts", "loc": ["services", "twmn", "text", "font", "package"], "readOnly": false, "title": "services.twmn.text.font.package", "type": "null or package", "descriptionHTML": "<p>The font package to use. Package providing the font to use for the notification text.\nThis package is only used if <code>font.package</code> is not null.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "13", "description": "Notification text's font size.", "example": "42", "loc": ["services", "twmn", "text", "font", "size"], "readOnly": false, "title": "services.twmn.text.font.size", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Notification text's font size.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"medium\"", "description": "Notification text's font variant.", "example": "\"heavy\"", "loc": ["services", "twmn", "text", "font", "variant"], "readOnly": false, "title": "services.twmn.text.font.variant", "type": "one of \"oblique\", \"italic\", \"ultra-light\", \"light\", \"medium\", \"semi-bold\", \"bold\", \"ultra-bold\", \"heavy\", \"ultra-condensed\", \"extra-condensed\", \"condensed\", \"semi-condensed\", \"semi-expanded\", \"expanded\", \"extra-expanded\", \"ultra-expanded\"", "descriptionHTML": "<p>Notification text's font variant.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "null", "description": "Maximum length of the text before it is cut and suffixed with \"...\".\nNever cuts if null.", "example": "80", "loc": ["services", "twmn", "text", "maxLength"], "readOnly": false, "title": "services.twmn.text.maxLength", "type": "null or (unsigned integer, meaning >=0)", "descriptionHTML": "<p>Maximum length of the text before it is cut and suffixed with \"...\".\nNever cuts if <code>null</code>.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "false", "description": "Whether to enable forcing the notification window to always be on top.", "example": "true", "loc": ["services", "twmn", "window", "alwaysOnTop"], "readOnly": false, "title": "services.twmn.window.alwaysOnTop", "type": "boolean", "descriptionHTML": "<p>Whether to enable forcing the notification window to always be on top.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "500", "description": "The bounce animation duration in milliseconds.", "example": "618", "loc": ["services", "twmn", "window", "animation", "bounce", "duration"], "readOnly": false, "title": "services.twmn.window.animation.bounce.duration", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The bounce animation duration in milliseconds.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "false", "description": "Whether to enable notification bounce when displaying next notification directly.", "example": "true", "loc": ["services", "twmn", "window", "animation", "bounce", "enable"], "readOnly": false, "title": "services.twmn.window.animation.bounce.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable notification bounce when displaying next notification directly.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "{ }", "description": "Options for the notification appearance's animation.", "example": "{\n  curve = 19;\n  duration = 618;\n}\n", "loc": ["services", "twmn", "window", "animation", "easeIn"], "readOnly": false, "title": "services.twmn.window.animation.easeIn", "type": "submodule", "descriptionHTML": "<p>Options for the notification appearance's animation.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "38", "description": "The qt easing-curve animation to use for the animation. See\n\nQEasingCurve documentation.", "example": "19", "loc": ["services", "twmn", "window", "animation", "easeIn", "curve"], "readOnly": false, "title": "services.twmn.window.animation.easeIn.curve", "type": "integer between 0 and 40 (both inclusive)", "descriptionHTML": "<p>The qt easing-curve animation to use for the animation. See\n<a href=\"https://doc.qt.io/qt-5/qeasingcurve.html#Type-enum\">\nQEasingCurve documentation</a>.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "1000", "description": "The animation duration in milliseconds.", "example": "618", "loc": ["services", "twmn", "window", "animation", "easeIn", "duration"], "readOnly": false, "title": "services.twmn.window.animation.easeIn.duration", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The animation duration in milliseconds.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "{ }", "description": "Options for the notification disappearance's animation.", "example": "{\n  curve = 19;\n  duration = 618;\n}\n", "loc": ["services", "twmn", "window", "animation", "easeOut"], "readOnly": false, "title": "services.twmn.window.animation.easeOut", "type": "submodule", "descriptionHTML": "<p>Options for the notification disappearance's animation.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "38", "description": "The qt easing-curve animation to use for the animation. See\n\nQEasingCurve documentation.", "example": "19", "loc": ["services", "twmn", "window", "animation", "easeOut", "curve"], "readOnly": false, "title": "services.twmn.window.animation.easeOut.curve", "type": "integer between 0 and 40 (both inclusive)", "descriptionHTML": "<p>The qt easing-curve animation to use for the animation. See\n<a href=\"https://doc.qt.io/qt-5/qeasingcurve.html#Type-enum\">\nQEasingCurve documentation</a>.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "1000", "description": "The animation duration in milliseconds.", "example": "618", "loc": ["services", "twmn", "window", "animation", "easeOut", "duration"], "readOnly": false, "title": "services.twmn.window.animation.easeOut.duration", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>The animation duration in milliseconds.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"#000000\"", "description": "Notification's background color. RGB hex and keywords (e.g.\nlightgray) are supported.", "example": "\"lightgray\"", "loc": ["services", "twmn", "window", "color"], "readOnly": false, "title": "services.twmn.window.color", "type": "string", "descriptionHTML": "<p>Notification's background color. RGB hex and keywords (e.g.\n<code>lightgray</code>) are supported.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "18", "description": "Height of the slide bar. Useful to match your tiling window\nmanager's bar.", "example": "42", "loc": ["services", "twmn", "window", "height"], "readOnly": false, "title": "services.twmn.window.height", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Height of the slide bar. Useful to match your tiling window\nmanager's bar.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "0", "description": "Offset of the notification's slide starting point in pixels on the\nhorizontal axis (positive is rightward).", "example": "50", "loc": ["services", "twmn", "window", "offset", "x"], "readOnly": false, "title": "services.twmn.window.offset.x", "type": "signed integer", "descriptionHTML": "<p>Offset of the notification's slide starting point in pixels on the\nhorizontal axis (positive is rightward).</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "0", "description": "Offset of the notification's slide starting point in pixels on the\nvertical axis (positive is upward).", "example": "-100", "loc": ["services", "twmn", "window", "offset", "y"], "readOnly": false, "title": "services.twmn.window.offset.y", "type": "signed integer", "descriptionHTML": "<p>Offset of the notification's slide starting point in pixels on the\nvertical axis (positive is upward).</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "100", "description": "The notification window's opacity.", "example": "80", "loc": ["services", "twmn", "window", "opacity"], "readOnly": false, "title": "services.twmn.window.opacity", "type": "integer between 0 and 100 (both inclusive)", "descriptionHTML": "<p>The notification window's opacity.</p>"}, {"declarations": [{"name": "<services/twmn.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/twmn.nix"}], "default": "\"top_right\"", "description": "Position of the notification slide. The notification will slide\nin vertically from the border if placed in\ntop_center or bottom_center,\nhorizontally otherwise.", "example": "\"bottom_left\"", "loc": ["services", "twmn", "window", "position"], "readOnly": false, "title": "services.twmn.window.position", "type": "one of \"tr\", \"top_right\", \"tl\", \"top_left\", \"br\", \"bottom_right\", \"bl\", \"bottom_left\", \"tc\", \"top_center\", \"bc\", \"bottom_center\", \"c\", \"center\"", "descriptionHTML": "<p>Position of the notification slide. The notification will slide\nin vertically from the border if placed in\n<code>top_center</code> or <code>bottom_center</code>,\nhorizontally otherwise.</p>"}, {"declarations": [{"name": "<services/udiskie.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/udiskie.nix"}], "default": "true", "description": "Whether to automatically mount new devices.", "example": "", "loc": ["services", "udiskie", "automount"], "readOnly": false, "title": "services.udiskie.automount", "type": "boolean", "descriptionHTML": "<p>Whether to automatically mount new devices.</p>"}, {"declarations": [{"name": "<services/udiskie.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/udiskie.nix"}], "default": "false", "description": "Whether to enable the udiskie mount daemon.\nNote, if you use NixOS then you must add\nservices.udisks2.enable = true\nto your system configuration. Otherwise mounting will fail because\nthe Udisk2 DBus service is not found.", "example": "true", "loc": ["services", "udiskie", "enable"], "readOnly": false, "title": "services.udiskie.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the udiskie mount daemon.</p>\n<p>Note, if you use NixOS then you must add\n<code>services.udisks2.enable = true</code>\nto your system configuration. Otherwise mounting will fail because\nthe Udisk2 DBus service is not found.</p>"}, {"declarations": [{"name": "<services/udiskie.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/udiskie.nix"}], "default": "true", "description": "Whether to show pop-up notifications.", "example": "", "loc": ["services", "udiskie", "notify"], "readOnly": false, "title": "services.udiskie.notify", "type": "boolean", "descriptionHTML": "<p>Whether to show pop-up notifications.</p>"}, {"declarations": [{"name": "<services/udiskie.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/udiskie.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/udiskie/config.yml.\nSee https://github.com/coldfix/udiskie/blob/master/doc/udiskie.8.txt#configuration\nfor the full list of options.", "example": "{\n  program_options = {\n    udisks_version = 2;\n    tray = true;\n  };\n  icon_names.media = [ \"media-optical\" ];\n}\n", "loc": ["services", "udiskie", "settings"], "readOnly": false, "title": "services.udiskie.settings", "type": "YAML 1.1 value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/udiskie/config.yml</code>.</p>\n<p>See <a href=\"https://github.com/coldfix/udiskie/blob/master/doc/udiskie.8.txt#configuration\">https://github.com/coldfix/udiskie/blob/master/doc/udiskie.8.txt#configuration</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<services/udiskie.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/udiskie.nix"}], "default": "\"auto\"", "description": "Whether to display tray icon.\nThe options are\nalways\n: Always show tray icon.\nauto\n: Show tray icon only when there is a device available.\nnever\n: Never show tray icon.", "example": "", "loc": ["services", "udiskie", "tray"], "readOnly": false, "title": "services.udiskie.tray", "type": "one of \"always\", \"auto\", \"never\"", "descriptionHTML": "<p>Whether to display tray icon.</p>\n<p>The options are</p>\n<p><code>always</code>\n: Always show tray icon.</p>\n<p><code>auto</code>\n: Show tray icon only when there is a device available.</p>\n<p><code>never</code>\n: Never show tray icon.</p>"}, {"declarations": [{"name": "<services/unclutter.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unclutter.nix"}], "default": "false", "description": "Whether to enable unclutter.", "example": "true", "loc": ["services", "unclutter", "enable"], "readOnly": false, "title": "services.unclutter.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable unclutter.</p>"}, {"declarations": [{"name": "<services/unclutter.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unclutter.nix"}], "default": "[ ]", "description": "More arguments to pass to the unclutter command.", "example": "[\n  \"exclude-root\"\n  \"ignore-scrolling\"\n]", "loc": ["services", "unclutter", "extraOptions"], "readOnly": false, "title": "services.unclutter.extraOptions", "type": "list of string", "descriptionHTML": "<p>More arguments to pass to the unclutter command.</p>"}, {"declarations": [{"name": "<services/unclutter.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unclutter.nix"}], "default": "pkgs.unclutter-xfixes", "description": "The unclutter-xfixes package to use.", "example": "", "loc": ["services", "unclutter", "package"], "readOnly": false, "title": "services.unclutter.package", "type": "package", "descriptionHTML": "<p>The unclutter-xfixes package to use.</p>"}, {"declarations": [{"name": "<services/unclutter.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unclutter.nix"}], "default": "1", "description": "Minimum number of pixels considered cursor movement.", "example": "", "loc": ["services", "unclutter", "threshold"], "readOnly": false, "title": "services.unclutter.threshold", "type": "signed integer", "descriptionHTML": "<p>Minimum number of pixels considered cursor movement.</p>"}, {"declarations": [{"name": "<services/unclutter.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unclutter.nix"}], "default": "1", "description": "Number of seconds before the cursor is marked inactive.", "example": "", "loc": ["services", "unclutter", "timeout"], "readOnly": false, "title": "services.unclutter.timeout", "type": "signed integer", "descriptionHTML": "<p>Number of seconds before the cursor is marked inactive.</p>"}, {"declarations": [{"name": "<services/unison.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unison.nix"}], "default": "false", "description": "Whether to enable Unison synchronisation.", "example": "true", "loc": ["services", "unison", "enable"], "readOnly": false, "title": "services.unison.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Unison synchronisation.</p>"}, {"declarations": [{"name": "<services/unison.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unison.nix"}], "default": "pkgs.unison", "description": "The unison package to use.", "example": "pkgs.unison.override { enableX11 = false; }", "loc": ["services", "unison", "package"], "readOnly": false, "title": "services.unison.package", "type": "package", "descriptionHTML": "<p>The unison package to use.</p>"}, {"declarations": [{"name": "<services/unison.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unison.nix"}], "default": "{ }", "description": "Unison root pairs to keep synchronised.", "example": "{\n  \"my-documents\" = {\n    roots = [\n      \"/home/user/documents\"\n      \"ssh://remote/documents\"\n    ];\n  };\n}\n", "loc": ["services", "unison", "pairs"], "readOnly": false, "title": "services.unison.pairs", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Unison root pairs to keep synchronised.</p>"}, {"declarations": [{"name": "<services/unison.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unison.nix"}], "default": "{\n  repeat = \"watch\";\n  sshcmd = \"${pkgs.openssh}/bin/ssh\";\n  ui = \"text\";\n  auto = \"true\";\n  batch = \"true\";\n  log = \"false\"; # don't log to file, handled by systemd\n}\n", "description": "Additional command line options as a dictionary to pass to the\nunison program.\nUse a list of strings to declare the same option multiple times.\nSee\n{manpage}unison(1)\nfor a list of available options.", "example": "", "loc": ["services", "unison", "pairs", "<name>", "commandOptions"], "readOnly": false, "title": "services.unison.pairs.<name>.commandOptions", "type": "attribute set of (string or list of string)", "descriptionHTML": "<p>Additional command line options as a dictionary to pass to the\n<code>unison</code> program.</p>\n<p>Use a list of strings to declare the same option multiple times.</p>\n<p>See\n{manpage}<code>unison(1)</code>\nfor a list of available options.</p>"}, {"declarations": [{"name": "<services/unison.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unison.nix"}], "default": "", "description": "Pair of roots to synchronise.", "example": "[\n  \"/home/user/documents\"\n  \"ssh://remote/documents\"\n]\n", "loc": ["services", "unison", "pairs", "<name>", "roots"], "readOnly": false, "title": "services.unison.pairs.<name>.roots", "type": "list of string of length 2", "descriptionHTML": "<p>Pair of roots to synchronise.</p>"}, {"declarations": [{"name": "<services/unison.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/unison.nix"}], "default": "\"$XDG_DATA_HOME/unison\"", "description": "Unison state directory to use.", "example": "", "loc": ["services", "unison", "pairs", "<name>", "stateDirectory"], "readOnly": false, "title": "services.unison.pairs.<name>.stateDirectory", "type": "absolute path", "descriptionHTML": "<p>Unison state directory to use.</p>"}, {"declarations": [{"name": "<services/vdirsyncer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/vdirsyncer.nix"}], "default": "null", "description": "Optional configuration file to link to use instead of\nthe default file ({file}$XDG_CONFIG_HOME/vdirsyncer/config).", "example": "", "loc": ["services", "vdirsyncer", "configFile"], "readOnly": false, "title": "services.vdirsyncer.configFile", "type": "null or absolute path", "descriptionHTML": "<p>Optional configuration file to link to use instead of\nthe default file ({file}<code>$XDG_CONFIG_HOME/vdirsyncer/config</code>).</p>"}, {"declarations": [{"name": "<services/vdirsyncer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/vdirsyncer.nix"}], "default": "false", "description": "Whether to enable vdirsyncer.", "example": "true", "loc": ["services", "vdirsyncer", "enable"], "readOnly": false, "title": "services.vdirsyncer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable vdirsyncer.</p>"}, {"declarations": [{"name": "<services/vdirsyncer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/vdirsyncer.nix"}], "default": "\"*:0/5\"", "description": "How often to run vdirsyncer.  This value is passed to the systemd\ntimer configuration as the onCalendar option.  See\n{manpage}systemd.time(7)\nfor more information about the format.", "example": "", "loc": ["services", "vdirsyncer", "frequency"], "readOnly": false, "title": "services.vdirsyncer.frequency", "type": "string", "descriptionHTML": "<p>How often to run vdirsyncer.  This value is passed to the systemd\ntimer configuration as the onCalendar option.  See\n{manpage}<code>systemd.time(7)</code>\nfor more information about the format.</p>"}, {"declarations": [{"name": "<services/vdirsyncer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/vdirsyncer.nix"}], "default": "pkgs.vdirsyncer", "description": "The vdirsyncer package to use.", "example": "", "loc": ["services", "vdirsyncer", "package"], "readOnly": false, "title": "services.vdirsyncer.package", "type": "package", "descriptionHTML": "<p>The vdirsyncer package to use.</p>"}, {"declarations": [{"name": "<services/vdirsyncer.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/vdirsyncer.nix"}], "default": "null", "description": "Whether vdirsyncer should produce verbose output.", "example": "", "loc": ["services", "vdirsyncer", "verbosity"], "readOnly": false, "title": "services.vdirsyncer.verbosity", "type": "null or one of \"CRITICAL\", \"ERROR\", \"WARNING\", \"INFO\", \"DEBUG\"", "descriptionHTML": "<p>Whether vdirsyncer should produce verbose output.</p>"}, {"declarations": [{"name": "<services/volnoti.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/volnoti.nix"}], "default": "false", "description": "Whether to enable Volnoti volume HUD daemon.", "example": "true", "loc": ["services", "volnoti", "enable"], "readOnly": false, "title": "services.volnoti.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Volnoti volume HUD daemon.</p>"}, {"declarations": [{"name": "<services/volnoti.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/volnoti.nix"}], "default": "pkgs.volnoti", "description": "The volnoti package to use.", "example": "", "loc": ["services", "volnoti", "package"], "readOnly": false, "title": "services.volnoti.package", "type": "package", "descriptionHTML": "<p>The volnoti package to use.</p>"}, {"declarations": [{"name": "<services/way-displays.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/way-displays.nix"}], "default": "false", "description": "Whether to enable way-displays.", "example": "true", "loc": ["services", "way-displays", "enable"], "readOnly": false, "title": "services.way-displays.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable way-displays.</p>"}, {"declarations": [{"name": "<services/way-displays.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/way-displays.nix"}], "default": "pkgs.way-displays", "description": "The way-displays package to use.", "example": "", "loc": ["services", "way-displays", "package"], "readOnly": false, "title": "services.way-displays.package", "type": "package", "descriptionHTML": "<p>The way-displays package to use.</p>"}, {"declarations": [{"name": "<services/way-displays.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/way-displays.nix"}], "default": "{ }", "description": "The way-displays configuration written to\n{file}$XDG_CONFIG_HOME/way-displays/cfg.yml. See\nhttps://github.com/alex-courtis/way-displays/wiki/Configuration for a\ndescription of available options.\nWhen null a configuration file is not generated,\nwhich allows way-displays to write its own configuration.", "example": "{\n  ORDER = [\n    \"DP-2\"\n    \"Monitor Maker ABC123\"\n    \"!^my_regex_here[0-9]+\"\n    \"'!.*$'\"\n  ];\n  SCALING = false;\n  MODE = [\n    {\n      NAME_DESC = \"HDMI-A-1\";\n      WIDTH = 1920;\n      HEIGHT = 1080;\n      HZ = 60;\n    }\n  ];\n  TRANSFORM = [\n    {\n      NAME_DESC = \"eDP-1\"\n      TRANSFORM = \"FLIPPED-90\";\n    }\n  ];\n};\n", "loc": ["services", "way-displays", "settings"], "readOnly": false, "title": "services.way-displays.settings", "type": "null or YAML 1.1 value", "descriptionHTML": "<p>The way-displays configuration written to\n{file}<code>$XDG_CONFIG_HOME/way-displays/cfg.yml</code>. See\n<a href=\"https://github.com/alex-courtis/way-displays/wiki/Configuration\">https://github.com/alex-courtis/way-displays/wiki/Configuration</a> for a\ndescription of available options.</p>\n<p>When <code>null</code> a configuration file is not generated,\nwhich allows way-displays to write its own configuration.</p>"}, {"declarations": [{"name": "<services/way-displays.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/way-displays.nix"}], "default": "config.wayland.systemd.target", "description": "Systemd target to bind to.", "example": "", "loc": ["services", "way-displays", "systemdTarget"], "readOnly": false, "title": "services.way-displays.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "false", "description": "Whether to enable autostarting of wayvnc.", "example": "true", "loc": ["services", "wayvnc", "autoStart"], "readOnly": false, "title": "services.wayvnc.autoStart", "type": "boolean", "descriptionHTML": "<p>Whether to enable autostarting of wayvnc.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "false", "description": "Whether to enable wayvnc VNC server.", "example": "true", "loc": ["services", "wayvnc", "enable"], "readOnly": false, "title": "services.wayvnc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wayvnc VNC server.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "pkgs.wayvnc", "description": "The wayvnc package to use.", "example": "", "loc": ["services", "wayvnc", "package"], "readOnly": false, "title": "services.wayvnc.package", "type": "package", "descriptionHTML": "<p>The wayvnc package to use.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "{ }", "description": "See CONFIGURATION section in {manpage}wayvnc(1).", "example": "{\n  address = \"0.0.0.0\";\n  port = 5901;\n}", "loc": ["services", "wayvnc", "settings"], "readOnly": false, "title": "services.wayvnc.settings", "type": "attribute set of (atom (null, bool, int, float or string))", "descriptionHTML": "<p>See CONFIGURATION section in {manpage}<code>wayvnc(1)</code>.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "", "description": "The address to which the server shall bind, e.g. 0.0.0.0 or\nlocalhost.", "example": "\"0.0.0.0\"", "loc": ["services", "wayvnc", "settings", "address"], "readOnly": false, "title": "services.wayvnc.settings.address", "type": "string", "descriptionHTML": "<p>The address to which the server shall bind, e.g. 0.0.0.0 or\nlocalhost.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "", "description": "The port to which the server shall bind.", "example": "5901", "loc": ["services", "wayvnc", "settings", "port"], "readOnly": false, "title": "services.wayvnc.settings.port", "type": "16 bit unsigned integer; between 0 and 65535 (both inclusive)", "descriptionHTML": "<p>The port to which the server shall bind.</p>"}, {"declarations": [{"name": "<services/wayvnc.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wayvnc.nix"}], "default": "config.wayland.systemd.target", "description": "Systemd target to bind to.", "example": "", "loc": ["services", "wayvnc", "systemdTarget"], "readOnly": false, "title": "services.wayvnc.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "false", "description": "Whether to enable wlsunset.", "example": "true", "loc": ["services", "wlsunset", "enable"], "readOnly": false, "title": "services.wlsunset.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wlsunset.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "1.0", "description": "Gamma value to use.", "example": "0.6", "loc": ["services", "wlsunset", "gamma"], "readOnly": false, "title": "services.wlsunset.gamma", "type": "string or floating point number or signed integer", "descriptionHTML": "<p>Gamma value to use.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "null", "description": "Your current latitude, between -90.0 and\n90.0.", "example": "-74.3", "loc": ["services", "wlsunset", "latitude"], "readOnly": false, "title": "services.wlsunset.latitude", "type": "null or string or floating point number or signed integer", "descriptionHTML": "<p>Your current latitude, between <code>-90.0</code> and\n<code>90.0</code>.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "null", "description": "Your current longitude, between -180.0 and\n180.0.", "example": "12.5", "loc": ["services", "wlsunset", "longitude"], "readOnly": false, "title": "services.wlsunset.longitude", "type": "null or string or floating point number or signed integer", "descriptionHTML": "<p>Your current longitude, between <code>-180.0</code> and\n<code>180.0</code>.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "null", "description": "Name of output to use, by default all outputs are used.", "example": "", "loc": ["services", "wlsunset", "output"], "readOnly": false, "title": "services.wlsunset.output", "type": "null or string", "descriptionHTML": "<p>Name of output to use, by default all outputs are used.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "pkgs.wlsunset", "description": "The wlsunset package to use.", "example": "", "loc": ["services", "wlsunset", "package"], "readOnly": false, "title": "services.wlsunset.package", "type": "package", "descriptionHTML": "<p>The wlsunset package to use.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "null", "description": "The time when the sun rises (in 24 hour format).", "example": "\"06:30\"", "loc": ["services", "wlsunset", "sunrise"], "readOnly": false, "title": "services.wlsunset.sunrise", "type": "null or string", "descriptionHTML": "<p>The time when the sun rises (in 24 hour format).</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "null", "description": "The time when the sun sets (in 24 hour format).", "example": "\"18:00\"", "loc": ["services", "wlsunset", "sunset"], "readOnly": false, "title": "services.wlsunset.sunset", "type": "null or string", "descriptionHTML": "<p>The time when the sun sets (in 24 hour format).</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "\"graphical-session.target\"", "description": "Systemd target to bind to.", "example": "", "loc": ["services", "wlsunset", "systemdTarget"], "readOnly": false, "title": "services.wlsunset.systemdTarget", "type": "string", "descriptionHTML": "<p>Systemd target to bind to.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "6500", "description": "Colour temperature to use during the day, in Kelvin (K).\nThis value must be greater than temperature.night.", "example": "", "loc": ["services", "wlsunset", "temperature", "day"], "readOnly": false, "title": "services.wlsunset.temperature.day", "type": "signed integer", "descriptionHTML": "<p>Colour temperature to use during the day, in Kelvin (K).\nThis value must be greater than <code>temperature.night</code>.</p>"}, {"declarations": [{"name": "<services/wlsunset.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wlsunset.nix"}], "default": "4000", "description": "Colour temperature to use during the night, in Kelvin (K).\nThis value must be smaller than temperature.day.", "example": "", "loc": ["services", "wlsunset", "temperature", "night"], "readOnly": false, "title": "services.wlsunset.temperature.night", "type": "signed integer", "descriptionHTML": "<p>Colour temperature to use during the night, in Kelvin (K).\nThis value must be smaller than <code>temperature.day</code>.</p>"}, {"declarations": [{"name": "<services/wluma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wluma.nix"}], "default": "false", "description": "Whether to enable Enable wluma, a service for automatic brightness adjustment.", "example": "true", "loc": ["services", "wluma", "enable"], "readOnly": false, "title": "services.wluma.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Enable wluma, a service for automatic brightness adjustment.</p>"}, {"declarations": [{"name": "<services/wluma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wluma.nix"}], "default": "pkgs.wluma", "description": "The wluma package to use.", "example": "", "loc": ["services", "wluma", "package"], "readOnly": false, "title": "services.wluma.package", "type": "package", "descriptionHTML": "<p>The wluma package to use.</p>"}, {"declarations": [{"name": "<services/wluma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wluma.nix"}], "default": "{ }", "description": "Configuration to use for wluma. See\nhttps://github.com/maximbaz/wluma/blob/main/config.toml\nfor available options.", "example": "{\n  als = {\n    iio = {\n      path = \"\";\n      thresholds = {\n        \"0\" = \"night\";\n        \"20\" = \"dark\";\n        \"250\" = \"normal\";\n        \"500\" = \"bright\";\n        \"80\" = \"dim\";\n        \"800\" = \"outdoors\";\n      };\n    };\n  };\n}", "loc": ["services", "wluma", "settings"], "readOnly": false, "title": "services.wluma.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration to use for wluma. See\n<a href=\"https://github.com/maximbaz/wluma/blob/main/config.toml\">https://github.com/maximbaz/wluma/blob/main/config.toml</a>\nfor available options.</p>"}, {"declarations": [{"name": "<services/wluma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wluma.nix"}], "default": "true", "description": "Wluma systemd integration", "example": "", "loc": ["services", "wluma", "systemd", "enable"], "readOnly": false, "title": "services.wluma.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Wluma systemd integration</p>"}, {"declarations": [{"name": "<services/wluma.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wluma.nix"}], "default": "config.wayland.systemd.target", "description": "The systemd target that will automatically start the Wluma service.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["services", "wluma", "systemd", "target"], "readOnly": false, "title": "services.wluma.systemd.target", "type": "null or string", "descriptionHTML": "<p>The systemd target that will automatically start the Wluma service.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<services/wob.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wob.nix"}], "default": "false", "description": "Whether to enable wob.", "example": "true", "loc": ["services", "wob", "enable"], "readOnly": false, "title": "services.wob.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wob.</p>"}, {"declarations": [{"name": "<services/wob.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wob.nix"}], "default": "pkgs.wob", "description": "The wob package to use.", "example": "", "loc": ["services", "wob", "package"], "readOnly": false, "title": "services.wob.package", "type": "null or package", "descriptionHTML": "<p>The wob package to use.</p>"}, {"declarations": [{"name": "<services/wob.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wob.nix"}], "default": "{ }", "description": "Configuration written to {file}$XDG_CONFIG_HOME/wob/wob.ini.\nSee {manpage}wob.ini(5) for documentation.", "example": "{\n  \"\" = {\n    border_size = 10;\n    height = 50;\n  };\n  \"output.foo\".name = \"DP-1\";\n  \"style.muted\".background_color = \"032cfc\";\n}\n", "loc": ["services", "wob", "settings"], "readOnly": false, "title": "services.wob.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string))", "descriptionHTML": "<p>Configuration written to {file}<code>$XDG_CONFIG_HOME/wob/wob.ini</code>.\nSee {manpage}<code>wob.ini(5)</code> for documentation.</p>"}, {"declarations": [{"name": "<services/wob.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wob.nix"}], "default": "true", "description": "Whether to enable systemd service and socket for wob.", "example": "true", "loc": ["services", "wob", "systemd"], "readOnly": false, "title": "services.wob.systemd", "type": "boolean", "descriptionHTML": "<p>Whether to enable systemd service and socket for wob.</p>"}, {"declarations": [{"name": "<services/wpaperd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wpaperd.nix"}], "default": "false", "description": "Whether to enable wpaperd.", "example": "true", "loc": ["services", "wpaperd", "enable"], "readOnly": false, "title": "services.wpaperd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable wpaperd.</p>"}, {"declarations": [{"name": "<services/wpaperd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wpaperd.nix"}], "default": "pkgs.wpaperd", "description": "The wpaperd package to use.", "example": "", "loc": ["services", "wpaperd", "package"], "readOnly": false, "title": "services.wpaperd.package", "type": "null or package", "descriptionHTML": "<p>The wpaperd package to use.</p>"}, {"declarations": [{"name": "<services/wpaperd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/wpaperd.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/wpaperd/wallpaper.toml.\nSee https://github.com/danyspin97/wpaperd#wallpaper-configuration\nfor the full list of options.", "example": "{\n  eDP-1 = {\n    path = \"/home/foo/Pictures/Wallpaper\";\n    apply-shadow = true;\n  };\n  DP-2 = {\n    path = \"/home/foo/Pictures/Anime\";\n    sorting = \"descending\";\n  };\n}\n", "loc": ["services", "wpaperd", "settings"], "readOnly": false, "title": "services.wpaperd.settings", "type": "TOML value", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/wpaperd/wallpaper.toml</code>.\nSee <a href=\"https://github.com/danyspin97/wpaperd#wallpaper-configuration\">https://github.com/danyspin97/wpaperd#wallpaper-configuration</a>\nfor the full list of options.</p>"}, {"declarations": [{"name": "<services/xcape.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xcape.nix"}], "default": "false", "description": "Whether to enable xcape.", "example": "true", "loc": ["services", "xcape", "enable"], "readOnly": false, "title": "services.xcape.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable xcape.</p>"}, {"declarations": [{"name": "<services/xcape.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xcape.nix"}], "default": "{ }", "description": "The value has the grammar Key[|OtherKey].\nThe list of key names is found in the header file\n{file}X11/keysymdef.h (remove the\nXK_ prefix). Note that due to limitations\nof X11 shifted keys must be specified as a shift key\nfollowed by the key to be pressed rather than the actual\nname of the character. For example to generate \"{\" the\nexpression Shift_L|bracketleft could be\nused (assuming that you have a key with \"{\" above \"[\").\nYou can also specify keys in decimal (prefix #), octal (#0),\nor hexadecimal (#0x). They will be interpreted as keycodes\nunless no corresponding key name is found.", "example": "{\n  Control_L = \"Control_L|O\";\n  Shift_L = \"Escape\";\n}", "loc": ["services", "xcape", "mapExpression"], "readOnly": false, "title": "services.xcape.mapExpression", "type": "attribute set of string", "descriptionHTML": "<p>The value has the grammar <code>Key[|OtherKey]</code>.</p>\n<p>The list of key names is found in the header file\n{file}<code>X11/keysymdef.h</code> (remove the\n<code>XK_</code> prefix). Note that due to limitations\nof X11 shifted keys must be specified as a shift key\nfollowed by the key to be pressed rather than the actual\nname of the character. For example to generate \"{\" the\nexpression <code>Shift_L|bracketleft</code> could be\nused (assuming that you have a key with \"{\" above \"[\").</p>\n<p>You can also specify keys in decimal (prefix #), octal (#0),\nor hexadecimal (#0x). They will be interpreted as keycodes\nunless no corresponding key name is found.</p>"}, {"declarations": [{"name": "<services/xcape.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xcape.nix"}], "default": "null", "description": "If you hold a key longer than this timeout, xcape will not\ngenerate a key event. Default is 500 ms.", "example": "500", "loc": ["services", "xcape", "timeout"], "readOnly": false, "title": "services.xcape.timeout", "type": "null or signed integer", "descriptionHTML": "<p>If you hold a key longer than this timeout, xcape will not\ngenerate a key event. Default is 500 ms.</p>"}, {"declarations": [{"name": "<services/xembed-sni-proxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xembed-sni-proxy.nix"}], "default": "false", "description": "Whether to enable XEmbed SNI Proxy.", "example": "true", "loc": ["services", "xembed-sni-proxy", "enable"], "readOnly": false, "title": "services.xembed-sni-proxy.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XEmbed SNI Proxy.</p>"}, {"declarations": [{"name": "<services/xembed-sni-proxy.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xembed-sni-proxy.nix"}], "default": "pkgs.kdePackages.plasma-workspace", "description": "The plasma-workspace package to use.", "example": "", "loc": ["services", "xembed-sni-proxy", "package"], "readOnly": false, "title": "services.xembed-sni-proxy.package", "type": "package", "descriptionHTML": "<p>The plasma-workspace package to use.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "false", "description": "Whether to enable detecting when the system wakes up from a suspended state and resetting the idle timer.", "example": "true", "loc": ["services", "xidlehook", "detect-sleep"], "readOnly": false, "title": "services.xidlehook.detect-sleep", "type": "boolean", "descriptionHTML": "<p>Whether to enable detecting when the system wakes up from a suspended state and resetting the idle timer.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "false", "description": "Whether to enable xidlehook systemd service.", "example": "true", "loc": ["services", "xidlehook", "enable"], "readOnly": false, "title": "services.xidlehook.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable xidlehook systemd service.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "{ }", "description": "Extra environment variables to be exported in the script.\nThese options are passed unescaped as export name=value.", "example": "{\n  \"primary-display\" = \"$(xrandr | awk '/ primary/{print $1}')\";\n}\n", "loc": ["services", "xidlehook", "environment"], "readOnly": false, "title": "services.xidlehook.environment", "type": "attribute set of string", "descriptionHTML": "<p>Extra environment variables to be exported in the script.\nThese options are passed unescaped as <code>export name=value</code>.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "false", "description": "Disable locking when audio is playing.", "example": "true", "loc": ["services", "xidlehook", "not-when-audio"], "readOnly": false, "title": "services.xidlehook.not-when-audio", "type": "boolean", "descriptionHTML": "<p>Disable locking when audio is playing.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "false", "description": "Disable locking when a fullscreen application is in use.", "example": "true", "loc": ["services", "xidlehook", "not-when-fullscreen"], "readOnly": false, "title": "services.xidlehook.not-when-fullscreen", "type": "boolean", "descriptionHTML": "<p>Disable locking when a fullscreen application is in use.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "false", "description": "Whether to enable running the program once and exiting.", "example": "true", "loc": ["services", "xidlehook", "once"], "readOnly": false, "title": "services.xidlehook.once", "type": "boolean", "descriptionHTML": "<p>Whether to enable running the program once and exiting.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "pkgs.xidlehook", "description": "The xidlehook package to use.", "example": "", "loc": ["services", "xidlehook", "package"], "readOnly": false, "title": "services.xidlehook.package", "type": "package", "descriptionHTML": "<p>The xidlehook package to use.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "[ ]", "description": "A set of commands to be executed after a specific idle timeout.\nThe commands specified in command and canceller\nare passed escaped to the script.\nTo use or re-use environment variables that are script-dependent, specify them\nin the environment section.", "example": "[\n  {\n    delay = 60;\n    command = \"xrandr --output \\\"$PRIMARY_DISPLAY\\\" --brightness .1\";\n    canceller = \"xrandr --output \\\"$PRIMARY_DISPLAY\\\" --brightness 1\";\n  }\n  {\n    delay = 120;\n    command = \"${pkgs.writeShellScript \"my-script\" ''\n      # A complex script to run\n    ''}\";\n  }\n]\n", "loc": ["services", "xidlehook", "timers"], "readOnly": false, "title": "services.xidlehook.timers", "type": "list of (submodule)", "descriptionHTML": "<p>A set of commands to be executed after a specific idle timeout.\nThe commands specified in <code>command</code> and <code>canceller</code>\nare passed escaped to the script.\nTo use or re-use environment variables that are script-dependent, specify them\nin the <code>environment</code> section.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "\"\"", "description": "Command executed when the user becomes active again.\nThis is only executed if the next timer has not been reached.\nPath to executables are accepted.\nThe command is automatically escaped.", "example": "${pkgs.libnotify}/bin/notify-send \"Idle\" \"Resuming activity\"\n", "loc": ["services", "xidlehook", "timers", "*", "canceller"], "readOnly": false, "title": "services.xidlehook.timers.*.canceller", "type": "string", "descriptionHTML": "<p>Command executed when the user becomes active again.\nThis is only executed if the next timer has not been reached.\nPath to executables are accepted.\nThe command is automatically escaped.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "", "description": "Command executed after the idle timeout is reached.\nPath to executables are accepted.\nThe command is automatically escaped.", "example": "${pkgs.libnotify}/bin/notify-send \"Idle\" \"Sleeping in 1 minute\"\n", "loc": ["services", "xidlehook", "timers", "*", "command"], "readOnly": false, "title": "services.xidlehook.timers.*.command", "type": "null or string", "descriptionHTML": "<p>Command executed after the idle timeout is reached.\nPath to executables are accepted.\nThe command is automatically escaped.</p>"}, {"declarations": [{"name": "<services/xidlehook.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xidlehook.nix"}], "default": "", "description": "Time before executing the command.", "example": "60", "loc": ["services", "xidlehook", "timers", "*", "delay"], "readOnly": false, "title": "services.xidlehook.timers.*.delay", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>Time before executing the command.</p>"}, {"declarations": [{"name": "<services/xscreensaver.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xscreensaver.nix"}], "default": "false", "description": "Whether to enable XScreenSaver.", "example": "true", "loc": ["services", "xscreensaver", "enable"], "readOnly": false, "title": "services.xscreensaver.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XScreenSaver.</p>"}, {"declarations": [{"name": "<services/xscreensaver.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xscreensaver.nix"}], "default": "pkgs.xscreensaver", "description": "The xscreensaver package to use.", "example": "", "loc": ["services", "xscreensaver", "package"], "readOnly": false, "title": "services.xscreensaver.package", "type": "package", "descriptionHTML": "<p>The xscreensaver package to use.</p>"}, {"declarations": [{"name": "<services/xscreensaver.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xscreensaver.nix"}], "default": "{ }", "description": "The settings to use for XScreenSaver.", "example": "{\n  fadeTicks = 20;\n  lock = false;\n  mode = \"blank\";\n}", "loc": ["services", "xscreensaver", "settings"], "readOnly": false, "title": "services.xscreensaver.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>The settings to use for XScreenSaver.</p>"}, {"declarations": [{"name": "<services/xsettingsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsettingsd.nix"}], "default": "false", "description": "Whether to enable xsettingsd.", "example": "true", "loc": ["services", "xsettingsd", "enable"], "readOnly": false, "title": "services.xsettingsd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable xsettingsd.</p>"}, {"declarations": [{"name": "<services/xsettingsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsettingsd.nix"}], "default": "pkgs.xsettingsd", "description": "The xsettingsd package to use.", "example": "", "loc": ["services", "xsettingsd", "package"], "readOnly": false, "title": "services.xsettingsd.package", "type": "package", "descriptionHTML": "<p>The xsettingsd package to use.</p>"}, {"declarations": [{"name": "<services/xsettingsd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsettingsd.nix"}], "default": "{ }", "description": "Xsettingsd options for configuration file. See\nhttps://github.com/derat/xsettingsd/wiki/Settings\nfor documentation on these values.", "example": "{\n  \"Net/ThemeName\" = \"Numix\";\n  \"Xft/Antialias\" = true;\n  \"Xft/Hinting\" = true;\n  \"Xft/RGBA\" = \"rgb\";\n}\n", "loc": ["services", "xsettingsd", "settings"], "readOnly": false, "title": "services.xsettingsd.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Xsettingsd options for configuration file. See\n<a href=\"https://github.com/derat/xsettingsd/wiki/Settings\">https://github.com/derat/xsettingsd/wiki/Settings</a>\nfor documentation on these values.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "false", "description": "Whether to enable debug output.", "example": "", "loc": ["services", "xsuspender", "debug"], "readOnly": false, "title": "services.xsuspender.debug", "type": "boolean", "descriptionHTML": "<p>Whether to enable debug output.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "{ }", "description": "XSuspender defaults.", "example": "", "loc": ["services", "xsuspender", "defaults"], "readOnly": false, "title": "services.xsuspender.defaults", "type": "submodule", "descriptionHTML": "<p>XSuspender defaults.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "true", "description": "Whether to auto-apply rules when switching to battery\npower even if the window(s) didn't just lose focus.", "example": "", "loc": ["services", "xsuspender", "defaults", "autoSuspendOnBattery"], "readOnly": false, "title": "services.xsuspender.defaults.autoSuspendOnBattery", "type": "boolean", "descriptionHTML": "<p>Whether to auto-apply rules when switching to battery\npower even if the window(s) didn't just lose focus.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "0", "description": "Limit CPU consumption for this factor when on battery power.\nValue 1 means 50% decrease, 2 means 66%, 3 means 75% etc.", "example": "", "loc": ["services", "xsuspender", "defaults", "downclockOnBattery"], "readOnly": false, "title": "services.xsuspender.defaults.downclockOnBattery", "type": "signed integer", "descriptionHTML": "<p>Limit CPU consumption for this factor when on battery power.\nValue 1 means 50% decrease, 2 means 66%, 3 means 75% etc.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Before resuming, execute this shell script. Resume the\nprocess regardless script failure.", "example": "\"echo resuming ...\"", "loc": ["services", "xsuspender", "defaults", "execResume"], "readOnly": false, "title": "services.xsuspender.defaults.execResume", "type": "null or string", "descriptionHTML": "<p>Before resuming, execute this shell script. Resume the\nprocess regardless script failure.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Before suspending, execute this shell script. If it fails,\nabort suspension.", "example": "\"echo \\\"suspending window $XID of process $PID\\\"\"", "loc": ["services", "xsuspender", "defaults", "execSuspend"], "readOnly": false, "title": "services.xsuspender.defaults.execSuspend", "type": "null or string", "descriptionHTML": "<p>Before suspending, execute this shell script. If it fails,\nabort suspension.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Match windows that wm class contains string.", "example": "", "loc": ["services", "xsuspender", "defaults", "matchWmClassContains"], "readOnly": false, "title": "services.xsuspender.defaults.matchWmClassContains", "type": "null or string", "descriptionHTML": "<p>Match windows that wm class contains string.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Match windows where wm class group contains string.", "example": "", "loc": ["services", "xsuspender", "defaults", "matchWmClassGroupContains"], "readOnly": false, "title": "services.xsuspender.defaults.matchWmClassGroupContains", "type": "null or string", "descriptionHTML": "<p>Match windows where wm class group contains string.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Match windows where wm name contains string.", "example": "", "loc": ["services", "xsuspender", "defaults", "matchWmNameContains"], "readOnly": false, "title": "services.xsuspender.defaults.matchWmNameContains", "type": "null or string", "descriptionHTML": "<p>Match windows where wm name contains string.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "false", "description": "Whether to enable process suspend only on battery.", "example": "", "loc": ["services", "xsuspender", "defaults", "onlyOnBattery"], "readOnly": false, "title": "services.xsuspender.defaults.onlyOnBattery", "type": "boolean", "descriptionHTML": "<p>Whether to enable process suspend only on battery.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "50", "description": "Resume interval in seconds.", "example": "", "loc": ["services", "xsuspender", "defaults", "resumeEvery"], "readOnly": false, "title": "services.xsuspender.defaults.resumeEvery", "type": "signed integer", "descriptionHTML": "<p>Resume interval in seconds.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "5", "description": "Resume duration in seconds.", "example": "", "loc": ["services", "xsuspender", "defaults", "resumeFor"], "readOnly": false, "title": "services.xsuspender.defaults.resumeFor", "type": "signed integer", "descriptionHTML": "<p>Resume duration in seconds.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "true", "description": "Whether to send SIGSTOP / SIGCONT signals or not.\nIf false just the exec scripts are run.", "example": "", "loc": ["services", "xsuspender", "defaults", "sendSignals"], "readOnly": false, "title": "services.xsuspender.defaults.sendSignals", "type": "boolean", "descriptionHTML": "<p>Whether to send SIGSTOP / SIGCONT signals or not.\nIf false just the exec scripts are run.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "5", "description": "Initial suspend delay in seconds.", "example": "", "loc": ["services", "xsuspender", "defaults", "suspendDelay"], "readOnly": false, "title": "services.xsuspender.defaults.suspendDelay", "type": "signed integer", "descriptionHTML": "<p>Initial suspend delay in seconds.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Also suspend descendant processes that match this regex.", "example": "", "loc": ["services", "xsuspender", "defaults", "suspendSubtreePattern"], "readOnly": false, "title": "services.xsuspender.defaults.suspendSubtreePattern", "type": "null or string", "descriptionHTML": "<p>Also suspend descendant processes that match this regex.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "false", "description": "Whether to enable XSuspender.", "example": "true", "loc": ["services", "xsuspender", "enable"], "readOnly": false, "title": "services.xsuspender.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XSuspender.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "{ }", "description": "Attribute set of XSuspender rules.", "example": "{\n  Chromium = {\n    matchWmClassContains = \"chromium-browser\";\n    suspendDelay = 10;\n    suspendSubtreePattern = \"chromium\";\n  };\n}", "loc": ["services", "xsuspender", "rules"], "readOnly": false, "title": "services.xsuspender.rules", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of XSuspender rules.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "true", "description": "Whether to auto-apply rules when switching to battery\npower even if the window(s) didn't just lose focus.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "autoSuspendOnBattery"], "readOnly": false, "title": "services.xsuspender.rules.<name>.autoSuspendOnBattery", "type": "boolean", "descriptionHTML": "<p>Whether to auto-apply rules when switching to battery\npower even if the window(s) didn't just lose focus.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "0", "description": "Limit CPU consumption for this factor when on battery power.\nValue 1 means 50% decrease, 2 means 66%, 3 means 75% etc.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "downclockOnBattery"], "readOnly": false, "title": "services.xsuspender.rules.<name>.downclockOnBattery", "type": "signed integer", "descriptionHTML": "<p>Limit CPU consumption for this factor when on battery power.\nValue 1 means 50% decrease, 2 means 66%, 3 means 75% etc.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Before resuming, execute this shell script. Resume the\nprocess regardless script failure.", "example": "\"echo resuming ...\"", "loc": ["services", "xsuspender", "rules", "<name>", "execResume"], "readOnly": false, "title": "services.xsuspender.rules.<name>.execResume", "type": "null or string", "descriptionHTML": "<p>Before resuming, execute this shell script. Resume the\nprocess regardless script failure.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Before suspending, execute this shell script. If it fails,\nabort suspension.", "example": "\"echo \\\"suspending window $XID of process $PID\\\"\"", "loc": ["services", "xsuspender", "rules", "<name>", "execSuspend"], "readOnly": false, "title": "services.xsuspender.rules.<name>.execSuspend", "type": "null or string", "descriptionHTML": "<p>Before suspending, execute this shell script. If it fails,\nabort suspension.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Match windows that wm class contains string.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "matchWmClassContains"], "readOnly": false, "title": "services.xsuspender.rules.<name>.matchWmClassContains", "type": "null or string", "descriptionHTML": "<p>Match windows that wm class contains string.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Match windows where wm class group contains string.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "matchWmClassGroupContains"], "readOnly": false, "title": "services.xsuspender.rules.<name>.matchWmClassGroupContains", "type": "null or string", "descriptionHTML": "<p>Match windows where wm class group contains string.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Match windows where wm name contains string.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "matchWmNameContains"], "readOnly": false, "title": "services.xsuspender.rules.<name>.matchWmNameContains", "type": "null or string", "descriptionHTML": "<p>Match windows where wm name contains string.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "false", "description": "Whether to enable process suspend only on battery.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "onlyOnBattery"], "readOnly": false, "title": "services.xsuspender.rules.<name>.onlyOnBattery", "type": "boolean", "descriptionHTML": "<p>Whether to enable process suspend only on battery.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "50", "description": "Resume interval in seconds.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "resumeEvery"], "readOnly": false, "title": "services.xsuspender.rules.<name>.resumeEvery", "type": "signed integer", "descriptionHTML": "<p>Resume interval in seconds.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "5", "description": "Resume duration in seconds.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "resumeFor"], "readOnly": false, "title": "services.xsuspender.rules.<name>.resumeFor", "type": "signed integer", "descriptionHTML": "<p>Resume duration in seconds.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "true", "description": "Whether to send SIGSTOP / SIGCONT signals or not.\nIf false just the exec scripts are run.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "sendSignals"], "readOnly": false, "title": "services.xsuspender.rules.<name>.sendSignals", "type": "boolean", "descriptionHTML": "<p>Whether to send SIGSTOP / SIGCONT signals or not.\nIf false just the exec scripts are run.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "5", "description": "Initial suspend delay in seconds.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "suspendDelay"], "readOnly": false, "title": "services.xsuspender.rules.<name>.suspendDelay", "type": "signed integer", "descriptionHTML": "<p>Initial suspend delay in seconds.</p>"}, {"declarations": [{"name": "<services/xsuspender.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/xsuspender.nix"}], "default": "null", "description": "Also suspend descendant processes that match this regex.", "example": "", "loc": ["services", "xsuspender", "rules", "<name>", "suspendSubtreePattern"], "readOnly": false, "title": "services.xsuspender.rules.<name>.suspendSubtreePattern", "type": "null or string", "descriptionHTML": "<p>Also suspend descendant processes that match this regex.</p>"}, {"declarations": [{"name": "<services/yubikey-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/yubikey-agent.nix"}], "default": "false", "description": "Whether to enable Seamless ssh-agent for YubiKeys.", "example": "true", "loc": ["services", "yubikey-agent", "enable"], "readOnly": false, "title": "services.yubikey-agent.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Seamless ssh-agent for YubiKeys.</p>"}, {"declarations": [{"name": "<services/yubikey-agent.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/yubikey-agent.nix"}], "default": "pkgs.yubikey-agent", "description": "The yubikey-agent package to use.", "example": "", "loc": ["services", "yubikey-agent", "package"], "readOnly": false, "title": "services.yubikey-agent.package", "type": "package", "descriptionHTML": "<p>The yubikey-agent package to use.</p>"}, {"declarations": [{"name": "<misc/specialisation.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/specialisation.nix"}], "default": "{ }", "description": "A set of named specialized configurations. These can be used to extend\nyour base configuration with additional settings. For example, you can\nhave specialisations named \"light\" and \"dark\"\nthat apply light and dark color theme configurations.\n::: {.note}\nThis is an experimental option for now and you therefore have to\nactivate the specialisation by looking up and running the activation\nscript yourself. Running the activation script will create a new\nHome Manager generation.\n:::\nFor example, to activate the \"dark\" specialisation, you can\nfirst look up your current Home Manager generation by running\nconsole\n$ home-manager generations | head -1\n2022-05-02 22:49 : id 1758 -&gt; /nix/store/jy\u2026ac-home-manager-generation\nthen run\nconsole\n$ /nix/store/jy\u2026ac-home-manager-generation/specialisation/dark/activate\nStarting Home Manager activation\n\u2026\n::: {.warning}\nSince this option is experimental, the activation process may\nchange in backwards incompatible ways.\n:::", "example": "", "loc": ["specialisation"], "readOnly": false, "title": "specialisation", "type": "attribute set of (submodule)", "descriptionHTML": "<p>A set of named specialized configurations. These can be used to extend\nyour base configuration with additional settings. For example, you can\nhave specialisations named \"light\" and \"dark\"\nthat apply light and dark color theme configurations.</p>\n<p>::: {.note}\nThis is an experimental option for now and you therefore have to\nactivate the specialisation by looking up and running the activation\nscript yourself. Running the activation script will create a new\nHome Manager generation.\n:::</p>\n<p>For example, to activate the \"dark\" specialisation, you can\nfirst look up your current Home Manager generation by running</p>\n<p><code>console\n$ home-manager generations | head -1\n2022-05-02 22:49 : id 1758 -&gt; /nix/store/jy\u2026ac-home-manager-generation</code></p>\n<p>then run</p>\n<p><code>console\n$ /nix/store/jy\u2026ac-home-manager-generation/specialisation/dark/activate\nStarting Home Manager activation\n\u2026</code></p>\n<p>::: {.warning}\nSince this option is experimental, the activation process may\nchange in backwards incompatible ways.\n:::</p>"}, {"declarations": [{"name": "<misc/specialisation.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/specialisation.nix"}], "default": "{ }", "description": "Arbitrary Home Manager configuration settings.", "example": "", "loc": ["specialisation", "<name>", "configuration"], "readOnly": false, "title": "specialisation.<name>.configuration", "type": "submodule", "descriptionHTML": "<p>Arbitrary Home Manager configuration settings.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user automount units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.automount(5).", "example": "{\n  automount-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Automount = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "automounts"], "readOnly": false, "title": "systemd.user.automounts", "type": "systemd automount unit configuration", "descriptionHTML": "<p>Definition of systemd per-user automount units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.automount(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "pkgs.stdenv.isLinux", "description": "Whether to enable the user systemd service manager.", "example": "true", "loc": ["systemd", "user", "enable"], "readOnly": false, "title": "systemd.user.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the user systemd service manager.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user mount units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.mount(5).", "example": "{\n  mount-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Mount = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "mounts"], "readOnly": false, "title": "systemd.user.mounts", "type": "systemd mount unit configuration", "descriptionHTML": "<p>Definition of systemd per-user mount units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.mount(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user path units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.path(5).", "example": "{\n  path-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Path = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "paths"], "readOnly": false, "title": "systemd.user.paths", "type": "systemd path unit configuration", "descriptionHTML": "<p>Definition of systemd per-user path units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.path(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user service units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.service(5).", "example": "{\n  service-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Service = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "services"], "readOnly": false, "title": "systemd.user.services", "type": "systemd service unit configuration", "descriptionHTML": "<p>Definition of systemd per-user service units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.service(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "0", "description": "How long to wait for started services to fail until their start is\nconsidered successful. The value 0 indicates no timeout.", "example": "", "loc": ["systemd", "user", "servicesStartTimeoutMs"], "readOnly": false, "title": "systemd.user.servicesStartTimeoutMs", "type": "unsigned integer, meaning >=0", "descriptionHTML": "<p>How long to wait for started services to fail until their start is\nconsidered successful. The value 0 indicates no timeout.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Environment variables that will be set for the user session.\nThe variable values must be as described in\n{manpage}environment.d(5).", "example": "{\n  EDITOR = \"vim\";\n}", "loc": ["systemd", "user", "sessionVariables"], "readOnly": false, "title": "systemd.user.sessionVariables", "type": "attribute set of (signed integer or string)", "descriptionHTML": "<p>Environment variables that will be set for the user session.\nThe variable values must be as described in\n{manpage}<code>environment.d(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Extra config options for user session service manager. See {manpage}systemd-user.conf(5) for\navailable options.", "example": "{\n  Manager.DefaultCPUAccounting = true;\n}\n", "loc": ["systemd", "user", "settings"], "readOnly": false, "title": "systemd.user.settings", "type": "attribute set of section of an INI file (attrs of INI atom (null, bool, int, float or string) or a list of them for duplicate keys)", "descriptionHTML": "<p>Extra config options for user session service manager. See {manpage}<code>systemd-user.conf(5)</code> for\navailable options.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Configures environment variables passed to all executed processes.", "example": "{\n  PATH = \"%u/bin:%u/.cargo/bin\";\n}\n", "loc": ["systemd", "user", "settings", "Manager", "DefaultEnvironment"], "readOnly": false, "title": "systemd.user.settings.Manager.DefaultEnvironment", "type": "attribute set of (null or string or absolute path or package)", "descriptionHTML": "<p>Configures environment variables passed to all executed processes.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Sets environment variables just for the manager process itself.", "example": "{\n  PATH = \"%u/bin:%u/.cargo/bin\";\n}\n", "loc": ["systemd", "user", "settings", "Manager", "ManagerEnvironment"], "readOnly": false, "title": "systemd.user.settings.Manager.ManagerEnvironment", "type": "attribute set of (null or string or absolute path or package)", "descriptionHTML": "<p>Sets environment variables just for the manager process itself.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user slice units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.slice(5).", "example": "{\n  slice-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Slice = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "slices"], "readOnly": false, "title": "systemd.user.slices", "type": "systemd slice unit configuration", "descriptionHTML": "<p>Definition of systemd per-user slice units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.slice(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user socket units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.socket(5).", "example": "{\n  socket-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Socket = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "sockets"], "readOnly": false, "title": "systemd.user.sockets", "type": "systemd socket unit configuration", "descriptionHTML": "<p>Definition of systemd per-user socket units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.socket(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "true", "description": "Whether new or changed services that are wanted by active targets\nshould be started. Additionally, stop obsolete services from the\nprevious generation.\nThe alternatives are\nsuggest (or false)\n: Use a very simple shell script to print suggested\n  {command}systemctl commands to run. You will have to\n  manually run those commands after the switch.\nsd-switch (or true)\n: Use sd-switch, a tool that determines the necessary changes and\n  automatically apply them.", "example": "", "loc": ["systemd", "user", "startServices"], "readOnly": false, "title": "systemd.user.startServices", "type": "boolean or one of \"suggest\", \"sd-switch\"", "descriptionHTML": "<p>Whether new or changed services that are wanted by active targets\nshould be started. Additionally, stop obsolete services from the\nprevious generation.</p>\n<p>The alternatives are</p>\n<p><code>suggest</code> (or <code>false</code>)\n: Use a very simple shell script to print suggested\n  {command}<code>systemctl</code> commands to run. You will have to\n  manually run those commands after the switch.</p>\n<p><code>sd-switch</code> (or <code>true</code>)\n: Use sd-switch, a tool that determines the necessary changes and\n  automatically apply them.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "\"${pkgs.systemd}/bin/systemctl\"", "description": "Absolute path to the {command}systemctl tool. This\noption may need to be set if running Home Manager on a\nnon-NixOS distribution.", "example": "", "loc": ["systemd", "user", "systemctlPath"], "readOnly": false, "title": "systemd.user.systemctlPath", "type": "string", "descriptionHTML": "<p>Absolute path to the {command}<code>systemctl</code> tool. This\noption may need to be set if running Home Manager on a\nnon-NixOS distribution.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user target units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.target(5).", "example": "{\n  target-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Target = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "targets"], "readOnly": false, "title": "systemd.user.targets", "type": "systemd target unit configuration", "descriptionHTML": "<p>Definition of systemd per-user target units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.target(5)</code>.</p>"}, {"declarations": [{"name": "<systemd.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/systemd.nix"}], "default": "{ }", "description": "Definition of systemd per-user timer units. Attributes are\nmerged recursively.\nNote that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}systemd.timer(5).", "example": "{\n  timer-name = {\n    Unit = {\n      Description = \"Example description\";\n      Documentation = [ \"man:example(1)\" \"man:example(5)\" ];\n    };\n\n    Timer = {\n      \u2026\n    };\n  };\n};\n", "loc": ["systemd", "user", "timers"], "readOnly": false, "title": "systemd.user.timers", "type": "systemd timer unit configuration", "descriptionHTML": "<p>Definition of systemd per-user timer units. Attributes are\nmerged recursively.</p>\n<p>Note that the attributes follow the capitalization and naming used\nby systemd. More details can be found in\n{manpage}<code>systemd.timer(5)</code>.</p>"}, {"declarations": [{"name": "<misc/tmpfiles.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/tmpfiles.nix"}], "default": "[ ]", "description": "Rules for creating and cleaning up temporary files\nautomatically. See\n{manpage}tmpfiles.d(5)\nfor the exact format.", "example": "[\n  \"L /home/user/Documents - - - - /mnt/data/Documents\"\n]", "loc": ["systemd", "user", "tmpfiles", "rules"], "readOnly": false, "title": "systemd.user.tmpfiles.rules", "type": "list of string", "descriptionHTML": "<p>Rules for creating and cleaning up temporary files\nautomatically. See\n{manpage}<code>tmpfiles.d(5)</code>\nfor the exact format.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/default.nix"}], "default": "{ }", "description": "Set macOS user defaults. Unlike {option}targets.darwin.defaults,\nthe preferences will only be applied to the currently logged-in host. This\ndistinction is important for networked accounts.\nValues set to null are ignored.\n::: {.warning}\nSome settings might require a re-login to take effect.\n:::", "example": "{\n  \"com.apple.controlcenter\" = {\n    BatteryShowPercentage = true;\n  };\n}", "loc": ["targets", "darwin", "currentHostDefaults"], "readOnly": false, "title": "targets.darwin.currentHostDefaults", "type": "attribute set of attribute set of anything", "descriptionHTML": "<p>Set macOS user defaults. Unlike {option}<code>targets.darwin.defaults</code>,\nthe preferences will only be applied to the currently logged-in host. This\ndistinction is important for networked accounts.</p>\n<p>Values set to <code>null</code> are ignored.</p>\n<p>::: {.warning}\nSome settings might require a re-login to take effect.\n:::</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-currenthost.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-currenthost.nix"}], "default": "null", "description": "Whether to show battery percentage in the menu bar.", "example": "true", "loc": ["targets", "darwin", "currentHostDefaults", "com.apple.controlcenter", "BatteryShowPercentage"], "readOnly": false, "title": "targets.darwin.currentHostDefaults.\"com.apple.controlcenter\".BatteryShowPercentage", "type": "null or boolean", "descriptionHTML": "<p>Whether to show battery percentage in the menu bar.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/default.nix"}], "default": "{ }", "description": "Set macOS user defaults. Values set to null are\nignored.\n::: {.warning}\nSome settings might require a re-login to take effect.\n:::\n::: {.warning}\nSome settings are only read from\n{option}targets.darwin.currentHostDefaults.\n:::", "example": "{\n  \"com.apple.desktopservices\" = {\n    DSDontWriteNetworkStores = true;\n    DSDontWriteUSBStores = true;\n  };\n}", "loc": ["targets", "darwin", "defaults"], "readOnly": false, "title": "targets.darwin.defaults", "type": "attribute set of attribute set of anything", "descriptionHTML": "<p>Set macOS user defaults. Values set to <code>null</code> are\nignored.</p>\n<p>::: {.warning}\nSome settings might require a re-login to take effect.\n:::</p>\n<p>::: {.warning}\nSome settings are only read from\n{option}<code>targets.darwin.currentHostDefaults</code>.\n:::</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Configures the web inspector.\n::: {.warning}\nInstead of setting this option directly, set\n{option}IncludeDevelopMenu instead.\n:::", "example": "", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "WebKitPreferences.developerExtrasEnabled"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".\"WebKitPreferences.developerExtrasEnabled\"", "type": "null or boolean", "descriptionHTML": "<p>Configures the web inspector.</p>\n<p>::: {.warning}\nInstead of setting this option directly, set\n{option}<code>IncludeDevelopMenu</code> instead.\n:::</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable autofill of credit card numbers.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "AutoFillCreditCardData"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".AutoFillCreditCardData", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable autofill of credit card numbers.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable autofill of usernames and passwords.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "AutoFillPasswords"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".AutoFillPasswords", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable autofill of usernames and passwords.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable opening of downloaded files.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "AutoOpenSafeDownloads"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".AutoOpenSafeDownloads", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable opening of downloaded files.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable \"Develop\" menu in the menu bar.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "IncludeDevelopMenu"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".IncludeDevelopMenu", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable \"Develop\" menu in the menu bar.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable status bar.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "ShowOverlayStatusBar"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".ShowOverlayStatusBar", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable status bar.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Configures the web inspector.\n::: {.warning}\nInstead of setting this option directly, set\n{option}IncludeDevelopMenu instead.\n:::", "example": "", "loc": ["targets", "darwin", "defaults", "com.apple.Safari", "WebKitDeveloperExtrasEnabledPreferenceKey"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari\".WebKitDeveloperExtrasEnabledPreferenceKey", "type": "null or boolean", "descriptionHTML": "<p>Configures the web inspector.</p>\n<p>::: {.warning}\nInstead of setting this option directly, set\n{option}<code>IncludeDevelopMenu</code> instead.\n:::</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Show the \"Develop\" menu in Safari's menubar.\n::: {.warning}\nInstead of setting this option directly, set\n{option}\"com.apple.Safari\".IncludeDevelopMenu instead.\n:::", "example": "", "loc": ["targets", "darwin", "defaults", "com.apple.Safari.SandboxBroker", "ShowDevelopMenu"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.Safari.SandboxBroker\".ShowDevelopMenu", "type": "null or boolean", "descriptionHTML": "<p>Show the \"Develop\" menu in Safari's menubar.</p>\n<p>::: {.warning}\nInstead of setting this option directly, set\n{option}<code>\"com.apple.Safari\".IncludeDevelopMenu</code> instead.\n:::</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Disable use of {file}.DS_Store files on network shares.\nSee the\nofficial article for more info.", "example": "false", "loc": ["targets", "darwin", "defaults", "com.apple.desktopservices", "DSDontWriteNetworkStores"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.desktopservices\".DSDontWriteNetworkStores", "type": "null or boolean", "descriptionHTML": "<p>Disable use of {file}<code>.DS_Store</code> files on network shares.\nSee <a href=\"https://support.apple.com/en-us/HT208209\">the\nofficial article</a> for more info.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Disable use of {file}.DS_Store files on thumb drives.", "example": "false", "loc": ["targets", "darwin", "defaults", "com.apple.desktopservices", "DSDontWriteUSBStores"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.desktopservices\".DSDontWriteUSBStores", "type": "null or boolean", "descriptionHTML": "<p>Disable use of {file}<code>.DS_Store</code> files on thumb drives.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Hide the Dock automatically", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.dock", "autohide"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.dock\".autohide", "type": "null or boolean", "descriptionHTML": "<p>Hide the Dock automatically</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable grouping of windows by application in Mission Control.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.dock", "expose-group-apps"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.dock\".expose-group-apps", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable grouping of windows by application in Mission Control.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Position of the Dock on the screen", "example": "\"left\"", "loc": ["targets", "darwin", "defaults", "com.apple.dock", "orientation"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.dock\".orientation", "type": "null or one of \"left\", \"bottom\", \"right\"", "descriptionHTML": "<p>Position of the Dock on the screen</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable locking of the dock size.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.dock", "size-immutable"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.dock\".size-immutable", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable locking of the dock size.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Sets the size of the dock.", "example": "64", "loc": ["targets", "darwin", "defaults", "com.apple.dock", "tilesize"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.dock\".tilesize", "type": "null or signed integer", "descriptionHTML": "<p>Sets the size of the dock.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Show hidden files in Finder", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.finder", "AppleShowAllFiles"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.finder\".AppleShowAllFiles", "type": "null or boolean", "descriptionHTML": "<p>Show hidden files in Finder</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Automatically delete items from trash after 30 days", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.finder", "FXRemoveOldTrashItems"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.finder\".FXRemoveOldTrashItems", "type": "null or boolean", "descriptionHTML": "<p>Automatically delete items from trash after 30 days</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Show the path bar at the bottom of a Finder window", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.finder", "ShowPathBar"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.finder\".ShowPathBar", "type": "null or boolean", "descriptionHTML": "<p>Show the path bar at the bottom of a Finder window</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Show the status bar at the bottom of a Finder window", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.finder", "ShowStatusBar"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.finder\".ShowStatusBar", "type": "null or boolean", "descriptionHTML": "<p>Show the status bar at the bottom of a Finder window</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "This option no longer works on macOS 11 and later. Instead, use\n{option}targets.darwin.currentHostDefaults.\\\"com.apple.controlcenter\\\".BatteryShowPercentage.\nWhether to show battery percentage in the menu bar.", "example": "\"NO\"", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.battery", "ShowPercent"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.battery\".ShowPercent", "type": "null or one of \"YES\", \"NO\"", "descriptionHTML": "<p>This option no longer works on macOS 11 and later. Instead, use\n{option}<code>targets.darwin.currentHostDefaults.\\\"com.apple.controlcenter\\\".BatteryShowPercentage</code>.</p>\n<p>Whether to show battery percentage in the menu bar.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable showing an analog clock instead of a digital one.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "IsAnalog"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".IsAnalog", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable showing an analog clock instead of a digital one.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable showing a 24-hour clock, instead of a 12-hour clock.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "Show24Hour"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".Show24Hour", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable showing a 24-hour clock, instead of a 12-hour clock.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Show the AM/PM label. Useful if Show24Hour is false. Default is null.", "example": "", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "ShowAMPM"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".ShowAMPM", "type": "null or boolean", "descriptionHTML": "<p>Show the AM/PM label. Useful if Show24Hour is false. Default is null.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Show the full date. Default is null.\n0 = When Space Allows\n1 = Always\n2 = Never", "example": "", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "ShowDate"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".ShowDate", "type": "null or one of 0, 1, 2", "descriptionHTML": "<p>Show the full date. Default is null.</p>\n<p>0 = When Space Allows\n1 = Always\n2 = Never</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable showing the day of the month.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "ShowDayOfMonth"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".ShowDayOfMonth", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable showing the day of the month.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable showing the day of the week.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "ShowDayOfWeek"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".ShowDayOfWeek", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable showing the day of the week.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable showing the clock with second precision, instead of minutes.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.apple.menuextra.clock", "ShowSeconds"], "readOnly": false, "title": "targets.darwin.defaults.\"com.apple.menuextra.clock\".ShowSeconds", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable showing the clock with second precision, instead of minutes.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable placement of new tabs at the end of the tab bar.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.googlecode.iterm2", "AddNewTabAtEndOfTabs"], "readOnly": false, "title": "targets.darwin.defaults.\"com.googlecode.iterm2\".AddNewTabAtEndOfTabs", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable placement of new tabs at the end of the tab bar.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable arrow keys when scrolling in alternate screen mode.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.googlecode.iterm2", "AlternateMouseScroll"], "readOnly": false, "title": "targets.darwin.defaults.\"com.googlecode.iterm2\".AlternateMouseScroll", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable arrow keys when scrolling in alternate screen mode.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable copy to clipboard upon selecting text.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.googlecode.iterm2", "CopySelection"], "readOnly": false, "title": "targets.darwin.defaults.\"com.googlecode.iterm2\".CopySelection", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable copy to clipboard upon selecting text.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable experimental key handling for AquaSKK compatibility.", "example": "true", "loc": ["targets", "darwin", "defaults", "com.googlecode.iterm2", "ExperimentalKeyHandling"], "readOnly": false, "title": "targets.darwin.defaults.\"com.googlecode.iterm2\".ExperimentalKeyHandling", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable experimental key handling for AquaSKK compatibility.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Configures how to restore tmux windows when attaching to a session.\nPossible Values\n0\n: Native windows\n1\n: Native tabs in a new window\n2\n: Tabs in the attaching window", "example": "2", "loc": ["targets", "darwin", "defaults", "com.googlecode.iterm2", "OpenTmuxWindowsIn"], "readOnly": false, "title": "targets.darwin.defaults.\"com.googlecode.iterm2\".OpenTmuxWindowsIn", "type": "null or signed integer", "descriptionHTML": "<p>Configures how to restore tmux windows when attaching to a session.</p>\n<p><strong>Possible Values</strong></p>\n<p><code>0</code>\n: Native windows</p>\n<p><code>1</code>\n: Native tabs in a new window</p>\n<p><code>2</code>\n: Tabs in the attaching window</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Sets the language to use in the preferred order.", "example": "[\n  \"en\"\n]", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "AppleLanguages"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.AppleLanguages", "type": "null or (list of string)", "descriptionHTML": "<p>Sets the language to use in the preferred order.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Configures the user locale.", "example": "\"en_US\"", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "AppleLocale"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.AppleLocale", "type": "null or string", "descriptionHTML": "<p>Configures the user locale.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Sets the measurement unit.", "example": "\"Centimeters\"", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "AppleMeasurementUnits"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.AppleMeasurementUnits", "type": "null or one of \"Centimeters\", \"Inches\"", "descriptionHTML": "<p>Sets the measurement unit.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable the metric system.", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "AppleMetricUnits"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.AppleMetricUnits", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable the metric system.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Repeat a key when it is held down (false) or display the accented character selector (true)", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "ApplePressAndHoldEnabled"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.ApplePressAndHoldEnabled", "type": "null or boolean", "descriptionHTML": "<p>Repeat a key when it is held down (false) or display the accented character selector (true)</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Always show file extensions in Finder", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "AppleShowAllExtensions"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.AppleShowAllExtensions", "type": "null or boolean", "descriptionHTML": "<p>Always show file extensions in Finder</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Sets the temperature unit.", "example": "\"Celsius\"", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "AppleTemperatureUnit"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.AppleTemperatureUnit", "type": "null or one of \"Celsius\", \"Fahrenheit\"", "descriptionHTML": "<p>Sets the temperature unit.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Interval between key repetitions when holding down a key. Lower is\nfaster. When setting through the control panel, 2 is the lowest value,\nand 120 the highest.", "example": "2", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "KeyRepeat"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.KeyRepeat", "type": "null or signed integer", "descriptionHTML": "<p>Interval between key repetitions when holding down a key. Lower is\nfaster. When setting through the control panel, 2 is the lowest value,\nand 120 the highest.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable automatic capitalization.", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "NSAutomaticCapitalizationEnabled"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.NSAutomaticCapitalizationEnabled", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable automatic capitalization.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable smart dashes.", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "NSAutomaticDashSubstitutionEnabled"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.NSAutomaticDashSubstitutionEnabled", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable smart dashes.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable period with double space.", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "NSAutomaticPeriodSubstitutionEnabled"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.NSAutomaticPeriodSubstitutionEnabled", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable period with double space.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable smart quotes.", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "NSAutomaticQuoteSubstitutionEnabled"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.NSAutomaticQuoteSubstitutionEnabled", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable smart quotes.</p>"}, {"declarations": [{"name": "<targets/darwin/user-defaults/opts-allhosts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/user-defaults/opts-allhosts.nix"}], "default": "null", "description": "Whether to enable spelling correction.", "example": "true", "loc": ["targets", "darwin", "defaults", "NSGlobalDomain", "NSAutomaticSpellingCorrectionEnabled"], "readOnly": false, "title": "targets.darwin.defaults.NSGlobalDomain.NSAutomaticSpellingCorrectionEnabled", "type": "null or boolean", "descriptionHTML": "<p>Whether to enable spelling correction.</p>"}, {"declarations": [{"name": "<targets/darwin/keybindings.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/keybindings.nix"}], "default": "{ }", "description": "This will configure the default keybindings for text fields in macOS\napplications. See\nApple's documentation\nfor more details.\n::: {.warning}\nExisting keybinding configuration will be wiped when using this\noption.\n:::", "example": "{\n  \"^u\" = \"deleteToBeginningOfLine:\";\n  \"^w\" = \"deleteWordBackward:\";\n}", "loc": ["targets", "darwin", "keybindings"], "readOnly": false, "title": "targets.darwin.keybindings", "type": "attribute set of anything", "descriptionHTML": "<p>This will configure the default keybindings for text fields in macOS\napplications. See\n<a href=\"https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/EventOverview/TextDefaultsBindings/TextDefaultsBindings.html\">Apple's documentation</a>\nfor more details.</p>\n<p>::: {.warning}\nExisting keybinding configuration will be wiped when using this\noption.\n:::</p>"}, {"declarations": [{"name": "<targets/darwin/linkapps.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/linkapps.nix"}], "default": "\"Applications/Home Manager Apps\"", "description": "Path to link apps relative to the home directory.", "example": "", "loc": ["targets", "darwin", "linkApps", "directory"], "readOnly": false, "title": "targets.darwin.linkApps.directory", "type": "string", "descriptionHTML": "<p>Path to link apps relative to the home directory.</p>"}, {"declarations": [{"name": "<targets/darwin/linkapps.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/linkapps.nix"}], "default": "true", "description": "Whether to enable linking macOS applications to the user environment.", "example": "true", "loc": ["targets", "darwin", "linkApps", "enable"], "readOnly": false, "title": "targets.darwin.linkApps.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable linking macOS applications to the user environment.</p>"}, {"declarations": [{"name": "<targets/darwin/search.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/darwin/search.nix"}], "default": "null", "description": "Default search engine.", "example": "", "loc": ["targets", "darwin", "search"], "readOnly": false, "title": "targets.darwin.search", "type": "null or one of \"Bing\", \"DuckDuckGo\", \"Ecosia\", \"Google\", \"Yahoo\"", "descriptionHTML": "<p>Default search engine.</p>"}, {"declarations": [{"name": "<targets/generic-linux.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/targets/generic-linux.nix"}], "default": "false", "description": "Whether to enable settings that make Home Manager work better on\nGNU/Linux distributions other than NixOS.", "example": "true", "loc": ["targets", "genericLinux", "enable"], "readOnly": false, "title": "targets.genericLinux.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable settings that make Home Manager work better on\nGNU/Linux distributions other than NixOS.</p>"}, {"declarations": [{"name": "<misc/uninstall.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/uninstall.nix"}], "default": "false", "description": "Whether to set up a minimal configuration that will remove all managed\nfiles and packages.\nUse this with extreme care since running the generated activation script\nwill remove all Home Manager state from your user environment. This\nincludes removing all your historic Home Manager generations.", "example": "", "loc": ["uninstall"], "readOnly": false, "title": "uninstall", "type": "boolean", "descriptionHTML": "<p>Whether to set up a minimal configuration that will remove all managed\nfiles and packages.</p>\n<p>Use this with extreme care since running the generated activation script\nwill remove all Home Manager state from your user environment. This\nincludes removing all your historic Home Manager generations.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "Authentication settings. The default is basic.", "example": "", "loc": ["vdirsyncer", "auth"], "readOnly": false, "title": "vdirsyncer.auth", "type": "null or one of \"basic\", \"digest\", \"guess\"", "descriptionHTML": "<p>Authentication settings. The default is <code>basic</code>.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "Either a path to a certificate with a client certificate and\nthe key or a list of paths to the files with them.", "example": "", "loc": ["vdirsyncer", "authCert"], "readOnly": false, "title": "vdirsyncer.authCert", "type": "null or string or list of string", "descriptionHTML": "<p>Either a path to a certificate with a client certificate and\nthe key or a list of paths to the files with them.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "A command that prints the OAuth credentials to standard\noutput.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#google\nfor more information.", "example": "[\n  \"pass\"\n  \"client_id\"\n]", "loc": ["vdirsyncer", "clientIdCommand"], "readOnly": false, "title": "vdirsyncer.clientIdCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the OAuth credentials to standard\noutput.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#google\">https://vdirsyncer.pimutils.org/en/stable/config.html#google</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "A command that prints the OAuth credentials to standard\noutput.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#google\nfor more information.", "example": "[\n  \"pass\"\n  \"client_secret\"\n]", "loc": ["vdirsyncer", "clientSecretCommand"], "readOnly": false, "title": "vdirsyncer.clientSecretCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the OAuth credentials to standard\noutput.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#google\">https://vdirsyncer.pimutils.org/en/stable/config.html#google</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "The collections to synchronize between the storages.", "example": "", "loc": ["vdirsyncer", "collections"], "readOnly": false, "title": "vdirsyncer.collections", "type": "null or (list of (string or list of string))", "descriptionHTML": "<p>The collections to synchronize between the storages.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "What to do in case of a conflict between the storages. Either\nremote wins or\nlocal wins or\na list that contains a command to run. By default, an error\nmessage is printed.", "example": "", "loc": ["vdirsyncer", "conflictResolution"], "readOnly": false, "title": "vdirsyncer.conflictResolution", "type": "null or one of \"remote wins\", \"local wins\" or list of string", "descriptionHTML": "<p>What to do in case of a conflict between the storages. Either\n<code>remote wins</code> or\n<code>local wins</code> or\na list that contains a command to run. By default, an error\nmessage is printed.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "false", "description": "Whether to enable synchronization using vdirsyncer.", "example": "true", "loc": ["vdirsyncer", "enable"], "readOnly": false, "title": "vdirsyncer.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable synchronization using vdirsyncer.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "Kinds of items to show. The default is to show everything.\nThis depends on particular features of the server, the results\nare not validated.", "example": "", "loc": ["vdirsyncer", "itemTypes"], "readOnly": false, "title": "vdirsyncer.itemTypes", "type": "null or (list of string)", "descriptionHTML": "<p>Kinds of items to show. The default is to show everything.\nThis depends on particular features of the server, the results\nare not validated.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "[ ]", "description": "Metadata keys that should be synchronized when vdirsyncer\nmetasync is executed.", "example": "[\n  \"color\"\n  \"displayname\"\n]", "loc": ["vdirsyncer", "metadata"], "readOnly": false, "title": "vdirsyncer.metadata", "type": "list of string", "descriptionHTML": "<p>Metadata keys that should be synchronized when vdirsyncer\nmetasync is executed.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "What should happen if synchronization in one direction\nis impossible due to one storage being read-only.\nDefaults to revert.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/config.html#pair-section\nfor more information.", "example": "", "loc": ["vdirsyncer", "partialSync"], "readOnly": false, "title": "vdirsyncer.partialSync", "type": "null or one of \"revert\", \"error\", \"ignore\"", "descriptionHTML": "<p>What should happen if synchronization in one direction\nis impossible due to one storage being read-only.\nDefaults to <code>revert</code>.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/config.html#pair-section\">https://vdirsyncer.pimutils.org/en/stable/config.html#pair-section</a>\nfor more information.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "Command to call for each item creation and modification.\nThe command will be called with the path of the new/updated\nfile.", "example": "", "loc": ["vdirsyncer", "postHook"], "readOnly": false, "title": "vdirsyncer.postHook", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Command to call for each item creation and modification.\nThe command will be called with the path of the new/updated\nfile.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "A time range to synchronize. start and end can be any Python\nexpression that returns a datetime.datetime\nobject.", "example": "{\n  end = \"datetime.now() + timedelta(days=365)\";\n  start = \"datetime.now() - timedelta(days=365)\";\n}", "loc": ["vdirsyncer", "timeRange"], "readOnly": false, "title": "vdirsyncer.timeRange", "type": "null or (submodule)", "descriptionHTML": "<p>A time range to synchronize. start and end can be any Python\nexpression that returns a <code>datetime.datetime</code>\nobject.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "", "description": "End of time range to show.", "example": "", "loc": ["vdirsyncer", "timeRange", "end"], "readOnly": false, "title": "vdirsyncer.timeRange.end", "type": "string", "descriptionHTML": "<p>End of time range to show.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "", "description": "Start of time range to show.", "example": "", "loc": ["vdirsyncer", "timeRange", "start"], "readOnly": false, "title": "vdirsyncer.timeRange.start", "type": "string", "descriptionHTML": "<p>Start of time range to show.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "A file path where access tokens are stored.", "example": "", "loc": ["vdirsyncer", "tokenFile"], "readOnly": false, "title": "vdirsyncer.tokenFile", "type": "null or string", "descriptionHTML": "<p>A file path where access tokens are stored.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "A command that prints the URL of the storage.", "example": "[\n  \"~/get-url.sh\"\n]", "loc": ["vdirsyncer", "urlCommand"], "readOnly": false, "title": "vdirsyncer.urlCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the URL of the storage.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "The user agent to report to the server. Defaults to\nvdirsyncer.", "example": "", "loc": ["vdirsyncer", "userAgent"], "readOnly": false, "title": "vdirsyncer.userAgent", "type": "null or string", "descriptionHTML": "<p>The user agent to report to the server. Defaults to\n<code>vdirsyncer</code>.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "A command that prints the user name to standard output.", "example": "[\n  \"~/get-username.sh\"\n]", "loc": ["vdirsyncer", "userNameCommand"], "readOnly": false, "title": "vdirsyncer.userNameCommand", "type": "null or (list of string)", "descriptionHTML": "<p>A command that prints the user name to standard output.</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "Null or path to certificate to verify SSL against", "example": "\"/path/to/cert.pem\"", "loc": ["vdirsyncer", "verify"], "readOnly": false, "title": "vdirsyncer.verify", "type": "null or absolute path", "descriptionHTML": "<p>Null or path to certificate to verify SSL against</p>"}, {"declarations": [{"name": "<programs/vdirsyncer/accounts.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/programs/vdirsyncer/accounts.nix"}], "default": "null", "description": "Optional. SHA1 or MD5 fingerprint of the expected server certificate.\nSee\nhttps://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial\nfor more information.", "example": "", "loc": ["vdirsyncer", "verifyFingerprint"], "readOnly": false, "title": "vdirsyncer.verifyFingerprint", "type": "null or string", "descriptionHTML": "<p>Optional. SHA1 or MD5 fingerprint of the expected server certificate.</p>\n<p>See\n<a href=\"https://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial\">https://vdirsyncer.pimutils.org/en/stable/ssl-tutorial.html#ssl-tutorial</a>\nfor more information.</p>"}, {"declarations": [{"name": "<wayland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/wayland.nix"}], "default": "\"graphical-session.target\"", "description": "The systemd target that will automatically start the graphical Wayland services.\nThis option is a generalization of individual systemd.target or systemdTarget,\nand affect all Wayland services by default.\nWhen setting this value to \"sway-session.target\",\nmake sure to also enable {option}wayland.windowManager.sway.systemd.enable,\notherwise the service may never be started.", "example": "\"sway-session.target\"", "loc": ["wayland", "systemd", "target"], "readOnly": false, "title": "wayland.systemd.target", "type": "string", "descriptionHTML": "<p>The systemd target that will automatically start the graphical Wayland services.\nThis option is a generalization of individual <code>systemd.target</code> or <code>systemdTarget</code>,\nand affect all Wayland services by default.</p>\n<p>When setting this value to <code>\"sway-session.target\"</code>,\nmake sure to also enable {option}<code>wayland.windowManager.sway.systemd.enable</code>,\notherwise the service may never be started.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "false", "description": "Whether to enable configuration for Hyprland, a tiling Wayland\ncompositor that doesn't sacrifice on its looks.\n::: {.note}\nThis module configures Hyprland and adds it to your user's {env}PATH,\nbut does not make certain system-level changes. NixOS users should\nenable the NixOS module with {option}programs.hyprland.enable, which\nmakes system-level changes such as adding a desktop session entry.\n:::", "example": "", "loc": ["wayland", "windowManager", "hyprland", "enable"], "readOnly": false, "title": "wayland.windowManager.hyprland.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable configuration for Hyprland, a tiling Wayland\ncompositor that doesn't sacrifice on its looks.</p>\n<p>::: {.note}\nThis module configures Hyprland and adds it to your user's {env}<code>PATH</code>,\nbut does not make certain system-level changes. NixOS users should\nenable the NixOS module with {option}<code>programs.hyprland.enable</code>, which\nmakes system-level changes such as adding a desktop session entry.\n:::</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to ~/.config/hypr/hyprland.conf.", "example": "''\n  # window resize\n  bind = $mod, S, submap, resize\n  \n  submap = resize\n  binde = , right, resizeactive, 10 0\n  binde = , left, resizeactive, -10 0\n  binde = , up, resizeactive, 0 -10\n  binde = , down, resizeactive, 0 10\n  bind = , escape, submap, reset\n  submap = reset\n''", "loc": ["wayland", "windowManager", "hyprland", "extraConfig"], "readOnly": false, "title": "wayland.windowManager.hyprland.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to <code>~/.config/hypr/hyprland.conf</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "`wayland.windowManager.hyprland.package` with applied configuration", "description": "The Hyprland package after applying configuration.", "example": "", "loc": ["wayland", "windowManager", "hyprland", "finalPackage"], "readOnly": true, "title": "wayland.windowManager.hyprland.finalPackage", "type": "null or package", "descriptionHTML": "<p>The Hyprland package after applying configuration.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "`wayland.windowManager.hyprland.portalPackage` with\n        `wayland.windowManager.hyprland.finalPackage` override", "description": "The xdg-desktop-portal-hyprland package after overriding its hyprland input.", "example": "", "loc": ["wayland", "windowManager", "hyprland", "finalPortalPackage"], "readOnly": true, "title": "wayland.windowManager.hyprland.finalPortalPackage", "type": "null or package", "descriptionHTML": "<p>The xdg-desktop-portal-hyprland package after overriding its hyprland input.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "[\n  \"$\"\n  \"bezier\"\n  \"name\"\n  \"source\"\n]", "description": "List of prefix of attributes to source at the top of the config.", "example": "[\n  \"$\"\n  \"bezier\"\n]", "loc": ["wayland", "windowManager", "hyprland", "importantPrefixes"], "readOnly": false, "title": "wayland.windowManager.hyprland.importantPrefixes", "type": "list of string", "descriptionHTML": "<p>List of prefix of attributes to source at the top of the config.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "pkgs.hyprland", "description": "The hyprland package to use. Set this to null if you use the NixOS module to install Hyprland.", "example": "", "loc": ["wayland", "windowManager", "hyprland", "package"], "readOnly": false, "title": "wayland.windowManager.hyprland.package", "type": "null or package", "descriptionHTML": "<p>The hyprland package to use. Set this to null if you use the NixOS module to install Hyprland.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "[ ]", "description": "List of Hyprland plugins to use. Can either be packages or\nabsolute plugin paths.", "example": "", "loc": ["wayland", "windowManager", "hyprland", "plugins"], "readOnly": false, "title": "wayland.windowManager.hyprland.plugins", "type": "list of (package or absolute path)", "descriptionHTML": "<p>List of Hyprland plugins to use. Can either be packages or\nabsolute plugin paths.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "pkgs.xdg-desktop-portal-hyprland", "description": "The xdg-desktop-portal-hyprland package to use.", "example": "", "loc": ["wayland", "windowManager", "hyprland", "portalPackage"], "readOnly": false, "title": "wayland.windowManager.hyprland.portalPackage", "type": "null or package", "descriptionHTML": "<p>The xdg-desktop-portal-hyprland package to use.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "{ }", "description": "Hyprland configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See https://wiki.hypr.land for more examples.\n::: {.note}\nUse the  option to\ndeclare plugins.\n:::", "example": "{\n  decoration = {\n    shadow_offset = \"0 5\";\n    \"col.shadow\" = \"rgba(00000099)\";\n  };\n\n  \"$mod\" = \"SUPER\";\n\n  bindm = [\n    # mouse movements\n    \"$mod, mouse:272, movewindow\"\n    \"$mod, mouse:273, resizewindow\"\n    \"$mod ALT, mouse:272, resizewindow\"\n  ];\n}\n", "loc": ["wayland", "windowManager", "hyprland", "settings"], "readOnly": false, "title": "wayland.windowManager.hyprland.settings", "type": "Hyprland configuration value", "descriptionHTML": "<p>Hyprland configuration written in Nix. Entries with the same key\nshould be written as lists. Variables' and colors' names should be\nquoted. See <a href=\"https://wiki.hypr.land\">https://wiki.hypr.land</a> for more examples.</p>\n<p>::: {.note}\nUse the <a href=\"#opt-wayland.windowManager.hyprland.plugins\"></a> option to\ndeclare plugins.\n:::</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "true", "description": "Whether to enable putting source entries at the top of the configuration\n.", "example": "true", "loc": ["wayland", "windowManager", "hyprland", "sourceFirst"], "readOnly": false, "title": "wayland.windowManager.hyprland.sourceFirst", "type": "boolean", "descriptionHTML": "<p>Whether to enable putting source entries at the top of the configuration\n.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "true", "description": "Whether to enable {file}hyprland-session.target on\nhyprland startup. This links to graphical-session.target.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- DISPLAY\n- HYPRLAND_INSTANCE_SIGNATURE\n- WAYLAND_DISPLAY\n- XDG_CURRENT_DESKTOP", "example": "true", "loc": ["wayland", "windowManager", "hyprland", "systemd", "enable"], "readOnly": false, "title": "wayland.windowManager.hyprland.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable {file}<code>hyprland-session.target</code> on\nhyprland startup. This links to <code>graphical-session.target</code>.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- <code>DISPLAY</code>\n- <code>HYPRLAND_INSTANCE_SIGNATURE</code>\n- <code>WAYLAND_DISPLAY</code>\n- <code>XDG_CURRENT_DESKTOP</code></p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "false", "description": "Whether to enable autostart of applications using\n{manpage}systemd-xdg-autostart-generator(8).", "example": "true", "loc": ["wayland", "windowManager", "hyprland", "systemd", "enableXdgAutostart"], "readOnly": false, "title": "wayland.windowManager.hyprland.systemd.enableXdgAutostart", "type": "boolean", "descriptionHTML": "<p>Whether to enable autostart of applications using\n{manpage}<code>systemd-xdg-autostart-generator(8)</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "[\n  \"systemctl --user stop hyprland-session.target\"\n  \"systemctl --user start hyprland-session.target\"\n]", "description": "Extra commands to be run after D-Bus activation.", "example": "", "loc": ["wayland", "windowManager", "hyprland", "systemd", "extraCommands"], "readOnly": false, "title": "wayland.windowManager.hyprland.systemd.extraCommands", "type": "list of string", "descriptionHTML": "<p>Extra commands to be run after D-Bus activation.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "[\n  \"DISPLAY\"\n  \"HYPRLAND_INSTANCE_SIGNATURE\"\n  \"WAYLAND_DISPLAY\"\n  \"XDG_CURRENT_DESKTOP\"\n]", "description": "Environment variables to be imported in the systemd & D-Bus user\nenvironment.", "example": "[\n  \"--all\"\n]", "loc": ["wayland", "windowManager", "hyprland", "systemd", "variables"], "readOnly": false, "title": "wayland.windowManager.hyprland.systemd.variables", "type": "list of string", "descriptionHTML": "<p>Environment variables to be imported in the systemd &amp; D-Bus user\nenvironment.</p>"}, {"declarations": [{"name": "<services/window-managers/hyprland.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/hyprland.nix"}], "default": "true", "description": "Whether to enable XWayland.", "example": "true", "loc": ["wayland", "windowManager", "hyprland", "xwayland", "enable"], "readOnly": false, "title": "wayland.windowManager.hyprland.xwayland.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XWayland.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "[ ]", "description": "Command to autostart when labwc start.", "example": "[\n  \"wayvnc &\"\n  \"waybar &\"\n  \"swaybg -c '#113344' >/dev/null 2>&1 &\"\n]", "loc": ["wayland", "windowManager", "labwc", "autostart"], "readOnly": false, "title": "wayland.windowManager.labwc.autostart", "type": "list of string", "descriptionHTML": "<p>Command to autostart when labwc start.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "false", "description": "Whether to enable Labwc, a wayland window-stacking compositor.", "example": "true", "loc": ["wayland", "windowManager", "labwc", "enable"], "readOnly": false, "title": "wayland.windowManager.labwc.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Labwc, a wayland window-stacking compositor.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "[ ]", "description": "Environment variable to add when labwc start.", "example": "[\n  \"XDG_CURRENT_DESKTOP=labwc:wlroots\"\n  \"XKB_DEFAULT_LAYOUT=us\"\n]", "loc": ["wayland", "windowManager", "labwc", "environment"], "readOnly": false, "title": "wayland.windowManager.labwc.environment", "type": "list of string", "descriptionHTML": "<p>Environment variable to add when labwc start.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "\"\"", "description": "Extra lines appended to {file}$XDG_CONFIG_HOME/labwc/rc.xml.", "example": "''\n  <tablet mapToOutput=\"\" rotate=\"0\" mouseEmulation=\"no\">\n    <!-- Active area dimensions are in mm -->\n    <area top=\"0.0\" left=\"0.0\" width=\"0.0\" height=\"0.0\" />\n    <map button=\"Tip\" to=\"Left\" />\n    <map button=\"Stylus\" to=\"Right\" />\n    <map button=\"Stylus2\" to=\"Middle\" />\n  </tablet>\n''", "loc": ["wayland", "windowManager", "labwc", "extraConfig"], "readOnly": false, "title": "wayland.windowManager.labwc.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines appended to {file}<code>$XDG_CONFIG_HOME/labwc/rc.xml</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "[ ]", "description": "Config to configure labwc menu", "example": "[\n  {\n    label = \"pipemenu\";\n    menuId = \"menu\";\n    execute = \"/home/user/nix/scripts/pipe.sh\";\n  }\n  {\n    menuId = \"client-menu\";\n    label = \"Client Menu\";\n    icon = \"\";\n    items = [\n      {\n        label = \"Maximize\";\n        icon = \"\";\n        action = {\n          name = \"ToggleMaximize\";\n        };\n      }\n      {\n        label = \"Fullscreen\";\n        action = {\n          name = \"ToggleFullscreen\";\n        };\n      }\n      {\n        label = \"Alacritty\";\n        action = {\n          name = \"Execute\";\n          command = \"alacritty\";\n        };\n      }\n      {\n        label = \"Move Left\";\n        action = {\n          name = \"SendToDesktop\";\n          to = \"left\";\n        };\n      }\n      {\n        separator = { };\n      }\n      {\n        label = \"Workspace\";\n        menuId = \"workspace\";\n        icon = \"\";\n        items = [\n          {\n            label = \"Move Left\";\n            action = {\n              name = \"SendToDesktop\";\n              to = \"left\";\n            };\n          }\n        ];\n      }\n      {\n        separator = true;\n      }\n    ];\n  }\n];\n", "loc": ["wayland", "windowManager", "labwc", "menu"], "readOnly": false, "title": "wayland.windowManager.labwc.menu", "type": "list of (XML value)", "descriptionHTML": "<p>Config to configure labwc menu</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "pkgs.labwc", "description": "The labwc package to use. Set to null to use Nixos labwc package.", "example": "", "loc": ["wayland", "windowManager", "labwc", "package"], "readOnly": false, "title": "wayland.windowManager.labwc.package", "type": "null or package", "descriptionHTML": "<p>The labwc package to use. Set to <code>null</code> to use Nixos labwc package.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "{ }", "description": "Config to configure labwc options.\nUse \"@attributes\" for attributes.\nSee https://labwc.github.io/labwc-config.5.html for configuration.", "example": "{\n  theme = {\n    name = \"nord\";\n    cornerRadius = 8;\n    font = {\n      \"@name\" = \"FiraCode\";\n      \"@size\" = \"11\";\n    };\n  };\n  keyboard = {\n    default = true;\n    keybind = [\n      # <keybind key=\"W-Return\"><action name=\"Execute\" command=\"foot\"/></keybind>\n      {\n        \"@key\" = \"W-Return\";\n        action = {\n          \"@name\" = \"Execute\";\n          \"@command\" = \"foot\";\n        };\n      }\n      # <keybind key=\"W-Esc\"><action name=\"Execute\" command=\"loot\"/></keybind>\n      {\n        \"@key\" = \"W-Esc\";\n        action = {\n          \"@name\" = \"Execute\";\n          \"@command\" = \"loot\";\n        };\n      }\n    ];\n  };\n}\n", "loc": ["wayland", "windowManager", "labwc", "rc"], "readOnly": false, "title": "wayland.windowManager.labwc.rc", "type": "XML value", "descriptionHTML": "<p>Config to configure labwc options.\nUse \"@attributes\" for attributes.\nSee <a href=\"https://labwc.github.io/labwc-config.5.html\">https://labwc.github.io/labwc-config.5.html</a> for configuration.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "true", "description": "Whether to enable {file}labwc-session.target on\nlabwc startup. This links to {file}graphical-session.target.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- DISPLAY\n- WAYLAND_DISPLAY\n- XDG_CURRENT_DESKTOP", "example": "true", "loc": ["wayland", "windowManager", "labwc", "systemd", "enable"], "readOnly": false, "title": "wayland.windowManager.labwc.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable {file}<code>labwc-session.target</code> on\nlabwc startup. This links to {file}<code>graphical-session.target</code>.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- <code>DISPLAY</code>\n- <code>WAYLAND_DISPLAY</code>\n- <code>XDG_CURRENT_DESKTOP</code></p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "[\n  \"systemctl --user stop labwc-session.target\"\n  \"systemctl --user start labwc-session.target\"\n]", "description": "Extra commands to be run after D-Bus activation.", "example": "", "loc": ["wayland", "windowManager", "labwc", "systemd", "extraCommands"], "readOnly": false, "title": "wayland.windowManager.labwc.systemd.extraCommands", "type": "list of string", "descriptionHTML": "<p>Extra commands to be run after D-Bus activation.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "[\n  \"DISPLAY\"\n  \"WAYLAND_DISPLAY\"\n  \"XDG_CURRENT_DESKTOP\"\n]", "description": "Environment variables to be imported in the systemd & D-Bus user\nenvironment.", "example": "[\n  \"-all\"\n]", "loc": ["wayland", "windowManager", "labwc", "systemd", "variables"], "readOnly": false, "title": "wayland.windowManager.labwc.systemd.variables", "type": "list of string", "descriptionHTML": "<p>Environment variables to be imported in the systemd &amp; D-Bus user\nenvironment.</p>"}, {"declarations": [{"name": "<services/window-managers/labwc/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/labwc/default.nix"}], "default": "true", "description": "Whether to enable XWayland.", "example": "true", "loc": ["wayland", "windowManager", "labwc", "xwayland", "enable"], "readOnly": false, "title": "wayland.windowManager.labwc.xwayland.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XWayland.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "false", "description": "Whether to enable the river window manager.", "example": "true", "loc": ["wayland", "windowManager", "river", "enable"], "readOnly": false, "title": "wayland.windowManager.river.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable the river window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "\"\"", "description": "Extra lines appended to {file}$XDG_CONFIG_HOME/river/init.", "example": "''\n  rivertile -view-padding 6 -outer-padding 6 &\n''", "loc": ["wayland", "windowManager", "river", "extraConfig"], "readOnly": false, "title": "wayland.windowManager.river.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra lines appended to {file}<code>$XDG_CONFIG_HOME/river/init</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "{ }", "description": "Extra session variables set when running the compositor.", "example": "{\n  MOZ_ENABLE_WAYLAND = \"1\";\n}", "loc": ["wayland", "windowManager", "river", "extraSessionVariables"], "readOnly": false, "title": "wayland.windowManager.river.extraSessionVariables", "type": "attribute set", "descriptionHTML": "<p>Extra session variables set when running the compositor.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "pkgs.river", "description": "The river package to use. Set to null to not add any river package to your path.\nThis should be done if you want to use the NixOS river module to install river.", "example": "", "loc": ["wayland", "windowManager", "river", "package"], "readOnly": false, "title": "wayland.windowManager.river.package", "type": "null or package", "descriptionHTML": "<p>The river package to use. Set to <code>null</code> to not add any river package to your path.\nThis should be done if you want to use the NixOS river module to install river.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "{ }", "description": "General settings given to riverctl.", "example": "{\n  border-width = 2;\n  declare-mode = [\n    \"locked\"\n    \"normal\"\n    \"passthrough\"\n  ];\n  input = {\n    pointer-foo-bar = {\n      accel-profile = \"flat\";\n      events = true;\n      pointer-accel = -0.3;\n      tap = false;\n    };\n  };\n  map = {\n    normal = {\n      \"Alt Q\" = \"close\";\n    };\n  };\n  rule-add = {\n    \"-app-id\" = {\n      \"'bar'\" = \"csd\";\n      \"'float*'\" = {\n        \"-title\" = {\n          \"'foo'\" = \"float\";\n        };\n      };\n    };\n  };\n  set-cursor-warp = \"on-output-change\";\n  set-repeat = \"50 300\";\n  spawn = [\n    \"firefox\"\n    \"'foot -a terminal'\"\n  ];\n  xcursor-theme = \"someGreatTheme 12\";\n}", "loc": ["wayland", "windowManager", "river", "settings"], "readOnly": false, "title": "wayland.windowManager.river.settings", "type": "River configuration value", "descriptionHTML": "<p>General settings given to <code>riverctl</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "true", "description": "Whether to enable {file}river-session.target on\nriver startup. This links to {file}graphical-session.target}.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- DISPLAY\n- WAYLAND_DISPLAY\n- XDG_CURRENT_DESKTOP\n- NIXOS_OZONE_WL\n- XCURSOR_THEME\n- XCURSOR_SIZE", "example": "true", "loc": ["wayland", "windowManager", "river", "systemd", "enable"], "readOnly": false, "title": "wayland.windowManager.river.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable {file}<code>river-session.target</code> on\nriver startup. This links to {file}<code>graphical-session.target</code>}.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- <code>DISPLAY</code>\n- <code>WAYLAND_DISPLAY</code>\n- <code>XDG_CURRENT_DESKTOP</code>\n- <code>NIXOS_OZONE_WL</code>\n- <code>XCURSOR_THEME</code>\n- <code>XCURSOR_SIZE</code></p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "[\n  \"systemctl --user stop river-session.target\"\n  \"systemctl --user start river-session.target\"\n]", "description": "Extra commands to be run after D-Bus activation.", "example": "", "loc": ["wayland", "windowManager", "river", "systemd", "extraCommands"], "readOnly": false, "title": "wayland.windowManager.river.systemd.extraCommands", "type": "list of string", "descriptionHTML": "<p>Extra commands to be run after D-Bus activation.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "[\n  \"DISPLAY\"\n  \"WAYLAND_DISPLAY\"\n  \"XDG_CURRENT_DESKTOP\"\n  \"NIXOS_OZONE_WL\"\n  \"XCURSOR_THEME\"\n  \"XCURSOR_SIZE\"\n]", "description": "Environment variables to be imported in the systemd & D-Bus user\nenvironment.", "example": "[\n  \"-all\"\n]", "loc": ["wayland", "windowManager", "river", "systemd", "variables"], "readOnly": false, "title": "wayland.windowManager.river.systemd.variables", "type": "list of string", "descriptionHTML": "<p>Environment variables to be imported in the systemd &amp; D-Bus user\nenvironment.</p>"}, {"declarations": [{"name": "<services/window-managers/river.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/river.nix"}], "default": "true", "description": "Whether to enable XWayland.", "example": "true", "loc": ["wayland", "windowManager", "river", "xwayland", "enable"], "readOnly": false, "title": "wayland.windowManager.river.xwayland.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XWayland.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "wayland.windowManager.sway.package != null", "description": "If enabled, validates the generated config file.", "example": "", "loc": ["wayland", "windowManager", "sway", "checkConfig"], "readOnly": false, "title": "wayland.windowManager.sway.checkConfig", "type": "boolean", "descriptionHTML": "<p>If enabled, validates the generated config file.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Sway configuration options.", "example": "", "loc": ["wayland", "windowManager", "sway", "config"], "readOnly": false, "title": "wayland.windowManager.sway.config", "type": "null or (submodule)", "descriptionHTML": "<p>Sway configuration options.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "An attribute set that assigns applications to workspaces based\non criteria.", "example": "{\n\"1: web\" = [{ class = \"^Firefox$\"; }];\n\"0: extra\" = [{ class = \"^Firefox$\"; window_role = \"About\"; }];\n}\n", "loc": ["wayland", "windowManager", "sway", "config", "assigns"], "readOnly": false, "title": "wayland.windowManager.sway.config.assigns", "type": "attribute set of list of attribute set of (string or boolean)", "descriptionHTML": "<p>An attribute set that assigns applications to workspaces based\non criteria.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "see code", "description": "Sway bars settings blocks. Set to empty list to remove bars completely.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars", "type": "list of (submodule)", "descriptionHTML": "<p>Sway bars settings blocks. Set to empty list to remove bars completely.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Bar color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', fields and RGB color hex-codes as values.\nSee default values for the reference.\nNote that 'background', 'status', and 'separator' parameters take a single RGB value.\nSee https://i3wm.org/docs/userguide.html#_colors.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors", "type": "submodule", "descriptionHTML": "<p>Bar color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', fields and RGB color hex-codes as values.\nSee default values for the reference.\nNote that 'background', 'status', and 'separator' parameters take a single RGB value.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_colors\">https://i3wm.org/docs/userguide.html#_colors</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace is active.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "activeWorkspace"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.activeWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace is active.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Background color of the bar.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "background"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.background", "type": "null or string", "descriptionHTML": "<p>Background color of the bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for the binding mode indicator", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "bindingMode"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.bindingMode", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for the binding mode indicator</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Background color of the bar on the currently focused monitor output.", "example": "\"#000000\"", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "focusedBackground"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.focusedBackground", "type": "null or string", "descriptionHTML": "<p>Background color of the bar on the currently focused monitor output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Text color to be used for the separator on the currently focused monitor output.", "example": "\"#666666\"", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "focusedSeparator"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.focusedSeparator", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the separator on the currently focused monitor output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Text color to be used for the statusline on the currently focused monitor output.", "example": "\"#ffffff\"", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "focusedStatusline"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.focusedStatusline", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the statusline on the currently focused monitor output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace has focus.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "focusedWorkspace"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.focusedWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace has focus.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace does not\nhave focus and is not active.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "inactiveWorkspace"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.inactiveWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace does not\nhave focus and is not active.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Text color to be used for the separator.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "separator"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.separator", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the separator.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Text color to be used for the statusline.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "statusline"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.statusline", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the statusline.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace contains\na window with the urgency hint set.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "colors", "urgentWorkspace"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.colors.urgentWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace contains\na window with the urgency hint set.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "i3bar", "description": "Command that will be used to start a bar.", "example": "\"\\${pkgs.waybar}/bin/waybar\"", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "command"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.command", "type": "string", "descriptionHTML": "<p>Command that will be used to start a bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"\"", "description": "Extra configuration lines for this bar.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "extraConfig"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines for this bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Font configuration for this bar.", "example": "{\n  names = [ \"DejaVu Sans Mono\" \"FontAwesome5Free\" ];\n  style = \"Bold Semi-Condensed\";\n  size = 11.0;\n}\n", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "fonts"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.fonts", "type": "(list of string) or (submodule)", "descriptionHTML": "<p>Font configuration for this bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "The default bar mode when 'bar.mode' == 'hide'.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "hiddenState"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.hiddenState", "type": "null or one of \"hide\", \"show\"", "descriptionHTML": "<p>The default bar mode when 'bar.mode' == 'hide'.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Specifies the bar ID for the configured bar instance.\nIf this option is missing, the ID is set to bar-x, where x corresponds\nto the position of the embedding bar block in the config file.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "id"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.id", "type": "null or string", "descriptionHTML": "<p>Specifies the bar ID for the configured bar instance.\nIf this option is missing, the ID is set to bar-x, where x corresponds\nto the position of the embedding bar block in the config file.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Bar visibility mode.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "mode"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.mode", "type": "null or one of \"dock\", \"hide\", \"invisible\"", "descriptionHTML": "<p>Bar visibility mode.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "The edge of the screen swaybar should show up.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "position"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.position", "type": "null or one of \"top\", \"bottom\"", "descriptionHTML": "<p>The edge of the screen swaybar should show up.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Command that will be used to get status lines.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "statusCommand"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.statusCommand", "type": "null or string", "descriptionHTML": "<p>Command that will be used to get status lines.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Where to output tray.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "trayOutput"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.trayOutput", "type": "null or string", "descriptionHTML": "<p>Where to output tray.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Sets the pixel padding of the system tray.\nThis padding will surround the tray on all sides and between each item.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "trayPadding"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.trayPadding", "type": "null or signed integer", "descriptionHTML": "<p>Sets the pixel padding of the system tray.\nThis padding will surround the tray on all sides and between each item.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Whether workspace buttons should be shown or not.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "workspaceButtons"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.workspaceButtons", "type": "null or boolean", "descriptionHTML": "<p>Whether workspace buttons should be shown or not.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Whether workspace numbers should be displayed within the workspace buttons.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bars", "*", "workspaceNumbers"], "readOnly": false, "title": "wayland.windowManager.sway.config.bars.*.workspaceNumbers", "type": "null or boolean", "descriptionHTML": "<p>Whether workspace numbers should be displayed within the workspace buttons.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Whether to make use of {option}--to-code in keybindings.", "example": "true", "loc": ["wayland", "windowManager", "sway", "config", "bindkeysToCode"], "readOnly": false, "title": "wayland.windowManager.sway.config.bindkeysToCode", "type": "boolean", "descriptionHTML": "<p>Whether to make use of {option}<code>--to-code</code> in keybindings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"No bindswitches by default\"", "description": "Binds <switch> to execute the sway command command on state changes. Supported switches are lid (laptop\nlid) and tablet (tablet mode) switches. Valid values for state are on, off and toggle. These switches are\non when the device lid is shut and when tablet mode is active respectively. toggle is also supported to run\na command both when the switch is toggled on or off.\nSee sway(5).", "example": "let\n  laptop = \"eDP-1\";\nin\n{\n  \"lid:on\" = {\n    reload = true;\n    locked = true;\n    action = \"output ${laptop} disable\";\n  };\n  \"lid:off\" = {\n    reload = true;\n    locked = true;\n    action = \"output ${laptop} enable\";\n  };\n}\n", "loc": ["wayland", "windowManager", "sway", "config", "bindswitches"], "readOnly": false, "title": "wayland.windowManager.sway.config.bindswitches", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Binds <switch> to execute the sway command command on state changes. Supported switches are lid (laptop\nlid) and tablet (tablet mode) switches. Valid values for state are on, off and toggle. These switches are\non when the device lid is shut and when tablet mode is active respectively. toggle is also supported to run\na command both when the switch is toggled on or off.\nSee sway(5).</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "", "description": "The sway command to execute on state changes", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bindswitches", "<name>", "action"], "readOnly": false, "title": "wayland.windowManager.sway.config.bindswitches.<name>.action", "type": "string", "descriptionHTML": "<p>The sway command to execute on state changes</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Unless the flag --locked is set, the command\nwill not be run when a screen locking program\nis active. If there is a matching binding with\nand without --locked, the one with will be preferred\nwhen locked and the one without will be\npreferred when unlocked.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bindswitches", "<name>", "locked"], "readOnly": false, "title": "wayland.windowManager.sway.config.bindswitches.<name>.locked", "type": "boolean", "descriptionHTML": "<p>Unless the flag --locked is set, the command\nwill not be run when a screen locking program\nis active. If there is a matching binding with\nand without --locked, the one with will be preferred\nwhen locked and the one without will be\npreferred when unlocked.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "If the --reload flag is given, the binding will\nalso be executed when the config is reloaded.\ntoggle bindings will not be executed on reload.\nThe --locked flag will operate as normal so if\nthe config is reloaded while locked and\n--locked is not given, the binding will not be\nexecuted.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "bindswitches", "<name>", "reload"], "readOnly": false, "title": "wayland.windowManager.sway.config.bindswitches.<name>.reload", "type": "boolean", "descriptionHTML": "<p>If the --reload flag is given, the binding will\nalso be executed when the config is reloaded.\ntoggle bindings will not be executed on reload.\nThe --locked flag will operate as normal so if\nthe config is reloaded while locked and\n--locked is not given, the binding will not be\nexecuted.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', 'indicator' and 'childBorder' fields\nand RGB color hex-codes as values. See default values for the reference.\nNote that 'sway.config.colors.background' parameter takes a single RGB value.\nSee https://i3wm.org/docs/userguide.html#_changing_colors.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors", "type": "submodule", "descriptionHTML": "<p>Color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', 'indicator' and 'childBorder' fields\nand RGB color hex-codes as values. See default values for the reference.\nNote that 'sway.config.colors.background' parameter takes a single RGB value.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_changing_colors\">https://i3wm.org/docs/userguide.html#_changing_colors</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"#ffffff\"", "description": "Background color of the window. Only applications which do not cover\nthe whole area expose the color.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors", "background"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors.background", "type": "string", "descriptionHTML": "<p>Background color of the window. Only applications which do not cover\nthe whole area expose the color.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{\n  background = \"#285577\";\n  border = \"#4c7899\";\n  childBorder = \"#285577\";\n  indicator = \"#2e9ef4\";\n  text = \"#ffffff\";\n}", "description": "A window which currently has the focus.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors", "focused"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors.focused", "type": "submodule", "descriptionHTML": "<p>A window which currently has the focus.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{\n  background = \"#5f676a\";\n  border = \"#333333\";\n  childBorder = \"#5f676a\";\n  indicator = \"#484e50\";\n  text = \"#ffffff\";\n}", "description": "A window which is the focused one of its container,\nbut it does not have the focus at the moment.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors", "focusedInactive"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors.focusedInactive", "type": "submodule", "descriptionHTML": "<p>A window which is the focused one of its container,\nbut it does not have the focus at the moment.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{\n  background = \"#0c0c0c\";\n  border = \"#000000\";\n  childBorder = \"#0c0c0c\";\n  indicator = \"#000000\";\n  text = \"#ffffff\";\n}", "description": "Background and text color are used to draw placeholder window\ncontents (when restoring layouts). Border and indicator are ignored.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors", "placeholder"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors.placeholder", "type": "submodule", "descriptionHTML": "<p>Background and text color are used to draw placeholder window\ncontents (when restoring layouts). Border and indicator are ignored.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{\n  background = \"#222222\";\n  border = \"#333333\";\n  childBorder = \"#222222\";\n  indicator = \"#292d2e\";\n  text = \"#888888\";\n}", "description": "A window which is not focused.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors", "unfocused"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors.unfocused", "type": "submodule", "descriptionHTML": "<p>A window which is not focused.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{\n  background = \"#900000\";\n  border = \"#2f343a\";\n  childBorder = \"#900000\";\n  indicator = \"#900000\";\n  text = \"#ffffff\";\n}", "description": "A window which has its urgency hint activated.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "colors", "urgent"], "readOnly": false, "title": "wayland.windowManager.sway.config.colors.urgent", "type": "submodule", "descriptionHTML": "<p>A window which has its urgency hint activated.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "The default workspace to show when sway is launched.\nThis must to correspond to the value of the keybinding of the default workspace.", "example": "\"workspace number 9\"", "loc": ["wayland", "windowManager", "sway", "config", "defaultWorkspace"], "readOnly": false, "title": "wayland.windowManager.sway.config.defaultWorkspace", "type": "null or string", "descriptionHTML": "<p>The default workspace to show when sway is launched.\nThis must to correspond to the value of the keybinding of the default workspace.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"j\"", "description": "Home row direction key for moving down.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "down"], "readOnly": false, "title": "wayland.windowManager.sway.config.down", "type": "string", "descriptionHTML": "<p>Home row direction key for moving down.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Floating window settings.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "floating"], "readOnly": false, "title": "wayland.windowManager.sway.config.floating", "type": "submodule", "descriptionHTML": "<p>Floating window settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "2", "description": "Floating windows border width.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "floating", "border"], "readOnly": false, "title": "wayland.windowManager.sway.config.floating.border", "type": "signed integer", "descriptionHTML": "<p>Floating windows border width.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[ ]", "description": "List of criteria for windows that should be opened in a floating mode.", "example": "[\n  {\n    title = \"Steam - Update News\";\n  }\n  {\n    class = \"Pavucontrol\";\n  }\n]", "loc": ["wayland", "windowManager", "sway", "config", "floating", "criteria"], "readOnly": false, "title": "wayland.windowManager.sway.config.floating.criteria", "type": "list of attribute set of (string or boolean)", "descriptionHTML": "<p>List of criteria for windows that should be opened in a floating mode.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"sway.config.modifier\"", "description": "Modifier key or keys that can be used to drag floating windows.", "example": "\"Mod4\"", "loc": ["wayland", "windowManager", "sway", "config", "floating", "modifier"], "readOnly": false, "title": "wayland.windowManager.sway.config.floating.modifier", "type": "string", "descriptionHTML": "<p>Modifier key or keys that can be used to drag floating windows.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "''\n  true for state version \u2265 23.05\n  false for state version < 23.05\n''", "description": "Whether to show floating window titlebars.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "floating", "titlebar"], "readOnly": false, "title": "wayland.windowManager.sway.config.floating.titlebar", "type": "boolean", "descriptionHTML": "<p>Whether to show floating window titlebars.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Focus related settings.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "focus"], "readOnly": false, "title": "wayland.windowManager.sway.config.focus", "type": "submodule", "descriptionHTML": "<p>Focus related settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"yes\"", "description": "Whether focus should follow the mouse.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "focus", "followMouse"], "readOnly": false, "title": "wayland.windowManager.sway.config.focus.followMouse", "type": "one of \"yes\", \"no\", \"always\" or boolean", "descriptionHTML": "<p>Whether focus should follow the mouse.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Whether to force focus wrapping in tabbed or stacked containers.\nThis option is deprecated, use {option}focus.wrapping instead.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "focus", "forceWrapping"], "readOnly": false, "title": "wayland.windowManager.sway.config.focus.forceWrapping", "type": "boolean", "descriptionHTML": "<p>Whether to force focus wrapping in tabbed or stacked containers.</p>\n<p>This option is deprecated, use {option}<code>focus.wrapping</code> instead.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "true", "description": "Whether mouse cursor should be warped to the center of the window when switching focus\nto a window on a different output.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "focus", "mouseWarping"], "readOnly": false, "title": "wayland.windowManager.sway.config.focus.mouseWarping", "type": "boolean or one of \"container\", \"output\"", "descriptionHTML": "<p>Whether mouse cursor should be warped to the center of the window when switching focus\nto a window on a different output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"smart\"", "description": "This option modifies focus behavior on new window activation.\nSee https://i3wm.org/docs/userguide.html#focus_on_window_activation", "example": "\"none\"", "loc": ["wayland", "windowManager", "sway", "config", "focus", "newWindow"], "readOnly": false, "title": "wayland.windowManager.sway.config.focus.newWindow", "type": "one of \"smart\", \"urgent\", \"focus\", \"none\"", "descriptionHTML": "<p>This option modifies focus behavior on new window activation.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#focus_on_window_activation\">https://i3wm.org/docs/userguide.html#focus_on_window_activation</a></p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"no\"", "description": "Whether the window focus commands automatically wrap around the edge of containers.\nSee https://i3wm.org/docs/userguide.html#_focus_wrapping", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "focus", "wrapping"], "readOnly": false, "title": "wayland.windowManager.sway.config.focus.wrapping", "type": "one of \"yes\", \"no\", \"force\", \"workspace\"", "descriptionHTML": "<p>Whether the window focus commands automatically wrap around the edge of containers.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_focus_wrapping\">https://i3wm.org/docs/userguide.html#_focus_wrapping</a></p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Font configuration for window titles, nagbar...", "example": "{\n  names = [ \"DejaVu Sans Mono\" \"FontAwesome5Free\" ];\n  style = \"Bold Semi-Condensed\";\n  size = 11.0;\n}\n", "loc": ["wayland", "windowManager", "sway", "config", "fonts"], "readOnly": false, "title": "wayland.windowManager.sway.config.fonts", "type": "(list of string) or (submodule)", "descriptionHTML": "<p>Font configuration for window titles, nagbar...</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Gaps related settings.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "gaps"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps", "type": "null or (submodule)", "descriptionHTML": "<p>Gaps related settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Bottom gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "bottom"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.bottom", "type": "null or signed integer", "descriptionHTML": "<p>Bottom gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Horizontal gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "horizontal"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.horizontal", "type": "null or signed integer", "descriptionHTML": "<p>Horizontal gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Inner gaps value.", "example": "12", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "inner"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.inner", "type": "null or signed integer", "descriptionHTML": "<p>Inner gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Left gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "left"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.left", "type": "null or signed integer", "descriptionHTML": "<p>Left gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Outer gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "outer"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.outer", "type": "null or signed integer", "descriptionHTML": "<p>Outer gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Right gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "right"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.right", "type": "null or signed integer", "descriptionHTML": "<p>Right gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"off\"", "description": "This option controls whether to disable container borders on\nworkspace with a single container.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "smartBorders"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.smartBorders", "type": "one of \"on\", \"off\", \"no_gaps\"", "descriptionHTML": "<p>This option controls whether to disable container borders on\nworkspace with a single container.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "This option controls whether to disable all gaps (outer and inner)\non workspace with a single container.", "example": "true", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "smartGaps"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.smartGaps", "type": "boolean", "descriptionHTML": "<p>This option controls whether to disable all gaps (outer and inner)\non workspace with a single container.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Top gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "top"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.top", "type": "null or signed integer", "descriptionHTML": "<p>Top gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "null", "description": "Vertical gaps value.", "example": "5", "loc": ["wayland", "windowManager", "sway", "config", "gaps", "vertical"], "readOnly": false, "title": "wayland.windowManager.sway.config.gaps.vertical", "type": "null or signed integer", "descriptionHTML": "<p>Vertical gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "An attribute set that defines input modules. See\n{manpage}sway-input(5)\nfor options.", "example": "{\n  \"*\" = {\n    xkb_variant = \"dvorak\";\n  };\n}", "loc": ["wayland", "windowManager", "sway", "config", "input"], "readOnly": false, "title": "wayland.windowManager.sway.config.input", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>An attribute set that defines input modules. See\n{manpage}<code>sway-input(5)</code>\nfor options.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"Default sway keybindings.\"", "description": "An attribute set that assigns a key press to an action using a key symbol.\nSee https://i3wm.org/docs/userguide.html#keybindings.\nConsider to use lib.mkOptionDefault function to extend or override\ndefault keybindings instead of specifying all of them from scratch.", "example": "let\n  modifier = config.wayland.windowManager.sway.config.modifier;\nin lib.mkOptionDefault {\n  \"${modifier}+Return\" = \"exec ${cfg.config.terminal}\";\n  \"${modifier}+Shift+q\" = \"kill\";\n  \"${modifier}+d\" = \"exec ${cfg.config.menu}\";\n}\n", "loc": ["wayland", "windowManager", "sway", "config", "keybindings"], "readOnly": false, "title": "wayland.windowManager.sway.config.keybindings", "type": "attribute set of (null or string)", "descriptionHTML": "<p>An attribute set that assigns a key press to an action using a key symbol.\nSee <a href=\"https://i3wm.org/docs/userguide.html#keybindings\">https://i3wm.org/docs/userguide.html#keybindings</a>.</p>\n<p>Consider to use <code>lib.mkOptionDefault</code> function to extend or override\ndefault keybindings instead of specifying all of them from scratch.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "An attribute set that assigns keypress to an action using key code.\nSee https://i3wm.org/docs/userguide.html#keybindings.", "example": "{\n  \"214\" = \"exec /bin/script.sh\";\n}", "loc": ["wayland", "windowManager", "sway", "config", "keycodebindings"], "readOnly": false, "title": "wayland.windowManager.sway.config.keycodebindings", "type": "attribute set of (null or string)", "descriptionHTML": "<p>An attribute set that assigns keypress to an action using key code.\nSee <a href=\"https://i3wm.org/docs/userguide.html#keybindings\">https://i3wm.org/docs/userguide.html#keybindings</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"h\"", "description": "Home row direction key for moving left.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "left"], "readOnly": false, "title": "wayland.windowManager.sway.config.left", "type": "string", "descriptionHTML": "<p>Home row direction key for moving left.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "${pkgs.dmenu}/bin/dmenu_path | ${pkgs.dmenu}/bin/dmenu | ${pkgs.findutils}/bin/xargs swaymsg exec --", "description": "Default launcher to use.", "example": "\"bemenu-run\"", "loc": ["wayland", "windowManager", "sway", "config", "menu"], "readOnly": false, "title": "wayland.windowManager.sway.config.menu", "type": "string", "descriptionHTML": "<p>Default launcher to use.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{\n  resize = {\n    Down = \"resize grow height 10 px\";\n    Escape = \"mode default\";\n    Left = \"resize shrink width 10 px\";\n    Return = \"mode default\";\n    Right = \"resize grow width 10 px\";\n    Up = \"resize shrink height 10 px\";\n    h = \"resize shrink width 10 px\";\n    j = \"resize grow height 10 px\";\n    k = \"resize shrink height 10 px\";\n    l = \"resize grow width 10 px\";\n  };\n}", "description": "An attribute set that defines binding modes and keybindings\ninside them\nOnly basic keybinding is supported (bindsym keycomb action),\nfor more advanced setup use 'sway.extraConfig'.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "modes"], "readOnly": false, "title": "wayland.windowManager.sway.config.modes", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>An attribute set that defines binding modes and keybindings\ninside them</p>\n<p>Only basic keybinding is supported (bindsym keycomb action),\nfor more advanced setup use 'sway.extraConfig'.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"Mod1\"", "description": "Modifier key that is used for all default keybindings.", "example": "\"Mod4\"", "loc": ["wayland", "windowManager", "sway", "config", "modifier"], "readOnly": false, "title": "wayland.windowManager.sway.config.modifier", "type": "one of \"Shift\", \"Control\", \"Mod1\", \"Mod2\", \"Mod3\", \"Mod4\", \"Mod5\" or string", "descriptionHTML": "<p>Modifier key that is used for all default keybindings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "An attribute set that defines output modules. See\n{manpage}sway-output(5)\nfor options.", "example": "{\n  HDMI-A-2 = {\n    bg = \"~/path/to/background.png fill\";\n  };\n}", "loc": ["wayland", "windowManager", "sway", "config", "output"], "readOnly": false, "title": "wayland.windowManager.sway.config.output", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>An attribute set that defines output modules. See\n{manpage}<code>sway-output(5)</code>\nfor options.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"l\"", "description": "Home row direction key for moving right.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "right"], "readOnly": false, "title": "wayland.windowManager.sway.config.right", "type": "string", "descriptionHTML": "<p>Home row direction key for moving right.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "An attribute set that defines seat modules. See\n{manpage}sway-input(5)\nfor options.", "example": "{\n  \"*\" = {\n    hide_cursor = \"when-typing enable\";\n  };\n}", "loc": ["wayland", "windowManager", "sway", "config", "seat"], "readOnly": false, "title": "wayland.windowManager.sway.config.seat", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>An attribute set that defines seat modules. See\n{manpage}<code>sway-input(5)</code>\nfor options.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[ ]", "description": "Commands that should be executed at startup.\nSee https://i3wm.org/docs/userguide.html#_automatically_starting_applications_on_i3_startup.", "example": "[\n{ command = \"systemctl --user restart waybar\"; always = true; }\n{ command = \"dropbox start\"; }\n{ command = \"firefox\"; }\n]\n", "loc": ["wayland", "windowManager", "sway", "config", "startup"], "readOnly": false, "title": "wayland.windowManager.sway.config.startup", "type": "list of (submodule)", "descriptionHTML": "<p>Commands that should be executed at startup.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_automatically_starting_applications_on_i3_startup\">https://i3wm.org/docs/userguide.html#_automatically_starting_applications_on_i3_startup</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Whether to run command on each sway restart.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "startup", "*", "always"], "readOnly": false, "title": "wayland.windowManager.sway.config.startup.*.always", "type": "boolean", "descriptionHTML": "<p>Whether to run command on each sway restart.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "", "description": "Command that will be executed on startup.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "startup", "*", "command"], "readOnly": false, "title": "wayland.windowManager.sway.config.startup.*.command", "type": "string", "descriptionHTML": "<p>Command that will be executed on startup.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "${pkgs.foot}/bin/foot", "description": "Default terminal to run.", "example": "\"alacritty\"", "loc": ["wayland", "windowManager", "sway", "config", "terminal"], "readOnly": false, "title": "wayland.windowManager.sway.config.terminal", "type": "string", "descriptionHTML": "<p>Default terminal to run.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"k\"", "description": "Home row direction key for moving up.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "up"], "readOnly": false, "title": "wayland.windowManager.sway.config.up", "type": "string", "descriptionHTML": "<p>Home row direction key for moving up.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Window titlebar and border settings.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "window"], "readOnly": false, "title": "wayland.windowManager.sway.config.window", "type": "submodule", "descriptionHTML": "<p>Window titlebar and border settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "2", "description": "Window border width.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "window", "border"], "readOnly": false, "title": "wayland.windowManager.sway.config.window.border", "type": "signed integer", "descriptionHTML": "<p>Window border width.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[ ]", "description": "List of commands that should be executed on specific windows.\nSee {option}for_window swaywm option documentation.", "example": "[\n  {\n    command = \"border pixel 1\";\n    criteria = {\n      class = \"XTerm\";\n    };\n  }\n]", "loc": ["wayland", "windowManager", "sway", "config", "window", "commands"], "readOnly": false, "title": "wayland.windowManager.sway.config.window.commands", "type": "list of (submodule)", "descriptionHTML": "<p>List of commands that should be executed on specific windows.\nSee {option}<code>for_window</code> swaywm option documentation.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "", "description": "Swaywm command to execute.", "example": "\"border pixel 1\"", "loc": ["wayland", "windowManager", "sway", "config", "window", "commands", "*", "command"], "readOnly": false, "title": "wayland.windowManager.sway.config.window.commands.*.command", "type": "string", "descriptionHTML": "<p>Swaywm command to execute.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "", "description": "Criteria of the windows on which command should be executed.\nA value of true is equivalent to using an empty\ncriteria (which is different from an empty string criteria).", "example": "{\n  title = \"x200: ~/work\";\n  floating = true;\n};\n", "loc": ["wayland", "windowManager", "sway", "config", "window", "commands", "*", "criteria"], "readOnly": false, "title": "wayland.windowManager.sway.config.window.commands.*.criteria", "type": "attribute set of (string or boolean)", "descriptionHTML": "<p>Criteria of the windows on which command should be executed.</p>\n<p>A value of <code>true</code> is equivalent to using an empty\ncriteria (which is different from an empty string criteria).</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"none\"", "description": "Hide window borders adjacent to the screen edges.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "window", "hideEdgeBorders"], "readOnly": false, "title": "wayland.windowManager.sway.config.window.hideEdgeBorders", "type": "one of \"none\", \"vertical\", \"horizontal\", \"both\", \"smart\", \"smart_no_gaps\", \"--i3 none\", \"--i3 vertical\", \"--i3 horizontal\", \"--i3 both\", \"--i3 smart\", \"--i3 smart_no_gaps\"", "descriptionHTML": "<p>Hide window borders adjacent to the screen edges.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "''\n  true for state version \u2265 23.05\n  false for state version < 23.05\n''", "description": "Whether to show window titlebars.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "window", "titlebar"], "readOnly": false, "title": "wayland.windowManager.sway.config.window.titlebar", "type": "boolean", "descriptionHTML": "<p>Whether to show window titlebars.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Assume you are on workspace \"1: www\" and switch to \"2: IM\" using\nmod+2 because somebody sent you a message. You don\u2019t need to remember\nwhere you came from now, you can just press $mod+2 again to switch\nback to \"1: www\".", "example": "true", "loc": ["wayland", "windowManager", "sway", "config", "workspaceAutoBackAndForth"], "readOnly": false, "title": "wayland.windowManager.sway.config.workspaceAutoBackAndForth", "type": "boolean", "descriptionHTML": "<p>Assume you are on workspace \"1: www\" and switch to \"2: IM\" using\nmod+2 because somebody sent you a message. You don\u2019t need to remember\nwhere you came from now, you can just press $mod+2 again to switch\nback to \"1: www\".</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"default\"", "description": "The mode in which new containers on workspace level will\nstart.", "example": "\"tabbed\"", "loc": ["wayland", "windowManager", "sway", "config", "workspaceLayout"], "readOnly": false, "title": "wayland.windowManager.sway.config.workspaceLayout", "type": "one of \"default\", \"stacking\", \"tabbed\"", "descriptionHTML": "<p>The mode in which new containers on workspace level will\nstart.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[ ]", "description": "Assign workspaces to outputs.", "example": "", "loc": ["wayland", "windowManager", "sway", "config", "workspaceOutputAssign"], "readOnly": false, "title": "wayland.windowManager.sway.config.workspaceOutputAssign", "type": "list of (submodule)", "descriptionHTML": "<p>Assign workspaces to outputs.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"\"", "description": "Name(s) of the output(s) from {command}swaymsg -t get_outputs.", "example": "\"eDP\"", "loc": ["wayland", "windowManager", "sway", "config", "workspaceOutputAssign", "*", "output"], "readOnly": false, "title": "wayland.windowManager.sway.config.workspaceOutputAssign.*.output", "type": "string or list of string", "descriptionHTML": "<p>Name(s) of the output(s) from {command}<code>swaymsg -t get_outputs</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"\"", "description": "Name of the workspace to assign.", "example": "\"Web\"", "loc": ["wayland", "windowManager", "sway", "config", "workspaceOutputAssign", "*", "workspace"], "readOnly": false, "title": "wayland.windowManager.sway.config.workspaceOutputAssign.*.workspace", "type": "string", "descriptionHTML": "<p>Name of the workspace to assign.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Whether to enable sway wayland compositor.", "example": "true", "loc": ["wayland", "windowManager", "sway", "enable"], "readOnly": false, "title": "wayland.windowManager.sway.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable sway wayland compositor.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to ~/.config/sway/config.", "example": "", "loc": ["wayland", "windowManager", "sway", "extraConfig"], "readOnly": false, "title": "wayland.windowManager.sway.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to ~/.config/sway/config.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"\"", "description": "Like extraConfig, except lines are added to ~/.config/sway/config before all other configuration.", "example": "", "loc": ["wayland", "windowManager", "sway", "extraConfigEarly"], "readOnly": false, "title": "wayland.windowManager.sway.extraConfigEarly", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Like extraConfig, except lines are added to ~/.config/sway/config before all other configuration.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[ ]", "description": "Command line arguments passed to launch Sway. Please DO NOT report\nissues if you use an unsupported GPU (proprietary drivers).", "example": "[\n  \"--verbose\"\n  \"--debug\"\n  \"--unsupported-gpu\"\n  \"--my-next-gpu-wont-be-nvidia\"\n]", "loc": ["wayland", "windowManager", "sway", "extraOptions"], "readOnly": false, "title": "wayland.windowManager.sway.extraOptions", "type": "list of string", "descriptionHTML": "<p>Command line arguments passed to launch Sway. Please DO NOT report\nissues if you use an unsupported GPU (proprietary drivers).</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"\"", "description": "Shell commands executed just before Sway is started.", "example": "''\n  export SDL_VIDEODRIVER=wayland\n  # needs qt5.qtwayland in systemPackages\n  export QT_QPA_PLATFORM=wayland\n  export QT_WAYLAND_DISABLE_WINDOWDECORATION=\"1\"\n  # Fix for some Java AWT applications (e.g. Android Studio),\n  # use this if they aren't displayed properly:\n  export _JAVA_AWT_WM_NONREPARENTING=1\n''", "loc": ["wayland", "windowManager", "sway", "extraSessionCommands"], "readOnly": false, "title": "wayland.windowManager.sway.extraSessionCommands", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell commands executed just before Sway is started.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "${pkgs.sway}", "description": "Sway package to use. Will override the options\n'wrapperFeatures', 'extraSessionCommands', and 'extraOptions'.\nSet to null to not add any Sway package to your\npath. This should be done if you want to use the NixOS Sway\nmodule to install Sway. Beware setting to null will also disable\nreloading Sway when new config is activated.", "example": "", "loc": ["wayland", "windowManager", "sway", "package"], "readOnly": false, "title": "wayland.windowManager.sway.package", "type": "null or package", "descriptionHTML": "<p>Sway package to use. Will override the options\n'wrapperFeatures', 'extraSessionCommands', and 'extraOptions'.\nSet to <code>null</code> to not add any Sway package to your\npath. This should be done if you want to use the NixOS Sway\nmodule to install Sway. Beware setting to <code>null</code> will also disable\nreloading Sway when new config is activated.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/swaynag.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/swaynag.nix"}], "default": "false", "description": "Whether to enable configuration of swaynag, a lightweight error bar for sway.", "example": "true", "loc": ["wayland", "windowManager", "sway", "swaynag", "enable"], "readOnly": false, "title": "wayland.windowManager.sway.swaynag.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable configuration of swaynag, a lightweight error bar for sway.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/swaynag.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/swaynag.nix"}], "default": "{ }", "description": "Configuration written to\n{file}$XDG_CONFIG_HOME/swaynag/config.\nSee\n{manpage}swaynag(5)\nfor a list of available options and an example configuration.\nNote, configurations declared under &lt;config&gt;\nwill override the default type values of swaynag.", "example": "{\n  \"<config>\" = {\n    edge = \"bottom\";\n    font = \"Dina 12\";\n  };\n\n  green = {\n    edge = \"top\";\n    background = \"00AA00\";\n    text = \"FFFFFF\";\n    button-background = \"00CC00\";\n    message-padding = 10;\n  };\n}\n", "loc": ["wayland", "windowManager", "sway", "swaynag", "settings"], "readOnly": false, "title": "wayland.windowManager.sway.swaynag.settings", "type": "attribute set of attribute set of (Swaynag config atom (null, bool, int, float, str))", "descriptionHTML": "<p>Configuration written to\n{file}<code>$XDG_CONFIG_HOME/swaynag/config</code>.</p>\n<p>See\n{manpage}<code>swaynag(5)</code>\nfor a list of available options and an example configuration.\nNote, configurations declared under <code>&lt;config&gt;</code>\nwill override the default type values of swaynag.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "\"dbus\"", "description": "The D-Bus implementation used on the system.\nThis affects which tool is used to import environment variables when starting the Sway session.\nOn NixOS, this should match the value of the option services.dbus.implementation (NixOS).\nWhen set to dbus, dbus-update-activation-environment --systemd &lt;variables&gt; is run.\nOtherwise, when set to broker, systemctl --user import-environment &lt;variables&gt; is run.\nSee https://github.com/swaywm/sway/wiki#systemd-and-dbus-activation-environments for more documentation.", "example": "\"broker\"", "loc": ["wayland", "windowManager", "sway", "systemd", "dbusImplementation"], "readOnly": false, "title": "wayland.windowManager.sway.systemd.dbusImplementation", "type": "one of \"dbus\", \"broker\"", "descriptionHTML": "<p>The D-Bus implementation used on the system.\nThis affects which tool is used to import environment variables when starting the Sway session.\nOn NixOS, this should match the value of the option <a href=\"https://nixos.org/manual/nixos/stable/options#opt-services.dbus.implementation\"><code>services.dbus.implementation</code> (NixOS)</a>.\nWhen set to <code>dbus</code>, <code>dbus-update-activation-environment --systemd &lt;variables&gt;</code> is run.\nOtherwise, when set to <code>broker</code>, <code>systemctl --user import-environment &lt;variables&gt;</code> is run.\nSee <a href=\"https://github.com/swaywm/sway/wiki#systemd-and-dbus-activation-environments\">https://github.com/swaywm/sway/wiki#systemd-and-dbus-activation-environments</a> for more documentation.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "true", "description": "Whether to enable {file}sway-session.target on\nsway startup. This links to\n{file}graphical-session.target.\nSome important environment variables will be imported to systemd\nand dbus user environment before reaching the target, including\n* {env}DISPLAY\n* {env}WAYLAND_DISPLAY\n* {env}SWAYSOCK\n* {env}XDG_CURRENT_DESKTOP\n* {env}XDG_SESSION_TYPE\n* {env}NIXOS_OZONE_WL\n* {env}XCURSOR_THEME\n* {env}XCURSOR_SIZE\nYou can extend this list using the systemd.variables option.", "example": "false", "loc": ["wayland", "windowManager", "sway", "systemd", "enable"], "readOnly": false, "title": "wayland.windowManager.sway.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable {file}<code>sway-session.target</code> on\nsway startup. This links to\n{file}<code>graphical-session.target</code>.\nSome important environment variables will be imported to systemd\nand dbus user environment before reaching the target, including\n* {env}<code>DISPLAY</code>\n* {env}<code>WAYLAND_DISPLAY</code>\n* {env}<code>SWAYSOCK</code>\n* {env}<code>XDG_CURRENT_DESKTOP</code>\n* {env}<code>XDG_SESSION_TYPE</code>\n* {env}<code>NIXOS_OZONE_WL</code>\n* {env}<code>XCURSOR_THEME</code>\n* {env}<code>XCURSOR_SIZE</code>\nYou can extend this list using the <code>systemd.variables</code> option.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[\n  \"systemctl --user reset-failed\"\n  \"systemctl --user start sway-session.target\"\n  \"swaymsg -mt subscribe '[]' || true\"\n  \"systemctl --user stop sway-session.target\"\n]", "description": "Extra commands to run after D-Bus activation.", "example": "", "loc": ["wayland", "windowManager", "sway", "systemd", "extraCommands"], "readOnly": false, "title": "wayland.windowManager.sway.systemd.extraCommands", "type": "list of string", "descriptionHTML": "<p>Extra commands to run after D-Bus activation.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "[\n  \"DISPLAY\"\n  \"WAYLAND_DISPLAY\"\n  \"SWAYSOCK\"\n  \"XDG_CURRENT_DESKTOP\"\n  \"XDG_SESSION_TYPE\"\n  \"NIXOS_OZONE_WL\"\n  \"XCURSOR_THEME\"\n  \"XCURSOR_SIZE\"\n]", "description": "Environment variables imported into the systemd and D-Bus user environment.", "example": "[\n  \"--all\"\n]", "loc": ["wayland", "windowManager", "sway", "systemd", "variables"], "readOnly": false, "title": "wayland.windowManager.sway.systemd.variables", "type": "list of string", "descriptionHTML": "<p>Environment variables imported into the systemd and D-Bus user environment.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Whether to enable autostart of applications using\n{manpage}systemd-xdg-autostart-generator(8)\n.", "example": "true", "loc": ["wayland", "windowManager", "sway", "systemd", "xdgAutostart"], "readOnly": false, "title": "wayland.windowManager.sway.systemd.xdgAutostart", "type": "boolean", "descriptionHTML": "<p>Whether to enable autostart of applications using\n{manpage}<code>systemd-xdg-autostart-generator(8)</code>\n.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "{ }", "description": "Attribute set of features to enable in the wrapper.", "example": "{\n  gtk = true;\n}", "loc": ["wayland", "windowManager", "sway", "wrapperFeatures"], "readOnly": false, "title": "wayland.windowManager.sway.wrapperFeatures", "type": "submodule", "descriptionHTML": "<p>Attribute set of features to enable in the wrapper.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "true", "description": "Whether to make use of the base wrapper to execute extra session commands and prepend a\ndbus-run-session to the sway command.", "example": "false", "loc": ["wayland", "windowManager", "sway", "wrapperFeatures", "base"], "readOnly": false, "title": "wayland.windowManager.sway.wrapperFeatures.base", "type": "boolean", "descriptionHTML": "<p>Whether to make use of the base wrapper to execute extra session commands and prepend a\ndbus-run-session to the sway command.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "false", "description": "Whether to make use of the wrapGAppsHook wrapper to execute sway with required environment\nvariables for GTK applications.", "example": "true", "loc": ["wayland", "windowManager", "sway", "wrapperFeatures", "gtk"], "readOnly": false, "title": "wayland.windowManager.sway.wrapperFeatures.gtk", "type": "boolean", "descriptionHTML": "<p>Whether to make use of the wrapGAppsHook wrapper to execute sway with required environment\nvariables for GTK applications.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/sway.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/sway.nix"}], "default": "true", "description": "Enable xwayland, which is needed for the default configuration of sway.", "example": "", "loc": ["wayland", "windowManager", "sway", "xwayland"], "readOnly": false, "title": "wayland.windowManager.sway.xwayland", "type": "boolean", "descriptionHTML": "<p>Enable xwayland, which is needed for the default configuration of sway.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "false", "description": "Whether to enable Wayfire, a wayland compositor based on wlroots.", "example": "true", "loc": ["wayland", "windowManager", "wayfire", "enable"], "readOnly": false, "title": "wayland.windowManager.wayfire.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Wayfire, a wayland compositor based on wlroots.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "pkgs.wayfire", "description": "The wayfire package to use. Set to null to not add any wayfire package to your path.\nThis should be done if you want to use the NixOS wayfire module to install wayfire.", "example": "", "loc": ["wayland", "windowManager", "wayfire", "package"], "readOnly": false, "title": "wayland.windowManager.wayfire.package", "type": "null or package", "descriptionHTML": "<p>The wayfire package to use. Set to <code>null</code> to not add any wayfire package to your path.\nThis should be done if you want to use the NixOS wayfire module to install wayfire.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "with pkgs.wayfirePlugins; [ wf-shell ]", "description": "Additional plugins to use with wayfire", "example": "with pkgs.wayfirePlugins; [\n  wcm\n  wf-shell\n  wayfire-plugins-extra\n];\n", "loc": ["wayland", "windowManager", "wayfire", "plugins"], "readOnly": false, "title": "wayland.windowManager.wayfire.plugins", "type": "list of package", "descriptionHTML": "<p>Additional plugins to use with wayfire</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "{ }", "description": "Wayfire configuration written in Nix.\nSee https://github.com/WayfireWM/wayfire/wiki/Configuration", "example": "{\n  core.plugins = \"command expo cube\";\n  command = {\n    binding_terminal = \"alacritty\";\n    command_terminal = \"alacritty\";\n  };\n}\n", "loc": ["wayland", "windowManager", "wayfire", "settings"], "readOnly": false, "title": "wayland.windowManager.wayfire.settings", "type": "attribute set of attribute set of (string or absolute path or boolean or signed integer or floating point number)", "descriptionHTML": "<p>Wayfire configuration written in Nix.</p>\n<p>See <a href=\"https://github.com/WayfireWM/wayfire/wiki/Configuration\">https://github.com/WayfireWM/wayfire/wiki/Configuration</a></p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "", "description": "Load the specified plugins", "example": "", "loc": ["wayland", "windowManager", "wayfire", "settings", "core", "plugins"], "readOnly": false, "title": "wayland.windowManager.wayfire.settings.core.plugins", "type": "strings concatenated with \" \"", "descriptionHTML": "<p>Load the specified plugins</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "true", "description": "Whether to enable {file}wayfire-session.target on\nwayfire startup. This links to {file}graphical-session.target}.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- DISPLAY\n- WAYLAND_DISPLAY\n- XDG_CURRENT_DESKTOP\n- NIXOS_OZONE_WL\n- XCURSOR_THEME\n- XCURSOR_SIZE", "example": "true", "loc": ["wayland", "windowManager", "wayfire", "systemd", "enable"], "readOnly": false, "title": "wayland.windowManager.wayfire.systemd.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable {file}<code>wayfire-session.target</code> on\nwayfire startup. This links to {file}<code>graphical-session.target</code>}.\nSome important environment variables will be imported to systemd\nand D-Bus user environment before reaching the target, including\n- <code>DISPLAY</code>\n- <code>WAYLAND_DISPLAY</code>\n- <code>XDG_CURRENT_DESKTOP</code>\n- <code>NIXOS_OZONE_WL</code>\n- <code>XCURSOR_THEME</code>\n- <code>XCURSOR_SIZE</code></p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "[\n  \"systemctl --user stop wayfire-session.target\"\n  \"systemctl --user start wayfire-session.target\"\n]", "description": "Extra commands to be run after D-Bus activation.", "example": "", "loc": ["wayland", "windowManager", "wayfire", "systemd", "extraCommands"], "readOnly": false, "title": "wayland.windowManager.wayfire.systemd.extraCommands", "type": "list of string", "descriptionHTML": "<p>Extra commands to be run after D-Bus activation.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "[\n  \"DISPLAY\"\n  \"WAYLAND_DISPLAY\"\n  \"XDG_CURRENT_DESKTOP\"\n  \"NIXOS_OZONE_WL\"\n  \"XCURSOR_THEME\"\n  \"XCURSOR_SIZE\"\n]", "description": "Environment variables to be imported in the systemd & D-Bus user\nenvironment.", "example": "[\n  \"-all\"\n]", "loc": ["wayland", "windowManager", "wayfire", "systemd", "variables"], "readOnly": false, "title": "wayland.windowManager.wayfire.systemd.variables", "type": "list of string", "descriptionHTML": "<p>Environment variables to be imported in the systemd &amp; D-Bus user\nenvironment.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "false", "description": "Whether to enable Manage wf-shell Configuration.", "example": "true", "loc": ["wayland", "windowManager", "wayfire", "wf-shell", "enable"], "readOnly": false, "title": "wayland.windowManager.wayfire.wf-shell.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Manage wf-shell Configuration.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "pkgs.wayfirePlugins.wf-shell", "description": "The wf-shell package to use.", "example": "", "loc": ["wayland", "windowManager", "wayfire", "wf-shell", "package"], "readOnly": false, "title": "wayland.windowManager.wayfire.wf-shell.package", "type": "package", "descriptionHTML": "<p>The wf-shell package to use.</p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "{ }", "description": "Wf-shell configuration written in Nix.\nSee https://github.com/WayfireWM/wf-shell/blob/master/wf-shell.ini.example", "example": "{\n  panel = {\n    widgets_left = \"menu spacing4 launchers window-list\";\n    autohide = true;\n  };\n}\n", "loc": ["wayland", "windowManager", "wayfire", "wf-shell", "settings"], "readOnly": false, "title": "wayland.windowManager.wayfire.wf-shell.settings", "type": "attribute set of attribute set of (string or absolute path or boolean or signed integer or floating point number)", "descriptionHTML": "<p>Wf-shell configuration written in Nix.</p>\n<p>See <a href=\"https://github.com/WayfireWM/wf-shell/blob/master/wf-shell.ini.example\">https://github.com/WayfireWM/wf-shell/blob/master/wf-shell.ini.example</a></p>"}, {"declarations": [{"name": "<services/window-managers/wayfire.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/wayfire.nix"}], "default": "true", "description": "Whether to enable XWayland.", "example": "true", "loc": ["wayland", "windowManager", "wayfire", "xwayland", "enable"], "readOnly": false, "title": "wayland.windowManager.wayfire.xwayland.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable XWayland.</p>"}, {"declarations": [{"name": "<misc/xdg-autostart.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-autostart.nix"}], "default": "false", "description": "Whether to enable creation of XDG autostart entries.", "example": "true", "loc": ["xdg", "autostart", "enable"], "readOnly": false, "title": "xdg.autostart.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable creation of XDG autostart entries.</p>"}, {"declarations": [{"name": "<misc/xdg-autostart.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-autostart.nix"}], "default": "[ ]", "description": "Paths to desktop files that should be linked to XDG_CONFIG_HOME/autostart", "example": "[\n  \"${pkgs.evolution}/share/applications/org.gnome.Evolution.desktop\"\n]\n", "loc": ["xdg", "autostart", "entries"], "readOnly": false, "title": "xdg.autostart.entries", "type": "list of absolute path", "descriptionHTML": "<p>Paths to desktop files that should be linked to <code>XDG_CONFIG_HOME/autostart</code></p>"}, {"declarations": [{"name": "<misc/xdg-autostart.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-autostart.nix"}], "default": "false", "description": "Make XDG_CONFIG_HOME/autostart a symlink to a readonly directory so that\nprograms cannot install arbitrary autostart services.", "example": "true", "loc": ["xdg", "autostart", "readOnly"], "readOnly": false, "title": "xdg.autostart.readOnly", "type": "boolean", "descriptionHTML": "<p>Make <code>XDG_CONFIG_HOME/autostart</code> a symlink to a readonly directory so that\nprograms cannot install arbitrary autostart services.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "{ }", "description": "Attribute set of files to link into the user's XDG\ncache home.", "example": "", "loc": ["xdg", "cacheFile"], "readOnly": false, "title": "xdg.cacheFile", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of files to link into the user's XDG\ncache home.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "true", "description": "Whether this file should be generated. This option allows specific\nfiles to be disabled.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "enable"], "readOnly": false, "title": "xdg.cacheFile.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether this file should be generated. This option allows specific\nfiles to be disabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Set the execute bit. If null, defaults to the mode\nof the {var}source file or to false\nfor files created through the {var}text option.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "executable"], "readOnly": false, "title": "xdg.cacheFile.<name>.executable", "type": "null or boolean", "descriptionHTML": "<p>Set the execute bit. If <code>null</code>, defaults to the mode\nof the {var}<code>source</code> file or to <code>false</code>\nfor files created through the {var}<code>text</code> option.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "force"], "readOnly": false, "title": "xdg.cacheFile.<name>.force", "type": "boolean", "descriptionHTML": "<p>Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "When recursive is enabled, adds -ignorelinks flag to lndir\nIt causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory", "example": "", "loc": ["xdg", "cacheFile", "<name>", "ignorelinks"], "readOnly": false, "title": "xdg.cacheFile.<name>.ignorelinks", "type": "boolean", "descriptionHTML": "<p>When <code>recursive</code> is enabled, adds <code>-ignorelinks</code> flag to lndir</p>\n<p>It causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"\"", "description": "Shell commands to run when file has changed between\ngenerations. The script will be run\nafter the new files have been linked\ninto place.\nNote, this code is always run when recursive is\nenabled.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "onChange"], "readOnly": false, "title": "xdg.cacheFile.<name>.onChange", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell commands to run when file has changed between\ngenerations. The script will be run\n<em>after</em> the new files have been linked\ninto place.</p>\n<p>Note, this code is always run when <code>recursive</code> is\nenabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.\nIf false (the default) then the target\nwill be a symbolic link to the source directory. If\ntrue then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "recursive"], "readOnly": false, "title": "xdg.cacheFile.<name>.recursive", "type": "boolean", "descriptionHTML": "<p>If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.</p>\n<p>If <code>false</code> (the default) then the target\nwill be a symbolic link to the source directory. If\n<code>true</code> then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "", "description": "Path of the source file or directory. If\n\nis non-null then this option will automatically point to a file\ncontaining that text.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "source"], "readOnly": false, "title": "xdg.cacheFile.<name>.source", "type": "absolute path", "descriptionHTML": "<p>Path of the source file or directory. If\n<a href=\"#opt-xdg.cacheFile._name_.text\"></a>\nis non-null then this option will automatically point to a file\ncontaining that text.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "name", "description": "Path to target file relative to {var}xdg.cacheHome.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "target"], "readOnly": false, "title": "xdg.cacheFile.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target file relative to {var}<code>xdg.cacheHome</code>.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Text of the file. If this option is null then\n\nmust be set.", "example": "", "loc": ["xdg", "cacheFile", "<name>", "text"], "readOnly": false, "title": "xdg.cacheFile.<name>.text", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the file. If this option is null then\n<a href=\"#opt-xdg.cacheFile._name_.source\"></a>\nmust be set.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"~/.cache\"", "description": "Absolute path to directory holding application caches.\nSets XDG_CACHE_HOME for the user if xdg.enable is set true.", "example": "", "loc": ["xdg", "cacheHome"], "readOnly": false, "title": "xdg.cacheHome", "type": "absolute path", "descriptionHTML": "<p>Absolute path to directory holding application caches.</p>\n<p>Sets <code>XDG_CACHE_HOME</code> for the user if <code>xdg.enable</code> is set <code>true</code>.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "{ }", "description": "Attribute set of files to link into the user's XDG\nconfiguration home.", "example": "", "loc": ["xdg", "configFile"], "readOnly": false, "title": "xdg.configFile", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of files to link into the user's XDG\nconfiguration home.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "true", "description": "Whether this file should be generated. This option allows specific\nfiles to be disabled.", "example": "", "loc": ["xdg", "configFile", "<name>", "enable"], "readOnly": false, "title": "xdg.configFile.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether this file should be generated. This option allows specific\nfiles to be disabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Set the execute bit. If null, defaults to the mode\nof the {var}source file or to false\nfor files created through the {var}text option.", "example": "", "loc": ["xdg", "configFile", "<name>", "executable"], "readOnly": false, "title": "xdg.configFile.<name>.executable", "type": "null or boolean", "descriptionHTML": "<p>Set the execute bit. If <code>null</code>, defaults to the mode\nof the {var}<code>source</code> file or to <code>false</code>\nfor files created through the {var}<code>text</code> option.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.", "example": "", "loc": ["xdg", "configFile", "<name>", "force"], "readOnly": false, "title": "xdg.configFile.<name>.force", "type": "boolean", "descriptionHTML": "<p>Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "When recursive is enabled, adds -ignorelinks flag to lndir\nIt causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory", "example": "", "loc": ["xdg", "configFile", "<name>", "ignorelinks"], "readOnly": false, "title": "xdg.configFile.<name>.ignorelinks", "type": "boolean", "descriptionHTML": "<p>When <code>recursive</code> is enabled, adds <code>-ignorelinks</code> flag to lndir</p>\n<p>It causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"\"", "description": "Shell commands to run when file has changed between\ngenerations. The script will be run\nafter the new files have been linked\ninto place.\nNote, this code is always run when recursive is\nenabled.", "example": "", "loc": ["xdg", "configFile", "<name>", "onChange"], "readOnly": false, "title": "xdg.configFile.<name>.onChange", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell commands to run when file has changed between\ngenerations. The script will be run\n<em>after</em> the new files have been linked\ninto place.</p>\n<p>Note, this code is always run when <code>recursive</code> is\nenabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.\nIf false (the default) then the target\nwill be a symbolic link to the source directory. If\ntrue then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.", "example": "", "loc": ["xdg", "configFile", "<name>", "recursive"], "readOnly": false, "title": "xdg.configFile.<name>.recursive", "type": "boolean", "descriptionHTML": "<p>If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.</p>\n<p>If <code>false</code> (the default) then the target\nwill be a symbolic link to the source directory. If\n<code>true</code> then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "", "description": "Path of the source file or directory. If\n\nis non-null then this option will automatically point to a file\ncontaining that text.", "example": "", "loc": ["xdg", "configFile", "<name>", "source"], "readOnly": false, "title": "xdg.configFile.<name>.source", "type": "absolute path", "descriptionHTML": "<p>Path of the source file or directory. If\n<a href=\"#opt-xdg.configFile._name_.text\"></a>\nis non-null then this option will automatically point to a file\ncontaining that text.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "name", "description": "Path to target file relative to {var}xdg.configHome.", "example": "", "loc": ["xdg", "configFile", "<name>", "target"], "readOnly": false, "title": "xdg.configFile.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target file relative to {var}<code>xdg.configHome</code>.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Text of the file. If this option is null then\n\nmust be set.", "example": "", "loc": ["xdg", "configFile", "<name>", "text"], "readOnly": false, "title": "xdg.configFile.<name>.text", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the file. If this option is null then\n<a href=\"#opt-xdg.configFile._name_.source\"></a>\nmust be set.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"~/.config\"", "description": "Absolute path to directory holding application configurations.\nSets XDG_CONFIG_HOME for the user if xdg.enable is set true.", "example": "", "loc": ["xdg", "configHome"], "readOnly": false, "title": "xdg.configHome", "type": "absolute path", "descriptionHTML": "<p>Absolute path to directory holding application configurations.</p>\n<p>Sets <code>XDG_CONFIG_HOME</code> for the user if <code>xdg.enable</code> is set <code>true</code>.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "{ }", "description": "Attribute set of files to link into the user's XDG\ndata home.", "example": "", "loc": ["xdg", "dataFile"], "readOnly": false, "title": "xdg.dataFile", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of files to link into the user's XDG\ndata home.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "true", "description": "Whether this file should be generated. This option allows specific\nfiles to be disabled.", "example": "", "loc": ["xdg", "dataFile", "<name>", "enable"], "readOnly": false, "title": "xdg.dataFile.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether this file should be generated. This option allows specific\nfiles to be disabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Set the execute bit. If null, defaults to the mode\nof the {var}source file or to false\nfor files created through the {var}text option.", "example": "", "loc": ["xdg", "dataFile", "<name>", "executable"], "readOnly": false, "title": "xdg.dataFile.<name>.executable", "type": "null or boolean", "descriptionHTML": "<p>Set the execute bit. If <code>null</code>, defaults to the mode\nof the {var}<code>source</code> file or to <code>false</code>\nfor files created through the {var}<code>text</code> option.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.", "example": "", "loc": ["xdg", "dataFile", "<name>", "force"], "readOnly": false, "title": "xdg.dataFile.<name>.force", "type": "boolean", "descriptionHTML": "<p>Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "When recursive is enabled, adds -ignorelinks flag to lndir\nIt causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory", "example": "", "loc": ["xdg", "dataFile", "<name>", "ignorelinks"], "readOnly": false, "title": "xdg.dataFile.<name>.ignorelinks", "type": "boolean", "descriptionHTML": "<p>When <code>recursive</code> is enabled, adds <code>-ignorelinks</code> flag to lndir</p>\n<p>It causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"\"", "description": "Shell commands to run when file has changed between\ngenerations. The script will be run\nafter the new files have been linked\ninto place.\nNote, this code is always run when recursive is\nenabled.", "example": "", "loc": ["xdg", "dataFile", "<name>", "onChange"], "readOnly": false, "title": "xdg.dataFile.<name>.onChange", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell commands to run when file has changed between\ngenerations. The script will be run\n<em>after</em> the new files have been linked\ninto place.</p>\n<p>Note, this code is always run when <code>recursive</code> is\nenabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.\nIf false (the default) then the target\nwill be a symbolic link to the source directory. If\ntrue then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.", "example": "", "loc": ["xdg", "dataFile", "<name>", "recursive"], "readOnly": false, "title": "xdg.dataFile.<name>.recursive", "type": "boolean", "descriptionHTML": "<p>If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.</p>\n<p>If <code>false</code> (the default) then the target\nwill be a symbolic link to the source directory. If\n<code>true</code> then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "", "description": "Path of the source file or directory. If\n\nis non-null then this option will automatically point to a file\ncontaining that text.", "example": "", "loc": ["xdg", "dataFile", "<name>", "source"], "readOnly": false, "title": "xdg.dataFile.<name>.source", "type": "absolute path", "descriptionHTML": "<p>Path of the source file or directory. If\n<a href=\"#opt-xdg.dataFile._name_.text\"></a>\nis non-null then this option will automatically point to a file\ncontaining that text.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "name", "description": "Path to target file relative to <varname>xdg.dataHome</varname>.", "example": "", "loc": ["xdg", "dataFile", "<name>", "target"], "readOnly": false, "title": "xdg.dataFile.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target file relative to <varname>xdg.dataHome</varname>.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Text of the file. If this option is null then\n\nmust be set.", "example": "", "loc": ["xdg", "dataFile", "<name>", "text"], "readOnly": false, "title": "xdg.dataFile.<name>.text", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the file. If this option is null then\n<a href=\"#opt-xdg.dataFile._name_.source\"></a>\nmust be set.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"~/.local/share\"", "description": "Absolute path to directory holding application data.\nSets XDG_DATA_HOME for the user if xdg.enable is set true.", "example": "", "loc": ["xdg", "dataHome"], "readOnly": false, "title": "xdg.dataHome", "type": "absolute path", "descriptionHTML": "<p>Absolute path to directory holding application data.</p>\n<p>Sets <code>XDG_DATA_HOME</code> for the user if <code>xdg.enable</code> is set <code>true</code>.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "{ }", "description": "Desktop Entries allow applications to be shown in your desktop environment's app launcher.\nYou can define entries for programs without entries or override existing entries.\nSee https://specifications.freedesktop.org/desktop-entry-spec/latest/recognized-keys.html for more information on options.", "example": "{\n  firefox = {\n    name = \"Firefox\";\n    genericName = \"Web Browser\";\n    exec = \"firefox %U\";\n    terminal = false;\n    categories = [ \"Application\" \"Network\" \"WebBrowser\" ];\n    mimeType = [ \"text/html\" \"text/xml\" ];\n  };\n}\n", "loc": ["xdg", "desktopEntries"], "readOnly": false, "title": "xdg.desktopEntries", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Desktop Entries allow applications to be shown in your desktop environment's app launcher.</p>\n<p>You can define entries for programs without entries or override existing entries.</p>\n<p>See <a href=\"https://specifications.freedesktop.org/desktop-entry-spec/latest/recognized-keys.html\">https://specifications.freedesktop.org/desktop-entry-spec/latest/recognized-keys.html</a> for more information on options.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "{ }", "description": "The set of actions made available to application launchers.", "example": "{\n  \"New Window\" = {\n    exec = \"${pkgs.firefox}/bin/firefox --new-window %u\";\n  };\n}\n", "loc": ["xdg", "desktopEntries", "<name>", "actions"], "readOnly": false, "title": "xdg.desktopEntries.<name>.actions", "type": "attribute set of (submodule)", "descriptionHTML": "<p>The set of actions made available to application launchers.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Program to execute, possibly with arguments.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "actions", "<name>", "exec"], "readOnly": false, "title": "xdg.desktopEntries.<name>.actions.<name>.exec", "type": "null or string", "descriptionHTML": "<p>Program to execute, possibly with arguments.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Icon to display in file manager, menus, etc.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "actions", "<name>", "icon"], "readOnly": false, "title": "xdg.desktopEntries.<name>.actions.<name>.icon", "type": "null or string or absolute path", "descriptionHTML": "<p>Icon to display in file manager, menus, etc.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "<name>", "description": "Name of the action.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "actions", "<name>", "name"], "readOnly": false, "title": "xdg.desktopEntries.<name>.actions.<name>.name", "type": "string", "descriptionHTML": "<p>Name of the action.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Categories in which the entry should be shown in a menu.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "categories"], "readOnly": false, "title": "xdg.desktopEntries.<name>.categories", "type": "null or (list of string)", "descriptionHTML": "<p>Categories in which the entry should be shown in a menu.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Tooltip for the entry.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "comment"], "readOnly": false, "title": "xdg.desktopEntries.<name>.comment", "type": "null or string", "descriptionHTML": "<p>Tooltip for the entry.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Program to execute, possibly with arguments.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "exec"], "readOnly": false, "title": "xdg.desktopEntries.<name>.exec", "type": "null or string", "descriptionHTML": "<p>Program to execute, possibly with arguments.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Generic name of the application.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "genericName"], "readOnly": false, "title": "xdg.desktopEntries.<name>.genericName", "type": "null or string", "descriptionHTML": "<p>Generic name of the application.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Icon to display in file manager, menus, etc.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "icon"], "readOnly": false, "title": "xdg.desktopEntries.<name>.icon", "type": "null or string or absolute path", "descriptionHTML": "<p>Icon to display in file manager, menus, etc.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "The MIME type(s) supported by this application.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "mimeType"], "readOnly": false, "title": "xdg.desktopEntries.<name>.mimeType", "type": "null or (list of string)", "descriptionHTML": "<p>The MIME type(s) supported by this application.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "", "description": "Specific name of the application.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "name"], "readOnly": false, "title": "xdg.desktopEntries.<name>.name", "type": "string", "descriptionHTML": "<p>Specific name of the application.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "Means \"this application exists, but don't display it in the menus\".\nThis can be useful to e.g. associate this application with MIME types.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "noDisplay"], "readOnly": false, "title": "xdg.desktopEntries.<name>.noDisplay", "type": "null or boolean", "descriptionHTML": "<p>Means \"this application exists, but don't display it in the menus\".\nThis can be useful to e.g. associate this application with MIME types.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "If true, the application prefers to be run on a more powerful discrete GPU if available.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "prefersNonDefaultGPU"], "readOnly": false, "title": "xdg.desktopEntries.<name>.prefersNonDefaultGPU", "type": "null or boolean", "descriptionHTML": "<p>If true, the application prefers to be run on a more powerful discrete GPU if available.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "{ }", "description": "Extra key-value pairs to add to the [Desktop Entry] section.\nThis may override other values.", "example": "{\n  Keywords = \"calc;math\";\n  DBusActivatable = \"false\";\n}\n", "loc": ["xdg", "desktopEntries", "<name>", "settings"], "readOnly": false, "title": "xdg.desktopEntries.<name>.settings", "type": "attribute set of string", "descriptionHTML": "<p>Extra key-value pairs to add to the <code>[Desktop Entry]</code> section.\nThis may override other values.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "null", "description": "If true, it is KNOWN that the application will send a \"remove\"\nmessage when started with the DESKTOP_STARTUP_ID\nenvironment variable set. If false, it is KNOWN that the application\ndoes not work with startup notification at all.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "startupNotify"], "readOnly": false, "title": "xdg.desktopEntries.<name>.startupNotify", "type": "null or boolean", "descriptionHTML": "<p>If true, it is KNOWN that the application will send a \"remove\"\nmessage when started with the <code>DESKTOP_STARTUP_ID</code>\nenvironment variable set. If false, it is KNOWN that the application\ndoes not work with startup notification at all.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "false", "description": "Whether the program runs in a terminal window.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "terminal"], "readOnly": false, "title": "xdg.desktopEntries.<name>.terminal", "type": "null or boolean", "descriptionHTML": "<p>Whether the program runs in a terminal window.</p>"}, {"declarations": [{"name": "<misc/xdg-desktop-entries.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-desktop-entries.nix"}], "default": "\"Application\"", "description": "The type of the desktop entry.", "example": "", "loc": ["xdg", "desktopEntries", "<name>", "type"], "readOnly": false, "title": "xdg.desktopEntries.<name>.type", "type": "one of \"Application\", \"Link\", \"Directory\"", "descriptionHTML": "<p>The type of the desktop entry.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "Whether to enable management of XDG base directories.", "example": "true", "loc": ["xdg", "enable"], "readOnly": false, "title": "xdg.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable management of XDG base directories.</p>"}, {"declarations": [{"name": "<misc/xdg-mime.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime.nix"}], "default": "pkgs.desktop-file-utils", "description": "The desktop-file-utils package to use. Used when running update-desktop-database.", "example": "", "loc": ["xdg", "mime", "desktopFileUtilsPackage"], "readOnly": false, "title": "xdg.mime.desktopFileUtilsPackage", "type": "package", "descriptionHTML": "<p>The desktop-file-utils package to use. Used when running update-desktop-database.</p>"}, {"declarations": [{"name": "<misc/xdg-mime.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime.nix"}], "default": "true if host platform is Linux, false otherwise", "description": "Whether to install programs and files to support the\nXDG Shared MIME-info specification and XDG MIME Applications\nspecification at\nhttps://specifications.freedesktop.org/shared-mime-info-spec/shared-mime-info-spec-latest.html\nand\nhttps://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-latest.html,\nrespectively.", "example": "", "loc": ["xdg", "mime", "enable"], "readOnly": false, "title": "xdg.mime.enable", "type": "boolean", "descriptionHTML": "<p>Whether to install programs and files to support the\nXDG Shared MIME-info specification and XDG MIME Applications\nspecification at\n<a href=\"https://specifications.freedesktop.org/shared-mime-info-spec/shared-mime-info-spec-latest.html\">https://specifications.freedesktop.org/shared-mime-info-spec/shared-mime-info-spec-latest.html</a>\nand\n<a href=\"https://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-latest.html\">https://specifications.freedesktop.org/mime-apps-spec/mime-apps-spec-latest.html</a>,\nrespectively.</p>"}, {"declarations": [{"name": "<misc/xdg-mime.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime.nix"}], "default": "pkgs.shared-mime-info", "description": "The shared-mime-info package to use. Used when running update-mime-database.", "example": "", "loc": ["xdg", "mime", "sharedMimeInfoPackage"], "readOnly": false, "title": "xdg.mime.sharedMimeInfoPackage", "type": "package", "descriptionHTML": "<p>The shared-mime-info package to use. Used when running update-mime-database.</p>"}, {"declarations": [{"name": "<misc/xdg-mime-apps.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime-apps.nix"}], "default": "{ }", "description": "Defines additional associations of applications with\nmimetypes, as if the .desktop file was listing this mimetype\nin the first place.", "example": "{\n  \"mimetype1\" = [ \"foo1.desktop\" \"foo2.desktop\" \"foo3.desktop\" ];\n  \"mimetype2\" = \"foo4.desktop\";\n}\n", "loc": ["xdg", "mimeApps", "associations", "added"], "readOnly": false, "title": "xdg.mimeApps.associations.added", "type": "attribute set of ((list of string) or ((list of string) or string) convertible to it)", "descriptionHTML": "<p>Defines additional associations of applications with\nmimetypes, as if the .desktop file was listing this mimetype\nin the first place.</p>"}, {"declarations": [{"name": "<misc/xdg-mime-apps.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime-apps.nix"}], "default": "{ }", "description": "Removes associations of applications with mimetypes, as if the\n.desktop file was not listing this\nmimetype in the first place.", "example": "{\n  mimetype1 = \"foo5.desktop\";\n}", "loc": ["xdg", "mimeApps", "associations", "removed"], "readOnly": false, "title": "xdg.mimeApps.associations.removed", "type": "attribute set of ((list of string) or ((list of string) or string) convertible to it)", "descriptionHTML": "<p>Removes associations of applications with mimetypes, as if the\n.desktop file was <em>not</em> listing this\nmimetype in the first place.</p>"}, {"declarations": [{"name": "<misc/xdg-mime-apps.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime-apps.nix"}], "default": "{ }", "description": "The default application to be used for a given mimetype. This\nis, for instance, the one that will be started when\ndouble-clicking on a file in a file manager. If the\napplication is no longer installed, the next application in\nthe list is attempted, and so on.", "example": "{\n  \"mimetype1\" = [ \"default1.desktop\" \"default2.desktop\" ];\n}\n", "loc": ["xdg", "mimeApps", "defaultApplications"], "readOnly": false, "title": "xdg.mimeApps.defaultApplications", "type": "attribute set of ((list of string) or ((list of string) or string) convertible to it)", "descriptionHTML": "<p>The default application to be used for a given mimetype. This\nis, for instance, the one that will be started when\ndouble-clicking on a file in a file manager. If the\napplication is no longer installed, the next application in\nthe list is attempted, and so on.</p>"}, {"declarations": [{"name": "<misc/xdg-mime-apps.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-mime-apps.nix"}], "default": "false", "description": "Whether to manage {file}$XDG_CONFIG_HOME/mimeapps.list.\nThe generated file is read-only.", "example": "", "loc": ["xdg", "mimeApps", "enable"], "readOnly": false, "title": "xdg.mimeApps.enable", "type": "boolean", "descriptionHTML": "<p>Whether to manage {file}<code>$XDG_CONFIG_HOME/mimeapps.list</code>.</p>\n<p>The generated file is read-only.</p>"}, {"declarations": [{"name": "<misc/xdg-portal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-portal.nix"}], "default": "{ }", "description": "Sets which portal backend should be used to provide the implementation\nfor the requested interface. For details check {manpage}portals.conf(5).\nThese will be written with the name $desktop-portals.conf for\nxdg.portal.config.$desktop and portals.conf for\nxdg.portal.config.common as an exception.\nThese, together with xdg.portal.configPackages, will be joined into a\ndirectory and passed to xdg-desktop-portal.service through a\nNIXOS_XDG_DESKTOP_PORTAL_CONFIG_DIR variable.", "example": "{\n  common = {\n    default = [\n      \"gtk\"\n    ];\n  };\n  pantheon = {\n    default = [\n      \"pantheon\"\n      \"gtk\"\n    ];\n    \"org.freedesktop.impl.portal.Secret\" = [\n      \"gnome-keyring\"\n    ];\n  };\n  x-cinnamon = {\n    default = [\n      \"xapp\"\n      \"gtk\"\n    ];\n  };\n}", "loc": ["xdg", "portal", "config"], "readOnly": false, "title": "xdg.portal.config", "type": "attribute set of attribute set of (string or ((list of string) or string) convertible to it)", "descriptionHTML": "<p>Sets which portal backend should be used to provide the implementation\nfor the requested interface. For details check {manpage}<code>portals.conf(5)</code>.</p>\n<p>These will be written with the name <code>$desktop-portals.conf</code> for\n<code>xdg.portal.config.$desktop</code> and <code>portals.conf</code> for\n<code>xdg.portal.config.common</code> as an exception.</p>\n<p>These, together with <code>xdg.portal.configPackages</code>, will be joined into a\ndirectory and passed to <code>xdg-desktop-portal.service</code> through a\n<code>NIXOS_XDG_DESKTOP_PORTAL_CONFIG_DIR</code> variable.</p>"}, {"declarations": [{"name": "<misc/xdg-portal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-portal.nix"}], "default": "[ ]", "description": "List of packages that provide XDG desktop portal configuration, usually in\nthe form of share/xdg-desktop-portal/$desktop-portals.conf.\nNote that configs in xdg.portal.config will be preferred if set.", "example": "[ pkgs.gnome.gnome-session ]", "loc": ["xdg", "portal", "configPackages"], "readOnly": false, "title": "xdg.portal.configPackages", "type": "list of package", "descriptionHTML": "<p>List of packages that provide XDG desktop portal configuration, usually in\nthe form of <code>share/xdg-desktop-portal/$desktop-portals.conf</code>.</p>\n<p>Note that configs in <code>xdg.portal.config</code> will be preferred if set.</p>"}, {"declarations": [{"name": "<misc/xdg-portal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-portal.nix"}], "default": "false", "description": "Whether to enable XDG desktop integration.\nNote, if you use the NixOS module and have useUserPackages = true,\nmake sure to add\nnix\nenvironment.pathsToLink = [ \"/share/xdg-desktop-portal\" \"/share/applications\" ];\nto your system configuration so that the portal definitions and DE\nprovided configurations get linked.", "example": "true", "loc": ["xdg", "portal", "enable"], "readOnly": false, "title": "xdg.portal.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable <a href=\"https://github.com/flatpak/xdg-desktop-portal\">XDG desktop integration</a>.</p>\n<p>Note, if you use the NixOS module and have <code>useUserPackages = true</code>,\nmake sure to add</p>\n<p><code>nix\nenvironment.pathsToLink = [ \"/share/xdg-desktop-portal\" \"/share/applications\" ];</code></p>\n<p>to your system configuration so that the portal definitions and DE\nprovided configurations get linked.</p>"}, {"declarations": [{"name": "<misc/xdg-portal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-portal.nix"}], "default": "[ ]", "description": "List of additional portals that should be added to the environment.\nThe directory where the portal definitions have been merged together\n(likely ~/.nix-profile/share/xdg-desktop-portal/portals) will get\npassed to xdg-desktop-portal.service via the\nNIX_XDG_DESKTOP_PORTAL_DIR environment variable.\nPortals allow interaction with system, like choosing files or taking\nscreenshots. At minimum, a desktop portal implementation should be\nlisted.", "example": "", "loc": ["xdg", "portal", "extraPortals"], "readOnly": false, "title": "xdg.portal.extraPortals", "type": "list of package", "descriptionHTML": "<p>List of additional portals that should be added to the environment.</p>\n<p>The directory where the portal definitions have been merged together\n(likely <code>~/.nix-profile/share/xdg-desktop-portal/portals</code>) will get\npassed to <code>xdg-desktop-portal.service</code> via the\n<code>NIX_XDG_DESKTOP_PORTAL_DIR</code> environment variable.</p>\n<p>Portals allow interaction with system, like choosing files or taking\nscreenshots. At minimum, a desktop portal implementation should be\nlisted.</p>"}, {"declarations": [{"name": "<misc/xdg-portal.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-portal.nix"}], "default": "false", "description": "Sets environment variable NIXOS_XDG_OPEN_USE_PORTAL to 1\nThis will make xdg-open use the portal to open programs, which resolves bugs involving\nprograms opening inside FHS envs or with unexpected env vars set from wrappers.\nSee #160923 for more info.", "example": "", "loc": ["xdg", "portal", "xdgOpenUsePortal"], "readOnly": false, "title": "xdg.portal.xdgOpenUsePortal", "type": "boolean", "descriptionHTML": "<p>Sets environment variable <code>NIXOS_XDG_OPEN_USE_PORTAL</code> to <code>1</code>\nThis will make <code>xdg-open</code> use the portal to open programs, which resolves bugs involving\nprograms opening inside FHS envs or with unexpected env vars set from wrappers.\nSee <a href=\"https://github.com/NixOS/nixpkgs/issues/160923\">#160923</a> for more info.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "{ }", "description": "Attribute set of files to link into the user's XDG\nstate home.", "example": "", "loc": ["xdg", "stateFile"], "readOnly": false, "title": "xdg.stateFile", "type": "attribute set of (submodule)", "descriptionHTML": "<p>Attribute set of files to link into the user's XDG\nstate home.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "true", "description": "Whether this file should be generated. This option allows specific\nfiles to be disabled.", "example": "", "loc": ["xdg", "stateFile", "<name>", "enable"], "readOnly": false, "title": "xdg.stateFile.<name>.enable", "type": "boolean", "descriptionHTML": "<p>Whether this file should be generated. This option allows specific\nfiles to be disabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Set the execute bit. If null, defaults to the mode\nof the {var}source file or to false\nfor files created through the {var}text option.", "example": "", "loc": ["xdg", "stateFile", "<name>", "executable"], "readOnly": false, "title": "xdg.stateFile.<name>.executable", "type": "null or boolean", "descriptionHTML": "<p>Set the execute bit. If <code>null</code>, defaults to the mode\nof the {var}<code>source</code> file or to <code>false</code>\nfor files created through the {var}<code>text</code> option.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.", "example": "", "loc": ["xdg", "stateFile", "<name>", "force"], "readOnly": false, "title": "xdg.stateFile.<name>.force", "type": "boolean", "descriptionHTML": "<p>Whether the target path should be unconditionally replaced\nby the managed file source. Warning, this will silently\ndelete the target regardless of whether it is a file or\nlink.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "When recursive is enabled, adds -ignorelinks flag to lndir\nIt causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory", "example": "", "loc": ["xdg", "stateFile", "<name>", "ignorelinks"], "readOnly": false, "title": "xdg.stateFile.<name>.ignorelinks", "type": "boolean", "descriptionHTML": "<p>When <code>recursive</code> is enabled, adds <code>-ignorelinks</code> flag to lndir</p>\n<p>It causes lndir to not treat symbolic links in the source directory specially.\nThe link created in the target directory will point back to the corresponding\n(symbolic link) file in the source directory. If the link is to a directory</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"\"", "description": "Shell commands to run when file has changed between\ngenerations. The script will be run\nafter the new files have been linked\ninto place.\nNote, this code is always run when recursive is\nenabled.", "example": "", "loc": ["xdg", "stateFile", "<name>", "onChange"], "readOnly": false, "title": "xdg.stateFile.<name>.onChange", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Shell commands to run when file has changed between\ngenerations. The script will be run\n<em>after</em> the new files have been linked\ninto place.</p>\n<p>Note, this code is always run when <code>recursive</code> is\nenabled.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "false", "description": "If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.\nIf false (the default) then the target\nwill be a symbolic link to the source directory. If\ntrue then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.", "example": "", "loc": ["xdg", "stateFile", "<name>", "recursive"], "readOnly": false, "title": "xdg.stateFile.<name>.recursive", "type": "boolean", "descriptionHTML": "<p>If the file source is a directory, then this option\ndetermines whether the directory should be recursively\nlinked to the target location. This option has no effect\nif the source is a file.</p>\n<p>If <code>false</code> (the default) then the target\nwill be a symbolic link to the source directory. If\n<code>true</code> then the target will be a\ndirectory structure matching the source's but whose leafs\nare symbolic links to the files of the source directory.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "", "description": "Path of the source file or directory. If\n\nis non-null then this option will automatically point to a file\ncontaining that text.", "example": "", "loc": ["xdg", "stateFile", "<name>", "source"], "readOnly": false, "title": "xdg.stateFile.<name>.source", "type": "absolute path", "descriptionHTML": "<p>Path of the source file or directory. If\n<a href=\"#opt-xdg.stateFile._name_.text\"></a>\nis non-null then this option will automatically point to a file\ncontaining that text.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "name", "description": "Path to target file relative to <varname>xdg.stateHome</varname>.", "example": "", "loc": ["xdg", "stateFile", "<name>", "target"], "readOnly": false, "title": "xdg.stateFile.<name>.target", "type": "string", "descriptionHTML": "<p>Path to target file relative to <varname>xdg.stateHome</varname>.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "null", "description": "Text of the file. If this option is null then\n\nmust be set.", "example": "", "loc": ["xdg", "stateFile", "<name>", "text"], "readOnly": false, "title": "xdg.stateFile.<name>.text", "type": "null or strings concatenated with \"\\n\"", "descriptionHTML": "<p>Text of the file. If this option is null then\n<a href=\"#opt-xdg.stateFile._name_.source\"></a>\nmust be set.</p>"}, {"declarations": [{"name": "<misc/xdg.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg.nix"}], "default": "\"~/.local/state\"", "description": "Absolute path to directory holding application states.\nSets XDG_STATE_HOME for the user if xdg.enable is set true.", "example": "", "loc": ["xdg", "stateHome"], "readOnly": false, "title": "xdg.stateHome", "type": "absolute path", "descriptionHTML": "<p>Absolute path to directory holding application states.</p>\n<p>Sets <code>XDG_STATE_HOME</code> for the user if <code>xdg.enable</code> is set <code>true</code>.</p>"}, {"declarations": [{"name": "<misc/xdg-system-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-system-dirs.nix"}], "default": "[ ]", "description": "Directory names to add to {env}XDG_CONFIG_DIRS\nin the user session.", "example": "[ \"/etc/xdg\" ]", "loc": ["xdg", "systemDirs", "config"], "readOnly": false, "title": "xdg.systemDirs.config", "type": "list of string", "descriptionHTML": "<p>Directory names to add to {env}<code>XDG_CONFIG_DIRS</code>\nin the user session.</p>"}, {"declarations": [{"name": "<misc/xdg-system-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-system-dirs.nix"}], "default": "[ ]", "description": "Directory names to add to {env}XDG_DATA_DIRS\nin the user session.", "example": "[ \"/usr/share\" \"/usr/local/share\" ]", "loc": ["xdg", "systemDirs", "data"], "readOnly": false, "title": "xdg.systemDirs.data", "type": "list of string", "descriptionHTML": "<p>Directory names to add to {env}<code>XDG_DATA_DIRS</code>\nin the user session.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "false", "description": "Whether to enable automatic creation of the XDG user directories.", "example": "true", "loc": ["xdg", "userDirs", "createDirectories"], "readOnly": false, "title": "xdg.userDirs.createDirectories", "type": "boolean", "descriptionHTML": "<p>Whether to enable automatic creation of the XDG user directories.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Desktop\"", "description": "The Desktop directory.", "example": "", "loc": ["xdg", "userDirs", "desktop"], "readOnly": false, "title": "xdg.userDirs.desktop", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Desktop directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Documents\"", "description": "The Documents directory.", "example": "", "loc": ["xdg", "userDirs", "documents"], "readOnly": false, "title": "xdg.userDirs.documents", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Documents directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Downloads\"", "description": "The Downloads directory.", "example": "", "loc": ["xdg", "userDirs", "download"], "readOnly": false, "title": "xdg.userDirs.download", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Downloads directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "false", "description": "Whether to manage {file}$XDG_CONFIG_HOME/user-dirs.dirs.\nThe generated file is read-only.", "example": "", "loc": ["xdg", "userDirs", "enable"], "readOnly": false, "title": "xdg.userDirs.enable", "type": "boolean", "descriptionHTML": "<p>Whether to manage {file}<code>$XDG_CONFIG_HOME/user-dirs.dirs</code>.</p>\n<p>The generated file is read-only.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "{ }", "description": "Other user directories.", "example": "{\n  XDG_MISC_DIR = \"${config.home.homeDirectory}/Misc\";\n}\n", "loc": ["xdg", "userDirs", "extraConfig"], "readOnly": false, "title": "xdg.userDirs.extraConfig", "type": "attribute set of (string or absolute path convertible to it)", "descriptionHTML": "<p>Other user directories.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Music\"", "description": "The Music directory.", "example": "", "loc": ["xdg", "userDirs", "music"], "readOnly": false, "title": "xdg.userDirs.music", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Music directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Pictures\"", "description": "The Pictures directory.", "example": "", "loc": ["xdg", "userDirs", "pictures"], "readOnly": false, "title": "xdg.userDirs.pictures", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Pictures directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Public\"", "description": "The Public share directory.", "example": "", "loc": ["xdg", "userDirs", "publicShare"], "readOnly": false, "title": "xdg.userDirs.publicShare", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Public share directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Templates\"", "description": "The Templates directory.", "example": "", "loc": ["xdg", "userDirs", "templates"], "readOnly": false, "title": "xdg.userDirs.templates", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Templates directory.</p>"}, {"declarations": [{"name": "<misc/xdg-user-dirs.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xdg-user-dirs.nix"}], "default": "\"${config.home.homeDirectory}/Videos\"", "description": "The Videos directory.", "example": "", "loc": ["xdg", "userDirs", "videos"], "readOnly": false, "title": "xdg.userDirs.videos", "type": "null or (string or absolute path convertible to it)", "descriptionHTML": "<p>The Videos directory.</p>"}, {"declarations": [{"name": "<misc/xfconf.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/xfconf.nix"}], "default": "{ }", "description": "Settings to write to the Xfconf configuration system.", "example": "{\n  xfce4-session = {\n    \"startup/ssh-agent/enabled\" = false;\n    \"general/LockCommand\" = \"${pkgs.lightdm}/bin/dm-tool lock\";\n  };\n  xfce4-desktop = {\n    \"backdrop/screen0/monitorLVDS-1/workspace0/last-image\" =\n      \"${pkgs.nixos-artwork.wallpapers.stripes-logo.gnomeFilePath}\";\n  };\n}\n", "loc": ["xfconf", "settings"], "readOnly": false, "title": "xfconf.settings", "type": "xfconf settings", "descriptionHTML": "<p>Settings to write to the Xfconf configuration system.</p>"}, {"declarations": [{"name": "<xresources.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xresources.nix"}], "default": "\"\"", "description": "Additional X server resources contents.\nIf this and all other xresources options are\nnull, then this feature is disabled and no\n{file}~/.Xresources link is produced.", "example": "builtins.readFile (\n    pkgs.fetchFromGitHub {\n        owner = \"solarized\";\n        repo = \"xresources\";\n        rev = \"025ceddbddf55f2eb4ab40b05889148aab9699fc\";\n        sha256 = \"0lxv37gmh38y9d3l8nbnsm1mskcv10g3i83j0kac0a2qmypv1k9f\";\n    } + \"/Xresources.dark\"\n)\n", "loc": ["xresources", "extraConfig"], "readOnly": false, "title": "xresources.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional X server resources contents.\nIf this and all other xresources options are\n<code>null</code>, then this feature is disabled and no\n{file}<code>~/.Xresources</code> link is produced.</p>"}, {"declarations": [{"name": "<xresources.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xresources.nix"}], "default": "\"$HOME/.Xresources\"", "description": "Path where Home Manager should link the {file}.Xresources file.", "example": "", "loc": ["xresources", "path"], "readOnly": false, "title": "xresources.path", "type": "string", "descriptionHTML": "<p>Path where Home Manager should link the {file}<code>.Xresources</code> file.</p>"}, {"declarations": [{"name": "<xresources.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xresources.nix"}], "default": "null", "description": "X server resources that should be set.\nBooleans are formatted as \"true\" or \"false\" respectively.\nList elements are recursively formatted as a string and joined by commas.\nAll other values are directly formatted using builtins.toString.\nNote, that 2-dimensional lists are not supported and specifying one will throw an exception.\nIf this and all other xresources options are\nnull, then this feature is disabled and no\n{file}~/.Xresources link is produced.", "example": "{\n  \"Emacs*toolBar\" = 0;\n  \"XTerm*faceName\" = \"dejavu sans mono\";\n  \"XTerm*charClass\" = [ \"37:48\" \"45-47:48\" \"58:48\" \"64:48\" \"126:48\" ];\n}\n", "loc": ["xresources", "properties"], "readOnly": false, "title": "xresources.properties", "type": "null or (attribute set of (boolean or signed integer or floating point number or string or list of (boolean or signed integer or floating point number or string)))", "descriptionHTML": "<p>X server resources that should be set.\nBooleans are formatted as \"true\" or \"false\" respectively.\nList elements are recursively formatted as a string and joined by commas.\nAll other values are directly formatted using builtins.toString.\nNote, that 2-dimensional lists are not supported and specifying one will throw an exception.\nIf this and all other xresources options are\n<code>null</code>, then this feature is disabled and no\n{file}<code>~/.Xresources</code> link is produced.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "false", "description": "Whether to enable X Session.", "example": "true", "loc": ["xsession", "enable"], "readOnly": false, "title": "xsession.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable X Session.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "\"\"", "description": "Extra shell commands to run during initialization.", "example": "", "loc": ["xsession", "initExtra"], "readOnly": false, "title": "xsession.initExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra shell commands to run during initialization.</p>"}, {"declarations": [{"name": "<misc/numlock.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/misc/numlock.nix"}], "default": "false", "description": "Whether to enable Num Lock.", "example": "true", "loc": ["xsession", "numlock", "enable"], "readOnly": false, "title": "xsession.numlock.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Num Lock.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "", "description": "Alias of {option}home.pointerCursor.x11.defaultCursor.", "example": "", "loc": ["xsession", "pointerCursor", "defaultCursor"], "readOnly": false, "title": "xsession.pointerCursor.defaultCursor", "type": "submodule", "descriptionHTML": "<p>Alias of {option}<code>home.pointerCursor.x11.defaultCursor</code>.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "", "description": "Alias of {option}home.pointerCursor.name.", "example": "", "loc": ["xsession", "pointerCursor", "name"], "readOnly": false, "title": "xsession.pointerCursor.name", "type": "submodule", "descriptionHTML": "<p>Alias of {option}<code>home.pointerCursor.name</code>.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "", "description": "Alias of {option}home.pointerCursor.package.", "example": "", "loc": ["xsession", "pointerCursor", "package"], "readOnly": false, "title": "xsession.pointerCursor.package", "type": "submodule", "descriptionHTML": "<p>Alias of {option}<code>home.pointerCursor.package</code>.</p>"}, {"declarations": [{"name": "<config/home-cursor.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/config/home-cursor.nix"}], "default": "", "description": "Alias of {option}home.pointerCursor.size.", "example": "", "loc": ["xsession", "pointerCursor", "size"], "readOnly": false, "title": "xsession.pointerCursor.size", "type": "submodule", "descriptionHTML": "<p>Alias of {option}<code>home.pointerCursor.size</code>.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "false", "description": "Whether tray applets should prefer using the Status Notifier\nItems (SNI) protocol, commonly called App Indicators. Note,\nnot all tray applets or status bars support SNI.", "example": "true", "loc": ["xsession", "preferStatusNotifierItems"], "readOnly": false, "title": "xsession.preferStatusNotifierItems", "type": "boolean", "descriptionHTML": "<p>Whether tray applets should prefer using the Status Notifier\nItems (SNI) protocol, commonly called App Indicators. Note,\nnot all tray applets or status bars support SNI.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "\"\"", "description": "Extra shell commands to run before session start.", "example": "", "loc": ["xsession", "profileExtra"], "readOnly": false, "title": "xsession.profileExtra", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra shell commands to run before session start.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "\".xprofile\"", "description": "Path, relative to {env}HOME, where Home Manager\nshould write the X profile script.", "example": "\".xprofile-hm\"", "loc": ["xsession", "profilePath"], "readOnly": false, "title": "xsession.profilePath", "type": "string", "descriptionHTML": "<p>Path, relative to {env}<code>HOME</code>, where Home Manager\nshould write the X profile script.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "\".xsession\"", "description": "Path, relative to {env}HOME, where Home Manager\nshould write the X session script.", "example": "\".xsession-hm\"", "loc": ["xsession", "scriptPath"], "readOnly": false, "title": "xsession.scriptPath", "type": "string", "descriptionHTML": "<p>Path, relative to {env}<code>HOME</code>, where Home Manager\nshould write the X session script.</p>"}, {"declarations": [{"name": "<services/window-managers/awesome.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/awesome.nix"}], "default": "false", "description": "Whether to enable Awesome window manager.", "example": "true", "loc": ["xsession", "windowManager", "awesome", "enable"], "readOnly": false, "title": "xsession.windowManager.awesome.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Awesome window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/awesome.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/awesome.nix"}], "default": "[ ]", "description": "List of lua packages available for being\nused in the Awesome configuration.", "example": "[ pkgs.luaPackages.vicious ]", "loc": ["xsession", "windowManager", "awesome", "luaModules"], "readOnly": false, "title": "xsession.windowManager.awesome.luaModules", "type": "list of package", "descriptionHTML": "<p>List of lua packages available for being\nused in the Awesome configuration.</p>"}, {"declarations": [{"name": "<services/window-managers/awesome.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/awesome.nix"}], "default": "false", "description": "Disable client transparency support, which can be greatly\ndetrimental to performance in some setups", "example": "", "loc": ["xsession", "windowManager", "awesome", "noArgb"], "readOnly": false, "title": "xsession.windowManager.awesome.noArgb", "type": "boolean", "descriptionHTML": "<p>Disable client transparency support, which can be greatly\ndetrimental to performance in some setups</p>"}, {"declarations": [{"name": "<services/window-managers/awesome.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/awesome.nix"}], "default": "pkgs.awesome", "description": "The awesome package to use. to use for running the Awesome WM", "example": "", "loc": ["xsession", "windowManager", "awesome", "package"], "readOnly": false, "title": "xsession.windowManager.awesome.package", "type": "package", "descriptionHTML": "<p>The awesome package to use. to use for running the Awesome WM</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "true", "description": "If set to true, desktops configured in {option}monitors will be reset\nevery time the config is run.\nIf set to false, desktops will only be configured the first time the config is run.\nThis is useful if you want to dynamically add desktops and you don't want them to be destroyed if you\nre-run bspwmrc.", "example": "", "loc": ["xsession", "windowManager", "bspwm", "alwaysResetDesktops"], "readOnly": false, "title": "xsession.windowManager.bspwm.alwaysResetDesktops", "type": "boolean", "descriptionHTML": "<p>If set to <code>true</code>, desktops configured in {option}<code>monitors</code> will be reset\nevery time the config is run.</p>\n<p>If set to <code>false</code>, desktops will only be configured the first time the config is run.\nThis is useful if you want to dynamically add desktops and you don't want them to be destroyed if you\nre-run <code>bspwmrc</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "false", "description": "Whether to enable bspwm window manager.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "enable"], "readOnly": false, "title": "xsession.windowManager.bspwm.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable bspwm window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "\"\"", "description": "Additional shell commands to be run at the end of the config file.", "example": "''\n  bspc subscribe all > ~/bspc-report.log &\n''", "loc": ["xsession", "windowManager", "bspwm", "extraConfig"], "readOnly": false, "title": "xsession.windowManager.bspwm.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Additional shell commands to be run at the end of the config file.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "\"\"", "description": "Like extraConfig, except commands are run at the start of the config file.", "example": "", "loc": ["xsession", "windowManager", "bspwm", "extraConfigEarly"], "readOnly": false, "title": "xsession.windowManager.bspwm.extraConfigEarly", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Like extraConfig, except commands are run at the start of the config file.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "{ }", "description": "Specifies the names of desktops to create on each monitor.", "example": "{\n  HDMI-0 = [\n    \"web\"\n    \"terminal\"\n    \"III\"\n    \"IV\"\n  ];\n}", "loc": ["xsession", "windowManager", "bspwm", "monitors"], "readOnly": false, "title": "xsession.windowManager.bspwm.monitors", "type": "attribute set of list of string", "descriptionHTML": "<p>Specifies the names of desktops to create on each monitor.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "pkgs.bspwm", "description": "The bspwm package to use.", "example": "pkgs.bspwm-unstable", "loc": ["xsession", "windowManager", "bspwm", "package"], "readOnly": false, "title": "xsession.windowManager.bspwm.package", "type": "package", "descriptionHTML": "<p>The bspwm package to use.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "{ }", "description": "Rule configuration. The keys of the attribute set are the targets of the rules.", "example": "{\n  \"Gimp\" = {\n    desktop = \"^8\";\n    state = \"floating\";\n    follow = true;\n  };\n  \"Kupfer.py\" = {\n    focus = true;\n  };\n  \"Screenkey\" = {\n    manage = false;\n  };\n}\n", "loc": ["xsession", "windowManager", "bspwm", "rules"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules", "type": "attribute set of (attribute set of (boolean or signed integer or floating point number or string))", "descriptionHTML": "<p>Rule configuration. The keys of the attribute set are the targets of the rules.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node should have border.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "border"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.border", "type": "null or boolean", "descriptionHTML": "<p>Whether the node should have border.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node will be put in the center, in floating mode.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "center"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.center", "type": "null or boolean", "descriptionHTML": "<p>Whether the node will be put in the center, in floating mode.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The desktop where the rule should be applied.", "example": "\"^8\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "desktop"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.desktop", "type": "null or string", "descriptionHTML": "<p>The desktop where the rule should be applied.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node should gain focus on creation.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "focus"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.focus", "type": "null or boolean", "descriptionHTML": "<p>Whether the node should gain focus on creation.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether focus should follow the node when it is moved.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "follow"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.follow", "type": "null or boolean", "descriptionHTML": "<p>Whether focus should follow the node when it is moved.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node should occupy any space.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "hidden"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.hidden", "type": "null or boolean", "descriptionHTML": "<p>Whether the node should occupy any space.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The layer where a new window should spawn.", "example": "\"above\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "layer"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.layer", "type": "null or one of \"below\", \"normal\", \"above\"", "descriptionHTML": "<p>The layer where a new window should spawn.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node should ignore {command}node --close\nmessages.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "locked"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.locked", "type": "null or boolean", "descriptionHTML": "<p>Whether the node should ignore {command}<code>node --close</code>\nmessages.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the window should be managed by bspwm. If false, the window\nwill be ignored by bspwm entirely. This is useful for overlay apps,\ne.g. screenshot tools.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "manage"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.manage", "type": "null or boolean", "descriptionHTML": "<p>Whether the window should be managed by bspwm. If false, the window\nwill be ignored by bspwm entirely. This is useful for overlay apps,\ne.g. screenshot tools.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node will be marked for deferred actions.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "marked"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.marked", "type": "null or boolean", "descriptionHTML": "<p>Whether the node will be marked for deferred actions.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The monitor where the rule should be applied.", "example": "\"HDMI-0\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "monitor"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.monitor", "type": "null or string", "descriptionHTML": "<p>The monitor where the rule should be applied.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The node where the rule should be applied.", "example": "\"1\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "node"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.node", "type": "null or string", "descriptionHTML": "<p>The node where the rule should be applied.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node should stay in the same tiling position and size.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "private"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.private", "type": "null or boolean", "descriptionHTML": "<p>Whether the node should stay in the same tiling position and size.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The node's geometry, in the format WxH+X+Y.", "example": "\"800x600+32+32\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "rectangle"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.rectangle", "type": "null or string", "descriptionHTML": "<p>The node's geometry, in the format <code>WxH+X+Y</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The direction where the container is going to be split.", "example": "\"south\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "splitDir"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.splitDir", "type": "null or one of \"north\", \"west\", \"south\", \"east\"", "descriptionHTML": "<p>The direction where the container is going to be split.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The ratio between the new window and the previous existing window in\nthe desktop.", "example": "0.65", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "splitRatio"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.splitRatio", "type": "null or floating point number", "descriptionHTML": "<p>The ratio between the new window and the previous existing window in\nthe desktop.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "The state in which a new window should spawn.", "example": "\"floating\"", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "state"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.state", "type": "null or one of \"tiled\", \"pseudo_tiled\", \"floating\", \"fullscreen\"", "descriptionHTML": "<p>The state in which a new window should spawn.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "null", "description": "Whether the node should stay on the focused desktop.", "example": "true", "loc": ["xsession", "windowManager", "bspwm", "rules", "<name>", "sticky"], "readOnly": false, "title": "xsession.windowManager.bspwm.rules.<name>.sticky", "type": "null or boolean", "descriptionHTML": "<p>Whether the node should stay on the focused desktop.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "{ }", "description": "General settings given to bspc config.", "example": "{\n  border_width = 2;\n  gapless_monocle = true;\n  split_ratio = 0.52;\n}", "loc": ["xsession", "windowManager", "bspwm", "settings"], "readOnly": false, "title": "xsession.windowManager.bspwm.settings", "type": "attribute set of (boolean or signed integer or floating point number or string or list of (boolean or signed integer or floating point number or string))", "descriptionHTML": "<p>General settings given to <code>bspc config</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/bspwm/default.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/bspwm/default.nix"}], "default": "[ ]", "description": "Programs to be executed during startup.", "example": "[\n  \"numlockx on\"\n  \"tilda\"\n]", "loc": ["xsession", "windowManager", "bspwm", "startupPrograms"], "readOnly": false, "title": "xsession.windowManager.bspwm.startupPrograms", "type": "list of string", "descriptionHTML": "<p>Programs to be executed during startup.</p>"}, {"declarations": [{"name": "<xsession.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/xsession.nix"}], "default": "\"test -n \\\"$1\\\" && eval \\\"$@\\\"\"", "description": "Command to use to start the window manager.\nThe default value allows integration with NixOS' generated xserver configuration.\nExtra actions and commands can be specified in {option}xsession.initExtra.", "example": "let\n  xmonad = pkgs.xmonad-with-packages.override {\n    packages = self: [ self.xmonad-contrib self.taffybar ];\n  };\nin\n  \"${xmonad}/bin/xmonad\";\n", "loc": ["xsession", "windowManager", "command"], "readOnly": false, "title": "xsession.windowManager.command", "type": "string", "descriptionHTML": "<p>Command to use to start the window manager.</p>\n<p>The default value allows integration with NixOS' generated xserver configuration.</p>\n<p>Extra actions and commands can be specified in {option}<code>xsession.initExtra</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "\"\"", "description": "Apps configuration for Fluxbox, written to\n{file}~/.fluxbox/apps. Look at the\n{manpage}fluxbox(1) manpage for details.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "apps"], "readOnly": false, "title": "xsession.windowManager.fluxbox.apps", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Apps configuration for Fluxbox, written to\n{file}<code>~/.fluxbox/apps</code>. Look at the\n{manpage}<code>fluxbox(1)</code> manpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "false", "description": "Whether to enable Fluxbox window manager.", "example": "true", "loc": ["xsession", "windowManager", "fluxbox", "enable"], "readOnly": false, "title": "xsession.windowManager.fluxbox.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Fluxbox window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "[ ]", "description": "Extra command line arguments to pass to {command}fluxbox.\nLook at the\n{manpage}fluxbox(1) manpage for details.", "example": "[\n  \"-log\"\n  \"/tmp/fluxbox.log\"\n]", "loc": ["xsession", "windowManager", "fluxbox", "extraCommandLineArgs"], "readOnly": false, "title": "xsession.windowManager.fluxbox.extraCommandLineArgs", "type": "list of string", "descriptionHTML": "<p>Extra command line arguments to pass to {command}<code>fluxbox</code>.\nLook at the\n{manpage}<code>fluxbox(1)</code> manpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "\"\"", "description": "Init configuration for Fluxbox, written to\n{file}~/.fluxbox/init. Look at the\n{manpage}fluxbox(1) manpage for details.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "init"], "readOnly": false, "title": "xsession.windowManager.fluxbox.init", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Init configuration for Fluxbox, written to\n{file}<code>~/.fluxbox/init</code>. Look at the\n{manpage}<code>fluxbox(1)</code> manpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "\"\"", "description": "Keyboard shortcuts configuration for Fluxbox, written to\n{file}~/.fluxbox/keys. Look at the\n{manpage}fluxbox-keys(1) manpage for details.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "keys"], "readOnly": false, "title": "xsession.windowManager.fluxbox.keys", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Keyboard shortcuts configuration for Fluxbox, written to\n{file}<code>~/.fluxbox/keys</code>. Look at the\n{manpage}<code>fluxbox-keys(1)</code> manpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "\"\"", "description": "Menu configuration for Fluxbox, written to\n{file}~/.fluxbox/menu. Look at the\n{manpage}fluxbox-menu(1) manpage for details.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "menu"], "readOnly": false, "title": "xsession.windowManager.fluxbox.menu", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Menu configuration for Fluxbox, written to\n{file}<code>~/.fluxbox/menu</code>. Look at the\n{manpage}<code>fluxbox-menu(1)</code> manpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "pkgs.fluxbox", "description": "The fluxbox package to use.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "package"], "readOnly": false, "title": "xsession.windowManager.fluxbox.package", "type": "null or package", "descriptionHTML": "<p>The fluxbox package to use.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "\"\"", "description": "Slitlist configuration for Fluxbox, written to\n{file}~/.fluxbox/slitlist. Look at the\n{manpage}fluxbox(1) manpage for details.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "slitlist"], "readOnly": false, "title": "xsession.windowManager.fluxbox.slitlist", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Slitlist configuration for Fluxbox, written to\n{file}<code>~/.fluxbox/slitlist</code>. Look at the\n{manpage}<code>fluxbox(1)</code> manpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/fluxbox.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/fluxbox.nix"}], "default": "\"\"", "description": "Window menu configuration for Fluxbox, written to\n{file}~/.fluxbox/windowmenu. Look at the\n{manpage}fluxbox-menu(1)\nmanpage for details.", "example": "", "loc": ["xsession", "windowManager", "fluxbox", "windowmenu"], "readOnly": false, "title": "xsession.windowManager.fluxbox.windowmenu", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Window menu configuration for Fluxbox, written to\n{file}<code>~/.fluxbox/windowmenu</code>. Look at the\n{manpage}<code>fluxbox-menu(1)</code>\nmanpage for details.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "false", "description": "Whether to enable herbstluftwm window manager.", "example": "true", "loc": ["xsession", "windowManager", "herbstluftwm", "enable"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable herbstluftwm window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "\"\"", "description": "Extra configuration lines to add verbatim to\n{file}$XDG_CONFIG_HOME/herbstluftwm/autostart.", "example": "''\n  herbstclient set_layout max\n  herbstclient detect_monitors\n''", "loc": ["xsession", "windowManager", "herbstluftwm", "extraConfig"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add verbatim to\n{file}<code>$XDG_CONFIG_HOME/herbstluftwm/autostart</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "{ }", "description": "Herbstluftwm keybinds.", "example": "{\n  Mod4-o = \"split right\";\n  Mod4-u = \"split bottom\";\n}\n", "loc": ["xsession", "windowManager", "herbstluftwm", "keybinds"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.keybinds", "type": "attribute set of string", "descriptionHTML": "<p>Herbstluftwm keybinds.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "{ }", "description": "Herbstluftwm mousebinds.", "example": "{\n  Mod4-B1 = \"move\";\n  Mod4-B3 = \"resize\";\n}\n", "loc": ["xsession", "windowManager", "herbstluftwm", "mousebinds"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.mousebinds", "type": "attribute set of string", "descriptionHTML": "<p>Herbstluftwm mousebinds.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "pkgs.herbstluftwm", "description": "The herbstluftwm package to use.", "example": "", "loc": ["xsession", "windowManager", "herbstluftwm", "package"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.package", "type": "package", "descriptionHTML": "<p>The herbstluftwm package to use.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "[ ]", "description": "Herbstluftwm rules.", "example": "[\n  \"windowtype~'_NET_WM_WINDOW_TYPE_(DIALOG|UTILITY|SPLASH)' focus=on pseudotile=on\"\n  \"windowtype~'_NET_WM_WINDOW_TYPE_(NOTIFICATION|DOCK|DESKTOP)' manage=off\"\n]\n", "loc": ["xsession", "windowManager", "herbstluftwm", "rules"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.rules", "type": "list of string", "descriptionHTML": "<p>Herbstluftwm rules.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "{ }", "description": "Herbstluftwm settings.", "example": "{\n  gapless_grid = false;\n  window_border_width = 1;\n  window_border_active_color = \"#FF0000\";\n}\n", "loc": ["xsession", "windowManager", "herbstluftwm", "settings"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Herbstluftwm settings.</p>"}, {"declarations": [{"name": "<services/window-managers/herbstluftwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/herbstluftwm.nix"}], "default": "[ ]", "description": "Tags to create on startup.", "example": "[ \"work\" \"browser\" \"music\" \"gaming\" ]\n", "loc": ["xsession", "windowManager", "herbstluftwm", "tags"], "readOnly": false, "title": "xsession.windowManager.herbstluftwm.tags", "type": "list of string", "descriptionHTML": "<p>Tags to create on startup.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "i3 configuration options.", "example": "", "loc": ["xsession", "windowManager", "i3", "config"], "readOnly": false, "title": "xsession.windowManager.i3.config", "type": "null or (submodule)", "descriptionHTML": "<p>i3 configuration options.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "An attribute set that assigns applications to workspaces based\non criteria.", "example": "{\n\"1: web\" = [{ class = \"^Firefox$\"; }];\n\"0: extra\" = [{ class = \"^Firefox$\"; window_role = \"About\"; }];\n}\n", "loc": ["xsession", "windowManager", "i3", "config", "assigns"], "readOnly": false, "title": "xsession.windowManager.i3.config.assigns", "type": "attribute set of list of attribute set of (string or boolean)", "descriptionHTML": "<p>An attribute set that assigns applications to workspaces based\non criteria.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "see code", "description": "i3 bars settings blocks. Set to empty list to remove bars completely.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars", "type": "list of (submodule)", "descriptionHTML": "<p>i3 bars settings blocks. Set to empty list to remove bars completely.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Bar color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', fields and RGB color hex-codes as values.\nSee default values for the reference.\nNote that 'background', 'status', and 'separator' parameters take a single RGB value.\nSee https://i3wm.org/docs/userguide.html#_colors.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors", "type": "submodule", "descriptionHTML": "<p>Bar color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', fields and RGB color hex-codes as values.\nSee default values for the reference.\nNote that 'background', 'status', and 'separator' parameters take a single RGB value.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_colors\">https://i3wm.org/docs/userguide.html#_colors</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace is active.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "activeWorkspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.activeWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace is active.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Background color of the bar.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "background"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.background", "type": "null or string", "descriptionHTML": "<p>Background color of the bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for the binding mode indicator", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "bindingMode"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.bindingMode", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for the binding mode indicator</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Background color of the bar on the currently focused monitor output.", "example": "\"#000000\"", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "focusedBackground"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.focusedBackground", "type": "null or string", "descriptionHTML": "<p>Background color of the bar on the currently focused monitor output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Text color to be used for the separator on the currently focused monitor output.", "example": "\"#666666\"", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "focusedSeparator"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.focusedSeparator", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the separator on the currently focused monitor output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Text color to be used for the statusline on the currently focused monitor output.", "example": "\"#ffffff\"", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "focusedStatusline"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.focusedStatusline", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the statusline on the currently focused monitor output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace has focus.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "focusedWorkspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.focusedWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace has focus.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace does not\nhave focus and is not active.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "inactiveWorkspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.inactiveWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace does not\nhave focus and is not active.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Text color to be used for the separator.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "separator"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.separator", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the separator.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Text color to be used for the statusline.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "statusline"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.statusline", "type": "null or string", "descriptionHTML": "<p>Text color to be used for the statusline.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Border, background and text color for a workspace button when the workspace contains\na window with the urgency hint set.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "colors", "urgentWorkspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.colors.urgentWorkspace", "type": "null or (submodule)", "descriptionHTML": "<p>Border, background and text color for a workspace button when the workspace contains\na window with the urgency hint set.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "i3bar", "description": "Command that will be used to start a bar.", "example": "\"\\${pkgs.i3}/bin/i3bar -t\"", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "command"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.command", "type": "string", "descriptionHTML": "<p>Command that will be used to start a bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"\"", "description": "Extra configuration lines for this bar.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "extraConfig"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines for this bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Font configuration for this bar.", "example": "{\n  names = [ \"DejaVu Sans Mono\" \"FontAwesome5Free\" ];\n  style = \"Bold Semi-Condensed\";\n  size = 11.0;\n}\n", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "fonts"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.fonts", "type": "(list of string) or (submodule)", "descriptionHTML": "<p>Font configuration for this bar.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "The default bar mode when 'bar.mode' == 'hide'.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "hiddenState"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.hiddenState", "type": "null or one of \"hide\", \"show\"", "descriptionHTML": "<p>The default bar mode when 'bar.mode' == 'hide'.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Specifies the bar ID for the configured bar instance.\nIf this option is missing, the ID is set to bar-x, where x corresponds\nto the position of the embedding bar block in the config file.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "id"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.id", "type": "null or string", "descriptionHTML": "<p>Specifies the bar ID for the configured bar instance.\nIf this option is missing, the ID is set to bar-x, where x corresponds\nto the position of the embedding bar block in the config file.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Bar visibility mode.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "mode"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.mode", "type": "null or one of \"dock\", \"hide\", \"invisible\"", "descriptionHTML": "<p>Bar visibility mode.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "The edge of the screen i3bar should show up.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "position"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.position", "type": "null or one of \"top\", \"bottom\"", "descriptionHTML": "<p>The edge of the screen i3bar should show up.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Command that will be used to get status lines.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "statusCommand"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.statusCommand", "type": "null or string", "descriptionHTML": "<p>Command that will be used to get status lines.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Where to output tray.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "trayOutput"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.trayOutput", "type": "null or string", "descriptionHTML": "<p>Where to output tray.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Sets the pixel padding of the system tray.\nThis padding will surround the tray on all sides and between each item.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "trayPadding"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.trayPadding", "type": "null or signed integer", "descriptionHTML": "<p>Sets the pixel padding of the system tray.\nThis padding will surround the tray on all sides and between each item.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Whether workspace buttons should be shown or not.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "workspaceButtons"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.workspaceButtons", "type": "null or boolean", "descriptionHTML": "<p>Whether workspace buttons should be shown or not.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null for state version \u2265 20.09, as example otherwise\n", "description": "Whether workspace numbers should be displayed within the workspace buttons.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "bars", "*", "workspaceNumbers"], "readOnly": false, "title": "xsession.windowManager.i3.config.bars.*.workspaceNumbers", "type": "null or boolean", "descriptionHTML": "<p>Whether workspace numbers should be displayed within the workspace buttons.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', 'indicator' and 'childBorder' fields\nand RGB color hex-codes as values. See default values for the reference.\nNote that 'i3.config.colors.background' parameter takes a single RGB value.\nSee https://i3wm.org/docs/userguide.html#_changing_colors.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors", "type": "submodule", "descriptionHTML": "<p>Color settings. All color classes can be specified using submodules\nwith 'border', 'background', 'text', 'indicator' and 'childBorder' fields\nand RGB color hex-codes as values. See default values for the reference.\nNote that 'i3.config.colors.background' parameter takes a single RGB value.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_changing_colors\">https://i3wm.org/docs/userguide.html#_changing_colors</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"#ffffff\"", "description": "Background color of the window. Only applications which do not cover\nthe whole area expose the color.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors", "background"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors.background", "type": "string", "descriptionHTML": "<p>Background color of the window. Only applications which do not cover\nthe whole area expose the color.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{\n  background = \"#285577\";\n  border = \"#4c7899\";\n  childBorder = \"#285577\";\n  indicator = \"#2e9ef4\";\n  text = \"#ffffff\";\n}", "description": "A window which currently has the focus.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors", "focused"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors.focused", "type": "submodule", "descriptionHTML": "<p>A window which currently has the focus.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{\n  background = \"#5f676a\";\n  border = \"#333333\";\n  childBorder = \"#5f676a\";\n  indicator = \"#484e50\";\n  text = \"#ffffff\";\n}", "description": "A window which is the focused one of its container,\nbut it does not have the focus at the moment.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors", "focusedInactive"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors.focusedInactive", "type": "submodule", "descriptionHTML": "<p>A window which is the focused one of its container,\nbut it does not have the focus at the moment.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{\n  background = \"#0c0c0c\";\n  border = \"#000000\";\n  childBorder = \"#0c0c0c\";\n  indicator = \"#000000\";\n  text = \"#ffffff\";\n}", "description": "Background and text color are used to draw placeholder window\ncontents (when restoring layouts). Border and indicator are ignored.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors", "placeholder"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors.placeholder", "type": "submodule", "descriptionHTML": "<p>Background and text color are used to draw placeholder window\ncontents (when restoring layouts). Border and indicator are ignored.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{\n  background = \"#222222\";\n  border = \"#333333\";\n  childBorder = \"#222222\";\n  indicator = \"#292d2e\";\n  text = \"#888888\";\n}", "description": "A window which is not focused.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors", "unfocused"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors.unfocused", "type": "submodule", "descriptionHTML": "<p>A window which is not focused.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{\n  background = \"#900000\";\n  border = \"#2f343a\";\n  childBorder = \"#900000\";\n  indicator = \"#900000\";\n  text = \"#ffffff\";\n}", "description": "A window which has its urgency hint activated.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "colors", "urgent"], "readOnly": false, "title": "xsession.windowManager.i3.config.colors.urgent", "type": "submodule", "descriptionHTML": "<p>A window which has its urgency hint activated.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "The default workspace to show when i3 is launched.\nThis must to correspond to the value of the keybinding of the default workspace.", "example": "\"workspace number 9\"", "loc": ["xsession", "windowManager", "i3", "config", "defaultWorkspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.defaultWorkspace", "type": "null or string", "descriptionHTML": "<p>The default workspace to show when i3 is launched.\nThis must to correspond to the value of the keybinding of the default workspace.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Floating window settings.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "floating"], "readOnly": false, "title": "xsession.windowManager.i3.config.floating", "type": "submodule", "descriptionHTML": "<p>Floating window settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "2", "description": "Floating windows border width.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "floating", "border"], "readOnly": false, "title": "xsession.windowManager.i3.config.floating.border", "type": "signed integer", "descriptionHTML": "<p>Floating windows border width.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "[ ]", "description": "List of criteria for windows that should be opened in a floating mode.", "example": "[\n  {\n    title = \"Steam - Update News\";\n  }\n  {\n    class = \"Pavucontrol\";\n  }\n]", "loc": ["xsession", "windowManager", "i3", "config", "floating", "criteria"], "readOnly": false, "title": "xsession.windowManager.i3.config.floating.criteria", "type": "list of attribute set of (string or boolean)", "descriptionHTML": "<p>List of criteria for windows that should be opened in a floating mode.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"i3.config.modifier\"", "description": "Modifier key or keys that can be used to drag floating windows.", "example": "\"Mod4\"", "loc": ["xsession", "windowManager", "i3", "config", "floating", "modifier"], "readOnly": false, "title": "xsession.windowManager.i3.config.floating.modifier", "type": "string", "descriptionHTML": "<p>Modifier key or keys that can be used to drag floating windows.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "''\n  true for state version \u2265 23.05\n  config.gaps == null for state version < 23.05\n''", "description": "Whether to show floating window titlebars.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "floating", "titlebar"], "readOnly": false, "title": "xsession.windowManager.i3.config.floating.titlebar", "type": "boolean", "descriptionHTML": "<p>Whether to show floating window titlebars.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Focus related settings.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "focus"], "readOnly": false, "title": "xsession.windowManager.i3.config.focus", "type": "submodule", "descriptionHTML": "<p>Focus related settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "true", "description": "Whether focus should follow the mouse.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "focus", "followMouse"], "readOnly": false, "title": "xsession.windowManager.i3.config.focus.followMouse", "type": "boolean", "descriptionHTML": "<p>Whether focus should follow the mouse.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "false", "description": "Whether to force focus wrapping in tabbed or stacked containers.\nThis option is deprecated, use {option}focus.wrapping instead.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "focus", "forceWrapping"], "readOnly": false, "title": "xsession.windowManager.i3.config.focus.forceWrapping", "type": "boolean", "descriptionHTML": "<p>Whether to force focus wrapping in tabbed or stacked containers.</p>\n<p>This option is deprecated, use {option}<code>focus.wrapping</code> instead.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "true", "description": "Whether mouse cursor should be warped to the center of the window when switching focus\nto a window on a different output.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "focus", "mouseWarping"], "readOnly": false, "title": "xsession.windowManager.i3.config.focus.mouseWarping", "type": "boolean", "descriptionHTML": "<p>Whether mouse cursor should be warped to the center of the window when switching focus\nto a window on a different output.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"smart\"", "description": "This option modifies focus behavior on new window activation.\nSee https://i3wm.org/docs/userguide.html#focus_on_window_activation", "example": "\"none\"", "loc": ["xsession", "windowManager", "i3", "config", "focus", "newWindow"], "readOnly": false, "title": "xsession.windowManager.i3.config.focus.newWindow", "type": "one of \"smart\", \"urgent\", \"focus\", \"none\"", "descriptionHTML": "<p>This option modifies focus behavior on new window activation.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#focus_on_window_activation\">https://i3wm.org/docs/userguide.html#focus_on_window_activation</a></p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"yes\"", "description": "Whether the window focus commands automatically wrap around the edge of containers.\nSee https://i3wm.org/docs/userguide.html#_focus_wrapping", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "focus", "wrapping"], "readOnly": false, "title": "xsession.windowManager.i3.config.focus.wrapping", "type": "one of \"yes\", \"no\", \"force\", \"workspace\"", "descriptionHTML": "<p>Whether the window focus commands automatically wrap around the edge of containers.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_focus_wrapping\">https://i3wm.org/docs/userguide.html#_focus_wrapping</a></p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Font configuration for window titles, nagbar...", "example": "{\n  names = [ \"DejaVu Sans Mono\" \"FontAwesome5Free\" ];\n  style = \"Bold Semi-Condensed\";\n  size = 11.0;\n}\n", "loc": ["xsession", "windowManager", "i3", "config", "fonts"], "readOnly": false, "title": "xsession.windowManager.i3.config.fonts", "type": "(list of string) or (submodule)", "descriptionHTML": "<p>Font configuration for window titles, nagbar...</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Gaps related settings.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "gaps"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps", "type": "null or (submodule)", "descriptionHTML": "<p>Gaps related settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Bottom gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "bottom"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.bottom", "type": "null or signed integer", "descriptionHTML": "<p>Bottom gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Horizontal gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "horizontal"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.horizontal", "type": "null or signed integer", "descriptionHTML": "<p>Horizontal gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Inner gaps value.", "example": "12", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "inner"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.inner", "type": "null or signed integer", "descriptionHTML": "<p>Inner gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Left gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "left"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.left", "type": "null or signed integer", "descriptionHTML": "<p>Left gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Outer gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "outer"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.outer", "type": "null or signed integer", "descriptionHTML": "<p>Outer gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Right gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "right"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.right", "type": "null or signed integer", "descriptionHTML": "<p>Right gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"off\"", "description": "This option controls whether to disable container borders on\nworkspace with a single container.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "smartBorders"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.smartBorders", "type": "one of \"on\", \"off\", \"no_gaps\"", "descriptionHTML": "<p>This option controls whether to disable container borders on\nworkspace with a single container.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "false", "description": "This option controls whether to disable all gaps (outer and inner)\non workspace with a single container.", "example": "true", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "smartGaps"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.smartGaps", "type": "boolean", "descriptionHTML": "<p>This option controls whether to disable all gaps (outer and inner)\non workspace with a single container.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Top gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "top"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.top", "type": "null or signed integer", "descriptionHTML": "<p>Top gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Vertical gaps value.", "example": "5", "loc": ["xsession", "windowManager", "i3", "config", "gaps", "vertical"], "readOnly": false, "title": "xsession.windowManager.i3.config.gaps.vertical", "type": "null or signed integer", "descriptionHTML": "<p>Vertical gaps value.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"Default i3 keybindings.\"", "description": "An attribute set that assigns a key press to an action using a key symbol.\nSee https://i3wm.org/docs/userguide.html#keybindings.\nConsider to use lib.mkOptionDefault function to extend or override\ndefault keybindings instead of specifying all of them from scratch.", "example": "let\n  modifier = config.xsession.windowManager.i3.config.modifier;\nin lib.mkOptionDefault {\n  \"${modifier}+Return\" = \"exec i3-sensible-terminal\";\n  \"${modifier}+Shift+q\" = \"kill\";\n  \"${modifier}+d\" = \"exec ${pkgs.dmenu}/bin/dmenu_run\";\n}\n", "loc": ["xsession", "windowManager", "i3", "config", "keybindings"], "readOnly": false, "title": "xsession.windowManager.i3.config.keybindings", "type": "attribute set of (null or string)", "descriptionHTML": "<p>An attribute set that assigns a key press to an action using a key symbol.\nSee <a href=\"https://i3wm.org/docs/userguide.html#keybindings\">https://i3wm.org/docs/userguide.html#keybindings</a>.</p>\n<p>Consider to use <code>lib.mkOptionDefault</code> function to extend or override\ndefault keybindings instead of specifying all of them from scratch.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "An attribute set that assigns keypress to an action using key code.\nSee https://i3wm.org/docs/userguide.html#keybindings.", "example": "{\n  \"214\" = \"exec /bin/script.sh\";\n}", "loc": ["xsession", "windowManager", "i3", "config", "keycodebindings"], "readOnly": false, "title": "xsession.windowManager.i3.config.keycodebindings", "type": "attribute set of (null or string)", "descriptionHTML": "<p>An attribute set that assigns keypress to an action using key code.\nSee <a href=\"https://i3wm.org/docs/userguide.html#keybindings\">https://i3wm.org/docs/userguide.html#keybindings</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "${pkgs.dmenu}/bin/dmenu_run", "description": "Default launcher to use.", "example": "\"bemenu-run\"", "loc": ["xsession", "windowManager", "i3", "config", "menu"], "readOnly": false, "title": "xsession.windowManager.i3.config.menu", "type": "string", "descriptionHTML": "<p>Default launcher to use.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{\n  resize = {\n    Down = \"resize grow height 10 px or 10 ppt\";\n    Escape = \"mode default\";\n    Left = \"resize shrink width 10 px or 10 ppt\";\n    Return = \"mode default\";\n    Right = \"resize grow width 10 px or 10 ppt\";\n    Up = \"resize shrink height 10 px or 10 ppt\";\n  };\n}", "description": "An attribute set that defines binding modes and keybindings\ninside them\nOnly basic keybinding is supported (bindsym keycomb action),\nfor more advanced setup use 'i3.extraConfig'.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "modes"], "readOnly": false, "title": "xsession.windowManager.i3.config.modes", "type": "attribute set of attribute set of string", "descriptionHTML": "<p>An attribute set that defines binding modes and keybindings\ninside them</p>\n<p>Only basic keybinding is supported (bindsym keycomb action),\nfor more advanced setup use 'i3.extraConfig'.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"Mod1\"", "description": "Modifier key that is used for all default keybindings.", "example": "\"Mod4\"", "loc": ["xsession", "windowManager", "i3", "config", "modifier"], "readOnly": false, "title": "xsession.windowManager.i3.config.modifier", "type": "one of \"Shift\", \"Control\", \"Mod1\", \"Mod2\", \"Mod3\", \"Mod4\", \"Mod5\" or string", "descriptionHTML": "<p>Modifier key that is used for all default keybindings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "[ ]", "description": "Commands that should be executed at startup.\nSee https://i3wm.org/docs/userguide.html#_automatically_starting_applications_on_i3_startup.", "example": "[\n{ command = \"systemctl --user restart polybar\"; always = true; notification = false; }\n{ command = \"dropbox start\"; notification = false; }\n{ command = \"firefox\"; }\n];\n", "loc": ["xsession", "windowManager", "i3", "config", "startup"], "readOnly": false, "title": "xsession.windowManager.i3.config.startup", "type": "list of (submodule)", "descriptionHTML": "<p>Commands that should be executed at startup.</p>\n<p>See <a href=\"https://i3wm.org/docs/userguide.html#_automatically_starting_applications_on_i3_startup\">https://i3wm.org/docs/userguide.html#_automatically_starting_applications_on_i3_startup</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "false", "description": "Whether to run command on each i3 restart.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "startup", "*", "always"], "readOnly": false, "title": "xsession.windowManager.i3.config.startup.*.always", "type": "boolean", "descriptionHTML": "<p>Whether to run command on each i3 restart.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "", "description": "Command that will be executed on startup.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "startup", "*", "command"], "readOnly": false, "title": "xsession.windowManager.i3.config.startup.*.command", "type": "string", "descriptionHTML": "<p>Command that will be executed on startup.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "true", "description": "Whether to enable startup-notification support for the command.\nSee {option}--no-startup-id option description in the i3 user guide.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "startup", "*", "notification"], "readOnly": false, "title": "xsession.windowManager.i3.config.startup.*.notification", "type": "boolean", "descriptionHTML": "<p>Whether to enable startup-notification support for the command.\nSee {option}<code>--no-startup-id</code> option description in the i3 user guide.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "null", "description": "Launch application on a particular workspace. DEPRECATED:\nUse \ninstead. See https://github.com/nix-community/home-manager/issues/265.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "startup", "*", "workspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.startup.*.workspace", "type": "null or string", "descriptionHTML": "<p>Launch application on a particular workspace. DEPRECATED:\nUse <a href=\"#opt-xsession.windowManager.i3.config.assigns\"></a>\ninstead. See <a href=\"https://github.com/nix-community/home-manager/issues/265\">https://github.com/nix-community/home-manager/issues/265</a>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"i3-sensible-terminal\"", "description": "Default terminal to run.", "example": "\"alacritty\"", "loc": ["xsession", "windowManager", "i3", "config", "terminal"], "readOnly": false, "title": "xsession.windowManager.i3.config.terminal", "type": "string", "descriptionHTML": "<p>Default terminal to run.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "{ }", "description": "Window titlebar and border settings.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "window"], "readOnly": false, "title": "xsession.windowManager.i3.config.window", "type": "submodule", "descriptionHTML": "<p>Window titlebar and border settings.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "2", "description": "Window border width.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "window", "border"], "readOnly": false, "title": "xsession.windowManager.i3.config.window.border", "type": "signed integer", "descriptionHTML": "<p>Window border width.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "[ ]", "description": "List of commands that should be executed on specific windows.\nSee {option}for_window i3wm option documentation.", "example": "[\n  {\n    command = \"border pixel 1\";\n    criteria = {\n      class = \"XTerm\";\n    };\n  }\n]", "loc": ["xsession", "windowManager", "i3", "config", "window", "commands"], "readOnly": false, "title": "xsession.windowManager.i3.config.window.commands", "type": "list of (submodule)", "descriptionHTML": "<p>List of commands that should be executed on specific windows.\nSee {option}<code>for_window</code> i3wm option documentation.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "", "description": "i3wm command to execute.", "example": "\"border pixel 1\"", "loc": ["xsession", "windowManager", "i3", "config", "window", "commands", "*", "command"], "readOnly": false, "title": "xsession.windowManager.i3.config.window.commands.*.command", "type": "string", "descriptionHTML": "<p>i3wm command to execute.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "", "description": "Criteria of the windows on which command should be executed.\nA value of true is equivalent to using an empty\ncriteria (which is different from an empty string criteria).", "example": "{\n  title = \"x200: ~/work\";\n  floating = true;\n};\n", "loc": ["xsession", "windowManager", "i3", "config", "window", "commands", "*", "criteria"], "readOnly": false, "title": "xsession.windowManager.i3.config.window.commands.*.criteria", "type": "attribute set of (string or boolean)", "descriptionHTML": "<p>Criteria of the windows on which command should be executed.</p>\n<p>A value of <code>true</code> is equivalent to using an empty\ncriteria (which is different from an empty string criteria).</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"none\"", "description": "Hide window borders adjacent to the screen edges.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "window", "hideEdgeBorders"], "readOnly": false, "title": "xsession.windowManager.i3.config.window.hideEdgeBorders", "type": "one of \"none\", \"vertical\", \"horizontal\", \"both\", \"smart\"", "descriptionHTML": "<p>Hide window borders adjacent to the screen edges.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "''\n  true for state version \u2265 23.05\n  config.gaps == null for state version < 23.05\n''", "description": "Whether to show window titlebars.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "window", "titlebar"], "readOnly": false, "title": "xsession.windowManager.i3.config.window.titlebar", "type": "boolean", "descriptionHTML": "<p>Whether to show window titlebars.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "false", "description": "Assume you are on workspace \"1: www\" and switch to \"2: IM\" using\nmod+2 because somebody sent you a message. You don\u2019t need to remember\nwhere you came from now, you can just press $mod+2 again to switch\nback to \"1: www\".", "example": "true", "loc": ["xsession", "windowManager", "i3", "config", "workspaceAutoBackAndForth"], "readOnly": false, "title": "xsession.windowManager.i3.config.workspaceAutoBackAndForth", "type": "boolean", "descriptionHTML": "<p>Assume you are on workspace \"1: www\" and switch to \"2: IM\" using\nmod+2 because somebody sent you a message. You don\u2019t need to remember\nwhere you came from now, you can just press $mod+2 again to switch\nback to \"1: www\".</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"default\"", "description": "The mode in which new containers on workspace level will\nstart.", "example": "\"tabbed\"", "loc": ["xsession", "windowManager", "i3", "config", "workspaceLayout"], "readOnly": false, "title": "xsession.windowManager.i3.config.workspaceLayout", "type": "one of \"default\", \"stacking\", \"tabbed\"", "descriptionHTML": "<p>The mode in which new containers on workspace level will\nstart.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "[ ]", "description": "Assign workspaces to outputs.", "example": "", "loc": ["xsession", "windowManager", "i3", "config", "workspaceOutputAssign"], "readOnly": false, "title": "xsession.windowManager.i3.config.workspaceOutputAssign", "type": "list of (submodule)", "descriptionHTML": "<p>Assign workspaces to outputs.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"\"", "description": "Name(s) of the output(s) from {command}i3-msg -t get_outputs.", "example": "\"eDP\"", "loc": ["xsession", "windowManager", "i3", "config", "workspaceOutputAssign", "*", "output"], "readOnly": false, "title": "xsession.windowManager.i3.config.workspaceOutputAssign.*.output", "type": "string or list of string", "descriptionHTML": "<p>Name(s) of the output(s) from {command}<code>i3-msg -t get_outputs</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"\"", "description": "Name of the workspace to assign.", "example": "\"Web\"", "loc": ["xsession", "windowManager", "i3", "config", "workspaceOutputAssign", "*", "workspace"], "readOnly": false, "title": "xsession.windowManager.i3.config.workspaceOutputAssign.*.workspace", "type": "string", "descriptionHTML": "<p>Name of the workspace to assign.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "false", "description": "Whether to enable i3 window manager.", "example": "true", "loc": ["xsession", "windowManager", "i3", "enable"], "readOnly": false, "title": "xsession.windowManager.i3.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable i3 window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "\"\"", "description": "Extra configuration lines to add to ~/.config/i3/config.", "example": "", "loc": ["xsession", "windowManager", "i3", "extraConfig"], "readOnly": false, "title": "xsession.windowManager.i3.extraConfig", "type": "strings concatenated with \"\\n\"", "descriptionHTML": "<p>Extra configuration lines to add to ~/.config/i3/config.</p>"}, {"declarations": [{"name": "<services/window-managers/i3-sway/i3.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/i3-sway/i3.nix"}], "default": "pkgs.i3", "description": "The i3 package to use.", "example": "", "loc": ["xsession", "windowManager", "i3", "package"], "readOnly": false, "title": "xsession.windowManager.i3.package", "type": "null or package", "descriptionHTML": "<p>The i3 package to use.</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "{ }", "description": "Spectrwm keybindings.", "example": "{\n  term = \"Mod+Return\";\n  restart = \"Mod+Shift+r\";\n  quit = \"Mod+Shift+q\";\n}\n", "loc": ["xsession", "windowManager", "spectrwm", "bindings"], "readOnly": false, "title": "xsession.windowManager.spectrwm.bindings", "type": "attribute set of string", "descriptionHTML": "<p>Spectrwm keybindings.</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "false", "description": "Whether to enable Spectrwm window manager.", "example": "true", "loc": ["xsession", "windowManager", "spectrwm", "enable"], "readOnly": false, "title": "xsession.windowManager.spectrwm.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable Spectrwm window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "pkgs.spectrwm", "description": "The spectrwm package to use. providing the spectrwm command", "example": "", "loc": ["xsession", "windowManager", "spectrwm", "package"], "readOnly": false, "title": "xsession.windowManager.spectrwm.package", "type": "package", "descriptionHTML": "<p>The spectrwm package to use. providing the spectrwm command</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "{ }", "description": "Spectrwm programs variables.", "example": "{\n  term = \"alacritty\";\n  search = \"dmenu -ip -p 'Window name/id:';\n}\n", "loc": ["xsession", "windowManager", "spectrwm", "programs"], "readOnly": false, "title": "xsession.windowManager.spectrwm.programs", "type": "attribute set of string", "descriptionHTML": "<p>Spectrwm programs variables.</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "{ }", "description": "Spectrwm quicks (custom window rules).", "example": "{\n  Matplotlib = \"FLOAT\";\n  Pavucontrol = \"FLOAT\";\n}\n", "loc": ["xsession", "windowManager", "spectrwm", "quirks"], "readOnly": false, "title": "xsession.windowManager.spectrwm.quirks", "type": "attribute set of string", "descriptionHTML": "<p>Spectrwm quicks (custom window rules).</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "{ }", "description": "Spectrwm settings.", "example": "{\n  modkey = \"Mod4\";\n  workspace_limit = 5;\n  focus_mode = \"manual\";\n  focus_close = \"next\";\n}\n", "loc": ["xsession", "windowManager", "spectrwm", "settings"], "readOnly": false, "title": "xsession.windowManager.spectrwm.settings", "type": "attribute set of (boolean or signed integer or string)", "descriptionHTML": "<p>Spectrwm settings.</p>"}, {"declarations": [{"name": "<services/window-managers/spectrwm.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/spectrwm.nix"}], "default": "[ ]", "description": "List of keybindings to disable from default Spectrwm configuration.", "example": "[\n  \"MOD+e\"\n  \"MOD+f\"\n  \"MOD+m\"\n  \"MOD+s\"\n  \"MOD+u\"\n  \"MOD+t\"\n]\n", "loc": ["xsession", "windowManager", "spectrwm", "unbindings"], "readOnly": false, "title": "xsession.windowManager.spectrwm.unbindings", "type": "list of string", "descriptionHTML": "<p>List of keybindings to disable from default Spectrwm configuration.</p>"}, {"declarations": [{"name": "<services/window-managers/xmonad.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/xmonad.nix"}], "default": "null", "description": "The configuration file to be used for xmonad. This must be\nan absolute path or null in which case\n{file}~/.xmonad/xmonad.hs will not be managed\nby Home Manager.\nIf this option is set to a non-null value,\nrecompilation of xmonad outside of Home Manager (e.g. via\n{command}xmonad --recompile) will fail.", "example": "pkgs.writeText \"xmonad.hs\" ''\n  import XMonad\n  main = xmonad defaultConfig\n      { terminal    = \"urxvt\"\n      , modMask     = mod4Mask\n      , borderWidth = 3\n      }\n''\n", "loc": ["xsession", "windowManager", "xmonad", "config"], "readOnly": false, "title": "xsession.windowManager.xmonad.config", "type": "null or absolute path", "descriptionHTML": "<p>The configuration file to be used for xmonad. This must be\nan absolute path or <code>null</code> in which case\n{file}<code>~/.xmonad/xmonad.hs</code> will not be managed\nby Home Manager.</p>\n<p>If this option is set to a non-<code>null</code> value,\nrecompilation of xmonad outside of Home Manager (e.g. via\n{command}<code>xmonad --recompile</code>) will fail.</p>"}, {"declarations": [{"name": "<services/window-managers/xmonad.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/xmonad.nix"}], "default": "false", "description": "Whether to enable xmonad window manager.", "example": "true", "loc": ["xsession", "windowManager", "xmonad", "enable"], "readOnly": false, "title": "xsession.windowManager.xmonad.enable", "type": "boolean", "descriptionHTML": "<p>Whether to enable xmonad window manager.</p>"}, {"declarations": [{"name": "<services/window-managers/xmonad.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/xmonad.nix"}], "default": "false", "description": "Enable xmonad-{contrib,extras} in xmonad.", "example": "", "loc": ["xsession", "windowManager", "xmonad", "enableContribAndExtras"], "readOnly": false, "title": "xsession.windowManager.xmonad.enableContribAndExtras", "type": "boolean", "descriptionHTML": "<p>Enable xmonad-{contrib,extras} in xmonad.</p>"}, {"declarations": [{"name": "<services/window-managers/xmonad.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/xmonad.nix"}], "default": "\"self: []\"", "description": "Extra packages available to GHC when rebuilding xmonad. The\nvalue must be a function which receives the attribute set\ndefined in {var}haskellPackages as the sole\nargument.", "example": "haskellPackages: [\n  haskellPackages.xmonad-contrib\n  haskellPackages.monad-logger\n]\n", "loc": ["xsession", "windowManager", "xmonad", "extraPackages"], "readOnly": false, "title": "xsession.windowManager.xmonad.extraPackages", "type": "unspecified value", "descriptionHTML": "<p>Extra packages available to GHC when rebuilding xmonad. The\nvalue must be a function which receives the attribute set\ndefined in {var}<code>haskellPackages</code> as the sole\nargument.</p>"}, {"declarations": [{"name": "<services/window-managers/xmonad.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/xmonad.nix"}], "default": "pkgs.haskellPackages", "description": "The {var}haskellPackages used to build xmonad\nand other packages. This can be used to change the GHC\nversion used to build xmonad and the packages listed in\n{var}extraPackages.", "example": "pkgs.haskell.packages.ghc784", "loc": ["xsession", "windowManager", "xmonad", "haskellPackages"], "readOnly": false, "title": "xsession.windowManager.xmonad.haskellPackages", "type": "unspecified value", "descriptionHTML": "<p>The {var}<code>haskellPackages</code> used to build xmonad\nand other packages. This can be used to change the GHC\nversion used to build xmonad and the packages listed in\n{var}<code>extraPackages</code>.</p>"}, {"declarations": [{"name": "<services/window-managers/xmonad.nix>", "url": "https://github.com/nix-community/home-manager/tree/master/modules/services/window-managers/xmonad.nix"}], "default": "{ }", "description": "Additional files that will be saved in\n{file}~/.xmonad/lib/ and included in the configuration\nbuild. The keys are the file names while the values are paths to the\ncontents of the files.", "example": "{\n  \"Tools.hs\" = pkgs.writeText \"Tools.hs\" ''\n     module Tools where\n     screenshot = \"scrot\"\n   '';\n}\n", "loc": ["xsession", "windowManager", "xmonad", "libFiles"], "readOnly": false, "title": "xsession.windowManager.xmonad.libFiles", "type": "attribute set of absolute path", "descriptionHTML": "<p>Additional files that will be saved in\n{file}<code>~/.xmonad/lib/</code> and included in the configuration\nbuild. The keys are the file names while the values are paths to the\ncontents of the files.</p>"}]
